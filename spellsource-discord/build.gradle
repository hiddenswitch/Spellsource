plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version "$shadowPluginVersion"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.jetbrains:annotations:16.0.2'
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.11'
    implementation "com.google.guava:guava:$guavaVersion"

    testImplementation project(':spellsource-testutils')

    compileOnly 'org.graalvm.nativeimage:svm:20.0.0'

    implementation project(':spellsource-game')
    implementation project(':spellsource-protos')
    implementation project(':spellsource-common')
    implementation project(':spellsource-cards-git')
    implementation("net.dv8tion:JDA:5.0.0-alpha.10") {
        exclude module: 'opus-java'
    }
}

def localMainClassName = "com.hiddenswitch.spellsource.discordbot.applications.DiscordBot"

mainClassName = localMainClassName

shadowJar {
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': localMainClassName
    }
}

static def dotEnv(JavaExec task, File f) {
    if (!f.exists()) {
        return
    }
    f.readLines().each() {
        def (key, value) = it.tokenize('=')
        task.environment(key, value)
    }
}

run { t ->
    // The container doesn't actually see all the secrets in here, so don't bother :)
    dotEnv(t, file('../secrets/spellsource/stack-application-production.env'))
}

test {
    useJUnitPlatform()
}

task genReflectionProps(type: JavaExec) { t ->
    dotEnv(t, file('../secrets/spellsource/stack-application-production.env'))
    dependsOn compileJava
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.hiddenswitch.spellsource.discordbot.applications.DiscordBot'
    args(['exit'])
    jvmArgs(["-agentlib:native-image-agent=config-output-dir=" + file("${project.projectDir.path}/src/main/resources//META-INF/native-image/com.hiddenswitch/discordbot/").absolutePath])
}