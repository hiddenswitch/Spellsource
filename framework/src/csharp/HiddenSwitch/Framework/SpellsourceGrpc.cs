// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spellsource.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Spellsource.Proto {
  public static partial class Matchmaking
  {
    static readonly string __ServiceName = "spellsource.Matchmaking";

    static readonly grpc::Marshaller<global::Spellsource.Proto.MatchmakingQueuePutRequest> __Marshaller_spellsource_MatchmakingQueuePutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.MatchmakingQueuePutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.MatchmakingQueuePutResponse> __Marshaller_spellsource_MatchmakingQueuePutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.MatchmakingQueuePutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.MatchCancelResponse> __Marshaller_spellsource_MatchCancelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.MatchCancelResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.MatchmakingQueuesResponse> __Marshaller_spellsource_MatchmakingQueuesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.MatchmakingQueuesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Spellsource.Proto.MatchmakingQueuePutRequest, global::Spellsource.Proto.MatchmakingQueuePutResponse> __Method_Enqueue = new grpc::Method<global::Spellsource.Proto.MatchmakingQueuePutRequest, global::Spellsource.Proto.MatchmakingQueuePutResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Enqueue",
        __Marshaller_spellsource_MatchmakingQueuePutRequest,
        __Marshaller_spellsource_MatchmakingQueuePutResponse);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.MatchCancelResponse> __Method_MatchmakingDelete = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.MatchCancelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MatchmakingDelete",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_MatchCancelResponse);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.MatchmakingQueuesResponse> __Method_MatchmakingGet = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.MatchmakingQueuesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MatchmakingGet",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_MatchmakingQueuesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Matchmaking</summary>
    [grpc::BindServiceMethod(typeof(Matchmaking), "BindService")]
    public abstract partial class MatchmakingBase
    {
      public virtual global::System.Threading.Tasks.Task Enqueue(grpc::IAsyncStreamReader<global::Spellsource.Proto.MatchmakingQueuePutRequest> requestStream, grpc::IServerStreamWriter<global::Spellsource.Proto.MatchmakingQueuePutResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes your client from the matchmaking queue, regardless of which queue it is in.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.MatchCancelResponse> MatchmakingDelete(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a list of queues available for matchmaking.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.MatchmakingQueuesResponse> MatchmakingGet(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Matchmaking</summary>
    public partial class MatchmakingClient : grpc::ClientBase<MatchmakingClient>
    {
      /// <summary>Creates a new client for Matchmaking</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MatchmakingClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Matchmaking that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MatchmakingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MatchmakingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MatchmakingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::Spellsource.Proto.MatchmakingQueuePutRequest, global::Spellsource.Proto.MatchmakingQueuePutResponse> Enqueue(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Enqueue(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Spellsource.Proto.MatchmakingQueuePutRequest, global::Spellsource.Proto.MatchmakingQueuePutResponse> Enqueue(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Enqueue, null, options);
      }
      /// <summary>
      /// Removes your client from the matchmaking queue, regardless of which queue it is in.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.MatchCancelResponse MatchmakingDelete(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MatchmakingDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes your client from the matchmaking queue, regardless of which queue it is in.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.MatchCancelResponse MatchmakingDelete(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MatchmakingDelete, null, options, request);
      }
      /// <summary>
      /// Removes your client from the matchmaking queue, regardless of which queue it is in.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.MatchCancelResponse> MatchmakingDeleteAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MatchmakingDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes your client from the matchmaking queue, regardless of which queue it is in.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.MatchCancelResponse> MatchmakingDeleteAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MatchmakingDelete, null, options, request);
      }
      /// <summary>
      /// Gets a list of queues available for matchmaking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.MatchmakingQueuesResponse MatchmakingGet(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MatchmakingGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a list of queues available for matchmaking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.MatchmakingQueuesResponse MatchmakingGet(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MatchmakingGet, null, options, request);
      }
      /// <summary>
      /// Gets a list of queues available for matchmaking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.MatchmakingQueuesResponse> MatchmakingGetAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MatchmakingGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a list of queues available for matchmaking.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.MatchmakingQueuesResponse> MatchmakingGetAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MatchmakingGet, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MatchmakingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MatchmakingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MatchmakingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Enqueue, serviceImpl.Enqueue)
          .AddMethod(__Method_MatchmakingDelete, serviceImpl.MatchmakingDelete)
          .AddMethod(__Method_MatchmakingGet, serviceImpl.MatchmakingGet).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MatchmakingBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Enqueue, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Spellsource.Proto.MatchmakingQueuePutRequest, global::Spellsource.Proto.MatchmakingQueuePutResponse>(serviceImpl.Enqueue));
      serviceBinder.AddMethod(__Method_MatchmakingDelete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.MatchCancelResponse>(serviceImpl.MatchmakingDelete));
      serviceBinder.AddMethod(__Method_MatchmakingGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.MatchmakingQueuesResponse>(serviceImpl.MatchmakingGet));
    }

  }
  public static partial class HiddenSwitchSpellsourceAPIService
  {
    static readonly string __ServiceName = "spellsource.HiddenSwitchSpellsourceAPIService";

    static readonly grpc::Marshaller<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage> __Marshaller_spellsource_Envelope_MethodMessage_PutCardMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage> __Marshaller_spellsource_Envelope_ResultMessage_PutCardMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage> __Marshaller_spellsource_Envelope_MethodMessage_SendMessageMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage> __Marshaller_spellsource_Envelope_ResultMessage_SendMessageMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage> __Marshaller_spellsource_Envelope_MethodMessage_DeleteCardMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.Envelope.Types.RemovedMessage> __Marshaller_spellsource_Envelope_RemovedMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Envelope.Types.RemovedMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.Friend> __Marshaller_spellsource_Friend = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Friend.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.Invite> __Marshaller_spellsource_Invite = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Invite.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.EditableCard> __Marshaller_spellsource_EditableCard = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.EditableCard.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.Match> __Marshaller_spellsource_Match = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.Match.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.ClientToServerMessage> __Marshaller_spellsource_ClientToServerMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.ClientToServerMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.ServerToClientMessage> __Marshaller_spellsource_ServerToClientMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.ServerToClientMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.AcceptInviteRequest> __Marshaller_spellsource_AcceptInviteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.AcceptInviteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.AcceptInviteResponse> __Marshaller_spellsource_AcceptInviteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.AcceptInviteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.ChangePasswordRequest> __Marshaller_spellsource_ChangePasswordRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.ChangePasswordRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.ChangePasswordResponse> __Marshaller_spellsource_ChangePasswordResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.ChangePasswordResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.CreateAccountRequest> __Marshaller_spellsource_CreateAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.CreateAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.CreateAccountResponse> __Marshaller_spellsource_CreateAccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.CreateAccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DecksDeleteRequest> __Marshaller_spellsource_DecksDeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DecksDeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DecksGetRequest> __Marshaller_spellsource_DecksGetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DecksGetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DecksGetResponse> __Marshaller_spellsource_DecksGetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DecksGetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DecksGetAllResponse> __Marshaller_spellsource_DecksGetAllResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DecksGetAllResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DecksPutRequest> __Marshaller_spellsource_DecksPutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DecksPutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DecksPutResponse> __Marshaller_spellsource_DecksPutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DecksPutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DecksUpdateRequest> __Marshaller_spellsource_DecksUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DecksUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.StringValue> __Marshaller_google_protobuf_StringValue = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.StringValue.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DeleteInviteRequest> __Marshaller_spellsource_DeleteInviteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DeleteInviteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.InviteResponse> __Marshaller_spellsource_InviteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.InviteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DraftsChooseCardRequest> __Marshaller_spellsource_DraftsChooseCardRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DraftsChooseCardRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DraftState> __Marshaller_spellsource_DraftState = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DraftState.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DraftsChooseHeroRequest> __Marshaller_spellsource_DraftsChooseHeroRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DraftsChooseHeroRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.DraftsPostRequest> __Marshaller_spellsource_DraftsPostRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.DraftsPostRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.FriendDeleteRequest> __Marshaller_spellsource_FriendDeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.FriendDeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.UnfriendResponse> __Marshaller_spellsource_UnfriendResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.UnfriendResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.FriendPutRequest> __Marshaller_spellsource_FriendPutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.FriendPutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.FriendPutResponse> __Marshaller_spellsource_FriendPutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.FriendPutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.GetAccountRequest> __Marshaller_spellsource_GetAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.GetAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.GetAccountsResponse> __Marshaller_spellsource_GetAccountsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.GetAccountsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.GetAccountsRequest> __Marshaller_spellsource_GetAccountsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.GetAccountsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.GetGameRecordRequest> __Marshaller_spellsource_GetGameRecordRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.GetGameRecordRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.GetGameRecordResponse> __Marshaller_spellsource_GetGameRecordResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.GetGameRecordResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.GetGameRecordIdsResponse> __Marshaller_spellsource_GetGameRecordIdsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.GetGameRecordIdsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.GetInviteRequest> __Marshaller_spellsource_GetInviteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.GetInviteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.InviteGetResponse> __Marshaller_spellsource_InviteGetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.InviteGetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.LoginRequest> __Marshaller_spellsource_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.LoginResponse> __Marshaller_spellsource_LoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.LoginResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.PostInviteRequest> __Marshaller_spellsource_PostInviteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.PostInviteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Spellsource.Proto.PostPasswordResetRequest> __Marshaller_spellsource_PostPasswordResetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Spellsource.Proto.PostPasswordResetRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage, global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage> __Method_PutCard = new grpc::Method<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage, global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutCard",
        __Marshaller_spellsource_Envelope_MethodMessage_PutCardMessage,
        __Marshaller_spellsource_Envelope_ResultMessage_PutCardMessage);

    static readonly grpc::Method<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage, global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage> __Method_SendMessage = new grpc::Method<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage, global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMessage",
        __Marshaller_spellsource_Envelope_MethodMessage_SendMessageMessage,
        __Marshaller_spellsource_Envelope_ResultMessage_SendMessageMessage);

    static readonly grpc::Method<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage, global::Spellsource.Proto.Envelope.Types.RemovedMessage> __Method_DeleteCard = new grpc::Method<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage, global::Spellsource.Proto.Envelope.Types.RemovedMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCard",
        __Marshaller_spellsource_Envelope_MethodMessage_DeleteCardMessage,
        __Marshaller_spellsource_Envelope_RemovedMessage);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Friend> __Method_SubscribeFriends = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Friend>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeFriends",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_Friend);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Invite> __Method_SubscribeInvites = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Invite>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeInvites",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_Invite);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.EditableCard> __Method_SubscribeEditableCards = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.EditableCard>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeEditableCards",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_EditableCard);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Match> __Method_SubscribeMatch = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Match>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeMatch",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_Match);

    static readonly grpc::Method<global::Spellsource.Proto.ClientToServerMessage, global::Spellsource.Proto.ServerToClientMessage> __Method_SubscribeGame = new grpc::Method<global::Spellsource.Proto.ClientToServerMessage, global::Spellsource.Proto.ServerToClientMessage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SubscribeGame",
        __Marshaller_spellsource_ClientToServerMessage,
        __Marshaller_spellsource_ServerToClientMessage);

    static readonly grpc::Method<global::Spellsource.Proto.AcceptInviteRequest, global::Spellsource.Proto.AcceptInviteResponse> __Method_AcceptInvite = new grpc::Method<global::Spellsource.Proto.AcceptInviteRequest, global::Spellsource.Proto.AcceptInviteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcceptInvite",
        __Marshaller_spellsource_AcceptInviteRequest,
        __Marshaller_spellsource_AcceptInviteResponse);

    static readonly grpc::Method<global::Spellsource.Proto.ChangePasswordRequest, global::Spellsource.Proto.ChangePasswordResponse> __Method_ChangePassword = new grpc::Method<global::Spellsource.Proto.ChangePasswordRequest, global::Spellsource.Proto.ChangePasswordResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangePassword",
        __Marshaller_spellsource_ChangePasswordRequest,
        __Marshaller_spellsource_ChangePasswordResponse);

    static readonly grpc::Method<global::Spellsource.Proto.CreateAccountRequest, global::Spellsource.Proto.CreateAccountResponse> __Method_CreateAccount = new grpc::Method<global::Spellsource.Proto.CreateAccountRequest, global::Spellsource.Proto.CreateAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount",
        __Marshaller_spellsource_CreateAccountRequest,
        __Marshaller_spellsource_CreateAccountResponse);

    static readonly grpc::Method<global::Spellsource.Proto.DecksDeleteRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DecksDelete = new grpc::Method<global::Spellsource.Proto.DecksDeleteRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecksDelete",
        __Marshaller_spellsource_DecksDeleteRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Spellsource.Proto.DecksGetRequest, global::Spellsource.Proto.DecksGetResponse> __Method_DecksGet = new grpc::Method<global::Spellsource.Proto.DecksGetRequest, global::Spellsource.Proto.DecksGetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecksGet",
        __Marshaller_spellsource_DecksGetRequest,
        __Marshaller_spellsource_DecksGetResponse);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.DecksGetAllResponse> __Method_DecksGetAll = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.DecksGetAllResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecksGetAll",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_DecksGetAllResponse);

    static readonly grpc::Method<global::Spellsource.Proto.DecksPutRequest, global::Spellsource.Proto.DecksPutResponse> __Method_DecksPut = new grpc::Method<global::Spellsource.Proto.DecksPutRequest, global::Spellsource.Proto.DecksPutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecksPut",
        __Marshaller_spellsource_DecksPutRequest,
        __Marshaller_spellsource_DecksPutResponse);

    static readonly grpc::Method<global::Spellsource.Proto.DecksUpdateRequest, global::Spellsource.Proto.DecksGetResponse> __Method_DecksUpdate = new grpc::Method<global::Spellsource.Proto.DecksUpdateRequest, global::Spellsource.Proto.DecksGetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecksUpdate",
        __Marshaller_spellsource_DecksUpdateRequest,
        __Marshaller_spellsource_DecksGetResponse);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.StringValue, global::Spellsource.Proto.DecksGetResponse> __Method_DuplicateDeck = new grpc::Method<global::Google.Protobuf.WellKnownTypes.StringValue, global::Spellsource.Proto.DecksGetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DuplicateDeck",
        __Marshaller_google_protobuf_StringValue,
        __Marshaller_spellsource_DecksGetResponse);

    static readonly grpc::Method<global::Spellsource.Proto.DeleteInviteRequest, global::Spellsource.Proto.InviteResponse> __Method_DeleteInvite = new grpc::Method<global::Spellsource.Proto.DeleteInviteRequest, global::Spellsource.Proto.InviteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteInvite",
        __Marshaller_spellsource_DeleteInviteRequest,
        __Marshaller_spellsource_InviteResponse);

    static readonly grpc::Method<global::Spellsource.Proto.DraftsChooseCardRequest, global::Spellsource.Proto.DraftState> __Method_DraftsChooseCard = new grpc::Method<global::Spellsource.Proto.DraftsChooseCardRequest, global::Spellsource.Proto.DraftState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DraftsChooseCard",
        __Marshaller_spellsource_DraftsChooseCardRequest,
        __Marshaller_spellsource_DraftState);

    static readonly grpc::Method<global::Spellsource.Proto.DraftsChooseHeroRequest, global::Spellsource.Proto.DraftState> __Method_DraftsChooseHero = new grpc::Method<global::Spellsource.Proto.DraftsChooseHeroRequest, global::Spellsource.Proto.DraftState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DraftsChooseHero",
        __Marshaller_spellsource_DraftsChooseHeroRequest,
        __Marshaller_spellsource_DraftState);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.DraftState> __Method_DraftsGet = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.DraftState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DraftsGet",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_DraftState);

    static readonly grpc::Method<global::Spellsource.Proto.DraftsPostRequest, global::Spellsource.Proto.DraftState> __Method_DraftsPost = new grpc::Method<global::Spellsource.Proto.DraftsPostRequest, global::Spellsource.Proto.DraftState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DraftsPost",
        __Marshaller_spellsource_DraftsPostRequest,
        __Marshaller_spellsource_DraftState);

    static readonly grpc::Method<global::Spellsource.Proto.FriendDeleteRequest, global::Spellsource.Proto.UnfriendResponse> __Method_FriendDelete = new grpc::Method<global::Spellsource.Proto.FriendDeleteRequest, global::Spellsource.Proto.UnfriendResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FriendDelete",
        __Marshaller_spellsource_FriendDeleteRequest,
        __Marshaller_spellsource_UnfriendResponse);

    static readonly grpc::Method<global::Spellsource.Proto.FriendPutRequest, global::Spellsource.Proto.FriendPutResponse> __Method_FriendPut = new grpc::Method<global::Spellsource.Proto.FriendPutRequest, global::Spellsource.Proto.FriendPutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FriendPut",
        __Marshaller_spellsource_FriendPutRequest,
        __Marshaller_spellsource_FriendPutResponse);

    static readonly grpc::Method<global::Spellsource.Proto.GetAccountRequest, global::Spellsource.Proto.GetAccountsResponse> __Method_GetAccount = new grpc::Method<global::Spellsource.Proto.GetAccountRequest, global::Spellsource.Proto.GetAccountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_spellsource_GetAccountRequest,
        __Marshaller_spellsource_GetAccountsResponse);

    static readonly grpc::Method<global::Spellsource.Proto.GetAccountsRequest, global::Spellsource.Proto.GetAccountsResponse> __Method_GetAccounts = new grpc::Method<global::Spellsource.Proto.GetAccountsRequest, global::Spellsource.Proto.GetAccountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccounts",
        __Marshaller_spellsource_GetAccountsRequest,
        __Marshaller_spellsource_GetAccountsResponse);

    static readonly grpc::Method<global::Spellsource.Proto.GetGameRecordRequest, global::Spellsource.Proto.GetGameRecordResponse> __Method_GetGameRecord = new grpc::Method<global::Spellsource.Proto.GetGameRecordRequest, global::Spellsource.Proto.GetGameRecordResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameRecord",
        __Marshaller_spellsource_GetGameRecordRequest,
        __Marshaller_spellsource_GetGameRecordResponse);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.GetGameRecordIdsResponse> __Method_GetGameRecordIds = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.GetGameRecordIdsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameRecordIds",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_GetGameRecordIdsResponse);

    static readonly grpc::Method<global::Spellsource.Proto.GetInviteRequest, global::Spellsource.Proto.InviteResponse> __Method_GetInvite = new grpc::Method<global::Spellsource.Proto.GetInviteRequest, global::Spellsource.Proto.InviteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInvite",
        __Marshaller_spellsource_GetInviteRequest,
        __Marshaller_spellsource_InviteResponse);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.InviteGetResponse> __Method_GetInvites = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.InviteGetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInvites",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_spellsource_InviteGetResponse);

    static readonly grpc::Method<global::Spellsource.Proto.LoginRequest, global::Spellsource.Proto.LoginResponse> __Method_Login = new grpc::Method<global::Spellsource.Proto.LoginRequest, global::Spellsource.Proto.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_spellsource_LoginRequest,
        __Marshaller_spellsource_LoginResponse);

    static readonly grpc::Method<global::Spellsource.Proto.PostInviteRequest, global::Spellsource.Proto.InviteResponse> __Method_PostInvite = new grpc::Method<global::Spellsource.Proto.PostInviteRequest, global::Spellsource.Proto.InviteResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PostInvite",
        __Marshaller_spellsource_PostInviteRequest,
        __Marshaller_spellsource_InviteResponse);

    static readonly grpc::Method<global::Spellsource.Proto.PostPasswordResetRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_PostPasswordReset = new grpc::Method<global::Spellsource.Proto.PostPasswordResetRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostPasswordReset",
        __Marshaller_spellsource_PostPasswordResetRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of HiddenSwitchSpellsourceAPIService</summary>
    [grpc::BindServiceMethod(typeof(HiddenSwitchSpellsourceAPIService), "BindService")]
    public abstract partial class HiddenSwitchSpellsourceAPIServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage> PutCard(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage> SendMessage(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.Envelope.Types.RemovedMessage> DeleteCard(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeFriends(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::Spellsource.Proto.Friend> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeInvites(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::Spellsource.Proto.Invite> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeEditableCards(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::Spellsource.Proto.EditableCard> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeMatch(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::Spellsource.Proto.Match> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeGame(grpc::IAsyncStreamReader<global::Spellsource.Proto.ClientToServerMessage> requestStream, grpc::IServerStreamWriter<global::Spellsource.Proto.ServerToClientMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Accepts the invite. If this is an invite to friend the user, this method will perform the friending path for
      /// you. If this is an invite to play a match and a matchmaking queue put is specified (with the deck ID), this
      /// method will enter you into the special invite matchmaking queue.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.AcceptInviteResponse> AcceptInvite(global::Spellsource.Proto.AcceptInviteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes your password. Does not log you out after the password is changed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.ChangePasswordResponse> ChangePassword(global::Spellsource.Proto.ChangePasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create an account with Spellsource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.CreateAccountResponse> CreateAccount(global::Spellsource.Proto.CreateAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified deck by ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DecksDelete(global::Spellsource.Proto.DecksDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a deck. Only viewable for the owner of the deck or players in the alliance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DecksGetResponse> DecksGet(global::Spellsource.Proto.DecksGetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets all the user's decks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DecksGetAllResponse> DecksGetAll(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new deck with optionally specified inventory IDs, a name and a hero class.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DecksPutResponse> DecksPut(global::Spellsource.Proto.DecksPutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the deck by adding or removing cards, changing the hero class, or renaming the deck.
      /// 
      /// Also gives players the ability to set special gameplay attributes (like the Signature) for the deck.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DecksGetResponse> DecksUpdate(global::Spellsource.Proto.DecksUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Duplicates a deck. Creates a copy for the caller, not the owner
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DecksGetResponse> DuplicateDeck(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// When this user is the sender, cancels the invite. When this user is the recipient, rejects the specified invite.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.InviteResponse> DeleteInvite(global::Spellsource.Proto.DeleteInviteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Make a selection for the given draft index.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DraftState> DraftsChooseCard(global::Spellsource.Proto.DraftsChooseCardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Choose a hero from your hero selection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DraftState> DraftsChooseHero(global::Spellsource.Proto.DraftsChooseHeroRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets your latest state of the draft.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DraftState> DraftsGet(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts a draft, or make a change to your draft, like retiring early.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.DraftState> DraftsPost(global::Spellsource.Proto.DraftsPostRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes the friend relationship between two users.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.UnfriendResponse> FriendDelete(global::Spellsource.Proto.FriendDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds a specified user to your friend list.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.FriendPutResponse> FriendPut(global::Spellsource.Proto.FriendPutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a specific account. Contains more information if the userId matches the requesting user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.GetAccountsResponse> GetAccount(global::Spellsource.Proto.GetAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a list of accounts including user profile information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.GetAccountsResponse> GetAccounts(global::Spellsource.Proto.GetAccountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a record of a game this player played. Games against bots retrieve a complete game record, while games
      /// against other players only receive this player's point of view.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.GetGameRecordResponse> GetGameRecord(global::Spellsource.Proto.GetGameRecordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of game IDs corresponding to all the games this player played.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.GetGameRecordIdsResponse> GetGameRecordIds(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves information about a specific invite, as long as this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.InviteResponse> GetInvite(global::Spellsource.Proto.GetInviteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieve all invites where this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.InviteGetResponse> GetInvites(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Login with a username and password, receiving an authentication token to use for future sessions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Spellsource.Proto.LoginResponse> Login(global::Spellsource.Proto.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send an invite.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task PostInvite(global::Spellsource.Proto.PostInviteRequest request, grpc::IServerStreamWriter<global::Spellsource.Proto.InviteResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Provided a valid reset token, resets a user's password.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> PostPasswordReset(global::Spellsource.Proto.PostPasswordResetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HiddenSwitchSpellsourceAPIService</summary>
    public partial class HiddenSwitchSpellsourceAPIServiceClient : grpc::ClientBase<HiddenSwitchSpellsourceAPIServiceClient>
    {
      /// <summary>Creates a new client for HiddenSwitchSpellsourceAPIService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public HiddenSwitchSpellsourceAPIServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HiddenSwitchSpellsourceAPIService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public HiddenSwitchSpellsourceAPIServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected HiddenSwitchSpellsourceAPIServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected HiddenSwitchSpellsourceAPIServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage PutCard(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage PutCard(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutCard, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage> PutCardAsync(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage> PutCardAsync(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutCard, null, options, request);
      }
      public virtual global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage SendMessage(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage SendMessage(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage> SendMessageAsync(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage> SendMessageAsync(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual global::Spellsource.Proto.Envelope.Types.RemovedMessage DeleteCard(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Spellsource.Proto.Envelope.Types.RemovedMessage DeleteCard(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCard, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.Envelope.Types.RemovedMessage> DeleteCardAsync(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.Envelope.Types.RemovedMessage> DeleteCardAsync(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCard, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.Friend> SubscribeFriends(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeFriends(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.Friend> SubscribeFriends(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeFriends, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.Invite> SubscribeInvites(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeInvites(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.Invite> SubscribeInvites(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeInvites, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.EditableCard> SubscribeEditableCards(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeEditableCards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.EditableCard> SubscribeEditableCards(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeEditableCards, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.Match> SubscribeMatch(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeMatch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.Match> SubscribeMatch(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeMatch, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Spellsource.Proto.ClientToServerMessage, global::Spellsource.Proto.ServerToClientMessage> SubscribeGame(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeGame(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Spellsource.Proto.ClientToServerMessage, global::Spellsource.Proto.ServerToClientMessage> SubscribeGame(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SubscribeGame, null, options);
      }
      /// <summary>
      /// Accepts the invite. If this is an invite to friend the user, this method will perform the friending path for
      /// you. If this is an invite to play a match and a matchmaking queue put is specified (with the deck ID), this
      /// method will enter you into the special invite matchmaking queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.AcceptInviteResponse AcceptInvite(global::Spellsource.Proto.AcceptInviteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptInvite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Accepts the invite. If this is an invite to friend the user, this method will perform the friending path for
      /// you. If this is an invite to play a match and a matchmaking queue put is specified (with the deck ID), this
      /// method will enter you into the special invite matchmaking queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.AcceptInviteResponse AcceptInvite(global::Spellsource.Proto.AcceptInviteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcceptInvite, null, options, request);
      }
      /// <summary>
      /// Accepts the invite. If this is an invite to friend the user, this method will perform the friending path for
      /// you. If this is an invite to play a match and a matchmaking queue put is specified (with the deck ID), this
      /// method will enter you into the special invite matchmaking queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.AcceptInviteResponse> AcceptInviteAsync(global::Spellsource.Proto.AcceptInviteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptInviteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Accepts the invite. If this is an invite to friend the user, this method will perform the friending path for
      /// you. If this is an invite to play a match and a matchmaking queue put is specified (with the deck ID), this
      /// method will enter you into the special invite matchmaking queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.AcceptInviteResponse> AcceptInviteAsync(global::Spellsource.Proto.AcceptInviteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcceptInvite, null, options, request);
      }
      /// <summary>
      /// Changes your password. Does not log you out after the password is changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.ChangePasswordResponse ChangePassword(global::Spellsource.Proto.ChangePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangePassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes your password. Does not log you out after the password is changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.ChangePasswordResponse ChangePassword(global::Spellsource.Proto.ChangePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangePassword, null, options, request);
      }
      /// <summary>
      /// Changes your password. Does not log you out after the password is changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.ChangePasswordResponse> ChangePasswordAsync(global::Spellsource.Proto.ChangePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangePasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes your password. Does not log you out after the password is changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.ChangePasswordResponse> ChangePasswordAsync(global::Spellsource.Proto.ChangePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangePassword, null, options, request);
      }
      /// <summary>
      /// Create an account with Spellsource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.CreateAccountResponse CreateAccount(global::Spellsource.Proto.CreateAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an account with Spellsource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.CreateAccountResponse CreateAccount(global::Spellsource.Proto.CreateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      /// Create an account with Spellsource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.CreateAccountResponse> CreateAccountAsync(global::Spellsource.Proto.CreateAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create an account with Spellsource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.CreateAccountResponse> CreateAccountAsync(global::Spellsource.Proto.CreateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      /// Deletes the specified deck by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DecksDelete(global::Spellsource.Proto.DecksDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified deck by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DecksDelete(global::Spellsource.Proto.DecksDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecksDelete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified deck by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DecksDeleteAsync(global::Spellsource.Proto.DecksDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified deck by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DecksDeleteAsync(global::Spellsource.Proto.DecksDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecksDelete, null, options, request);
      }
      /// <summary>
      /// Gets a deck. Only viewable for the owner of the deck or players in the alliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksGetResponse DecksGet(global::Spellsource.Proto.DecksGetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a deck. Only viewable for the owner of the deck or players in the alliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksGetResponse DecksGet(global::Spellsource.Proto.DecksGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecksGet, null, options, request);
      }
      /// <summary>
      /// Gets a deck. Only viewable for the owner of the deck or players in the alliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksGetResponse> DecksGetAsync(global::Spellsource.Proto.DecksGetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a deck. Only viewable for the owner of the deck or players in the alliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksGetResponse> DecksGetAsync(global::Spellsource.Proto.DecksGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecksGet, null, options, request);
      }
      /// <summary>
      /// Gets all the user's decks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksGetAllResponse DecksGetAll(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksGetAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets all the user's decks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksGetAllResponse DecksGetAll(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecksGetAll, null, options, request);
      }
      /// <summary>
      /// Gets all the user's decks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksGetAllResponse> DecksGetAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksGetAllAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets all the user's decks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksGetAllResponse> DecksGetAllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecksGetAll, null, options, request);
      }
      /// <summary>
      /// Creates a new deck with optionally specified inventory IDs, a name and a hero class.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksPutResponse DecksPut(global::Spellsource.Proto.DecksPutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksPut(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new deck with optionally specified inventory IDs, a name and a hero class.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksPutResponse DecksPut(global::Spellsource.Proto.DecksPutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecksPut, null, options, request);
      }
      /// <summary>
      /// Creates a new deck with optionally specified inventory IDs, a name and a hero class.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksPutResponse> DecksPutAsync(global::Spellsource.Proto.DecksPutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksPutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new deck with optionally specified inventory IDs, a name and a hero class.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksPutResponse> DecksPutAsync(global::Spellsource.Proto.DecksPutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecksPut, null, options, request);
      }
      /// <summary>
      /// Updates the deck by adding or removing cards, changing the hero class, or renaming the deck.
      /// 
      /// Also gives players the ability to set special gameplay attributes (like the Signature) for the deck.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksGetResponse DecksUpdate(global::Spellsource.Proto.DecksUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the deck by adding or removing cards, changing the hero class, or renaming the deck.
      /// 
      /// Also gives players the ability to set special gameplay attributes (like the Signature) for the deck.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksGetResponse DecksUpdate(global::Spellsource.Proto.DecksUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecksUpdate, null, options, request);
      }
      /// <summary>
      /// Updates the deck by adding or removing cards, changing the hero class, or renaming the deck.
      /// 
      /// Also gives players the ability to set special gameplay attributes (like the Signature) for the deck.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksGetResponse> DecksUpdateAsync(global::Spellsource.Proto.DecksUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecksUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the deck by adding or removing cards, changing the hero class, or renaming the deck.
      /// 
      /// Also gives players the ability to set special gameplay attributes (like the Signature) for the deck.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksGetResponse> DecksUpdateAsync(global::Spellsource.Proto.DecksUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecksUpdate, null, options, request);
      }
      /// <summary>
      /// Duplicates a deck. Creates a copy for the caller, not the owner
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksGetResponse DuplicateDeck(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DuplicateDeck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Duplicates a deck. Creates a copy for the caller, not the owner
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DecksGetResponse DuplicateDeck(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DuplicateDeck, null, options, request);
      }
      /// <summary>
      /// Duplicates a deck. Creates a copy for the caller, not the owner
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksGetResponse> DuplicateDeckAsync(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DuplicateDeckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Duplicates a deck. Creates a copy for the caller, not the owner
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DecksGetResponse> DuplicateDeckAsync(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DuplicateDeck, null, options, request);
      }
      /// <summary>
      /// When this user is the sender, cancels the invite. When this user is the recipient, rejects the specified invite.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.InviteResponse DeleteInvite(global::Spellsource.Proto.DeleteInviteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInvite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// When this user is the sender, cancels the invite. When this user is the recipient, rejects the specified invite.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.InviteResponse DeleteInvite(global::Spellsource.Proto.DeleteInviteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteInvite, null, options, request);
      }
      /// <summary>
      /// When this user is the sender, cancels the invite. When this user is the recipient, rejects the specified invite.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.InviteResponse> DeleteInviteAsync(global::Spellsource.Proto.DeleteInviteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteInviteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// When this user is the sender, cancels the invite. When this user is the recipient, rejects the specified invite.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.InviteResponse> DeleteInviteAsync(global::Spellsource.Proto.DeleteInviteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteInvite, null, options, request);
      }
      /// <summary>
      /// Make a selection for the given draft index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DraftState DraftsChooseCard(global::Spellsource.Proto.DraftsChooseCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DraftsChooseCard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make a selection for the given draft index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DraftState DraftsChooseCard(global::Spellsource.Proto.DraftsChooseCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DraftsChooseCard, null, options, request);
      }
      /// <summary>
      /// Make a selection for the given draft index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DraftState> DraftsChooseCardAsync(global::Spellsource.Proto.DraftsChooseCardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DraftsChooseCardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make a selection for the given draft index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DraftState> DraftsChooseCardAsync(global::Spellsource.Proto.DraftsChooseCardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DraftsChooseCard, null, options, request);
      }
      /// <summary>
      /// Choose a hero from your hero selection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DraftState DraftsChooseHero(global::Spellsource.Proto.DraftsChooseHeroRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DraftsChooseHero(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Choose a hero from your hero selection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DraftState DraftsChooseHero(global::Spellsource.Proto.DraftsChooseHeroRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DraftsChooseHero, null, options, request);
      }
      /// <summary>
      /// Choose a hero from your hero selection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DraftState> DraftsChooseHeroAsync(global::Spellsource.Proto.DraftsChooseHeroRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DraftsChooseHeroAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Choose a hero from your hero selection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DraftState> DraftsChooseHeroAsync(global::Spellsource.Proto.DraftsChooseHeroRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DraftsChooseHero, null, options, request);
      }
      /// <summary>
      /// Gets your latest state of the draft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DraftState DraftsGet(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DraftsGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets your latest state of the draft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DraftState DraftsGet(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DraftsGet, null, options, request);
      }
      /// <summary>
      /// Gets your latest state of the draft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DraftState> DraftsGetAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DraftsGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets your latest state of the draft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DraftState> DraftsGetAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DraftsGet, null, options, request);
      }
      /// <summary>
      /// Starts a draft, or make a change to your draft, like retiring early.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DraftState DraftsPost(global::Spellsource.Proto.DraftsPostRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DraftsPost(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts a draft, or make a change to your draft, like retiring early.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.DraftState DraftsPost(global::Spellsource.Proto.DraftsPostRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DraftsPost, null, options, request);
      }
      /// <summary>
      /// Starts a draft, or make a change to your draft, like retiring early.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DraftState> DraftsPostAsync(global::Spellsource.Proto.DraftsPostRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DraftsPostAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts a draft, or make a change to your draft, like retiring early.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.DraftState> DraftsPostAsync(global::Spellsource.Proto.DraftsPostRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DraftsPost, null, options, request);
      }
      /// <summary>
      /// Removes the friend relationship between two users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.UnfriendResponse FriendDelete(global::Spellsource.Proto.FriendDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FriendDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes the friend relationship between two users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.UnfriendResponse FriendDelete(global::Spellsource.Proto.FriendDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FriendDelete, null, options, request);
      }
      /// <summary>
      /// Removes the friend relationship between two users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.UnfriendResponse> FriendDeleteAsync(global::Spellsource.Proto.FriendDeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FriendDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes the friend relationship between two users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.UnfriendResponse> FriendDeleteAsync(global::Spellsource.Proto.FriendDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FriendDelete, null, options, request);
      }
      /// <summary>
      /// Adds a specified user to your friend list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.FriendPutResponse FriendPut(global::Spellsource.Proto.FriendPutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FriendPut(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a specified user to your friend list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.FriendPutResponse FriendPut(global::Spellsource.Proto.FriendPutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FriendPut, null, options, request);
      }
      /// <summary>
      /// Adds a specified user to your friend list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.FriendPutResponse> FriendPutAsync(global::Spellsource.Proto.FriendPutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FriendPutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a specified user to your friend list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.FriendPutResponse> FriendPutAsync(global::Spellsource.Proto.FriendPutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FriendPut, null, options, request);
      }
      /// <summary>
      /// Get a specific account. Contains more information if the userId matches the requesting user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.GetAccountsResponse GetAccount(global::Spellsource.Proto.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific account. Contains more information if the userId matches the requesting user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.GetAccountsResponse GetAccount(global::Spellsource.Proto.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      /// <summary>
      /// Get a specific account. Contains more information if the userId matches the requesting user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.GetAccountsResponse> GetAccountAsync(global::Spellsource.Proto.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a specific account. Contains more information if the userId matches the requesting user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.GetAccountsResponse> GetAccountAsync(global::Spellsource.Proto.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      /// <summary>
      /// Get a list of accounts including user profile information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.GetAccountsResponse GetAccounts(global::Spellsource.Proto.GetAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a list of accounts including user profile information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.GetAccountsResponse GetAccounts(global::Spellsource.Proto.GetAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccounts, null, options, request);
      }
      /// <summary>
      /// Get a list of accounts including user profile information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.GetAccountsResponse> GetAccountsAsync(global::Spellsource.Proto.GetAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a list of accounts including user profile information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.GetAccountsResponse> GetAccountsAsync(global::Spellsource.Proto.GetAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccounts, null, options, request);
      }
      /// <summary>
      /// Retrieves a record of a game this player played. Games against bots retrieve a complete game record, while games
      /// against other players only receive this player's point of view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.GetGameRecordResponse GetGameRecord(global::Spellsource.Proto.GetGameRecordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameRecord(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a record of a game this player played. Games against bots retrieve a complete game record, while games
      /// against other players only receive this player's point of view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.GetGameRecordResponse GetGameRecord(global::Spellsource.Proto.GetGameRecordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameRecord, null, options, request);
      }
      /// <summary>
      /// Retrieves a record of a game this player played. Games against bots retrieve a complete game record, while games
      /// against other players only receive this player's point of view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.GetGameRecordResponse> GetGameRecordAsync(global::Spellsource.Proto.GetGameRecordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameRecordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a record of a game this player played. Games against bots retrieve a complete game record, while games
      /// against other players only receive this player's point of view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.GetGameRecordResponse> GetGameRecordAsync(global::Spellsource.Proto.GetGameRecordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameRecord, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of game IDs corresponding to all the games this player played.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.GetGameRecordIdsResponse GetGameRecordIds(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameRecordIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of game IDs corresponding to all the games this player played.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.GetGameRecordIdsResponse GetGameRecordIds(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameRecordIds, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of game IDs corresponding to all the games this player played.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.GetGameRecordIdsResponse> GetGameRecordIdsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameRecordIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of game IDs corresponding to all the games this player played.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.GetGameRecordIdsResponse> GetGameRecordIdsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameRecordIds, null, options, request);
      }
      /// <summary>
      /// Retrieves information about a specific invite, as long as this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.InviteResponse GetInvite(global::Spellsource.Proto.GetInviteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInvite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves information about a specific invite, as long as this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.InviteResponse GetInvite(global::Spellsource.Proto.GetInviteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInvite, null, options, request);
      }
      /// <summary>
      /// Retrieves information about a specific invite, as long as this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.InviteResponse> GetInviteAsync(global::Spellsource.Proto.GetInviteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInviteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves information about a specific invite, as long as this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.InviteResponse> GetInviteAsync(global::Spellsource.Proto.GetInviteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInvite, null, options, request);
      }
      /// <summary>
      /// Retrieve all invites where this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.InviteGetResponse GetInvites(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInvites(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve all invites where this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.InviteGetResponse GetInvites(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInvites, null, options, request);
      }
      /// <summary>
      /// Retrieve all invites where this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.InviteGetResponse> GetInvitesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInvitesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieve all invites where this user is either the sender or recipient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.InviteGetResponse> GetInvitesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInvites, null, options, request);
      }
      /// <summary>
      /// Login with a username and password, receiving an authentication token to use for future sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.LoginResponse Login(global::Spellsource.Proto.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with a username and password, receiving an authentication token to use for future sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Spellsource.Proto.LoginResponse Login(global::Spellsource.Proto.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>
      /// Login with a username and password, receiving an authentication token to use for future sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.LoginResponse> LoginAsync(global::Spellsource.Proto.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Login with a username and password, receiving an authentication token to use for future sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Spellsource.Proto.LoginResponse> LoginAsync(global::Spellsource.Proto.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>
      /// Send an invite.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.InviteResponse> PostInvite(global::Spellsource.Proto.PostInviteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostInvite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send an invite.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Spellsource.Proto.InviteResponse> PostInvite(global::Spellsource.Proto.PostInviteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PostInvite, null, options, request);
      }
      /// <summary>
      /// Provided a valid reset token, resets a user's password.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PostPasswordReset(global::Spellsource.Proto.PostPasswordResetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostPasswordReset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provided a valid reset token, resets a user's password.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PostPasswordReset(global::Spellsource.Proto.PostPasswordResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostPasswordReset, null, options, request);
      }
      /// <summary>
      /// Provided a valid reset token, resets a user's password.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PostPasswordResetAsync(global::Spellsource.Proto.PostPasswordResetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostPasswordResetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provided a valid reset token, resets a user's password.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PostPasswordResetAsync(global::Spellsource.Proto.PostPasswordResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostPasswordReset, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override HiddenSwitchSpellsourceAPIServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HiddenSwitchSpellsourceAPIServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(HiddenSwitchSpellsourceAPIServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PutCard, serviceImpl.PutCard)
          .AddMethod(__Method_SendMessage, serviceImpl.SendMessage)
          .AddMethod(__Method_DeleteCard, serviceImpl.DeleteCard)
          .AddMethod(__Method_SubscribeFriends, serviceImpl.SubscribeFriends)
          .AddMethod(__Method_SubscribeInvites, serviceImpl.SubscribeInvites)
          .AddMethod(__Method_SubscribeEditableCards, serviceImpl.SubscribeEditableCards)
          .AddMethod(__Method_SubscribeMatch, serviceImpl.SubscribeMatch)
          .AddMethod(__Method_SubscribeGame, serviceImpl.SubscribeGame)
          .AddMethod(__Method_AcceptInvite, serviceImpl.AcceptInvite)
          .AddMethod(__Method_ChangePassword, serviceImpl.ChangePassword)
          .AddMethod(__Method_CreateAccount, serviceImpl.CreateAccount)
          .AddMethod(__Method_DecksDelete, serviceImpl.DecksDelete)
          .AddMethod(__Method_DecksGet, serviceImpl.DecksGet)
          .AddMethod(__Method_DecksGetAll, serviceImpl.DecksGetAll)
          .AddMethod(__Method_DecksPut, serviceImpl.DecksPut)
          .AddMethod(__Method_DecksUpdate, serviceImpl.DecksUpdate)
          .AddMethod(__Method_DuplicateDeck, serviceImpl.DuplicateDeck)
          .AddMethod(__Method_DeleteInvite, serviceImpl.DeleteInvite)
          .AddMethod(__Method_DraftsChooseCard, serviceImpl.DraftsChooseCard)
          .AddMethod(__Method_DraftsChooseHero, serviceImpl.DraftsChooseHero)
          .AddMethod(__Method_DraftsGet, serviceImpl.DraftsGet)
          .AddMethod(__Method_DraftsPost, serviceImpl.DraftsPost)
          .AddMethod(__Method_FriendDelete, serviceImpl.FriendDelete)
          .AddMethod(__Method_FriendPut, serviceImpl.FriendPut)
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_GetAccounts, serviceImpl.GetAccounts)
          .AddMethod(__Method_GetGameRecord, serviceImpl.GetGameRecord)
          .AddMethod(__Method_GetGameRecordIds, serviceImpl.GetGameRecordIds)
          .AddMethod(__Method_GetInvite, serviceImpl.GetInvite)
          .AddMethod(__Method_GetInvites, serviceImpl.GetInvites)
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_PostInvite, serviceImpl.PostInvite)
          .AddMethod(__Method_PostPasswordReset, serviceImpl.PostPasswordReset).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, HiddenSwitchSpellsourceAPIServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PutCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage, global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage>(serviceImpl.PutCard));
      serviceBinder.AddMethod(__Method_SendMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage, global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage>(serviceImpl.SendMessage));
      serviceBinder.AddMethod(__Method_DeleteCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage, global::Spellsource.Proto.Envelope.Types.RemovedMessage>(serviceImpl.DeleteCard));
      serviceBinder.AddMethod(__Method_SubscribeFriends, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Friend>(serviceImpl.SubscribeFriends));
      serviceBinder.AddMethod(__Method_SubscribeInvites, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Invite>(serviceImpl.SubscribeInvites));
      serviceBinder.AddMethod(__Method_SubscribeEditableCards, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.EditableCard>(serviceImpl.SubscribeEditableCards));
      serviceBinder.AddMethod(__Method_SubscribeMatch, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.Match>(serviceImpl.SubscribeMatch));
      serviceBinder.AddMethod(__Method_SubscribeGame, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Spellsource.Proto.ClientToServerMessage, global::Spellsource.Proto.ServerToClientMessage>(serviceImpl.SubscribeGame));
      serviceBinder.AddMethod(__Method_AcceptInvite, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.AcceptInviteRequest, global::Spellsource.Proto.AcceptInviteResponse>(serviceImpl.AcceptInvite));
      serviceBinder.AddMethod(__Method_ChangePassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.ChangePasswordRequest, global::Spellsource.Proto.ChangePasswordResponse>(serviceImpl.ChangePassword));
      serviceBinder.AddMethod(__Method_CreateAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.CreateAccountRequest, global::Spellsource.Proto.CreateAccountResponse>(serviceImpl.CreateAccount));
      serviceBinder.AddMethod(__Method_DecksDelete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.DecksDeleteRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DecksDelete));
      serviceBinder.AddMethod(__Method_DecksGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.DecksGetRequest, global::Spellsource.Proto.DecksGetResponse>(serviceImpl.DecksGet));
      serviceBinder.AddMethod(__Method_DecksGetAll, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.DecksGetAllResponse>(serviceImpl.DecksGetAll));
      serviceBinder.AddMethod(__Method_DecksPut, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.DecksPutRequest, global::Spellsource.Proto.DecksPutResponse>(serviceImpl.DecksPut));
      serviceBinder.AddMethod(__Method_DecksUpdate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.DecksUpdateRequest, global::Spellsource.Proto.DecksGetResponse>(serviceImpl.DecksUpdate));
      serviceBinder.AddMethod(__Method_DuplicateDeck, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.StringValue, global::Spellsource.Proto.DecksGetResponse>(serviceImpl.DuplicateDeck));
      serviceBinder.AddMethod(__Method_DeleteInvite, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.DeleteInviteRequest, global::Spellsource.Proto.InviteResponse>(serviceImpl.DeleteInvite));
      serviceBinder.AddMethod(__Method_DraftsChooseCard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.DraftsChooseCardRequest, global::Spellsource.Proto.DraftState>(serviceImpl.DraftsChooseCard));
      serviceBinder.AddMethod(__Method_DraftsChooseHero, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.DraftsChooseHeroRequest, global::Spellsource.Proto.DraftState>(serviceImpl.DraftsChooseHero));
      serviceBinder.AddMethod(__Method_DraftsGet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.DraftState>(serviceImpl.DraftsGet));
      serviceBinder.AddMethod(__Method_DraftsPost, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.DraftsPostRequest, global::Spellsource.Proto.DraftState>(serviceImpl.DraftsPost));
      serviceBinder.AddMethod(__Method_FriendDelete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.FriendDeleteRequest, global::Spellsource.Proto.UnfriendResponse>(serviceImpl.FriendDelete));
      serviceBinder.AddMethod(__Method_FriendPut, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.FriendPutRequest, global::Spellsource.Proto.FriendPutResponse>(serviceImpl.FriendPut));
      serviceBinder.AddMethod(__Method_GetAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.GetAccountRequest, global::Spellsource.Proto.GetAccountsResponse>(serviceImpl.GetAccount));
      serviceBinder.AddMethod(__Method_GetAccounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.GetAccountsRequest, global::Spellsource.Proto.GetAccountsResponse>(serviceImpl.GetAccounts));
      serviceBinder.AddMethod(__Method_GetGameRecord, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.GetGameRecordRequest, global::Spellsource.Proto.GetGameRecordResponse>(serviceImpl.GetGameRecord));
      serviceBinder.AddMethod(__Method_GetGameRecordIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.GetGameRecordIdsResponse>(serviceImpl.GetGameRecordIds));
      serviceBinder.AddMethod(__Method_GetInvite, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.GetInviteRequest, global::Spellsource.Proto.InviteResponse>(serviceImpl.GetInvite));
      serviceBinder.AddMethod(__Method_GetInvites, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Spellsource.Proto.InviteGetResponse>(serviceImpl.GetInvites));
      serviceBinder.AddMethod(__Method_Login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.LoginRequest, global::Spellsource.Proto.LoginResponse>(serviceImpl.Login));
      serviceBinder.AddMethod(__Method_PostInvite, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Spellsource.Proto.PostInviteRequest, global::Spellsource.Proto.InviteResponse>(serviceImpl.PostInvite));
      serviceBinder.AddMethod(__Method_PostPasswordReset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spellsource.Proto.PostPasswordResetRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.PostPasswordReset));
    }

  }
}
#endregion
