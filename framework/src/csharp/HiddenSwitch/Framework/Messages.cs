// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api/messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenMatch {

  /// <summary>Holder for reflection information generated from api/messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for api/messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJhcGkvbWVzc2FnZXMucHJvdG8SCW9wZW5tYXRjaBoXZ29vZ2xlL3JwYy9z",
            "dGF0dXMucHJvdG8aGWdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8aH2dvb2ds",
            "ZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8ipgIKBlRpY2tldBIKCgJpZBgB",
            "IAEoCRIpCgphc3NpZ25tZW50GAMgASgLMhUub3Blbm1hdGNoLkFzc2lnbm1l",
            "bnQSLgoNc2VhcmNoX2ZpZWxkcxgEIAEoCzIXLm9wZW5tYXRjaC5TZWFyY2hG",
            "aWVsZHMSNQoKZXh0ZW5zaW9ucxgFIAMoCzIhLm9wZW5tYXRjaC5UaWNrZXQu",
            "RXh0ZW5zaW9uc0VudHJ5Ei8KC2NyZWF0ZV90aW1lGAYgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBpHCg9FeHRlbnNpb25zRW50cnkSCwoDa2V5",
            "GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueToC",
            "OAFKBAgCEAMi/gEKDFNlYXJjaEZpZWxkcxI8Cgtkb3VibGVfYXJncxgBIAMo",
            "CzInLm9wZW5tYXRjaC5TZWFyY2hGaWVsZHMuRG91YmxlQXJnc0VudHJ5EjwK",
            "C3N0cmluZ19hcmdzGAIgAygLMicub3Blbm1hdGNoLlNlYXJjaEZpZWxkcy5T",
            "dHJpbmdBcmdzRW50cnkSDAoEdGFncxgDIAMoCRoxCg9Eb3VibGVBcmdzRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgBOgI4ARoxCg9TdHJpbmdB",
            "cmdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKwAQoK",
            "QXNzaWdubWVudBISCgpjb25uZWN0aW9uGAEgASgJEjkKCmV4dGVuc2lvbnMY",
            "BCADKAsyJS5vcGVubWF0Y2guQXNzaWdubWVudC5FeHRlbnNpb25zRW50cnka",
            "RwoPRXh0ZW5zaW9uc0VudHJ5EgsKA2tleRgBIAEoCRIjCgV2YWx1ZRgCIAEo",
            "CzIULmdvb2dsZS5wcm90b2J1Zi5Bbnk6AjgBSgQIAhADSgQIAxAEIqkBChFE",
            "b3VibGVSYW5nZUZpbHRlchISCgpkb3VibGVfYXJnGAEgASgJEgsKA21heBgC",
            "IAEoARILCgNtaW4YAyABKAESNQoHZXhjbHVkZRgEIAEoDjIkLm9wZW5tYXRj",
            "aC5Eb3VibGVSYW5nZUZpbHRlci5FeGNsdWRlIi8KB0V4Y2x1ZGUSCAoETk9O",
            "RRAAEgcKA01JThABEgcKA01BWBACEggKBEJPVEgQAyI3ChJTdHJpbmdFcXVh",
            "bHNGaWx0ZXISEgoKc3RyaW5nX2FyZxgBIAEoCRINCgV2YWx1ZRgCIAEoCSIf",
            "ChBUYWdQcmVzZW50RmlsdGVyEgsKA3RhZxgBIAEoCSK1AgoEUG9vbBIMCgRu",
            "YW1lGAEgASgJEjoKFGRvdWJsZV9yYW5nZV9maWx0ZXJzGAIgAygLMhwub3Bl",
            "bm1hdGNoLkRvdWJsZVJhbmdlRmlsdGVyEjwKFXN0cmluZ19lcXVhbHNfZmls",
            "dGVycxgEIAMoCzIdLm9wZW5tYXRjaC5TdHJpbmdFcXVhbHNGaWx0ZXISOAoT",
            "dGFnX3ByZXNlbnRfZmlsdGVycxgFIAMoCzIbLm9wZW5tYXRjaC5UYWdQcmVz",
            "ZW50RmlsdGVyEjIKDmNyZWF0ZWRfYmVmb3JlGAYgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIxCg1jcmVhdGVkX2FmdGVyGAcgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcEoECAMQBCLOAQoMTWF0Y2hQcm9maWxl",
            "EgwKBG5hbWUYASABKAkSHgoFcG9vbHMYAyADKAsyDy5vcGVubWF0Y2guUG9v",
            "bBI7CgpleHRlbnNpb25zGAUgAygLMicub3Blbm1hdGNoLk1hdGNoUHJvZmls",
            "ZS5FeHRlbnNpb25zRW50cnkaRwoPRXh0ZW5zaW9uc0VudHJ5EgsKA2tleRgB",
            "IAEoCRIjCgV2YWx1ZRgCIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5Bbnk6AjgB",
            "SgQIAhADSgQIBBAFIrsCCgVNYXRjaBIQCghtYXRjaF9pZBgBIAEoCRIVCg1t",
            "YXRjaF9wcm9maWxlGAIgASgJEhYKDm1hdGNoX2Z1bmN0aW9uGAMgASgJEiIK",
            "B3RpY2tldHMYBCADKAsyES5vcGVubWF0Y2guVGlja2V0EjQKCmV4dGVuc2lv",
            "bnMYByADKAsyIC5vcGVubWF0Y2guTWF0Y2guRXh0ZW5zaW9uc0VudHJ5EiUK",
            "CGJhY2tmaWxsGAggASgLMhMub3Blbm1hdGNoLkJhY2tmaWxsEhsKE2FsbG9j",
            "YXRlX2dhbWVzZXJ2ZXIYCSABKAgaRwoPRXh0ZW5zaW9uc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRIjCgV2YWx1ZRgCIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5Bbnk6",
            "AjgBSgQIBRAGSgQIBhAHIo0CCghCYWNrZmlsbBIKCgJpZBgBIAEoCRIuCg1z",
            "ZWFyY2hfZmllbGRzGAIgASgLMhcub3Blbm1hdGNoLlNlYXJjaEZpZWxkcxI3",
            "CgpleHRlbnNpb25zGAMgAygLMiMub3Blbm1hdGNoLkJhY2tmaWxsLkV4dGVu",
            "c2lvbnNFbnRyeRIvCgtjcmVhdGVfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASEgoKZ2VuZXJhdGlvbhgFIAEoAxpHCg9FeHRlbnNp",
            "b25zRW50cnkSCwoDa2V5GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuZ29vZ2xl",
            "LnByb3RvYnVmLkFueToCOAFCLlogb3Blbi1tYXRjaC5kZXYvb3Blbi1tYXRj",
            "aC9wa2cvcGKqAglPcGVuTWF0Y2hiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Rpc.StatusReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Ticket), global::OpenMatch.Ticket.Parser, new[]{ "Id", "Assignment", "SearchFields", "Extensions", "CreateTime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.SearchFields), global::OpenMatch.SearchFields.Parser, new[]{ "DoubleArgs", "StringArgs", "Tags" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Assignment), global::OpenMatch.Assignment.Parser, new[]{ "Connection", "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.DoubleRangeFilter), global::OpenMatch.DoubleRangeFilter.Parser, new[]{ "DoubleArg", "Max", "Min", "Exclude" }, null, new[]{ typeof(global::OpenMatch.DoubleRangeFilter.Types.Exclude) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.StringEqualsFilter), global::OpenMatch.StringEqualsFilter.Parser, new[]{ "StringArg", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.TagPresentFilter), global::OpenMatch.TagPresentFilter.Parser, new[]{ "Tag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Pool), global::OpenMatch.Pool.Parser, new[]{ "Name", "DoubleRangeFilters", "StringEqualsFilters", "TagPresentFilters", "CreatedBefore", "CreatedAfter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.MatchProfile), global::OpenMatch.MatchProfile.Parser, new[]{ "Name", "Pools", "Extensions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Match), global::OpenMatch.Match.Parser, new[]{ "MatchId", "MatchProfile", "MatchFunction", "Tickets", "Extensions", "Backfill", "AllocateGameserver" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenMatch.Backfill), global::OpenMatch.Backfill.Parser, new[]{ "Id", "SearchFields", "Extensions", "CreateTime", "Generation" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Ticket is a basic matchmaking entity in Open Match. A Ticket may represent
  /// an individual 'Player', a 'Group' of players, or any other concepts unique to
  /// your use case. Open Match will not interpret what the Ticket represents but
  /// just treat it as a matchmaking unit with a set of SearchFields. Open Match
  /// stores the Ticket in state storage and enables an Assignment to be set on the
  /// Ticket.
  /// </summary>
  public sealed partial class Ticket : pb::IMessage<Ticket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      id_ = other.id_;
      assignment_ = other.assignment_ != null ? other.assignment_.Clone() : null;
      searchFields_ = other.searchFields_ != null ? other.searchFields_.Clone() : null;
      extensions_ = other.extensions_.Clone();
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Id represents an auto-generated Id issued by Open Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assignment" field.</summary>
    public const int AssignmentFieldNumber = 3;
    private global::OpenMatch.Assignment assignment_;
    /// <summary>
    /// An Assignment represents a game server assignment associated with a Ticket,
    /// or whatever finalized matched state means for your use case.
    /// Open Match does not require or inspect any fields on Assignment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenMatch.Assignment Assignment {
      get { return assignment_; }
      set {
        assignment_ = value;
      }
    }

    /// <summary>Field number for the "search_fields" field.</summary>
    public const int SearchFieldsFieldNumber = 4;
    private global::OpenMatch.SearchFields searchFields_;
    /// <summary>
    /// Search fields are the fields which Open Match is aware of, and can be used
    /// when specifying filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenMatch.SearchFields SearchFields {
      get { return searchFields_; }
      set {
        searchFields_ = value;
      }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 42);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Create time is the time the Ticket was created. It is populated by Open
    /// Match at the time of Ticket creation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Assignment, other.Assignment)) return false;
      if (!object.Equals(SearchFields, other.SearchFields)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (assignment_ != null) hash ^= Assignment.GetHashCode();
      if (searchFields_ != null) hash ^= SearchFields.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (assignment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Assignment);
      }
      if (searchFields_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SearchFields);
      }
      extensions_.WriteTo(output, _map_extensions_codec);
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (assignment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Assignment);
      }
      if (searchFields_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SearchFields);
      }
      extensions_.WriteTo(ref output, _map_extensions_codec);
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (assignment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Assignment);
      }
      if (searchFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchFields);
      }
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.assignment_ != null) {
        if (assignment_ == null) {
          Assignment = new global::OpenMatch.Assignment();
        }
        Assignment.MergeFrom(other.Assignment);
      }
      if (other.searchFields_ != null) {
        if (searchFields_ == null) {
          SearchFields = new global::OpenMatch.SearchFields();
        }
        SearchFields.MergeFrom(other.SearchFields);
      }
      extensions_.Add(other.extensions_);
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            if (assignment_ == null) {
              Assignment = new global::OpenMatch.Assignment();
            }
            input.ReadMessage(Assignment);
            break;
          }
          case 34: {
            if (searchFields_ == null) {
              SearchFields = new global::OpenMatch.SearchFields();
            }
            input.ReadMessage(SearchFields);
            break;
          }
          case 42: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
          case 50: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            if (assignment_ == null) {
              Assignment = new global::OpenMatch.Assignment();
            }
            input.ReadMessage(Assignment);
            break;
          }
          case 34: {
            if (searchFields_ == null) {
              SearchFields = new global::OpenMatch.SearchFields();
            }
            input.ReadMessage(SearchFields);
            break;
          }
          case 42: {
            extensions_.AddEntriesFrom(ref input, _map_extensions_codec);
            break;
          }
          case 50: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Search fields are the fields which Open Match is aware of, and can be used
  /// when specifying filters.
  /// </summary>
  public sealed partial class SearchFields : pb::IMessage<SearchFields>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SearchFields> _parser = new pb::MessageParser<SearchFields>(() => new SearchFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFields(SearchFields other) : this() {
      doubleArgs_ = other.doubleArgs_.Clone();
      stringArgs_ = other.stringArgs_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFields Clone() {
      return new SearchFields(this);
    }

    /// <summary>Field number for the "double_args" field.</summary>
    public const int DoubleArgsFieldNumber = 1;
    private static readonly pbc::MapField<string, double>.Codec _map_doubleArgs_codec
        = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForDouble(17, 0D), 10);
    private readonly pbc::MapField<string, double> doubleArgs_ = new pbc::MapField<string, double>();
    /// <summary>
    /// Float arguments.  Filterable on ranges.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, double> DoubleArgs {
      get { return doubleArgs_; }
    }

    /// <summary>Field number for the "string_args" field.</summary>
    public const int StringArgsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_stringArgs_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> stringArgs_ = new pbc::MapField<string, string>();
    /// <summary>
    /// String arguments.  Filterable on equality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> StringArgs {
      get { return stringArgs_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Filterable on presence or absence of given value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!DoubleArgs.Equals(other.DoubleArgs)) return false;
      if (!StringArgs.Equals(other.StringArgs)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= DoubleArgs.GetHashCode();
      hash ^= StringArgs.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      doubleArgs_.WriteTo(output, _map_doubleArgs_codec);
      stringArgs_.WriteTo(output, _map_stringArgs_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      doubleArgs_.WriteTo(ref output, _map_doubleArgs_codec);
      stringArgs_.WriteTo(ref output, _map_stringArgs_codec);
      tags_.WriteTo(ref output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += doubleArgs_.CalculateSize(_map_doubleArgs_codec);
      size += stringArgs_.CalculateSize(_map_stringArgs_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchFields other) {
      if (other == null) {
        return;
      }
      doubleArgs_.Add(other.doubleArgs_);
      stringArgs_.Add(other.stringArgs_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            doubleArgs_.AddEntriesFrom(input, _map_doubleArgs_codec);
            break;
          }
          case 18: {
            stringArgs_.AddEntriesFrom(input, _map_stringArgs_codec);
            break;
          }
          case 26: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            doubleArgs_.AddEntriesFrom(ref input, _map_doubleArgs_codec);
            break;
          }
          case 18: {
            stringArgs_.AddEntriesFrom(ref input, _map_stringArgs_codec);
            break;
          }
          case 26: {
            tags_.AddEntriesFrom(ref input, _repeated_tags_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An Assignment represents a game server assignment associated with a Ticket.
  /// Open Match does not require or inspect any fields on assignment.
  /// </summary>
  public sealed partial class Assignment : pb::IMessage<Assignment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Assignment> _parser = new pb::MessageParser<Assignment>(() => new Assignment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Assignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment(Assignment other) : this() {
      connection_ = other.connection_;
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assignment Clone() {
      return new Assignment(this);
    }

    /// <summary>Field number for the "connection" field.</summary>
    public const int ConnectionFieldNumber = 1;
    private string connection_ = "";
    /// <summary>
    /// Connection information for this Assignment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Connection {
      get { return connection_; }
      set {
        connection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 34);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Assignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Assignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connection != other.Connection) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connection.Length != 0) hash ^= Connection.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Connection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Connection);
      }
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Connection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Connection);
      }
      extensions_.WriteTo(ref output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Connection);
      }
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Assignment other) {
      if (other == null) {
        return;
      }
      if (other.Connection.Length != 0) {
        Connection = other.Connection;
      }
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Connection = input.ReadString();
            break;
          }
          case 34: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Connection = input.ReadString();
            break;
          }
          case 34: {
            extensions_.AddEntriesFrom(ref input, _map_extensions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Filters numerical values to only those within a range.
  ///   double_arg: "foo"
  ///   max: 10
  ///   min: 5
  /// matches:
  ///   {"foo": 5}
  ///   {"foo": 7.5}
  ///   {"foo": 10}
  /// does not match:
  ///   {"foo": 4}
  ///   {"foo": 10.01}
  ///   {"foo": "7.5"}
  ///   {}
  /// </summary>
  public sealed partial class DoubleRangeFilter : pb::IMessage<DoubleRangeFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DoubleRangeFilter> _parser = new pb::MessageParser<DoubleRangeFilter>(() => new DoubleRangeFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleRangeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleRangeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleRangeFilter(DoubleRangeFilter other) : this() {
      doubleArg_ = other.doubleArg_;
      max_ = other.max_;
      min_ = other.min_;
      exclude_ = other.exclude_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleRangeFilter Clone() {
      return new DoubleRangeFilter(this);
    }

    /// <summary>Field number for the "double_arg" field.</summary>
    public const int DoubleArgFieldNumber = 1;
    private string doubleArg_ = "";
    /// <summary>
    /// Name of the ticket's search_fields.double_args this Filter operates on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DoubleArg {
      get { return doubleArg_; }
      set {
        doubleArg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private double max_;
    /// <summary>
    /// Maximum value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 3;
    private double min_;
    /// <summary>
    /// Minimum value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "exclude" field.</summary>
    public const int ExcludeFieldNumber = 4;
    private global::OpenMatch.DoubleRangeFilter.Types.Exclude exclude_ = global::OpenMatch.DoubleRangeFilter.Types.Exclude.None;
    /// <summary>
    /// Which bounds would be excluded when comparing with a ticket's search_fields.double_args value.
    ///
    /// BETA FEATURE WARNING: This field and the associated values are
    /// not finalized and still subject to possible change or removal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenMatch.DoubleRangeFilter.Types.Exclude Exclude {
      get { return exclude_; }
      set {
        exclude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoubleRangeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoubleRangeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DoubleArg != other.DoubleArg) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Max, other.Max)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Min, other.Min)) return false;
      if (Exclude != other.Exclude) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DoubleArg.Length != 0) hash ^= DoubleArg.GetHashCode();
      if (Max != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Max);
      if (Min != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Min);
      if (Exclude != global::OpenMatch.DoubleRangeFilter.Types.Exclude.None) hash ^= Exclude.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DoubleArg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DoubleArg);
      }
      if (Max != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Max);
      }
      if (Min != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Min);
      }
      if (Exclude != global::OpenMatch.DoubleRangeFilter.Types.Exclude.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Exclude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DoubleArg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DoubleArg);
      }
      if (Max != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Max);
      }
      if (Min != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Min);
      }
      if (Exclude != global::OpenMatch.DoubleRangeFilter.Types.Exclude.None) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Exclude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DoubleArg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DoubleArg);
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (Exclude != global::OpenMatch.DoubleRangeFilter.Types.Exclude.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Exclude);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoubleRangeFilter other) {
      if (other == null) {
        return;
      }
      if (other.DoubleArg.Length != 0) {
        DoubleArg = other.DoubleArg;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      if (other.Exclude != global::OpenMatch.DoubleRangeFilter.Types.Exclude.None) {
        Exclude = other.Exclude;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DoubleArg = input.ReadString();
            break;
          }
          case 17: {
            Max = input.ReadDouble();
            break;
          }
          case 25: {
            Min = input.ReadDouble();
            break;
          }
          case 32: {
            Exclude = (global::OpenMatch.DoubleRangeFilter.Types.Exclude) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DoubleArg = input.ReadString();
            break;
          }
          case 17: {
            Max = input.ReadDouble();
            break;
          }
          case 25: {
            Min = input.ReadDouble();
            break;
          }
          case 32: {
            Exclude = (global::OpenMatch.DoubleRangeFilter.Types.Exclude) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DoubleRangeFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Exclude {
        /// <summary>
        /// No bounds should be excluded when evaluating the filter, i.e.: MIN &lt;= x &lt;= MAX
        /// </summary>
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        /// Only the minimum bound should be excluded when evaluating the filter, i.e.: MIN &lt; x &lt;= MAX
        /// </summary>
        [pbr::OriginalName("MIN")] Min = 1,
        /// <summary>
        /// Only the maximum bound should be excluded when evaluating the filter, i.e.: MIN &lt;= x &lt; MAX
        /// </summary>
        [pbr::OriginalName("MAX")] Max = 2,
        /// <summary>
        /// Both bounds should be excluded when evaluating the filter, i.e.: MIN &lt; x &lt; MAX
        /// </summary>
        [pbr::OriginalName("BOTH")] Both = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Filters strings exactly equaling a value.
  ///   string_arg: "foo"
  ///   value: "bar"
  /// matches:
  ///   {"foo": "bar"}
  /// does not match:
  ///   {"foo": "baz"}
  ///   {"bar": "foo"}
  ///   {}
  /// </summary>
  public sealed partial class StringEqualsFilter : pb::IMessage<StringEqualsFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringEqualsFilter> _parser = new pb::MessageParser<StringEqualsFilter>(() => new StringEqualsFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringEqualsFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter(StringEqualsFilter other) : this() {
      stringArg_ = other.stringArg_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringEqualsFilter Clone() {
      return new StringEqualsFilter(this);
    }

    /// <summary>Field number for the "string_arg" field.</summary>
    public const int StringArgFieldNumber = 1;
    private string stringArg_ = "";
    /// <summary>
    /// Name of the ticket's search_fields.string_args this Filter operates on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringArg {
      get { return stringArg_; }
      set {
        stringArg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringEqualsFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringEqualsFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StringArg != other.StringArg) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StringArg.Length != 0) hash ^= StringArg.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StringArg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StringArg);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StringArg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StringArg);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StringArg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringArg);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringEqualsFilter other) {
      if (other == null) {
        return;
      }
      if (other.StringArg.Length != 0) {
        StringArg = other.StringArg;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StringArg = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StringArg = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Filters to the tag being present on the search_fields.
  ///   tag: "foo"
  /// matches:
  ///   ["foo"]
  ///   ["bar","foo"]
  /// does not match:
  ///   ["bar"]
  ///   []
  /// </summary>
  public sealed partial class TagPresentFilter : pb::IMessage<TagPresentFilter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TagPresentFilter> _parser = new pb::MessageParser<TagPresentFilter>(() => new TagPresentFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TagPresentFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagPresentFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagPresentFilter(TagPresentFilter other) : this() {
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TagPresentFilter Clone() {
      return new TagPresentFilter(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TagPresentFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TagPresentFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TagPresentFilter other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Pool specfies a set of criteria that are used to select a subset of Tickets
  /// that meet all the criteria.
  /// </summary>
  public sealed partial class Pool : pb::IMessage<Pool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pool> _parser = new pb::MessageParser<Pool>(() => new Pool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool(Pool other) : this() {
      name_ = other.name_;
      doubleRangeFilters_ = other.doubleRangeFilters_.Clone();
      stringEqualsFilters_ = other.stringEqualsFilters_.Clone();
      tagPresentFilters_ = other.tagPresentFilters_.Clone();
      createdBefore_ = other.createdBefore_ != null ? other.createdBefore_.Clone() : null;
      createdAfter_ = other.createdAfter_ != null ? other.createdAfter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool Clone() {
      return new Pool(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A developer-chosen human-readable name for this Pool.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "double_range_filters" field.</summary>
    public const int DoubleRangeFiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::OpenMatch.DoubleRangeFilter> _repeated_doubleRangeFilters_codec
        = pb::FieldCodec.ForMessage(18, global::OpenMatch.DoubleRangeFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.DoubleRangeFilter> doubleRangeFilters_ = new pbc::RepeatedField<global::OpenMatch.DoubleRangeFilter>();
    /// <summary>
    /// Set of Filters indicating the filtering criteria. Selected tickets must
    /// match every Filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.DoubleRangeFilter> DoubleRangeFilters {
      get { return doubleRangeFilters_; }
    }

    /// <summary>Field number for the "string_equals_filters" field.</summary>
    public const int StringEqualsFiltersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OpenMatch.StringEqualsFilter> _repeated_stringEqualsFilters_codec
        = pb::FieldCodec.ForMessage(34, global::OpenMatch.StringEqualsFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.StringEqualsFilter> stringEqualsFilters_ = new pbc::RepeatedField<global::OpenMatch.StringEqualsFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.StringEqualsFilter> StringEqualsFilters {
      get { return stringEqualsFilters_; }
    }

    /// <summary>Field number for the "tag_present_filters" field.</summary>
    public const int TagPresentFiltersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::OpenMatch.TagPresentFilter> _repeated_tagPresentFilters_codec
        = pb::FieldCodec.ForMessage(42, global::OpenMatch.TagPresentFilter.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.TagPresentFilter> tagPresentFilters_ = new pbc::RepeatedField<global::OpenMatch.TagPresentFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.TagPresentFilter> TagPresentFilters {
      get { return tagPresentFilters_; }
    }

    /// <summary>Field number for the "created_before" field.</summary>
    public const int CreatedBeforeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdBefore_;
    /// <summary>
    /// If specified, only Tickets created before the specified time are selected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedBefore {
      get { return createdBefore_; }
      set {
        createdBefore_ = value;
      }
    }

    /// <summary>Field number for the "created_after" field.</summary>
    public const int CreatedAfterFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAfter_;
    /// <summary>
    /// If specified, only Tickets created after the specified time are selected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAfter {
      get { return createdAfter_; }
      set {
        createdAfter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!doubleRangeFilters_.Equals(other.doubleRangeFilters_)) return false;
      if(!stringEqualsFilters_.Equals(other.stringEqualsFilters_)) return false;
      if(!tagPresentFilters_.Equals(other.tagPresentFilters_)) return false;
      if (!object.Equals(CreatedBefore, other.CreatedBefore)) return false;
      if (!object.Equals(CreatedAfter, other.CreatedAfter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= doubleRangeFilters_.GetHashCode();
      hash ^= stringEqualsFilters_.GetHashCode();
      hash ^= tagPresentFilters_.GetHashCode();
      if (createdBefore_ != null) hash ^= CreatedBefore.GetHashCode();
      if (createdAfter_ != null) hash ^= CreatedAfter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      doubleRangeFilters_.WriteTo(output, _repeated_doubleRangeFilters_codec);
      stringEqualsFilters_.WriteTo(output, _repeated_stringEqualsFilters_codec);
      tagPresentFilters_.WriteTo(output, _repeated_tagPresentFilters_codec);
      if (createdBefore_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreatedBefore);
      }
      if (createdAfter_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreatedAfter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      doubleRangeFilters_.WriteTo(ref output, _repeated_doubleRangeFilters_codec);
      stringEqualsFilters_.WriteTo(ref output, _repeated_stringEqualsFilters_codec);
      tagPresentFilters_.WriteTo(ref output, _repeated_tagPresentFilters_codec);
      if (createdBefore_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreatedBefore);
      }
      if (createdAfter_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreatedAfter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += doubleRangeFilters_.CalculateSize(_repeated_doubleRangeFilters_codec);
      size += stringEqualsFilters_.CalculateSize(_repeated_stringEqualsFilters_codec);
      size += tagPresentFilters_.CalculateSize(_repeated_tagPresentFilters_codec);
      if (createdBefore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedBefore);
      }
      if (createdAfter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAfter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pool other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      doubleRangeFilters_.Add(other.doubleRangeFilters_);
      stringEqualsFilters_.Add(other.stringEqualsFilters_);
      tagPresentFilters_.Add(other.tagPresentFilters_);
      if (other.createdBefore_ != null) {
        if (createdBefore_ == null) {
          CreatedBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedBefore.MergeFrom(other.CreatedBefore);
      }
      if (other.createdAfter_ != null) {
        if (createdAfter_ == null) {
          CreatedAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAfter.MergeFrom(other.CreatedAfter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            doubleRangeFilters_.AddEntriesFrom(input, _repeated_doubleRangeFilters_codec);
            break;
          }
          case 34: {
            stringEqualsFilters_.AddEntriesFrom(input, _repeated_stringEqualsFilters_codec);
            break;
          }
          case 42: {
            tagPresentFilters_.AddEntriesFrom(input, _repeated_tagPresentFilters_codec);
            break;
          }
          case 50: {
            if (createdBefore_ == null) {
              CreatedBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedBefore);
            break;
          }
          case 58: {
            if (createdAfter_ == null) {
              CreatedAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAfter);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            doubleRangeFilters_.AddEntriesFrom(ref input, _repeated_doubleRangeFilters_codec);
            break;
          }
          case 34: {
            stringEqualsFilters_.AddEntriesFrom(ref input, _repeated_stringEqualsFilters_codec);
            break;
          }
          case 42: {
            tagPresentFilters_.AddEntriesFrom(ref input, _repeated_tagPresentFilters_codec);
            break;
          }
          case 50: {
            if (createdBefore_ == null) {
              CreatedBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedBefore);
            break;
          }
          case 58: {
            if (createdAfter_ == null) {
              CreatedAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAfter);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A MatchProfile is Open Match's representation of a Match specification. It is
  /// used to indicate the criteria for selecting players for a match. A
  /// MatchProfile is the input to the API to get matches and is passed to the
  /// MatchFunction. It contains all the information required by the MatchFunction
  /// to generate match proposals.
  /// </summary>
  public sealed partial class MatchProfile : pb::IMessage<MatchProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchProfile> _parser = new pb::MessageParser<MatchProfile>(() => new MatchProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile(MatchProfile other) : this() {
      name_ = other.name_;
      pools_ = other.pools_.Clone();
      extensions_ = other.extensions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProfile Clone() {
      return new MatchProfile(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of this match profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pools" field.</summary>
    public const int PoolsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::OpenMatch.Pool> _repeated_pools_codec
        = pb::FieldCodec.ForMessage(26, global::OpenMatch.Pool.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Pool> pools_ = new pbc::RepeatedField<global::OpenMatch.Pool>();
    /// <summary>
    /// Set of pools to be queried when generating a match for this MatchProfile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Pool> Pools {
      get { return pools_; }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 42);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!pools_.Equals(other.pools_)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= pools_.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      pools_.WriteTo(output, _repeated_pools_codec);
      extensions_.WriteTo(output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      pools_.WriteTo(ref output, _repeated_pools_codec);
      extensions_.WriteTo(ref output, _map_extensions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += pools_.CalculateSize(_repeated_pools_codec);
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchProfile other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      pools_.Add(other.pools_);
      extensions_.Add(other.extensions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            pools_.AddEntriesFrom(input, _repeated_pools_codec);
            break;
          }
          case 42: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            pools_.AddEntriesFrom(ref input, _repeated_pools_codec);
            break;
          }
          case 42: {
            extensions_.AddEntriesFrom(ref input, _map_extensions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A Match is used to represent a completed match object. It can be generated by
  /// a MatchFunction as a proposal or can be returned by OpenMatch as a result in
  /// response to the FetchMatches call.
  /// When a match is returned by the FetchMatches call, it should contain at least
  /// one ticket to be considered as valid.
  /// </summary>
  public sealed partial class Match : pb::IMessage<Match>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      matchProfile_ = other.matchProfile_;
      matchFunction_ = other.matchFunction_;
      tickets_ = other.tickets_.Clone();
      extensions_ = other.extensions_.Clone();
      backfill_ = other.backfill_ != null ? other.backfill_.Clone() : null;
      allocateGameserver_ = other.allocateGameserver_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// A Match ID that should be passed through the stack for tracing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_profile" field.</summary>
    public const int MatchProfileFieldNumber = 2;
    private string matchProfile_ = "";
    /// <summary>
    /// Name of the match profile that generated this Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchProfile {
      get { return matchProfile_; }
      set {
        matchProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_function" field.</summary>
    public const int MatchFunctionFieldNumber = 3;
    private string matchFunction_ = "";
    /// <summary>
    /// Name of the match function that generated this Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchFunction {
      get { return matchFunction_; }
      set {
        matchFunction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int TicketsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OpenMatch.Ticket> _repeated_tickets_codec
        = pb::FieldCodec.ForMessage(34, global::OpenMatch.Ticket.Parser);
    private readonly pbc::RepeatedField<global::OpenMatch.Ticket> tickets_ = new pbc::RepeatedField<global::OpenMatch.Ticket>();
    /// <summary>
    /// Tickets belonging to this match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenMatch.Ticket> Tickets {
      get { return tickets_; }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 7;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 58);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    /// <summary>Field number for the "backfill" field.</summary>
    public const int BackfillFieldNumber = 8;
    private global::OpenMatch.Backfill backfill_;
    /// <summary>
    /// Backfill request which contains additional information to the match
    /// and contains an association to a GameServer.
    /// 
    /// BETA FEATURE WARNING: This field is not finalized and still subject
    /// to possible change or removal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenMatch.Backfill Backfill {
      get { return backfill_; }
      set {
        backfill_ = value;
      }
    }

    /// <summary>Field number for the "allocate_gameserver" field.</summary>
    public const int AllocateGameserverFieldNumber = 9;
    private bool allocateGameserver_;
    /// <summary>
    /// AllocateGameServer signalise Director that Backfill is new and it should 
    /// allocate a GameServer, this Backfill would be assigned.
    /// 
    /// BETA FEATURE WARNING: This field is not finalized and still subject
    /// to possible change or removal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllocateGameserver {
      get { return allocateGameserver_; }
      set {
        allocateGameserver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (MatchProfile != other.MatchProfile) return false;
      if (MatchFunction != other.MatchFunction) return false;
      if(!tickets_.Equals(other.tickets_)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      if (!object.Equals(Backfill, other.Backfill)) return false;
      if (AllocateGameserver != other.AllocateGameserver) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (MatchProfile.Length != 0) hash ^= MatchProfile.GetHashCode();
      if (MatchFunction.Length != 0) hash ^= MatchFunction.GetHashCode();
      hash ^= tickets_.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (backfill_ != null) hash ^= Backfill.GetHashCode();
      if (AllocateGameserver != false) hash ^= AllocateGameserver.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (MatchProfile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchProfile);
      }
      if (MatchFunction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchFunction);
      }
      tickets_.WriteTo(output, _repeated_tickets_codec);
      extensions_.WriteTo(output, _map_extensions_codec);
      if (backfill_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Backfill);
      }
      if (AllocateGameserver != false) {
        output.WriteRawTag(72);
        output.WriteBool(AllocateGameserver);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (MatchProfile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchProfile);
      }
      if (MatchFunction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchFunction);
      }
      tickets_.WriteTo(ref output, _repeated_tickets_codec);
      extensions_.WriteTo(ref output, _map_extensions_codec);
      if (backfill_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Backfill);
      }
      if (AllocateGameserver != false) {
        output.WriteRawTag(72);
        output.WriteBool(AllocateGameserver);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (MatchProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchProfile);
      }
      if (MatchFunction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchFunction);
      }
      size += tickets_.CalculateSize(_repeated_tickets_codec);
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (backfill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Backfill);
      }
      if (AllocateGameserver != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.MatchProfile.Length != 0) {
        MatchProfile = other.MatchProfile;
      }
      if (other.MatchFunction.Length != 0) {
        MatchFunction = other.MatchFunction;
      }
      tickets_.Add(other.tickets_);
      extensions_.Add(other.extensions_);
      if (other.backfill_ != null) {
        if (backfill_ == null) {
          Backfill = new global::OpenMatch.Backfill();
        }
        Backfill.MergeFrom(other.Backfill);
      }
      if (other.AllocateGameserver != false) {
        AllocateGameserver = other.AllocateGameserver;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            MatchProfile = input.ReadString();
            break;
          }
          case 26: {
            MatchFunction = input.ReadString();
            break;
          }
          case 34: {
            tickets_.AddEntriesFrom(input, _repeated_tickets_codec);
            break;
          }
          case 58: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
          case 66: {
            if (backfill_ == null) {
              Backfill = new global::OpenMatch.Backfill();
            }
            input.ReadMessage(Backfill);
            break;
          }
          case 72: {
            AllocateGameserver = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            MatchProfile = input.ReadString();
            break;
          }
          case 26: {
            MatchFunction = input.ReadString();
            break;
          }
          case 34: {
            tickets_.AddEntriesFrom(ref input, _repeated_tickets_codec);
            break;
          }
          case 58: {
            extensions_.AddEntriesFrom(ref input, _map_extensions_codec);
            break;
          }
          case 66: {
            if (backfill_ == null) {
              Backfill = new global::OpenMatch.Backfill();
            }
            input.ReadMessage(Backfill);
            break;
          }
          case 72: {
            AllocateGameserver = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// BETA FEATURE WARNING:  This call and the associated Request and Response
  /// messages are not finalized and still subject to possible change or removal.
  /// Represents a backfill entity which is used to fill partially full matches.
  /// </summary>
  public sealed partial class Backfill : pb::IMessage<Backfill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Backfill> _parser = new pb::MessageParser<Backfill>(() => new Backfill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Backfill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenMatch.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backfill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backfill(Backfill other) : this() {
      id_ = other.id_;
      searchFields_ = other.searchFields_ != null ? other.searchFields_.Clone() : null;
      extensions_ = other.extensions_.Clone();
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      generation_ = other.generation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backfill Clone() {
      return new Backfill(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Id represents an auto-generated Id issued by Open Match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "search_fields" field.</summary>
    public const int SearchFieldsFieldNumber = 2;
    private global::OpenMatch.SearchFields searchFields_;
    /// <summary>
    /// Search fields are the fields which Open Match is aware of, and can be used
    /// when specifying filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenMatch.SearchFields SearchFields {
      get { return searchFields_; }
      set {
        searchFields_ = value;
      }
    }

    /// <summary>Field number for the "extensions" field.</summary>
    public const int ExtensionsFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extensions_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 26);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extensions_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Customized information not inspected by Open Match, to be used by the match
    /// making function, evaluator, and components making calls to Open Match.
    /// Optional, depending on the requirements of the connected systems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extensions {
      get { return extensions_; }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Create time is the time the Ticket was created. It is populated by Open
    /// Match at the time of Ticket creation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "generation" field.</summary>
    public const int GenerationFieldNumber = 5;
    private long generation_;
    /// <summary>
    /// Generation gets incremented on GameServers update operations.
    /// Prevents the MMF from overriding a newer version from the game server.
    /// It is not to be updated by the MMF.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Generation {
      get { return generation_; }
      set {
        generation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Backfill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Backfill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(SearchFields, other.SearchFields)) return false;
      if (!Extensions.Equals(other.Extensions)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (Generation != other.Generation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (searchFields_ != null) hash ^= SearchFields.GetHashCode();
      hash ^= Extensions.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (Generation != 0L) hash ^= Generation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (searchFields_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SearchFields);
      }
      extensions_.WriteTo(output, _map_extensions_codec);
      if (createTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateTime);
      }
      if (Generation != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Generation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (searchFields_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SearchFields);
      }
      extensions_.WriteTo(ref output, _map_extensions_codec);
      if (createTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateTime);
      }
      if (Generation != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Generation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (searchFields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchFields);
      }
      size += extensions_.CalculateSize(_map_extensions_codec);
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (Generation != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Generation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Backfill other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.searchFields_ != null) {
        if (searchFields_ == null) {
          SearchFields = new global::OpenMatch.SearchFields();
        }
        SearchFields.MergeFrom(other.SearchFields);
      }
      extensions_.Add(other.extensions_);
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.Generation != 0L) {
        Generation = other.Generation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (searchFields_ == null) {
              SearchFields = new global::OpenMatch.SearchFields();
            }
            input.ReadMessage(SearchFields);
            break;
          }
          case 26: {
            extensions_.AddEntriesFrom(input, _map_extensions_codec);
            break;
          }
          case 34: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 40: {
            Generation = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (searchFields_ == null) {
              SearchFields = new global::OpenMatch.SearchFields();
            }
            input.ReadMessage(SearchFields);
            break;
          }
          case 26: {
            extensions_.AddEntriesFrom(ref input, _map_extensions_codec);
            break;
          }
          case 34: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 40: {
            Generation = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
