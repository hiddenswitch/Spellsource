// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spellsource.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spellsource.Proto {

  /// <summary>Holder for reflection information generated from spellsource.proto</summary>
  public static partial class SpellsourceReflection {

    #region Descriptor
    /// <summary>File descriptor for spellsource.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpellsourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFzcGVsbHNvdXJjZS5wcm90bxILc3BlbGxzb3VyY2UaHGdvb2dsZS9hcGkv",
            "YW5ub3RhdGlvbnMucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90",
            "bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGg5yZWFjdGl2ZS5w",
            "cm90byJ3ChNBY2NlcHRJbnZpdGVSZXF1ZXN0EhAKCGludml0ZUlkGAEgASgJ",
            "EhYKDmF3YWl0R2FtZVN0YXJ0GAIgASgIEjYKBW1hdGNoGAMgASgLMicuc3Bl",
            "bGxzb3VyY2UuTWF0Y2htYWtpbmdRdWV1ZVB1dFJlcXVlc3QipAEKFEFjY2Vw",
            "dEludml0ZVJlc3BvbnNlEi4KBmZyaWVuZBgBIAEoCzIeLnNwZWxsc291cmNl",
            "LkZyaWVuZFB1dFJlc3BvbnNlEiMKBmludml0ZRgCIAEoCzITLnNwZWxsc291",
            "cmNlLkludml0ZRI3CgVtYXRjaBgDIAEoCzIoLnNwZWxsc291cmNlLk1hdGNo",
            "bWFraW5nUXVldWVQdXRSZXNwb25zZSLvAQoHQWNjb3VudBILCgNfaWQYASAB",
            "KAkSLwoFZGVja3MYAiADKAsyIC5zcGVsbHNvdXJjZS5JbnZlbnRvcnlDb2xs",
            "ZWN0aW9uEg0KBWVtYWlsGAMgASgJEiQKB2ZyaWVuZHMYBCADKAsyEy5zcGVs",
            "bHNvdXJjZS5GcmllbmQSDwoHaW5NYXRjaBgFIAEoCBIMCgRuYW1lGAYgASgJ",
            "EjwKEnBlcnNvbmFsQ29sbGVjdGlvbhgHIAEoCzIgLnNwZWxsc291cmNlLklu",
            "dmVudG9yeUNvbGxlY3Rpb24SFAoMcHJpdmFjeVRva2VuGAggASgJIsMDCgNB",
            "cnQSHwoEYm9keRgBIAEoCzIRLnNwZWxsc291cmNlLkZvbnQSJQoJaGlnaGxp",
            "Z2h0GAIgASgLMhIuc3BlbGxzb3VyY2UuQ29sb3ISIQoEbG9vcBgDIAEoCzIT",
            "LnNwZWxsc291cmNlLlByZWZhYhIkCgdtaXNzaWxlGAQgASgLMhMuc3BlbGxz",
            "b3VyY2UuUHJlZmFiEiMKBm9uQ2FzdBgFIAEoCzITLnNwZWxsc291cmNlLlBy",
            "ZWZhYhIiCgVvbkhpdBgGIAEoCzITLnNwZWxsc291cmNlLlByZWZhYhIjCgdw",
            "cmltYXJ5GAcgASgLMhIuc3BlbGxzb3VyY2UuQ29sb3ISJQoJc2Vjb25kYXJ5",
            "GAggASgLMhIuc3BlbGxzb3VyY2UuQ29sb3ISIgoGc2hhZG93GAkgASgLMhIu",
            "c3BlbGxzb3VyY2UuQ29sb3ISIgoFc3BlbGwYCiABKAsyEy5zcGVsbHNvdXJj",
            "ZS5QcmVmYWISIwoGc3ByaXRlGAsgASgLMhMuc3BlbGxzb3VyY2UuU3ByaXRl",
            "EikKDHNwcml0ZVNoYWRvdxgMIAEoCzITLnNwZWxsc291cmNlLlNwcml0ZSJi",
            "ChNBdHRyaWJ1dGVWYWx1ZVR1cGxlEjYKCWF0dHJpYnV0ZRgBIAEoDjIjLnNw",
            "ZWxsc291cmNlLlBsYXllckVudGl0eUF0dHJpYnV0ZXMSEwoLc3RyaW5nVmFs",
            "dWUYAiABKAkiQQoJQ2FyZEV2ZW50EiEKBGNhcmQYASABKAsyEy5zcGVsbHNv",
            "dXJjZS5FbnRpdHkSEQoJc2hvd0xvY2FsGAIgASgIIrcBCgpDYXJkUmVjb3Jk",
            "EgsKA19pZBgBIAEoCRISCgphbGxpYW5jZUlkGAIgASgJEhgKEGJvcnJvd2Vk",
            "QnlVc2VySWQYAyABKAkSFQoNY29sbGVjdGlvbklkcxgEIAMoCRITCgtkb25v",
            "clVzZXJJZBgFIAEoCRIjCgZlbnRpdHkYBiABKAsyEy5zcGVsbHNvdXJjZS5F",
            "bnRpdHkSDgoGdXNlcklkGAcgASgJEg0KBWNvdW50GAggASgFIikKFUNoYW5n",
            "ZVBhc3N3b3JkUmVxdWVzdBIQCghwYXNzd29yZBgBIAEoCSIYChZDaGFuZ2VQ",
            "YXNzd29yZFJlc3BvbnNlItEBCgtDaGF0TWVzc2FnZRIWCg5jb252ZXJzYXRp",
            "b25JZBgBIAEoCRIRCglkYXRlTGFiZWwYAiABKAkSDwoHbWVzc2FnZRgDIAEo",
            "CRIRCgltZXNzYWdlSWQYBCABKAkSEgoKc2VuZGVyTmFtZRgFIAEoCRIUCgxz",
            "ZW5kZXJVc2VySWQYBiABKAkSEQoJdGltZXN0YW1wGAcgASgDEjYKDG5vdGlm",
            "aWNhdGlvbhgIIAEoCzIgLnNwZWxsc291cmNlLkFkZGVkQ2hhbmdlZFJlbW92",
            "ZWQiowMKFUNsaWVudFRvU2VydmVyTWVzc2FnZRITCgthY3Rpb25JbmRleBgB",
            "IAEoBRIcChRkaXNjYXJkZWRDYXJkSW5kaWNlcxgCIAMoBRIhCgVlbW90ZRgD",
            "IAEoCzISLnNwZWxsc291cmNlLkVtb3RlEjAKC2VudGl0eVRvdWNoGAQgASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSMgoNZW50aXR5VW50b3Vj",
            "aBgFIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEkwKDGZpcnN0",
            "TWVzc2FnZRgGIAEoCzI2LnNwZWxsc291cmNlLkNsaWVudFRvU2VydmVyTWVz",
            "c2FnZS5GaXJzdE1lc3NhZ2VNZXNzYWdlEi0KC21lc3NhZ2VUeXBlGAcgASgO",
            "Mhguc3BlbGxzb3VyY2UuTWVzc2FnZVR5cGUSEQoJcmVwbGllc1RvGAggASgJ",
            "Gj4KE0ZpcnN0TWVzc2FnZU1lc3NhZ2USEQoJcGxheWVyS2V5GAEgASgJEhQK",
            "DHBsYXllclNlY3JldBgCIAEoCSIzCgVDb2xvchIJCgFhGAEgASgCEgkKAWIY",
            "AiABKAISCQoBZxgDIAEoAhIJCgFyGAQgASgCIkUKFENyZWF0ZUFjY291bnRS",
            "ZXF1ZXN0Eg0KBWVtYWlsGAEgASgJEgwKBG5hbWUYAiABKAkSEAoIcGFzc3dv",
            "cmQYAyABKAkiUgoVQ3JlYXRlQWNjb3VudFJlc3BvbnNlEiUKB2FjY291bnQY",
            "ASABKAsyFC5zcGVsbHNvdXJjZS5BY2NvdW50EhIKCmxvZ2luVG9rZW4YAiAB",
            "KAkiJAoSRGVja3NEZWxldGVSZXF1ZXN0Eg4KBmRlY2tJZBgBIAEoCSJDChNE",
            "ZWNrc0dldEFsbFJlc3BvbnNlEiwKBWRlY2tzGAEgAygLMh0uc3BlbGxzb3Vy",
            "Y2UuRGVja3NHZXRSZXNwb25zZSIhCg9EZWNrc0dldFJlcXVlc3QSDgoGZGVj",
            "a0lkGAEgASgJImIKEERlY2tzR2V0UmVzcG9uc2USNAoKY29sbGVjdGlvbhgB",
            "IAEoCzIgLnNwZWxsc291cmNlLkludmVudG9yeUNvbGxlY3Rpb24SGAoQaW52",
            "ZW50b3J5SWRzU2l6ZRgCIAEoBSJ/Cg9EZWNrc1B1dFJlcXVlc3QSEAoIZGVj",
            "a0xpc3QYASABKAkSDgoGZm9ybWF0GAIgASgJEhEKCWhlcm9DbGFzcxgDIAEo",
            "CRIYCgxpbnZlbnRvcnlJZHMYBCADKAlCAhgBEgwKBG5hbWUYBSABKAkSDwoH",
            "Y2FyZElkcxgGIAMoCSJYChBEZWNrc1B1dFJlc3BvbnNlEjQKCmNvbGxlY3Rp",
            "b24YASABKAsyIC5zcGVsbHNvdXJjZS5JbnZlbnRvcnlDb2xsZWN0aW9uEg4K",
            "BmRlY2tJZBgCIAEoCSLrBAoSRGVja3NVcGRhdGVDb21tYW5kEhYKDnB1bGxB",
            "bGxDYXJkSWRzGAEgAygJEhsKE3B1bGxBbGxJbnZlbnRvcnlJZHMYAiADKAkS",
            "RwoLcHVzaENhcmRJZHMYAyABKAsyMi5zcGVsbHNvdXJjZS5EZWNrc1VwZGF0",
            "ZUNvbW1hbmQuUHVzaENhcmRJZHNNZXNzYWdlElEKEHB1c2hJbnZlbnRvcnlJ",
            "ZHMYBCABKAsyNy5zcGVsbHNvdXJjZS5EZWNrc1VwZGF0ZUNvbW1hbmQuUHVz",
            "aEludmVudG9yeUlkc01lc3NhZ2USFAoMc2V0SGVyb0NsYXNzGAUgASgJEhcK",
            "D3NldEludmVudG9yeUlkcxgGIAMoCRIPCgdzZXROYW1lGAcgASgJEmEKGHNl",
            "dFBsYXllckVudGl0eUF0dHJpYnV0ZRgIIAEoCzI/LnNwZWxsc291cmNlLkRl",
            "Y2tzVXBkYXRlQ29tbWFuZC5TZXRQbGF5ZXJFbnRpdHlBdHRyaWJ1dGVNZXNz",
            "YWdlEiIKGnVuc2V0UGxheWVyRW50aXR5QXR0cmlidXRlGAkgASgJGiMKElB1",
            "c2hDYXJkSWRzTWVzc2FnZRINCgVfZWFjaBgBIAMoCRooChdQdXNoSW52ZW50",
            "b3J5SWRzTWVzc2FnZRINCgVfZWFjaBgBIAMoCRpuCh9TZXRQbGF5ZXJFbnRp",
            "dHlBdHRyaWJ1dGVNZXNzYWdlEjYKCWF0dHJpYnV0ZRgBIAEoDjIjLnNwZWxs",
            "c291cmNlLlBsYXllckVudGl0eUF0dHJpYnV0ZXMSEwoLc3RyaW5nVmFsdWUY",
            "AiABKAkiXAoSRGVja3NVcGRhdGVSZXF1ZXN0Eg4KBmRlY2tJZBgBIAEoCRI2",
            "Cg11cGRhdGVDb21tYW5kGAIgASgLMh8uc3BlbGxzb3VyY2UuRGVja3NVcGRh",
            "dGVDb21tYW5kIhcKFURlZmF1bHRNZXRob2RSZXNwb25zZSInChNEZWxldGVJ",
            "bnZpdGVSZXF1ZXN0EhAKCGludml0ZUlkGAEgASgJInwKB0Rlc3Ryb3kSJwoK",
            "YWZ0ZXJtYXRocxgBIAMoCzITLnNwZWxsc291cmNlLkVudGl0eRIjCgZzb3Vy",
            "Y2UYAiABKAsyEy5zcGVsbHNvdXJjZS5FbnRpdHkSIwoGdGFyZ2V0GAMgASgL",
            "MhMuc3BlbGxzb3VyY2UuRW50aXR5It8DCgpEcmFmdFN0YXRlEhYKDmNhcmRz",
            "UmVtYWluaW5nGAEgASgFEi8KEmN1cnJlbnRDYXJkQ2hvaWNlcxgCIAMoCzIT",
            "LnNwZWxsc291cmNlLkVudGl0eRIOCgZkZWNrSWQYAyABKAkSEgoKZHJhZnRJ",
            "bmRleBgEIAEoBRImCgloZXJvQ2xhc3MYBSABKAsyEy5zcGVsbHNvdXJjZS5F",
            "bnRpdHkSLQoQaGVyb0NsYXNzQ2hvaWNlcxgGIAMoCzITLnNwZWxsc291cmNl",
            "LkVudGl0eRIOCgZsb3NzZXMYByABKAUSFwoPc2VsZWN0ZWRDYXJkSWRzGAgg",
            "AygJEjgKBnN0YXR1cxgJIAEoDjIoLnNwZWxsc291cmNlLkRyYWZ0U3RhdGUu",
            "RHJhZnRTdGF0ZVN0YXR1cxIMCgR3aW5zGAogASgFIpsBChBEcmFmdFN0YXRl",
            "U3RhdHVzEiIKHkRSQUZUX1NUQVRFX1NUQVRVU19JTl9QUk9HUkVTUxAAEiIK",
            "HkRSQUZUX1NUQVRFX1NUQVRVU19TRUxFQ1RfSEVSTxABEh8KG0RSQUZUX1NU",
            "QVRFX1NUQVRVU19DT01QTEVURRACEh4KGkRSQUZUX1NUQVRFX1NUQVRVU19S",
            "RVRJUkVEEAMiLAoXRHJhZnRzQ2hvb3NlQ2FyZFJlcXVlc3QSEQoJY2FyZElu",
            "ZGV4GAEgASgFIiwKF0RyYWZ0c0Nob29zZUhlcm9SZXF1ZXN0EhEKCWhlcm9J",
            "bmRleBgBIAEoBSI8ChFEcmFmdHNQb3N0UmVxdWVzdBITCgtyZXRpcmVFYXJs",
            "eRgBIAEoCBISCgpzdGFydERyYWZ0GAIgASgIIngKDEVkaXRhYmxlQ2FyZBIL",
            "CgNfaWQYASABKAkSEwoLb3duZXJVc2VySWQYAiABKAkSDgoGc291cmNlGAMg",
            "ASgJEjYKDG5vdGlmaWNhdGlvbhgEIAEoCzIgLnNwZWxsc291cmNlLkFkZGVk",
            "Q2hhbmdlZFJlbW92ZWQihwIKBUVtb3RlEhAKCGVudGl0eUlkGAEgASgFEjAK",
            "B21lc3NhZ2UYAiABKA4yHy5zcGVsbHNvdXJjZS5FbW90ZS5FbW90ZU1lc3Nh",
            "Z2UiuQEKDEVtb3RlTWVzc2FnZRIXChNFTU9URV9NRVNTQUdFX0hFTExPEAAS",
            "GQoVRU1PVEVfTUVTU0FHRV9BTUFaSU5HEAESGAoURU1PVEVfTUVTU0FHRV9X",
            "SE9PUFMQAhIbChdFTU9URV9NRVNTQUdFX0dPT0RfR0FNRRADEh8KG0VNT1RF",
            "X01FU1NBR0VfRkFDRV9NWV9XUkFUSBAEEh0KGUVNT1RFX01FU1NBR0VfV0VM",
            "TF9QTEFZRUQQBSLFDgoGRW50aXR5EgoKAmlkGAEgASgFEioKBWFybW9yGCkg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSHQoDYXJ0GAIgASgL",
            "MhAuc3BlbGxzb3VyY2UuQXJ0EisKBmF0dGFjaxgDIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQzMlZhbHVlEi8KCmJhc2VBdHRhY2sYBCABKAsyGy5nb29n",
            "bGUucHJvdG9idWYuSW50MzJWYWx1ZRIrCgZiYXNlSHAYBSABKAsyGy5nb29n",
            "bGUucHJvdG9idWYuSW50MzJWYWx1ZRIxCgxiYXNlTWFuYUNvc3QYBiABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIRCgliYXR0bGVjcnkYByAB",
            "KAgSFQoNYm9hcmRQb3NpdGlvbhgIIAEoBRIUCgxjYW5ub3RBdHRhY2sYCSAB",
            "KAgSDgoGY2FyZElkGAogASgJEg8KB2NhcmRTZXQYCyABKAkSEAoIY2FyZFNl",
            "dHMYDCADKAkSJwoIY2FyZFR5cGUYDSABKA4yFS5zcGVsbHNvdXJjZS5DYXJk",
            "VHlwZRIOCgZjaGFyZ2UYDiABKAgSLAoHY2hhcmdlcxgPIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQzMlZhbHVlEhEKCWNob29zZU9uZRgQIAEoCBITCgtj",
            "b2xsZWN0aWJsZRgRIAEoCBINCgVjb21ibxgSIAEoCBIUCgxjb25kaXRpb25N",
            "ZXQYEyABKAgSMwoOY291bnRVbnRpbENhc3QYFCABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50MzJWYWx1ZRIUCgxkZWF0aHJhdHRsZXMYFyABKAgSDwoHZGVm",
            "bGVjdBgYIAEoCBITCgtkZXNjcmlwdGlvbhgZIAEoCRIRCglkZXN0cm95ZWQY",
            "GiABKAgSEQoJZGlzY2FyZGVkGBsgASgIEhQKDGRpdmluZVNoaWVsZBgcIAEo",
            "CBIvCgpkdXJhYmlsaXR5GB0gASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMy",
            "VmFsdWUSFwoPZW5jaGFudG1lbnRUeXBlGB4gASgJEg8KB2VucmFnZWQYHyAB",
            "KAgSKwoKZW50aXR5VHlwZRggIAEoDjIXLnNwZWxsc291cmNlLkVudGl0eVR5",
            "cGUSKgoFZmlyZXMYISABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1",
            "ZRIOCgZmcm96ZW4YIiABKAgSEwoLZ2FtZVN0YXJ0ZWQYIyABKAgSDAoEZ29s",
            "ZBgkIAEoCBIRCgloZXJvQ2xhc3MYJSABKAkSDAoEaG9zdBgmIAEoBRIUCgxo",
            "b3N0c1RyaWdnZXIYJyABKAgSJwoCaHAYKCABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuSW50MzJWYWx1ZRIOCgZpbW11bmUYKiABKAgSFgoOaXNTdGFydGluZ1R1",
            "cm4YKyABKAgSLQoIbG9jYXRpb24YLCABKAsyGy5zcGVsbHNvdXJjZS5FbnRp",
            "dHlMb2NhdGlvbhIRCglsaWZlc3RlYWwYLSABKAgSEgoKbG9ja2VkTWFuYRgu",
            "IAEoBRIMCgRtYW5hGC8gASgFEi0KCG1hbmFDb3N0GDAgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDMyVmFsdWUSKgoFbWF4SHAYMSABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50MzJWYWx1ZRIPCgdtYXhNYW5hGDIgASgFEgwKBG5hbWUY",
            "MyABKAkSDAoEbm90ZRg0IAEoCRItCghvdmVybG9hZBg1IAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQzMlZhbHVlEg0KBW93bmVyGDYgASgFEhEKCXBlcm1h",
            "bmVudBg3IAEoCBIQCghwbGF5YWJsZRg4IAEoCBIRCglwb2lzb25vdXMYOSAB",
            "KAgSIwoGcmFyaXR5GDogASgOMhMuc3BlbGxzb3VyY2UuUmFyaXR5Eg8KB3Jv",
            "YXN0ZWQYOyABKAgSDAoEcnVzaBg8IAEoCBIQCghzaWxlbmNlZBg9IAEoCBIw",
            "CgtzcGVsbERhbWFnZRg+IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZh",
            "bHVlEg8KB3N0ZWFsdGgYPyABKAgSGQoRc3VtbW9uaW5nU2lja25lc3MYQCAB",
            "KAgSDQoFdGF1bnQYQSABKAgSJgoIdG9vbHRpcHMYQiADKAsyFC5zcGVsbHNv",
            "dXJjZS5Ub29sdGlwEg0KBXRyaWJlGEMgASgJEhIKCnVuY2Vuc29yZWQYRCAB",
            "KAgSEQoJdW5kZXJBdXJhGEUgASgIEhwKFHVudGFyZ2V0YWJsZUJ5U3BlbGxz",
            "GEYgASgIEhAKCHdpbmRmdXJ5GEcgASgIEjAKC2V4dHJhQXR0YWNrGEggASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUiHgoPRW50aXR5Q2hhbmdl",
            "U2V0EgsKA2lkcxgBIAMoBSJRCg5FbnRpdHlMb2NhdGlvbhINCgVpbmRleBgB",
            "IAEoBRIgCgR6b25lGAIgASgOMhIuc3BlbGxzb3VyY2UuWm9uZXMSDgoGcGxh",
            "eWVyGAMgASgFIuUHCghFbnZlbG9wZRqFAQoLR2FtZU1lc3NhZ2USOgoOY2xp",
            "ZW50VG9TZXJ2ZXIYASABKAsyIi5zcGVsbHNvdXJjZS5DbGllbnRUb1NlcnZl",
            "ck1lc3NhZ2USOgoOc2VydmVyVG9DbGllbnQYAiABKAsyIi5zcGVsbHNvdXJj",
            "ZS5TZXJ2ZXJUb0NsaWVudE1lc3NhZ2Ua1AQKDU1ldGhvZE1lc3NhZ2USSQoK",
            "ZGVsZXRlQ2FyZBgBIAEoCzI1LnNwZWxsc291cmNlLkVudmVsb3BlLk1ldGhv",
            "ZE1lc3NhZ2UuRGVsZXRlQ2FyZE1lc3NhZ2USQwoHZGVxdWV1ZRgCIAEoCzIy",
            "LnNwZWxsc291cmNlLkVudmVsb3BlLk1ldGhvZE1lc3NhZ2UuRGVxdWV1ZU1l",
            "c3NhZ2USOAoHZW5xdWV1ZRgDIAEoCzInLnNwZWxsc291cmNlLk1hdGNobWFr",
            "aW5nUXVldWVQdXRSZXF1ZXN0EhAKCG1ldGhvZElkGAQgASgJEkMKB3B1dENh",
            "cmQYBSABKAsyMi5zcGVsbHNvdXJjZS5FbnZlbG9wZS5NZXRob2RNZXNzYWdl",
            "LlB1dENhcmRNZXNzYWdlEksKC3NlbmRNZXNzYWdlGAYgASgLMjYuc3BlbGxz",
            "b3VyY2UuRW52ZWxvcGUuTWV0aG9kTWVzc2FnZS5TZW5kTWVzc2FnZU1lc3Nh",
            "Z2UaKwoRRGVsZXRlQ2FyZE1lc3NhZ2USFgoOZWRpdGFibGVDYXJkSWQYASAB",
            "KAkaIQoORGVxdWV1ZU1lc3NhZ2USDwoHcXVldWVJZBgBIAEoCRpGCg5QdXRD",
            "YXJkTWVzc2FnZRIMCgRkcmF3GAEgASgIEhYKDmVkaXRhYmxlQ2FyZElkGAIg",
            "ASgJEg4KBnNvdXJjZRgDIAEoCRo9ChJTZW5kTWVzc2FnZU1lc3NhZ2USFgoO",
            "Y29udmVyc2F0aW9uSWQYASABKAkSDwoHbWVzc2FnZRgCIAEoCRprCg5SZW1v",
            "dmVkTWVzc2FnZRIYCg5lZGl0YWJsZUNhcmRJZBgBIAEoCUgAEhIKCGZyaWVu",
            "ZElkGAIgASgJSAASEgoIaW52aXRlSWQYAyABKAlIABIRCgdtYXRjaElkGAQg",
            "ASgJSABCBAoCaWQajAEKDVJlc3VsdE1lc3NhZ2UaUgoOUHV0Q2FyZE1lc3Nh",
            "Z2USDgoGY2FyZElkGAEgASgJEhgKEGNhcmRTY3JpcHRFcnJvcnMYAiADKAkS",
            "FgoOZWRpdGFibGVDYXJkSWQYAyABKAkaJwoSU2VuZE1lc3NhZ2VNZXNzYWdl",
            "EhEKCW1lc3NhZ2VJZBgBIAEoCSIqCgRGb250EiIKBnZlcnRleBgBIAEoCzIS",
            "LnNwZWxsc291cmNlLkNvbG9yIqIBCgZGcmllbmQSEAoIZnJpZW5kSWQYASAB",
            "KAkSEgoKZnJpZW5kTmFtZRgCIAEoCRIrCghwcmVzZW5jZRgDIAEoDjIZLnNw",
            "ZWxsc291cmNlLlByZXNlbmNlRW51bRINCgVzaW5jZRgEIAEoAxI2Cgxub3Rp",
            "ZmljYXRpb24YBSABKAsyIC5zcGVsbHNvdXJjZS5BZGRlZENoYW5nZWRSZW1v",
            "dmVkIicKE0ZyaWVuZERlbGV0ZVJlcXVlc3QSEAoIZnJpZW5kSWQYASABKAki",
            "PwoQRnJpZW5kUHV0UmVxdWVzdBIQCghmcmllbmRJZBgBIAEoCRIZChF1c2Vy",
            "bmFtZVdpdGhUb2tlbhgCIAEoCSI4ChFGcmllbmRQdXRSZXNwb25zZRIjCgZm",
            "cmllbmQYASABKAsyEy5zcGVsbHNvdXJjZS5GcmllbmQiSwoLR2FtZUFjdGlv",
            "bnMSJQoDYWxsGAEgAygLMhguc3BlbGxzb3VyY2UuU3BlbGxBY3Rpb24SFQoN",
            "Y29tcGF0aWJpbGl0eRgCIAMoBSLWCAoJR2FtZUV2ZW50EikKCWNhcmRFdmVu",
            "dBgBIAEoCzIWLnNwZWxsc291cmNlLkNhcmRFdmVudBI0CgZkYW1hZ2UYAiAB",
            "KAsyJC5zcGVsbHNvdXJjZS5HYW1lRXZlbnQuRGFtYWdlTWVzc2FnZRITCgtk",
            "ZXNjcmlwdGlvbhgDIAEoCRI2CgdkZXN0cm95GAQgASgLMiUuc3BlbGxzb3Vy",
            "Y2UuR2FtZUV2ZW50LkRlc3Ryb3lNZXNzYWdlEhUKDWVudGl0eVRvdWNoZWQY",
            "BSABKAUSFwoPZW50aXR5VW50b3VjaGVkGAYgASgFEi0KCWV2ZW50VHlwZRgH",
            "IAEoDjIaLnNwZWxsc291cmNlLkdhbWVFdmVudFR5cGUSCgoCaWQYCCABKAUS",
            "FgoOaXNQb3dlckhpc3RvcnkYCSABKAgSGwoTaXNTb3VyY2VQbGF5ZXJMb2Nh",
            "bBgKIAEoCBIbChNpc1RhcmdldFBsYXllckxvY2FsGAsgASgIEjIKBWpvdXN0",
            "GAwgASgLMiMuc3BlbGxzb3VyY2UuR2FtZUV2ZW50LkpvdXN0TWVzc2FnZRJO",
            "ChNwZXJmb3JtZWRHYW1lQWN0aW9uGA0gASgLMjEuc3BlbGxzb3VyY2UuR2Ft",
            "ZUV2ZW50LlBlcmZvcm1lZEdhbWVBY3Rpb25NZXNzYWdlEiMKBnNvdXJjZRgO",
            "IAEoCzITLnNwZWxsc291cmNlLkVudGl0eRIjCgZ0YXJnZXQYDyABKAsyEy5z",
            "cGVsbHNvdXJjZS5FbnRpdHkSJAoHdGFyZ2V0cxgQIAMoCzITLnNwZWxsc291",
            "cmNlLkVudGl0eRJACgx0cmlnZ2VyRmlyZWQYESABKAsyKi5zcGVsbHNvdXJj",
            "ZS5HYW1lRXZlbnQuVHJpZ2dlckZpcmVkTWVzc2FnZRIqCgV2YWx1ZRgSIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlGkAKDURhbWFnZU1lc3Nh",
            "Z2USLwoKZGFtYWdlVHlwZRgBIAEoDjIbLnNwZWxsc291cmNlLkRhbWFnZVR5",
            "cGVFbnVtGjcKDkRlc3Ryb3lNZXNzYWdlEiUKB29iamVjdHMYASADKAsyFC5z",
            "cGVsbHNvdXJjZS5EZXN0cm95GmwKDEpvdXN0TWVzc2FnZRIpCgxvcHBvbmVu",
            "dENhcmQYASABKAsyEy5zcGVsbHNvdXJjZS5FbnRpdHkSJAoHb3duQ2FyZBgC",
            "IAEoCzITLnNwZWxsc291cmNlLkVudGl0eRILCgN3b24YAyABKAgaSQoaUGVy",
            "Zm9ybWVkR2FtZUFjdGlvbk1lc3NhZ2USKwoKYWN0aW9uVHlwZRgBIAEoDjIX",
            "LnNwZWxsc291cmNlLkFjdGlvblR5cGUaSAoTVHJpZ2dlckZpcmVkTWVzc2Fn",
            "ZRIXCg90cmlnZ2VyU291cmNlSWQYASABKAUSGAoQdHJpZ2dlclRhcmdldElk",
            "cxgCIAMoBSJYCghHYW1lT3ZlchIWCg5sb2NhbFBsYXllcldvbhgBIAEoCBI0",
            "Cg93aW5uaW5nUGxheWVySWQYAiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "MzJWYWx1ZSLOAQoJR2FtZVN0YXRlEiUKCGVudGl0aWVzGAEgAygLMhMuc3Bl",
            "bGxzb3VyY2UuRW50aXR5EhkKEWlzTG9jYWxQbGF5ZXJUdXJuGAIgASgIEiwK",
            "DHBvd2VySGlzdG9yeRgDIAMoCzIWLnNwZWxsc291cmNlLkdhbWVFdmVudBIR",
            "Cgl0aW1lc3RhbXAYBCABKAMSEgoKdHVybk51bWJlchgFIAEoBRIRCgl0dXJu",
            "U3RhdGUYBiABKAkSFwoPaGFzUG93ZXJIaXN0b3J5GAcgASgIIikKEUdldEFj",
            "Y291bnRSZXF1ZXN0EhQKDHRhcmdldFVzZXJJZBgBIAEoCSIlChJHZXRBY2Nv",
            "dW50c1JlcXVlc3QSDwoHdXNlcklkcxgBIAMoCSI9ChNHZXRBY2NvdW50c1Jl",
            "c3BvbnNlEiYKCGFjY291bnRzGAEgAygLMhQuc3BlbGxzb3VyY2UuQWNjb3Vu",
            "dCIrChhHZXRHYW1lUmVjb3JkSWRzUmVzcG9uc2USDwoHZ2FtZUlkcxgBIAMo",
            "CSImChRHZXRHYW1lUmVjb3JkUmVxdWVzdBIOCgZnYW1lSWQYASABKAkilwEK",
            "FUdldEdhbWVSZWNvcmRSZXNwb25zZRITCgtjb21wbGV0ZWRBdBgBIAEoAxIc",
            "ChRjb21wbGV0ZWRBdExvY2FsaXplZBgCIAEoCRIRCglpc0JvdEdhbWUYAyAB",
            "KAgSEwoLcGxheWVyTmFtZXMYBCADKAkSIwoGcmVwbGF5GAUgASgLMhMuc3Bl",
            "bGxzb3VyY2UuUmVwbGF5IiQKEEdldEludml0ZVJlcXVlc3QSEAoIaW52aXRl",
            "SWQYASABKAki0AUKE0ludmVudG9yeUNvbGxlY3Rpb24SCwoDX2lkGAEgASgJ",
            "Ek4KCGRlY2tUeXBlGAIgASgOMjwuc3BlbGxzb3VyY2UuSW52ZW50b3J5Q29s",
            "bGVjdGlvbi5JbnZlbnRvcnlDb2xsZWN0aW9uRGVja1R5cGUSDgoGZm9ybWF0",
            "GAMgASgJEhEKCWhlcm9DbGFzcxgEIAEoCRIqCglpbnZlbnRvcnkYBSADKAsy",
            "Fy5zcGVsbHNvdXJjZS5DYXJkUmVjb3JkEhYKDmlzU3RhbmRhcmREZWNrGAYg",
            "ASgIEgwKBG5hbWUYByABKAkSQAoWcGxheWVyRW50aXR5QXR0cmlidXRlcxgI",
            "IAMoCzIgLnNwZWxsc291cmNlLkF0dHJpYnV0ZVZhbHVlVHVwbGUSRgoEdHlw",
            "ZRgJIAEoDjI4LnNwZWxsc291cmNlLkludmVudG9yeUNvbGxlY3Rpb24uSW52",
            "ZW50b3J5Q29sbGVjdGlvblR5cGUSDgoGdXNlcklkGAogASgJEjcKEHZhbGlk",
            "YXRpb25SZXBvcnQYCyABKAsyHS5zcGVsbHNvdXJjZS5WYWxpZGF0aW9uUmVw",
            "b3J0Eg8KB2NhbkVkaXQYDCABKAgidwobSW52ZW50b3J5Q29sbGVjdGlvbkRl",
            "Y2tUeXBlEigKJElOVkVOVE9SWV9DT0xMRUNUSU9OX0RFQ0tfVFlQRV9EUkFG",
            "VBAAEi4KKklOVkVOVE9SWV9DT0xMRUNUSU9OX0RFQ0tfVFlQRV9DT05TVFJV",
            "Q1RFRBABIokBChdJbnZlbnRvcnlDb2xsZWN0aW9uVHlwZRIiCh5JTlZFTlRP",
            "UllfQ09MTEVDVElPTl9UWVBFX1VTRVIQABImCiJJTlZFTlRPUllfQ09MTEVD",
            "VElPTl9UWVBFX0FMTElBTkNFEAESIgoeSU5WRU5UT1JZX0NPTExFQ1RJT05f",
            "VFlQRV9ERUNLEAIiyQMKBkludml0ZRILCgNfaWQYASABKAkSEQoJZXhwaXJl",
            "c0F0GAIgASgDEhAKCGZyaWVuZElkGAMgASgJEhAKCGZyb21OYW1lGAQgASgJ",
            "EhIKCmZyb21Vc2VySWQYBSABKAkSDwoHbWVzc2FnZRgGIAEoCRIPCgdxdWV1",
            "ZUlkGAcgASgJEjAKBnN0YXR1cxgIIAEoDjIgLnNwZWxsc291cmNlLkludml0",
            "ZS5JbnZpdGVTdGF0dXMSDgoGdG9OYW1lGAkgASgJEhAKCHRvVXNlcklkGAog",
            "ASgJEjYKDG5vdGlmaWNhdGlvbhgLIAEoCzIgLnNwZWxsc291cmNlLkFkZGVk",
            "Q2hhbmdlZFJlbW92ZWQiuAEKDEludml0ZVN0YXR1cxIdChlJTlZJVEVfU1RB",
            "VFVTX1VOREVMSVZFUkVEEAASGQoVSU5WSVRFX1NUQVRVU19QRU5ESU5HEAES",
            "GQoVSU5WSVRFX1NUQVRVU19USU1FT1VUEAISGgoWSU5WSVRFX1NUQVRVU19B",
            "Q0NFUFRFRBADEhoKFklOVklURV9TVEFUVVNfUkVKRUNURUQQBBIbChdJTlZJ",
            "VEVfU1RBVFVTX0NBTkNFTExFRBAFIjkKEUludml0ZUdldFJlc3BvbnNlEiQK",
            "B2ludml0ZXMYASADKAsyEy5zcGVsbHNvdXJjZS5JbnZpdGUihAEKEUludml0",
            "ZVBvc3RSZXF1ZXN0Eg4KBmRlY2tJZBgBIAEoCRIOCgZmcmllbmQYAiABKAgS",
            "DwoHbWVzc2FnZRgDIAEoCRIPCgdxdWV1ZUlkGAQgASgJEhAKCHRvVXNlcklk",
            "GAUgASgJEhsKE3RvVXNlck5hbWVXaXRoVG9rZW4YBiABKAkifQoOSW52aXRl",
            "UmVzcG9uc2USJQoGaW52aXRlGAEgASgLMhMuc3BlbGxzb3VyY2UuSW52aXRl",
            "SAASOQoFbWF0Y2gYAiABKAsyKC5zcGVsbHNvdXJjZS5NYXRjaG1ha2luZ1F1",
            "ZXVlUHV0UmVzcG9uc2VIAEIJCgdyZXN1bHRzIi8KDExvZ2luUmVxdWVzdBIN",
            "CgVlbWFpbBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSJKCg1Mb2dpblJlc3Bv",
            "bnNlEiUKB2FjY291bnQYASABKAsyFC5zcGVsbHNvdXJjZS5BY2NvdW50EhIK",
            "CmxvZ2luVG9rZW4YAiABKAkiJwoFTWF0Y2gSCwoDX2lkGAEgASgJEhEKCWNy",
            "ZWF0ZWRBdBgCIAEoAyIpChNNYXRjaENhbmNlbFJlc3BvbnNlEhIKCmlzQ2Fu",
            "Y2VsZWQYASABKAgiKgoUTWF0Y2hDb25jZWRlUmVzcG9uc2USEgoKaXNDb25j",
            "ZWRlZBgBIAEoCCKjAgoUTWF0Y2htYWtpbmdRdWV1ZUl0ZW0SEwoLZGVzY3Jp",
            "cHRpb24YASABKAkSDAoEbmFtZRgCIAEoCRIPCgdxdWV1ZUlkGAMgASgJEkMK",
            "CHJlcXVpcmVzGAQgASgLMjEuc3BlbGxzb3VyY2UuTWF0Y2htYWtpbmdRdWV1",
            "ZUl0ZW0uUmVxdWlyZXNNZXNzYWdlEg8KB3Rvb2x0aXAYBSABKAkagAEKD1Jl",
            "cXVpcmVzTWVzc2FnZRIMCgRkZWNrGAEgASgIEjUKC2RlY2tDaG9pY2VzGAIg",
            "AygLMiAuc3BlbGxzb3VyY2UuSW52ZW50b3J5Q29sbGVjdGlvbhIVCg1kZWNr",
            "SWRDaG9pY2VzGAMgAygJEhEKCWhlcm9DbGFzcxgEIAEoCCJgChpNYXRjaG1h",
            "a2luZ1F1ZXVlUHV0UmVxdWVzdBIRCglib3REZWNrSWQYASABKAkSDgoGZGVj",
            "a0lkGAIgASgJEg8KB3F1ZXVlSWQYAyABKAkSDgoGY2FuY2VsGAQgASgIIqcB",
            "ChtNYXRjaG1ha2luZ1F1ZXVlUHV0UmVzcG9uc2USNgoFcmV0cnkYASABKAsy",
            "Jy5zcGVsbHNvdXJjZS5NYXRjaG1ha2luZ1F1ZXVlUHV0UmVxdWVzdBJQCg91",
            "bml0eUNvbm5lY3Rpb24YAiABKAsyNy5zcGVsbHNvdXJjZS5NYXRjaG1ha2lu",
            "Z1F1ZXVlUHV0UmVzcG9uc2VVbml0eUNvbm5lY3Rpb24igwEKKk1hdGNobWFr",
            "aW5nUXVldWVQdXRSZXNwb25zZVVuaXR5Q29ubmVjdGlvbhI4CgxmaXJzdE1l",
            "c3NhZ2UYASABKAsyIi5zcGVsbHNvdXJjZS5DbGllbnRUb1NlcnZlck1lc3Nh",
            "Z2USCwoDdXJsGAIgASgJEg4KBmdhbWVJZBgDIAEoCSJOChlNYXRjaG1ha2lu",
            "Z1F1ZXVlc1Jlc3BvbnNlEjEKBnF1ZXVlcxgBIAMoCzIhLnNwZWxsc291cmNl",
            "Lk1hdGNobWFraW5nUXVldWVJdGVtIngKE1BoeXNpY2FsQXR0YWNrRXZlbnQS",
            "JQoIYXR0YWNrZXIYASABKAsyEy5zcGVsbHNvdXJjZS5FbnRpdHkSEwoLZGFt",
            "YWdlRGVhbHQYAiABKAUSJQoIZGVmZW5kZXIYAyABKAsyEy5zcGVsbHNvdXJj",
            "ZS5FbnRpdHkiRAoRUG9zdEludml0ZVJlcXVlc3QSLwoHcmVxdWVzdBgBIAEo",
            "CzIeLnNwZWxsc291cmNlLkludml0ZVBvc3RSZXF1ZXN0Ik8KGFBvc3RQYXNz",
            "d29yZFJlc2V0UmVxdWVzdBIRCglwYXNzd29yZDEYASABKAkSEQoJcGFzc3dv",
            "cmQyGAIgASgJEg0KBXRva2VuGAMgASgJIhcKBlByZWZhYhINCgVuYW1lZBgB",
            "IAEoCSJmCgZSZXBsYXkSKQoGZGVsdGFzGAEgAygLMhkuc3BlbGxzb3VyY2Uu",
            "UmVwbGF5RGVsdGFzEjEKCmdhbWVTdGF0ZXMYAiADKAsyHS5zcGVsbHNvdXJj",
            "ZS5SZXBsYXlHYW1lU3RhdGVzIm0KDFJlcGxheURlbHRhcxIuCghiYWNrd2Fy",
            "ZBgBIAEoCzIcLnNwZWxsc291cmNlLkVudGl0eUNoYW5nZVNldBItCgdmb3J3",
            "YXJkGAIgASgLMhwuc3BlbGxzb3VyY2UuRW50aXR5Q2hhbmdlU2V0ImEKEFJl",
            "cGxheUdhbWVTdGF0ZXMSJQoFZmlyc3QYASABKAsyFi5zcGVsbHNvdXJjZS5H",
            "YW1lU3RhdGUSJgoGc2Vjb25kGAIgASgLMhYuc3BlbGxzb3VyY2UuR2FtZVN0",
            "YXRlIssDChVTZXJ2ZXJUb0NsaWVudE1lc3NhZ2USKQoHYWN0aW9ucxgBIAEo",
            "CzIYLnNwZWxsc291cmNlLkdhbWVBY3Rpb25zEi0KB2NoYW5nZXMYAiABKAsy",
            "HC5zcGVsbHNvdXJjZS5FbnRpdHlDaGFuZ2VTZXQSIQoFZW1vdGUYAyABKAsy",
            "Ei5zcGVsbHNvdXJjZS5FbW90ZRIlCgVldmVudBgEIAEoCzIWLnNwZWxsc291",
            "cmNlLkdhbWVFdmVudBInCghnYW1lT3ZlchgFIAEoCzIVLnNwZWxsc291cmNl",
            "LkdhbWVPdmVyEikKCWdhbWVTdGF0ZRgGIAEoCzIWLnNwZWxsc291cmNlLkdh",
            "bWVTdGF0ZRIKCgJpZBgHIAEoCRIXCg9pc1JlcGxheU1lc3NhZ2UYCCABKAgS",
            "FQoNbG9jYWxQbGF5ZXJJZBgJIAEoBRItCgttZXNzYWdlVHlwZRgKIAEoDjIY",
            "LnNwZWxsc291cmNlLk1lc3NhZ2VUeXBlEioKDXN0YXJ0aW5nQ2FyZHMYCyAD",
            "KAsyEy5zcGVsbHNvdXJjZS5FbnRpdHkSIwoGdGltZXJzGAwgASgLMhMuc3Bl",
            "bGxzb3VyY2UuVGltZXJzIhsKC1NwYW5Db250ZXh0EgwKBGRhdGEYASABKAki",
            "jQIKC1NwZWxsQWN0aW9uEg4KBmFjdGlvbhgBIAEoBRIrCgphY3Rpb25UeXBl",
            "GAIgASgOMhcuc3BlbGxzb3VyY2UuQWN0aW9uVHlwZRIpCgdjaG9pY2VzGAMg",
            "AygLMhguc3BlbGxzb3VyY2UuU3BlbGxBY3Rpb24SEwoLZGVzY3JpcHRpb24Y",
            "BCABKAkSIwoGZW50aXR5GAUgASgLMhMuc3BlbGxzb3VyY2UuRW50aXR5EhAK",
            "CHNvdXJjZUlkGAYgASgFEjkKEnRhcmdldEtleVRvQWN0aW9ucxgHIAMoCzId",
            "LnNwZWxsc291cmNlLlRhcmdldEFjdGlvblBhaXISDwoHcmVxdWVzdBgIIAEo",
            "CSInChRTcGVsbHNvdXJjZUV4Y2VwdGlvbhIPCgdtZXNzYWdlGAEgASgJIscB",
            "CgZTcHJpdGUSDQoFbmFtZWQYASABKAkSLgoFcGl2b3QYAiABKA4yHy5zcGVs",
            "bHNvdXJjZS5TcHJpdGUuU3ByaXRlUGl2b3QifgoLU3ByaXRlUGl2b3QSFwoT",
            "U1BSSVRFX1BJVk9UX0JPVFRPTRAAEiQKIFNQUklURV9QSVZPVF9ESU1FVFJJ",
            "Q18yX1gxX0ZMT09SEAESFwoTU1BSSVRFX1BJVk9UX0NFTlRFUhACEhcKE1NQ",
            "UklURV9QSVZPVF9GTFlJTkcQAyJUChBUYXJnZXRBY3Rpb25QYWlyEg4KBmFj",
            "dGlvbhgBIAEoBRIgChhmcmllbmRseUJhdHRsZWZpZWxkSW5kZXgYAiABKAUS",
            "DgoGdGFyZ2V0GAMgASgFIiEKBlRpbWVycxIXCg9taWxsaXNSZW1haW5pbmcY",
            "ASABKAMiKQoHVG9vbHRpcBIQCghrZXl3b3JkcxgBIAMoCRIMCgR0ZXh0GAIg",
            "ASgJIj4KEFVuZnJpZW5kUmVzcG9uc2USKgoNZGVsZXRlZEZyaWVuZBgBIAEo",
            "CzITLnNwZWxsc291cmNlLkZyaWVuZCIxChBWYWxpZGF0aW9uUmVwb3J0Eg4K",
            "BmVycm9ycxgBIAMoCRINCgV2YWxpZBgCIAEoCCqTAgoKQWN0aW9uVHlwZRIW",
            "ChJBQ1RJT05fVFlQRV9TWVNURU0QABIYChRBQ1RJT05fVFlQRV9FTkRfVFVS",
            "ThABEh8KG0FDVElPTl9UWVBFX1BIWVNJQ0FMX0FUVEFDSxACEhUKEUFDVElP",
            "Tl9UWVBFX1NQRUxMEAMSFgoSQUNUSU9OX1RZUEVfU1VNTU9OEAQSGgoWQUNU",
            "SU9OX1RZUEVfSEVST19QT1dFUhAFEhkKFUFDVElPTl9UWVBFX0JBVFRMRUNS",
            "WRAGEhwKGEFDVElPTl9UWVBFX0VRVUlQX1dFQVBPThAHEhgKFEFDVElPTl9U",
            "WVBFX0RJU0NPVkVSEAgSFAoQQUNUSU9OX1RZUEVfSEVSTxAJKu4BCghDYXJk",
            "VHlwZRISCg5DQVJEX1RZUEVfSEVSTxAAEhQKEENBUkRfVFlQRV9NSU5JT04Q",
            "ARITCg9DQVJEX1RZUEVfU1BFTEwQAhIUChBDQVJEX1RZUEVfV0VBUE9OEAMS",
            "GAoUQ0FSRF9UWVBFX0hFUk9fUE9XRVIQBBITCg9DQVJEX1RZUEVfR1JPVVAQ",
            "BRIYChRDQVJEX1RZUEVfQ0hPT1NFX09ORRAGEhkKFUNBUkRfVFlQRV9FTkNI",
            "QU5UTUVOVBAHEhMKD0NBUkRfVFlQRV9DTEFTUxAIEhQKEENBUkRfVFlQRV9G",
            "T1JNQVQQCSqCAgoORGFtYWdlVHlwZUVudW0SHQoZREFNQUdFX1RZUEVfRU5V",
            "TV9QSFlTSUNBTBAAEhwKGERBTUFHRV9UWVBFX0VOVU1fRkFUSUdVRRABEhwK",
            "GERBTUFHRV9UWVBFX0VOVU1fTUFHSUNBTBACEhoKFkRBTUFHRV9UWVBFX0VO",
            "VU1fREVDQVkQAxIcChhEQU1BR0VfVFlQRV9FTlVNX0RFRkxFQ1QQBBIaChZE",
            "QU1BR0VfVFlQRV9FTlVNX0RSQUlOEAUSIgoeREFNQUdFX1RZUEVfRU5VTV9J",
            "R05PUkVTX0FSTU9SEAYSGwoXREFNQUdFX1RZUEVfRU5VTV9TUExBU0gQByr4",
            "AQoKRW50aXR5VHlwZRITCg9FTlRJVFlfVFlQRV9BTlkQABIVChFFTlRJVFlf",
            "VFlQRV9BQ1RPUhABEhQKEEVOVElUWV9UWVBFX0hFUk8QAhIWChJFTlRJVFlf",
            "VFlQRV9NSU5JT04QAxIWChJFTlRJVFlfVFlQRV9XRUFQT04QBBIUChBFTlRJ",
            "VFlfVFlQRV9DQVJEEAUSFgoSRU5USVRZX1RZUEVfUExBWUVSEAYSGwoXRU5U",
            "SVRZX1RZUEVfRU5DSEFOVE1FTlQQBxIVChFFTlRJVFlfVFlQRV9RVUVTVBAI",
            "EhYKEkVOVElUWV9UWVBFX1NFQ1JFVBAJKogDCgtNZXNzYWdlVHlwZRIeChpN",
            "RVNTQUdFX1RZUEVfVVBEQVRFX0FDVElPThAAEh4KGk1FU1NBR0VfVFlQRV9P",
            "Tl9HQU1FX0VWRU5UEAESHAoYTUVTU0FHRV9UWVBFX09OX0dBTUVfRU5EEAIS",
            "GgoWTUVTU0FHRV9UWVBFX09OX1VQREFURRADEiIKHk1FU1NBR0VfVFlQRV9P",
            "Tl9SRVFVRVNUX0FDVElPThAEEh4KGk1FU1NBR0VfVFlQRV9GSVJTVF9NRVNT",
            "QUdFEAUSHAoYTUVTU0FHRV9UWVBFX09OX01VTExJR0FOEAYSIAocTUVTU0FH",
            "RV9UWVBFX1VQREFURV9NVUxMSUdBThAHEhYKEk1FU1NBR0VfVFlQRV9FTU9U",
            "RRAIEhYKEk1FU1NBR0VfVFlQRV9UT1VDSBAJEhgKFE1FU1NBR0VfVFlQRV9D",
            "T05DRURFEAoSGQoVTUVTU0FHRV9UWVBFX1BJTkdQT05HEAsSFgoSTUVTU0FH",
            "RV9UWVBFX1RJTUVSEAwqJwoWUGxheWVyRW50aXR5QXR0cmlidXRlcxINCglT",
            "SUdOQVRVUkUQACp5CgxQcmVzZW5jZUVudW0SGQoVUFJFU0VOQ0VfRU5VTV9V",
            "TktOT1dOEAASGQoVUFJFU0VOQ0VfRU5VTV9PRkZMSU5FEAESGQoVUFJFU0VO",
            "Q0VfRU5VTV9JTl9HQU1FEAISGAoUUFJFU0VOQ0VfRU5VTV9PTkxJTkUQAyp5",
            "CgZSYXJpdHkSDwoLUkFSSVRZX0ZSRUUQABIRCg1SQVJJVFlfQ09NTU9OEAES",
            "DwoLUkFSSVRZX1JBUkUQAhIPCgtSQVJJVFlfRVBJQxADEhQKEFJBUklUWV9M",
            "RUdFTkRBUlkQBBITCg9SQVJJVFlfQUxMSUFOQ0UQBSrEAgoFWm9uZXMSDgoK",
            "Wk9ORVNfTk9ORRAAEg4KClpPTkVTX0hBTkQQARIOCgpaT05FU19ERUNLEAIS",
            "EwoPWk9ORVNfR1JBVkVZQVJEEAMSFQoRWk9ORVNfQkFUVExFRklFTEQQBBIQ",
            "CgxaT05FU19TRUNSRVQQBRIPCgtaT05FU19RVUVTVBAGEhQKEFpPTkVTX0hF",
            "Uk9fUE9XRVIQBxIOCgpaT05FU19IRVJPEAgSEAoMWk9ORVNfV0VBUE9OEAkS",
            "GAoUWk9ORVNfU0VUX0FTSURFX1pPTkUQChIQCgxaT05FU19ISURERU4QCxIS",
            "Cg5aT05FU19ESVNDT1ZFUhAMEhsKF1pPTkVTX1JFTU9WRURfRlJPTV9QTEFZ",
            "EA0SEAoMWk9ORVNfUExBWUVSEA4SFQoRWk9ORVNfRU5DSEFOVE1FTlQQDyqw",
            "EAoNR2FtZUV2ZW50VHlwZRIXChNHQU1FX0VWRU5UX1RZUEVfQUxMEAASKQol",
            "R0FNRV9FVkVOVF9UWVBFX0FGVEVSX1BIWVNJQ0FMX0FUVEFDSxABEiMKH0dB",
            "TUVfRVZFTlRfVFlQRV9BRlRFUl9QTEFZX0NBUkQQAhImCiJHQU1FX0VWRU5U",
            "X1RZUEVfQUZURVJfU1BFTExfQ0FTVEVEEAMSIAocR0FNRV9FVkVOVF9UWVBF",
            "X0FGVEVSX1NVTU1PThAEEiUKIUdBTUVfRVZFTlRfVFlQRV9BVFRSSUJVVEVf",
            "QVBQTElFRBAFEiAKHEdBTUVfRVZFTlRfVFlQRV9BUk1PUl9HQUlORUQQBhIq",
            "CiZHQU1FX0VWRU5UX1RZUEVfQkVGT1JFX1BIWVNJQ0FMX0FUVEFDSxAHEiEK",
            "HUdBTUVfRVZFTlRfVFlQRV9CRUZPUkVfU1VNTU9OEAgSIQodR0FNRV9FVkVO",
            "VF9UWVBFX0JPQVJEX0NIQU5HRUQQCRImCiJHQU1FX0VWRU5UX1RZUEVfQ0FS",
            "RF9BRERFRF9UT19ERUNLEAoSIQodR0FNRV9FVkVOVF9UWVBFX0NBUkRfU0hV",
            "RkZMRUQQCxIaChZHQU1FX0VWRU5UX1RZUEVfREFNQUdFEAwSGQoVR0FNRV9F",
            "VkVOVF9UWVBFX0RFQ0FZEA0SJAogR0FNRV9FVkVOVF9UWVBFX0RJRF9FTkRf",
            "U0VRVUVOQ0UQDhIbChdHQU1FX0VWRU5UX1RZUEVfRElTQ0FSRBAPEhwKGEdB",
            "TUVfRVZFTlRfVFlQRV9ESVNDT1ZFUhAQEhkKFUdBTUVfRVZFTlRfVFlQRV9E",
            "UkFJThAREh0KGUdBTUVfRVZFTlRfVFlQRV9EUkFXX0NBUkQQEhIiCh5HQU1F",
            "X0VWRU5UX1RZUEVfRU5SQUdFX0NIQU5HRUQQExIiCh5HQU1FX0VWRU5UX1RZ",
            "UEVfRU5USVRZX1RPVUNIRUQQFBIkCiBHQU1FX0VWRU5UX1RZUEVfRU5USVRZ",
            "X1VOVE9VQ0hFRBAVEh8KG0dBTUVfRVZFTlRfVFlQRV9FWENFU1NfSEVBTBAW",
            "EhsKF0dBTUVfRVZFTlRfVFlQRV9GQVRJR1VFEBcSHgoaR0FNRV9FVkVOVF9U",
            "WVBFX0dBTUVfU1RBUlQQGBIYChRHQU1FX0VWRU5UX1RZUEVfSEVBTBAZEiMK",
            "H0dBTUVfRVZFTlRfVFlQRV9IRVJPX1BPV0VSX1VTRUQQGhIbChdHQU1FX0VW",
            "RU5UX1RZUEVfSU5WT0tFRBAbEhkKFUdBTUVfRVZFTlRfVFlQRV9KT1VTVBAc",
            "EhgKFEdBTUVfRVZFTlRfVFlQRV9LSUxMEB0SJgoiR0FNRV9FVkVOVF9UWVBF",
            "X0xPU0VfRElWSU5FX1NISUVMRBAeEiAKHEdBTUVfRVZFTlRfVFlQRV9MT1NF",
            "X0RFRkxFQ1QQHxIgChxHQU1FX0VWRU5UX1RZUEVfTE9TRV9TVEVBTFRIECAS",
            "JAogR0FNRV9FVkVOVF9UWVBFX01BWF9IUF9JTkNSRUFTRUQQIRIcChhHQU1F",
            "X0VWRU5UX1RZUEVfTUFYX01BTkEQIhIhCh1HQU1FX0VWRU5UX1RZUEVfTUFO",
            "QV9NT0RJRklFRBAjEiEKHUdBTUVfRVZFTlRfVFlQRV9NSVNTSUxFX0ZJUkVE",
            "ECQSHAoYR0FNRV9FVkVOVF9UWVBFX09WRVJMT0FEECUSKQolR0FNRV9FVkVO",
            "VF9UWVBFX1BFUkZPUk1FRF9HQU1FX0FDVElPThAmEiMKH0dBTUVfRVZFTlRf",
            "VFlQRV9QSFlTSUNBTF9BVFRBQ0sQJxIdChlHQU1FX0VWRU5UX1RZUEVfUExB",
            "WV9DQVJEECgSHgoaR0FNRV9FVkVOVF9UWVBFX1BSRV9EQU1BR0UQKRIiCh5H",
            "QU1FX0VWRU5UX1RZUEVfUFJFX0dBTUVfU1RBUlQQKhIgChxHQU1FX0VWRU5U",
            "X1RZUEVfUVVFU1RfUExBWUVEECsSJAogR0FNRV9FVkVOVF9UWVBFX1FVRVNU",
            "X1NVQ0NFU1NGVUwQLBIkCiBHQU1FX0VWRU5UX1RZUEVfUkVUVVJORURfVE9f",
            "SEFORBAtEhsKF0dBTUVfRVZFTlRfVFlQRV9ST0FTVEVEEC4SHwobR0FNRV9F",
            "VkVOVF9UWVBFX1JFVkVBTF9DQVJEEC8SIQodR0FNRV9FVkVOVF9UWVBFX1NF",
            "Q1JFVF9QTEFZRUQQMBIjCh9HQU1FX0VWRU5UX1RZUEVfU0VDUkVUX1JFVkVB",
            "TEVEEDESIAocR0FNRV9FVkVOVF9UWVBFX1NQRUxMX0NBU1RFRBAyEhoKFkdB",
            "TUVfRVZFTlRfVFlQRV9TVU1NT04QMxImCiJHQU1FX0VWRU5UX1RZUEVfVEFS",
            "R0VUX0FDUVVJU0lUSU9OEDQSIQodR0FNRV9FVkVOVF9UWVBFX1RSSUdHRVJf",
            "RklSRUQQNRIcChhHQU1FX0VWRU5UX1RZUEVfVFVSTl9FTkQQNhIeChpHQU1F",
            "X0VWRU5UX1RZUEVfVFVSTl9TVEFSVBA3EhsKF0dBTUVfRVZFTlRfVFlQRV9T",
            "SUxFTkNFEDgSJAogR0FNRV9FVkVOVF9UWVBFX1dFQVBPTl9ERVNUUk9ZRUQQ",
            "ORIjCh9HQU1FX0VWRU5UX1RZUEVfV0VBUE9OX0VRVUlQUEVEEDoSJQohR0FN",
            "RV9FVkVOVF9UWVBFX1dJTExfRU5EX1NFUVVFTkNFEDsSJgoiR0FNRV9FVkVO",
            "VF9UWVBFX0RFU1RST1lfV0lMTF9RVUVVRRA8MswCCgtNYXRjaG1ha2luZxJi",
            "CgdFbnF1ZXVlEicuc3BlbGxzb3VyY2UuTWF0Y2htYWtpbmdRdWV1ZVB1dFJl",
            "cXVlc3QaKC5zcGVsbHNvdXJjZS5NYXRjaG1ha2luZ1F1ZXVlUHV0UmVzcG9u",
            "c2UiACgBMAESagoRTWF0Y2htYWtpbmdEZWxldGUSFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkaIC5zcGVsbHNvdXJjZS5NYXRjaENhbmNlbFJlc3BvbnNlIhuC",
            "0+STAhUqEy9hcGkvdjMvbWF0Y2htYWtpbmcSbQoOTWF0Y2htYWtpbmdHZXQS",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaJi5zcGVsbHNvdXJjZS5NYXRjaG1h",
            "a2luZ1F1ZXVlc1Jlc3BvbnNlIhuC0+STAhUSEy9hcGkvdjMvbWF0Y2htYWtp",
            "bmcy5RsKIUhpZGRlblN3aXRjaFNwZWxsc291cmNlQVBJU2VydmljZRJzCgdQ",
            "dXRDYXJkEjIuc3BlbGxzb3VyY2UuRW52ZWxvcGUuTWV0aG9kTWVzc2FnZS5Q",
            "dXRDYXJkTWVzc2FnZRoyLnNwZWxsc291cmNlLkVudmVsb3BlLlJlc3VsdE1l",
            "c3NhZ2UuUHV0Q2FyZE1lc3NhZ2UiABJ/CgtTZW5kTWVzc2FnZRI2LnNwZWxs",
            "c291cmNlLkVudmVsb3BlLk1ldGhvZE1lc3NhZ2UuU2VuZE1lc3NhZ2VNZXNz",
            "YWdlGjYuc3BlbGxzb3VyY2UuRW52ZWxvcGUuUmVzdWx0TWVzc2FnZS5TZW5k",
            "TWVzc2FnZU1lc3NhZ2UiABJrCgpEZWxldGVDYXJkEjUuc3BlbGxzb3VyY2Uu",
            "RW52ZWxvcGUuTWV0aG9kTWVzc2FnZS5EZWxldGVDYXJkTWVzc2FnZRokLnNw",
            "ZWxsc291cmNlLkVudmVsb3BlLlJlbW92ZWRNZXNzYWdlIgASQwoQU3Vic2Ny",
            "aWJlRnJpZW5kcxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoTLnNwZWxsc291",
            "cmNlLkZyaWVuZCIAMAESQwoQU3Vic2NyaWJlSW52aXRlcxIWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eRoTLnNwZWxsc291cmNlLkludml0ZSIAMAESTwoWU3Vi",
            "c2NyaWJlRWRpdGFibGVDYXJkcxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoZ",
            "LnNwZWxsc291cmNlLkVkaXRhYmxlQ2FyZCIAMAESQAoOU3Vic2NyaWJlTWF0",
            "Y2gSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaEi5zcGVsbHNvdXJjZS5NYXRj",
            "aCIAMAESXQoNU3Vic2NyaWJlR2FtZRIiLnNwZWxsc291cmNlLkNsaWVudFRv",
            "U2VydmVyTWVzc2FnZRoiLnNwZWxsc291cmNlLlNlcnZlclRvQ2xpZW50TWVz",
            "c2FnZSIAKAEwARKAAQoMQWNjZXB0SW52aXRlEiAuc3BlbGxzb3VyY2UuQWNj",
            "ZXB0SW52aXRlUmVxdWVzdBohLnNwZWxsc291cmNlLkFjY2VwdEludml0ZVJl",
            "c3BvbnNlIiuC0+STAiUiGi9hcGkvdjMvaW52aXRlcy97aW52aXRlSWR9Ogdy",
            "ZXF1ZXN0EoUBCg5DaGFuZ2VQYXNzd29yZBIiLnNwZWxsc291cmNlLkNoYW5n",
            "ZVBhc3N3b3JkUmVxdWVzdBojLnNwZWxsc291cmNlLkNoYW5nZVBhc3N3b3Jk",
            "UmVzcG9uc2UiKoLT5JMCJCIZL2FwaS92My9hY2NvdW50cy1wYXNzd29yZDoH",
            "cmVxdWVzdBJ5Cg1DcmVhdGVBY2NvdW50EiEuc3BlbGxzb3VyY2UuQ3JlYXRl",
            "QWNjb3VudFJlcXVlc3QaIi5zcGVsbHNvdXJjZS5DcmVhdGVBY2NvdW50UmVz",
            "cG9uc2UiIYLT5JMCGxoQL2FwaS92My9hY2NvdW50czoHcmVxdWVzdBJmCgtE",
            "ZWNrc0RlbGV0ZRIfLnNwZWxsc291cmNlLkRlY2tzRGVsZXRlUmVxdWVzdBoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIegtPkkwIYKhYvYXBpL3YzL2RlY2tz",
            "L3tkZWNrSWR9EmcKCERlY2tzR2V0Ehwuc3BlbGxzb3VyY2UuRGVja3NHZXRS",
            "ZXF1ZXN0Gh0uc3BlbGxzb3VyY2UuRGVja3NHZXRSZXNwb25zZSIegtPkkwIY",
            "EhYvYXBpL3YzL2RlY2tzL3tkZWNrSWR9El4KC0RlY2tzR2V0QWxsEhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5GiAuc3BlbGxzb3VyY2UuRGVja3NHZXRBbGxS",
            "ZXNwb25zZSIVgtPkkwIPEg0vYXBpL3YzL2RlY2tzEmcKCERlY2tzUHV0Ehwu",
            "c3BlbGxzb3VyY2UuRGVja3NQdXRSZXF1ZXN0Gh0uc3BlbGxzb3VyY2UuRGVj",
            "a3NQdXRSZXNwb25zZSIegtPkkwIYGg0vYXBpL3YzL2RlY2tzOgdyZXF1ZXN0",
            "EnwKC0RlY2tzVXBkYXRlEh8uc3BlbGxzb3VyY2UuRGVja3NVcGRhdGVSZXF1",
            "ZXN0Gh0uc3BlbGxzb3VyY2UuRGVja3NHZXRSZXNwb25zZSItgtPkkwInIhYv",
            "YXBpL3YzL2RlY2tzL3tkZWNrSWR9Og11cGRhdGVDb21tYW5kEk4KDUR1cGxp",
            "Y2F0ZURlY2sSHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUaHS5zcGVs",
            "bHNvdXJjZS5EZWNrc0dldFJlc3BvbnNlIgAScQoMRGVsZXRlSW52aXRlEiAu",
            "c3BlbGxzb3VyY2UuRGVsZXRlSW52aXRlUmVxdWVzdBobLnNwZWxsc291cmNl",
            "Lkludml0ZVJlc3BvbnNlIiKC0+STAhwqGi9hcGkvdjMvaW52aXRlcy97aW52",
            "aXRlSWR9EngKEERyYWZ0c0Nob29zZUNhcmQSJC5zcGVsbHNvdXJjZS5EcmFm",
            "dHNDaG9vc2VDYXJkUmVxdWVzdBoXLnNwZWxsc291cmNlLkRyYWZ0U3RhdGUi",
            "JYLT5JMCHxoUL2FwaS92My9kcmFmdHMvY2FyZHM6B3JlcXVlc3QSdwoQRHJh",
            "ZnRzQ2hvb3NlSGVybxIkLnNwZWxsc291cmNlLkRyYWZ0c0Nob29zZUhlcm9S",
            "ZXF1ZXN0Ghcuc3BlbGxzb3VyY2UuRHJhZnRTdGF0ZSIkgtPkkwIeGhMvYXBp",
            "L3YzL2RyYWZ0cy9oZXJvOgdyZXF1ZXN0ElQKCURyYWZ0c0dldBIWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eRoXLnNwZWxsc291cmNlLkRyYWZ0U3RhdGUiFoLT",
            "5JMCEBIOL2FwaS92My9kcmFmdHMSZgoKRHJhZnRzUG9zdBIeLnNwZWxsc291",
            "cmNlLkRyYWZ0c1Bvc3RSZXF1ZXN0Ghcuc3BlbGxzb3VyY2UuRHJhZnRTdGF0",
            "ZSIfgtPkkwIZIg4vYXBpL3YzL2RyYWZ0czoHcmVxdWVzdBJzCgxGcmllbmRE",
            "ZWxldGUSIC5zcGVsbHNvdXJjZS5GcmllbmREZWxldGVSZXF1ZXN0Gh0uc3Bl",
            "bGxzb3VyY2UuVW5mcmllbmRSZXNwb25zZSIigtPkkwIcKhovYXBpL3YzL2Zy",
            "aWVuZHMve2ZyaWVuZElkfRJsCglGcmllbmRQdXQSHS5zcGVsbHNvdXJjZS5G",
            "cmllbmRQdXRSZXF1ZXN0Gh4uc3BlbGxzb3VyY2UuRnJpZW5kUHV0UmVzcG9u",
            "c2UiIILT5JMCGhoPL2FwaS92My9mcmllbmRzOgdyZXF1ZXN0EncKCkdldEFj",
            "Y291bnQSHi5zcGVsbHNvdXJjZS5HZXRBY2NvdW50UmVxdWVzdBogLnNwZWxs",
            "c291cmNlLkdldEFjY291bnRzUmVzcG9uc2UiJ4LT5JMCIRIfL2FwaS92My9h",
            "Y2NvdW50cy97dGFyZ2V0VXNlcklkfRJzCgtHZXRBY2NvdW50cxIfLnNwZWxs",
            "c291cmNlLkdldEFjY291bnRzUmVxdWVzdBogLnNwZWxsc291cmNlLkdldEFj",
            "Y291bnRzUmVzcG9uc2UiIYLT5JMCGxIQL2FwaS92My9hY2NvdW50czoHcmVx",
            "dWVzdBJ2Cg1HZXRHYW1lUmVjb3JkEiEuc3BlbGxzb3VyY2UuR2V0R2FtZVJl",
            "Y29yZFJlcXVlc3QaIi5zcGVsbHNvdXJjZS5HZXRHYW1lUmVjb3JkUmVzcG9u",
            "c2UiHoLT5JMCGBIWL2FwaS92My9nYW1lcy97Z2FtZUlkfRJoChBHZXRHYW1l",
            "UmVjb3JkSWRzEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GiUuc3BlbGxzb3Vy",
            "Y2UuR2V0R2FtZVJlY29yZElkc1Jlc3BvbnNlIhWC0+STAg8SDS9hcGkvdjMv",
            "Z2FtZXMSawoJR2V0SW52aXRlEh0uc3BlbGxzb3VyY2UuR2V0SW52aXRlUmVx",
            "dWVzdBobLnNwZWxsc291cmNlLkludml0ZVJlc3BvbnNlIiKC0+STAhwSGi9h",
            "cGkvdjMvaW52aXRlcy97aW52aXRlSWR9El0KCkdldEludml0ZXMSFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkaHi5zcGVsbHNvdXJjZS5JbnZpdGVHZXRSZXNw",
            "b25zZSIXgtPkkwIREg8vYXBpL3YzL2ludml0ZXMSYQoFTG9naW4SGS5zcGVs",
            "bHNvdXJjZS5Mb2dpblJlcXVlc3QaGi5zcGVsbHNvdXJjZS5Mb2dpblJlc3Bv",
            "bnNlIiGC0+STAhsiEC9hcGkvdjMvYWNjb3VudHM6B3JlcXVlc3QSbQoKUG9z",
            "dEludml0ZRIeLnNwZWxsc291cmNlLlBvc3RJbnZpdGVSZXF1ZXN0Ghsuc3Bl",
            "bGxzb3VyY2UuSW52aXRlUmVzcG9uc2UiIILT5JMCGiIPL2FwaS92My9pbnZp",
            "dGVzOgdyZXF1ZXN0MAESfgoRUG9zdFBhc3N3b3JkUmVzZXQSJS5zcGVsbHNv",
            "dXJjZS5Qb3N0UGFzc3dvcmRSZXNldFJlcXVlc3QaFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkiKoLT5JMCJCIiL2FwaS92My9yZXNldC9wYXNzd29yZHMvd2l0",
            "aC10b2tlbkI/CiBjb20uaGlkZGVuc3dpdGNoLnNwZWxsc291cmNlLnJwY0IF",
            "UHJvdG9QAaoCEVNwZWxsc291cmNlLlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Spellsource.ReactiveReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Spellsource.Proto.ActionType), typeof(global::Spellsource.Proto.CardType), typeof(global::Spellsource.Proto.DamageTypeEnum), typeof(global::Spellsource.Proto.EntityType), typeof(global::Spellsource.Proto.MessageType), typeof(global::Spellsource.Proto.PlayerEntityAttributes), typeof(global::Spellsource.Proto.PresenceEnum), typeof(global::Spellsource.Proto.Rarity), typeof(global::Spellsource.Proto.Zones), typeof(global::Spellsource.Proto.GameEventType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.AcceptInviteRequest), global::Spellsource.Proto.AcceptInviteRequest.Parser, new[]{ "InviteId", "AwaitGameStart", "Match" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.AcceptInviteResponse), global::Spellsource.Proto.AcceptInviteResponse.Parser, new[]{ "Friend", "Invite", "Match" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Account), global::Spellsource.Proto.Account.Parser, new[]{ "Id", "Decks", "Email", "Friends", "InMatch", "Name", "PersonalCollection", "PrivacyToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Art), global::Spellsource.Proto.Art.Parser, new[]{ "Body", "Highlight", "Loop", "Missile", "OnCast", "OnHit", "Primary", "Secondary", "Shadow", "Spell", "Sprite", "SpriteShadow" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.AttributeValueTuple), global::Spellsource.Proto.AttributeValueTuple.Parser, new[]{ "Attribute", "StringValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.CardEvent), global::Spellsource.Proto.CardEvent.Parser, new[]{ "Card", "ShowLocal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.CardRecord), global::Spellsource.Proto.CardRecord.Parser, new[]{ "Id", "AllianceId", "BorrowedByUserId", "CollectionIds", "DonorUserId", "Entity", "UserId", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ChangePasswordRequest), global::Spellsource.Proto.ChangePasswordRequest.Parser, new[]{ "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ChangePasswordResponse), global::Spellsource.Proto.ChangePasswordResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ChatMessage), global::Spellsource.Proto.ChatMessage.Parser, new[]{ "ConversationId", "DateLabel", "Message", "MessageId", "SenderName", "SenderUserId", "Timestamp", "Notification" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ClientToServerMessage), global::Spellsource.Proto.ClientToServerMessage.Parser, new[]{ "ActionIndex", "DiscardedCardIndices", "Emote", "EntityTouch", "EntityUntouch", "FirstMessage", "MessageType", "RepliesTo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ClientToServerMessage.Types.FirstMessageMessage), global::Spellsource.Proto.ClientToServerMessage.Types.FirstMessageMessage.Parser, new[]{ "PlayerKey", "PlayerSecret" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Color), global::Spellsource.Proto.Color.Parser, new[]{ "A", "B", "G", "R" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.CreateAccountRequest), global::Spellsource.Proto.CreateAccountRequest.Parser, new[]{ "Email", "Name", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.CreateAccountResponse), global::Spellsource.Proto.CreateAccountResponse.Parser, new[]{ "Account", "LoginToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksDeleteRequest), global::Spellsource.Proto.DecksDeleteRequest.Parser, new[]{ "DeckId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksGetAllResponse), global::Spellsource.Proto.DecksGetAllResponse.Parser, new[]{ "Decks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksGetRequest), global::Spellsource.Proto.DecksGetRequest.Parser, new[]{ "DeckId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksGetResponse), global::Spellsource.Proto.DecksGetResponse.Parser, new[]{ "Collection", "InventoryIdsSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksPutRequest), global::Spellsource.Proto.DecksPutRequest.Parser, new[]{ "DeckList", "Format", "HeroClass", "InventoryIds", "Name", "CardIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksPutResponse), global::Spellsource.Proto.DecksPutResponse.Parser, new[]{ "Collection", "DeckId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksUpdateCommand), global::Spellsource.Proto.DecksUpdateCommand.Parser, new[]{ "PullAllCardIds", "PullAllInventoryIds", "PushCardIds", "PushInventoryIds", "SetHeroClass", "SetInventoryIds", "SetName", "SetPlayerEntityAttribute", "UnsetPlayerEntityAttribute" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksUpdateCommand.Types.PushCardIdsMessage), global::Spellsource.Proto.DecksUpdateCommand.Types.PushCardIdsMessage.Parser, new[]{ "Each" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksUpdateCommand.Types.PushInventoryIdsMessage), global::Spellsource.Proto.DecksUpdateCommand.Types.PushInventoryIdsMessage.Parser, new[]{ "Each" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksUpdateCommand.Types.SetPlayerEntityAttributeMessage), global::Spellsource.Proto.DecksUpdateCommand.Types.SetPlayerEntityAttributeMessage.Parser, new[]{ "Attribute", "StringValue" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DecksUpdateRequest), global::Spellsource.Proto.DecksUpdateRequest.Parser, new[]{ "DeckId", "UpdateCommand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DefaultMethodResponse), global::Spellsource.Proto.DefaultMethodResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DeleteInviteRequest), global::Spellsource.Proto.DeleteInviteRequest.Parser, new[]{ "InviteId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Destroy), global::Spellsource.Proto.Destroy.Parser, new[]{ "Aftermaths", "Source", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DraftState), global::Spellsource.Proto.DraftState.Parser, new[]{ "CardsRemaining", "CurrentCardChoices", "DeckId", "DraftIndex", "HeroClass", "HeroClassChoices", "Losses", "SelectedCardIds", "Status", "Wins" }, null, new[]{ typeof(global::Spellsource.Proto.DraftState.Types.DraftStateStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DraftsChooseCardRequest), global::Spellsource.Proto.DraftsChooseCardRequest.Parser, new[]{ "CardIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DraftsChooseHeroRequest), global::Spellsource.Proto.DraftsChooseHeroRequest.Parser, new[]{ "HeroIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.DraftsPostRequest), global::Spellsource.Proto.DraftsPostRequest.Parser, new[]{ "RetireEarly", "StartDraft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.EditableCard), global::Spellsource.Proto.EditableCard.Parser, new[]{ "Id", "OwnerUserId", "Source", "Notification" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Emote), global::Spellsource.Proto.Emote.Parser, new[]{ "EntityId", "Message" }, null, new[]{ typeof(global::Spellsource.Proto.Emote.Types.EmoteMessage) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Entity), global::Spellsource.Proto.Entity.Parser, new[]{ "Id", "Armor", "Art", "Attack", "BaseAttack", "BaseHp", "BaseManaCost", "Battlecry", "BoardPosition", "CannotAttack", "CardId", "CardSet", "CardSets", "CardType", "Charge", "Charges", "ChooseOne", "Collectible", "Combo", "ConditionMet", "CountUntilCast", "Deathrattles", "Deflect", "Description", "Destroyed", "Discarded", "DivineShield", "Durability", "EnchantmentType", "Enraged", "EntityType", "Fires", "Frozen", "GameStarted", "Gold", "HeroClass", "Host", "HostsTrigger", "Hp", "Immune", "IsStartingTurn", "Location", "Lifesteal", "LockedMana", "Mana", "ManaCost", "MaxHp", "MaxMana", "Name", "Note", "Overload", "Owner", "Permanent", "Playable", "Poisonous", "Rarity", "Roasted", "Rush", "Silenced", "SpellDamage", "Stealth", "SummoningSickness", "Taunt", "Tooltips", "Tribe", "Uncensored", "UnderAura", "UntargetableBySpells", "Windfury", "ExtraAttack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.EntityChangeSet), global::Spellsource.Proto.EntityChangeSet.Parser, new[]{ "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.EntityLocation), global::Spellsource.Proto.EntityLocation.Parser, new[]{ "Index", "Zone", "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope), global::Spellsource.Proto.Envelope.Parser, null, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.GameMessage), global::Spellsource.Proto.Envelope.Types.GameMessage.Parser, new[]{ "ClientToServer", "ServerToClient" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.MethodMessage), global::Spellsource.Proto.Envelope.Types.MethodMessage.Parser, new[]{ "DeleteCard", "Dequeue", "Enqueue", "MethodId", "PutCard", "SendMessage" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage), global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage.Parser, new[]{ "EditableCardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DequeueMessage), global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DequeueMessage.Parser, new[]{ "QueueId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage), global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage.Parser, new[]{ "Draw", "EditableCardId", "Source" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage), global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage.Parser, new[]{ "ConversationId", "Message" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.RemovedMessage), global::Spellsource.Proto.Envelope.Types.RemovedMessage.Parser, new[]{ "EditableCardId", "FriendId", "InviteId", "MatchId" }, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.ResultMessage), global::Spellsource.Proto.Envelope.Types.ResultMessage.Parser, null, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage), global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.PutCardMessage.Parser, new[]{ "CardId", "CardScriptErrors", "EditableCardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage), global::Spellsource.Proto.Envelope.Types.ResultMessage.Types.SendMessageMessage.Parser, new[]{ "MessageId" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Font), global::Spellsource.Proto.Font.Parser, new[]{ "Vertex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Friend), global::Spellsource.Proto.Friend.Parser, new[]{ "FriendId", "FriendName", "Presence", "Since", "Notification" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.FriendDeleteRequest), global::Spellsource.Proto.FriendDeleteRequest.Parser, new[]{ "FriendId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.FriendPutRequest), global::Spellsource.Proto.FriendPutRequest.Parser, new[]{ "FriendId", "UsernameWithToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.FriendPutResponse), global::Spellsource.Proto.FriendPutResponse.Parser, new[]{ "Friend" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameActions), global::Spellsource.Proto.GameActions.Parser, new[]{ "All", "Compatibility" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameEvent), global::Spellsource.Proto.GameEvent.Parser, new[]{ "CardEvent", "Damage", "Description", "Destroy", "EntityTouched", "EntityUntouched", "EventType", "Id", "IsPowerHistory", "IsSourcePlayerLocal", "IsTargetPlayerLocal", "Joust", "PerformedGameAction", "Source", "Target", "Targets", "TriggerFired", "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameEvent.Types.DamageMessage), global::Spellsource.Proto.GameEvent.Types.DamageMessage.Parser, new[]{ "DamageType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameEvent.Types.DestroyMessage), global::Spellsource.Proto.GameEvent.Types.DestroyMessage.Parser, new[]{ "Objects" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameEvent.Types.JoustMessage), global::Spellsource.Proto.GameEvent.Types.JoustMessage.Parser, new[]{ "OpponentCard", "OwnCard", "Won" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameEvent.Types.PerformedGameActionMessage), global::Spellsource.Proto.GameEvent.Types.PerformedGameActionMessage.Parser, new[]{ "ActionType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameEvent.Types.TriggerFiredMessage), global::Spellsource.Proto.GameEvent.Types.TriggerFiredMessage.Parser, new[]{ "TriggerSourceId", "TriggerTargetIds" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameOver), global::Spellsource.Proto.GameOver.Parser, new[]{ "LocalPlayerWon", "WinningPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GameState), global::Spellsource.Proto.GameState.Parser, new[]{ "Entities", "IsLocalPlayerTurn", "PowerHistory", "Timestamp", "TurnNumber", "TurnState", "HasPowerHistory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GetAccountRequest), global::Spellsource.Proto.GetAccountRequest.Parser, new[]{ "TargetUserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GetAccountsRequest), global::Spellsource.Proto.GetAccountsRequest.Parser, new[]{ "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GetAccountsResponse), global::Spellsource.Proto.GetAccountsResponse.Parser, new[]{ "Accounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GetGameRecordIdsResponse), global::Spellsource.Proto.GetGameRecordIdsResponse.Parser, new[]{ "GameIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GetGameRecordRequest), global::Spellsource.Proto.GetGameRecordRequest.Parser, new[]{ "GameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GetGameRecordResponse), global::Spellsource.Proto.GetGameRecordResponse.Parser, new[]{ "CompletedAt", "CompletedAtLocalized", "IsBotGame", "PlayerNames", "Replay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.GetInviteRequest), global::Spellsource.Proto.GetInviteRequest.Parser, new[]{ "InviteId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.InventoryCollection), global::Spellsource.Proto.InventoryCollection.Parser, new[]{ "Id", "DeckType", "Format", "HeroClass", "Inventory", "IsStandardDeck", "Name", "PlayerEntityAttributes", "Type", "UserId", "ValidationReport", "CanEdit" }, null, new[]{ typeof(global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType), typeof(global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Invite), global::Spellsource.Proto.Invite.Parser, new[]{ "Id", "ExpiresAt", "FriendId", "FromName", "FromUserId", "Message", "QueueId", "Status", "ToName", "ToUserId", "Notification" }, null, new[]{ typeof(global::Spellsource.Proto.Invite.Types.InviteStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.InviteGetResponse), global::Spellsource.Proto.InviteGetResponse.Parser, new[]{ "Invites" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.InvitePostRequest), global::Spellsource.Proto.InvitePostRequest.Parser, new[]{ "DeckId", "Friend", "Message", "QueueId", "ToUserId", "ToUserNameWithToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.InviteResponse), global::Spellsource.Proto.InviteResponse.Parser, new[]{ "Invite", "Match" }, new[]{ "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.LoginRequest), global::Spellsource.Proto.LoginRequest.Parser, new[]{ "Email", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.LoginResponse), global::Spellsource.Proto.LoginResponse.Parser, new[]{ "Account", "LoginToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Match), global::Spellsource.Proto.Match.Parser, new[]{ "Id", "CreatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.MatchCancelResponse), global::Spellsource.Proto.MatchCancelResponse.Parser, new[]{ "IsCanceled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.MatchConcedeResponse), global::Spellsource.Proto.MatchConcedeResponse.Parser, new[]{ "IsConceded" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.MatchmakingQueueItem), global::Spellsource.Proto.MatchmakingQueueItem.Parser, new[]{ "Description", "Name", "QueueId", "Requires", "Tooltip" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.MatchmakingQueueItem.Types.RequiresMessage), global::Spellsource.Proto.MatchmakingQueueItem.Types.RequiresMessage.Parser, new[]{ "Deck", "DeckChoices", "DeckIdChoices", "HeroClass" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.MatchmakingQueuePutRequest), global::Spellsource.Proto.MatchmakingQueuePutRequest.Parser, new[]{ "BotDeckId", "DeckId", "QueueId", "Cancel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.MatchmakingQueuePutResponse), global::Spellsource.Proto.MatchmakingQueuePutResponse.Parser, new[]{ "Retry", "UnityConnection" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.MatchmakingQueuePutResponseUnityConnection), global::Spellsource.Proto.MatchmakingQueuePutResponseUnityConnection.Parser, new[]{ "FirstMessage", "Url", "GameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.MatchmakingQueuesResponse), global::Spellsource.Proto.MatchmakingQueuesResponse.Parser, new[]{ "Queues" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.PhysicalAttackEvent), global::Spellsource.Proto.PhysicalAttackEvent.Parser, new[]{ "Attacker", "DamageDealt", "Defender" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.PostInviteRequest), global::Spellsource.Proto.PostInviteRequest.Parser, new[]{ "Request" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.PostPasswordResetRequest), global::Spellsource.Proto.PostPasswordResetRequest.Parser, new[]{ "Password1", "Password2", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Prefab), global::Spellsource.Proto.Prefab.Parser, new[]{ "Named" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Replay), global::Spellsource.Proto.Replay.Parser, new[]{ "Deltas", "GameStates" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ReplayDeltas), global::Spellsource.Proto.ReplayDeltas.Parser, new[]{ "Backward", "Forward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ReplayGameStates), global::Spellsource.Proto.ReplayGameStates.Parser, new[]{ "First", "Second" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ServerToClientMessage), global::Spellsource.Proto.ServerToClientMessage.Parser, new[]{ "Actions", "Changes", "Emote", "Event", "GameOver", "GameState", "Id", "IsReplayMessage", "LocalPlayerId", "MessageType", "StartingCards", "Timers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.SpanContext), global::Spellsource.Proto.SpanContext.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.SpellAction), global::Spellsource.Proto.SpellAction.Parser, new[]{ "Action", "ActionType", "Choices", "Description", "Entity", "SourceId", "TargetKeyToActions", "Request" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.SpellsourceException), global::Spellsource.Proto.SpellsourceException.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Sprite), global::Spellsource.Proto.Sprite.Parser, new[]{ "Named", "Pivot" }, null, new[]{ typeof(global::Spellsource.Proto.Sprite.Types.SpritePivot) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.TargetActionPair), global::Spellsource.Proto.TargetActionPair.Parser, new[]{ "Action", "FriendlyBattlefieldIndex", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Timers), global::Spellsource.Proto.Timers.Parser, new[]{ "MillisRemaining" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.Tooltip), global::Spellsource.Proto.Tooltip.Parser, new[]{ "Keywords", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.UnfriendResponse), global::Spellsource.Proto.UnfriendResponse.Parser, new[]{ "DeletedFriend" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spellsource.Proto.ValidationReport), global::Spellsource.Proto.ValidationReport.Parser, new[]{ "Errors", "Valid" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ActionType {
    [pbr::OriginalName("ACTION_TYPE_SYSTEM")] System = 0,
    [pbr::OriginalName("ACTION_TYPE_END_TURN")] EndTurn = 1,
    [pbr::OriginalName("ACTION_TYPE_PHYSICAL_ATTACK")] PhysicalAttack = 2,
    [pbr::OriginalName("ACTION_TYPE_SPELL")] Spell = 3,
    [pbr::OriginalName("ACTION_TYPE_SUMMON")] Summon = 4,
    [pbr::OriginalName("ACTION_TYPE_HERO_POWER")] HeroPower = 5,
    [pbr::OriginalName("ACTION_TYPE_BATTLECRY")] Battlecry = 6,
    [pbr::OriginalName("ACTION_TYPE_EQUIP_WEAPON")] EquipWeapon = 7,
    [pbr::OriginalName("ACTION_TYPE_DISCOVER")] Discover = 8,
    [pbr::OriginalName("ACTION_TYPE_HERO")] Hero = 9,
  }

  public enum CardType {
    [pbr::OriginalName("CARD_TYPE_HERO")] Hero = 0,
    [pbr::OriginalName("CARD_TYPE_MINION")] Minion = 1,
    [pbr::OriginalName("CARD_TYPE_SPELL")] Spell = 2,
    [pbr::OriginalName("CARD_TYPE_WEAPON")] Weapon = 3,
    [pbr::OriginalName("CARD_TYPE_HERO_POWER")] HeroPower = 4,
    [pbr::OriginalName("CARD_TYPE_GROUP")] Group = 5,
    [pbr::OriginalName("CARD_TYPE_CHOOSE_ONE")] ChooseOne = 6,
    [pbr::OriginalName("CARD_TYPE_ENCHANTMENT")] Enchantment = 7,
    [pbr::OriginalName("CARD_TYPE_CLASS")] Class = 8,
    [pbr::OriginalName("CARD_TYPE_FORMAT")] Format = 9,
  }

  public enum DamageTypeEnum {
    [pbr::OriginalName("DAMAGE_TYPE_ENUM_PHYSICAL")] Physical = 0,
    [pbr::OriginalName("DAMAGE_TYPE_ENUM_FATIGUE")] Fatigue = 1,
    [pbr::OriginalName("DAMAGE_TYPE_ENUM_MAGICAL")] Magical = 2,
    [pbr::OriginalName("DAMAGE_TYPE_ENUM_DECAY")] Decay = 3,
    [pbr::OriginalName("DAMAGE_TYPE_ENUM_DEFLECT")] Deflect = 4,
    [pbr::OriginalName("DAMAGE_TYPE_ENUM_DRAIN")] Drain = 5,
    [pbr::OriginalName("DAMAGE_TYPE_ENUM_IGNORES_ARMOR")] IgnoresArmor = 6,
    [pbr::OriginalName("DAMAGE_TYPE_ENUM_SPLASH")] Splash = 7,
  }

  public enum EntityType {
    [pbr::OriginalName("ENTITY_TYPE_ANY")] Any = 0,
    [pbr::OriginalName("ENTITY_TYPE_ACTOR")] Actor = 1,
    [pbr::OriginalName("ENTITY_TYPE_HERO")] Hero = 2,
    [pbr::OriginalName("ENTITY_TYPE_MINION")] Minion = 3,
    [pbr::OriginalName("ENTITY_TYPE_WEAPON")] Weapon = 4,
    [pbr::OriginalName("ENTITY_TYPE_CARD")] Card = 5,
    [pbr::OriginalName("ENTITY_TYPE_PLAYER")] Player = 6,
    [pbr::OriginalName("ENTITY_TYPE_ENCHANTMENT")] Enchantment = 7,
    [pbr::OriginalName("ENTITY_TYPE_QUEST")] Quest = 8,
    [pbr::OriginalName("ENTITY_TYPE_SECRET")] Secret = 9,
  }

  public enum MessageType {
    [pbr::OriginalName("MESSAGE_TYPE_UPDATE_ACTION")] UpdateAction = 0,
    [pbr::OriginalName("MESSAGE_TYPE_ON_GAME_EVENT")] OnGameEvent = 1,
    [pbr::OriginalName("MESSAGE_TYPE_ON_GAME_END")] OnGameEnd = 2,
    [pbr::OriginalName("MESSAGE_TYPE_ON_UPDATE")] OnUpdate = 3,
    [pbr::OriginalName("MESSAGE_TYPE_ON_REQUEST_ACTION")] OnRequestAction = 4,
    [pbr::OriginalName("MESSAGE_TYPE_FIRST_MESSAGE")] FirstMessage = 5,
    [pbr::OriginalName("MESSAGE_TYPE_ON_MULLIGAN")] OnMulligan = 6,
    [pbr::OriginalName("MESSAGE_TYPE_UPDATE_MULLIGAN")] UpdateMulligan = 7,
    [pbr::OriginalName("MESSAGE_TYPE_EMOTE")] Emote = 8,
    [pbr::OriginalName("MESSAGE_TYPE_TOUCH")] Touch = 9,
    [pbr::OriginalName("MESSAGE_TYPE_CONCEDE")] Concede = 10,
    [pbr::OriginalName("MESSAGE_TYPE_PINGPONG")] Pingpong = 11,
    [pbr::OriginalName("MESSAGE_TYPE_TIMER")] Timer = 12,
  }

  public enum PlayerEntityAttributes {
    [pbr::OriginalName("SIGNATURE")] Signature = 0,
  }

  public enum PresenceEnum {
    [pbr::OriginalName("PRESENCE_ENUM_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("PRESENCE_ENUM_OFFLINE")] Offline = 1,
    [pbr::OriginalName("PRESENCE_ENUM_IN_GAME")] InGame = 2,
    [pbr::OriginalName("PRESENCE_ENUM_ONLINE")] Online = 3,
  }

  public enum Rarity {
    [pbr::OriginalName("RARITY_FREE")] Free = 0,
    [pbr::OriginalName("RARITY_COMMON")] Common = 1,
    [pbr::OriginalName("RARITY_RARE")] Rare = 2,
    [pbr::OriginalName("RARITY_EPIC")] Epic = 3,
    [pbr::OriginalName("RARITY_LEGENDARY")] Legendary = 4,
    [pbr::OriginalName("RARITY_ALLIANCE")] Alliance = 5,
  }

  public enum Zones {
    [pbr::OriginalName("ZONES_NONE")] None = 0,
    [pbr::OriginalName("ZONES_HAND")] Hand = 1,
    [pbr::OriginalName("ZONES_DECK")] Deck = 2,
    [pbr::OriginalName("ZONES_GRAVEYARD")] Graveyard = 3,
    [pbr::OriginalName("ZONES_BATTLEFIELD")] Battlefield = 4,
    [pbr::OriginalName("ZONES_SECRET")] Secret = 5,
    [pbr::OriginalName("ZONES_QUEST")] Quest = 6,
    [pbr::OriginalName("ZONES_HERO_POWER")] HeroPower = 7,
    [pbr::OriginalName("ZONES_HERO")] Hero = 8,
    [pbr::OriginalName("ZONES_WEAPON")] Weapon = 9,
    [pbr::OriginalName("ZONES_SET_ASIDE_ZONE")] SetAsideZone = 10,
    [pbr::OriginalName("ZONES_HIDDEN")] Hidden = 11,
    [pbr::OriginalName("ZONES_DISCOVER")] Discover = 12,
    [pbr::OriginalName("ZONES_REMOVED_FROM_PLAY")] RemovedFromPlay = 13,
    [pbr::OriginalName("ZONES_PLAYER")] Player = 14,
    [pbr::OriginalName("ZONES_ENCHANTMENT")] Enchantment = 15,
  }

  public enum GameEventType {
    [pbr::OriginalName("GAME_EVENT_TYPE_ALL")] All = 0,
    [pbr::OriginalName("GAME_EVENT_TYPE_AFTER_PHYSICAL_ATTACK")] AfterPhysicalAttack = 1,
    [pbr::OriginalName("GAME_EVENT_TYPE_AFTER_PLAY_CARD")] AfterPlayCard = 2,
    [pbr::OriginalName("GAME_EVENT_TYPE_AFTER_SPELL_CASTED")] AfterSpellCasted = 3,
    [pbr::OriginalName("GAME_EVENT_TYPE_AFTER_SUMMON")] AfterSummon = 4,
    [pbr::OriginalName("GAME_EVENT_TYPE_ATTRIBUTE_APPLIED")] AttributeApplied = 5,
    [pbr::OriginalName("GAME_EVENT_TYPE_ARMOR_GAINED")] ArmorGained = 6,
    [pbr::OriginalName("GAME_EVENT_TYPE_BEFORE_PHYSICAL_ATTACK")] BeforePhysicalAttack = 7,
    [pbr::OriginalName("GAME_EVENT_TYPE_BEFORE_SUMMON")] BeforeSummon = 8,
    [pbr::OriginalName("GAME_EVENT_TYPE_BOARD_CHANGED")] BoardChanged = 9,
    [pbr::OriginalName("GAME_EVENT_TYPE_CARD_ADDED_TO_DECK")] CardAddedToDeck = 10,
    [pbr::OriginalName("GAME_EVENT_TYPE_CARD_SHUFFLED")] CardShuffled = 11,
    [pbr::OriginalName("GAME_EVENT_TYPE_DAMAGE")] Damage = 12,
    [pbr::OriginalName("GAME_EVENT_TYPE_DECAY")] Decay = 13,
    [pbr::OriginalName("GAME_EVENT_TYPE_DID_END_SEQUENCE")] DidEndSequence = 14,
    [pbr::OriginalName("GAME_EVENT_TYPE_DISCARD")] Discard = 15,
    [pbr::OriginalName("GAME_EVENT_TYPE_DISCOVER")] Discover = 16,
    [pbr::OriginalName("GAME_EVENT_TYPE_DRAIN")] Drain = 17,
    [pbr::OriginalName("GAME_EVENT_TYPE_DRAW_CARD")] DrawCard = 18,
    [pbr::OriginalName("GAME_EVENT_TYPE_ENRAGE_CHANGED")] EnrageChanged = 19,
    [pbr::OriginalName("GAME_EVENT_TYPE_ENTITY_TOUCHED")] EntityTouched = 20,
    [pbr::OriginalName("GAME_EVENT_TYPE_ENTITY_UNTOUCHED")] EntityUntouched = 21,
    [pbr::OriginalName("GAME_EVENT_TYPE_EXCESS_HEAL")] ExcessHeal = 22,
    [pbr::OriginalName("GAME_EVENT_TYPE_FATIGUE")] Fatigue = 23,
    [pbr::OriginalName("GAME_EVENT_TYPE_GAME_START")] GameStart = 24,
    [pbr::OriginalName("GAME_EVENT_TYPE_HEAL")] Heal = 25,
    [pbr::OriginalName("GAME_EVENT_TYPE_HERO_POWER_USED")] HeroPowerUsed = 26,
    [pbr::OriginalName("GAME_EVENT_TYPE_INVOKED")] Invoked = 27,
    [pbr::OriginalName("GAME_EVENT_TYPE_JOUST")] Joust = 28,
    [pbr::OriginalName("GAME_EVENT_TYPE_KILL")] Kill = 29,
    [pbr::OriginalName("GAME_EVENT_TYPE_LOSE_DIVINE_SHIELD")] LoseDivineShield = 30,
    [pbr::OriginalName("GAME_EVENT_TYPE_LOSE_DEFLECT")] LoseDeflect = 31,
    [pbr::OriginalName("GAME_EVENT_TYPE_LOSE_STEALTH")] LoseStealth = 32,
    [pbr::OriginalName("GAME_EVENT_TYPE_MAX_HP_INCREASED")] MaxHpIncreased = 33,
    [pbr::OriginalName("GAME_EVENT_TYPE_MAX_MANA")] MaxMana = 34,
    [pbr::OriginalName("GAME_EVENT_TYPE_MANA_MODIFIED")] ManaModified = 35,
    [pbr::OriginalName("GAME_EVENT_TYPE_MISSILE_FIRED")] MissileFired = 36,
    [pbr::OriginalName("GAME_EVENT_TYPE_OVERLOAD")] Overload = 37,
    [pbr::OriginalName("GAME_EVENT_TYPE_PERFORMED_GAME_ACTION")] PerformedGameAction = 38,
    [pbr::OriginalName("GAME_EVENT_TYPE_PHYSICAL_ATTACK")] PhysicalAttack = 39,
    [pbr::OriginalName("GAME_EVENT_TYPE_PLAY_CARD")] PlayCard = 40,
    [pbr::OriginalName("GAME_EVENT_TYPE_PRE_DAMAGE")] PreDamage = 41,
    [pbr::OriginalName("GAME_EVENT_TYPE_PRE_GAME_START")] PreGameStart = 42,
    [pbr::OriginalName("GAME_EVENT_TYPE_QUEST_PLAYED")] QuestPlayed = 43,
    [pbr::OriginalName("GAME_EVENT_TYPE_QUEST_SUCCESSFUL")] QuestSuccessful = 44,
    [pbr::OriginalName("GAME_EVENT_TYPE_RETURNED_TO_HAND")] ReturnedToHand = 45,
    [pbr::OriginalName("GAME_EVENT_TYPE_ROASTED")] Roasted = 46,
    [pbr::OriginalName("GAME_EVENT_TYPE_REVEAL_CARD")] RevealCard = 47,
    [pbr::OriginalName("GAME_EVENT_TYPE_SECRET_PLAYED")] SecretPlayed = 48,
    [pbr::OriginalName("GAME_EVENT_TYPE_SECRET_REVEALED")] SecretRevealed = 49,
    [pbr::OriginalName("GAME_EVENT_TYPE_SPELL_CASTED")] SpellCasted = 50,
    [pbr::OriginalName("GAME_EVENT_TYPE_SUMMON")] Summon = 51,
    [pbr::OriginalName("GAME_EVENT_TYPE_TARGET_ACQUISITION")] TargetAcquisition = 52,
    [pbr::OriginalName("GAME_EVENT_TYPE_TRIGGER_FIRED")] TriggerFired = 53,
    [pbr::OriginalName("GAME_EVENT_TYPE_TURN_END")] TurnEnd = 54,
    [pbr::OriginalName("GAME_EVENT_TYPE_TURN_START")] TurnStart = 55,
    [pbr::OriginalName("GAME_EVENT_TYPE_SILENCE")] Silence = 56,
    [pbr::OriginalName("GAME_EVENT_TYPE_WEAPON_DESTROYED")] WeaponDestroyed = 57,
    [pbr::OriginalName("GAME_EVENT_TYPE_WEAPON_EQUIPPED")] WeaponEquipped = 58,
    [pbr::OriginalName("GAME_EVENT_TYPE_WILL_END_SEQUENCE")] WillEndSequence = 59,
    [pbr::OriginalName("GAME_EVENT_TYPE_DESTROY_WILL_QUEUE")] DestroyWillQueue = 60,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Accepts an invite to a match or a friend invite.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class AcceptInviteRequest : pb::IMessage<AcceptInviteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AcceptInviteRequest> _parser = new pb::MessageParser<AcceptInviteRequest>(() => new AcceptInviteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptInviteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptInviteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptInviteRequest(AcceptInviteRequest other) : this() {
      inviteId_ = other.inviteId_;
      awaitGameStart_ = other.awaitGameStart_;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptInviteRequest Clone() {
      return new AcceptInviteRequest(this);
    }

    /// <summary>Field number for the "inviteId" field.</summary>
    public const int InviteIdFieldNumber = 1;
    private string inviteId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "awaitGameStart" field.</summary>
    public const int AwaitGameStartFieldNumber = 2;
    private bool awaitGameStart_;
    /// <summary>
    /// When true, specifies that the method call should only return when the game is actually ready to join
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AwaitGameStart {
      get { return awaitGameStart_; }
      set {
        awaitGameStart_ = value;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 3;
    private global::Spellsource.Proto.MatchmakingQueuePutRequest match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.MatchmakingQueuePutRequest Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptInviteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptInviteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InviteId != other.InviteId) return false;
      if (AwaitGameStart != other.AwaitGameStart) return false;
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InviteId.Length != 0) hash ^= InviteId.GetHashCode();
      if (AwaitGameStart != false) hash ^= AwaitGameStart.GetHashCode();
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InviteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InviteId);
      }
      if (AwaitGameStart != false) {
        output.WriteRawTag(16);
        output.WriteBool(AwaitGameStart);
      }
      if (match_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InviteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InviteId);
      }
      if (AwaitGameStart != false) {
        output.WriteRawTag(16);
        output.WriteBool(AwaitGameStart);
      }
      if (match_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InviteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InviteId);
      }
      if (AwaitGameStart != false) {
        size += 1 + 1;
      }
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptInviteRequest other) {
      if (other == null) {
        return;
      }
      if (other.InviteId.Length != 0) {
        InviteId = other.InviteId;
      }
      if (other.AwaitGameStart != false) {
        AwaitGameStart = other.AwaitGameStart;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          Match = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InviteId = input.ReadString();
            break;
          }
          case 16: {
            AwaitGameStart = input.ReadBool();
            break;
          }
          case 26: {
            if (match_ == null) {
              Match = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
            }
            input.ReadMessage(Match);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InviteId = input.ReadString();
            break;
          }
          case 16: {
            AwaitGameStart = input.ReadBool();
            break;
          }
          case 26: {
            if (match_ == null) {
              Match = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
            }
            input.ReadMessage(Match);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class AcceptInviteResponse : pb::IMessage<AcceptInviteResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AcceptInviteResponse> _parser = new pb::MessageParser<AcceptInviteResponse>(() => new AcceptInviteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptInviteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptInviteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptInviteResponse(AcceptInviteResponse other) : this() {
      friend_ = other.friend_ != null ? other.friend_.Clone() : null;
      invite_ = other.invite_ != null ? other.invite_.Clone() : null;
      match_ = other.match_ != null ? other.match_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptInviteResponse Clone() {
      return new AcceptInviteResponse(this);
    }

    /// <summary>Field number for the "friend" field.</summary>
    public const int FriendFieldNumber = 1;
    private global::Spellsource.Proto.FriendPutResponse friend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.FriendPutResponse Friend {
      get { return friend_; }
      set {
        friend_ = value;
      }
    }

    /// <summary>Field number for the "invite" field.</summary>
    public const int InviteFieldNumber = 2;
    private global::Spellsource.Proto.Invite invite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Invite Invite {
      get { return invite_; }
      set {
        invite_ = value;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 3;
    private global::Spellsource.Proto.MatchmakingQueuePutResponse match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.MatchmakingQueuePutResponse Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptInviteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptInviteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Friend, other.Friend)) return false;
      if (!object.Equals(Invite, other.Invite)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (friend_ != null) hash ^= Friend.GetHashCode();
      if (invite_ != null) hash ^= Invite.GetHashCode();
      if (match_ != null) hash ^= Match.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (friend_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Friend);
      }
      if (invite_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Invite);
      }
      if (match_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (friend_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Friend);
      }
      if (invite_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Invite);
      }
      if (match_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (friend_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Friend);
      }
      if (invite_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Invite);
      }
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptInviteResponse other) {
      if (other == null) {
        return;
      }
      if (other.friend_ != null) {
        if (friend_ == null) {
          Friend = new global::Spellsource.Proto.FriendPutResponse();
        }
        Friend.MergeFrom(other.Friend);
      }
      if (other.invite_ != null) {
        if (invite_ == null) {
          Invite = new global::Spellsource.Proto.Invite();
        }
        Invite.MergeFrom(other.Invite);
      }
      if (other.match_ != null) {
        if (match_ == null) {
          Match = new global::Spellsource.Proto.MatchmakingQueuePutResponse();
        }
        Match.MergeFrom(other.Match);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (friend_ == null) {
              Friend = new global::Spellsource.Proto.FriendPutResponse();
            }
            input.ReadMessage(Friend);
            break;
          }
          case 18: {
            if (invite_ == null) {
              Invite = new global::Spellsource.Proto.Invite();
            }
            input.ReadMessage(Invite);
            break;
          }
          case 26: {
            if (match_ == null) {
              Match = new global::Spellsource.Proto.MatchmakingQueuePutResponse();
            }
            input.ReadMessage(Match);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (friend_ == null) {
              Friend = new global::Spellsource.Proto.FriendPutResponse();
            }
            input.ReadMessage(Friend);
            break;
          }
          case 18: {
            if (invite_ == null) {
              Invite = new global::Spellsource.Proto.Invite();
            }
            input.ReadMessage(Invite);
            break;
          }
          case 26: {
            if (match_ == null) {
              Match = new global::Spellsource.Proto.MatchmakingQueuePutResponse();
            }
            input.ReadMessage(Match);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class Account : pb::IMessage<Account>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      Id_ = other.Id_;
      decks_ = other.decks_.Clone();
      email_ = other.email_;
      friends_ = other.friends_.Clone();
      inMatch_ = other.inMatch_;
      name_ = other.name_;
      personalCollection_ = other.personalCollection_ != null ? other.personalCollection_.Clone() : null;
      privacyToken_ = other.privacyToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    /// <summary>
    /// The user ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.InventoryCollection> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(18, global::Spellsource.Proto.InventoryCollection.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.InventoryCollection> decks_ = new pbc::RepeatedField<global::Spellsource.Proto.InventoryCollection>();
    /// <summary>
    /// A list of decks belonging to the player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.InventoryCollection> Decks {
      get { return decks_; }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    /// <summary>
    /// The user's email address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Friend> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(34, global::Spellsource.Proto.Friend.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Friend> friends_ = new pbc::RepeatedField<global::Spellsource.Proto.Friend>();
    /// <summary>
    /// The user's friends at the moment of receiving this account document. This may be out of date as the latest
    /// friends information will come from receiving friend documents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Friend> Friends {
      get { return friends_; }
    }

    /// <summary>Field number for the "inMatch" field.</summary>
    public const int InMatchFieldNumber = 5;
    private bool inMatch_;
    /// <summary>
    /// True if the client should attempt to connect to a match with its token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InMatch {
      get { return inMatch_; }
      set {
        inMatch_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    /// The username that is displayed to toher players
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "personalCollection" field.</summary>
    public const int PersonalCollectionFieldNumber = 7;
    private global::Spellsource.Proto.InventoryCollection personalCollection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.InventoryCollection PersonalCollection {
      get { return personalCollection_; }
      set {
        personalCollection_ = value;
      }
    }

    /// <summary>Field number for the "privacyToken" field.</summary>
    public const int PrivacyTokenFieldNumber = 8;
    private string privacyToken_ = "";
    /// <summary>
    /// The token that is appended to the end of the user's name to allow friending without sharing an e-mail address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivacyToken {
      get { return privacyToken_; }
      set {
        privacyToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!decks_.Equals(other.decks_)) return false;
      if (Email != other.Email) return false;
      if(!friends_.Equals(other.friends_)) return false;
      if (InMatch != other.InMatch) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(PersonalCollection, other.PersonalCollection)) return false;
      if (PrivacyToken != other.PrivacyToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= decks_.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      hash ^= friends_.GetHashCode();
      if (InMatch != false) hash ^= InMatch.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (personalCollection_ != null) hash ^= PersonalCollection.GetHashCode();
      if (PrivacyToken.Length != 0) hash ^= PrivacyToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      decks_.WriteTo(output, _repeated_decks_codec);
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      friends_.WriteTo(output, _repeated_friends_codec);
      if (InMatch != false) {
        output.WriteRawTag(40);
        output.WriteBool(InMatch);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (personalCollection_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PersonalCollection);
      }
      if (PrivacyToken.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PrivacyToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      decks_.WriteTo(ref output, _repeated_decks_codec);
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      friends_.WriteTo(ref output, _repeated_friends_codec);
      if (InMatch != false) {
        output.WriteRawTag(40);
        output.WriteBool(InMatch);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (personalCollection_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PersonalCollection);
      }
      if (PrivacyToken.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PrivacyToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      size += friends_.CalculateSize(_repeated_friends_codec);
      if (InMatch != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (personalCollection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersonalCollection);
      }
      if (PrivacyToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivacyToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      decks_.Add(other.decks_);
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      friends_.Add(other.friends_);
      if (other.InMatch != false) {
        InMatch = other.InMatch;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.personalCollection_ != null) {
        if (personalCollection_ == null) {
          PersonalCollection = new global::Spellsource.Proto.InventoryCollection();
        }
        PersonalCollection.MergeFrom(other.PersonalCollection);
      }
      if (other.PrivacyToken.Length != 0) {
        PrivacyToken = other.PrivacyToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
          case 40: {
            InMatch = input.ReadBool();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            if (personalCollection_ == null) {
              PersonalCollection = new global::Spellsource.Proto.InventoryCollection();
            }
            input.ReadMessage(PersonalCollection);
            break;
          }
          case 66: {
            PrivacyToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            decks_.AddEntriesFrom(ref input, _repeated_decks_codec);
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            friends_.AddEntriesFrom(ref input, _repeated_friends_codec);
            break;
          }
          case 40: {
            InMatch = input.ReadBool();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            if (personalCollection_ == null) {
              PersonalCollection = new global::Spellsource.Proto.InventoryCollection();
            }
            input.ReadMessage(PersonalCollection);
            break;
          }
          case 66: {
            PrivacyToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Contains information the client needs for an art asset.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Art : pb::IMessage<Art>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Art> _parser = new pb::MessageParser<Art>(() => new Art());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Art> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Art() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Art(Art other) : this() {
      body_ = other.body_ != null ? other.body_.Clone() : null;
      highlight_ = other.highlight_ != null ? other.highlight_.Clone() : null;
      loop_ = other.loop_ != null ? other.loop_.Clone() : null;
      missile_ = other.missile_ != null ? other.missile_.Clone() : null;
      onCast_ = other.onCast_ != null ? other.onCast_.Clone() : null;
      onHit_ = other.onHit_ != null ? other.onHit_.Clone() : null;
      primary_ = other.primary_ != null ? other.primary_.Clone() : null;
      secondary_ = other.secondary_ != null ? other.secondary_.Clone() : null;
      shadow_ = other.shadow_ != null ? other.shadow_.Clone() : null;
      spell_ = other.spell_ != null ? other.spell_.Clone() : null;
      sprite_ = other.sprite_ != null ? other.sprite_.Clone() : null;
      spriteShadow_ = other.spriteShadow_ != null ? other.spriteShadow_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Art Clone() {
      return new Art(this);
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 1;
    private global::Spellsource.Proto.Font body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Font Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    /// <summary>Field number for the "highlight" field.</summary>
    public const int HighlightFieldNumber = 2;
    private global::Spellsource.Proto.Color highlight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Color Highlight {
      get { return highlight_; }
      set {
        highlight_ = value;
      }
    }

    /// <summary>Field number for the "loop" field.</summary>
    public const int LoopFieldNumber = 3;
    private global::Spellsource.Proto.Prefab loop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Prefab Loop {
      get { return loop_; }
      set {
        loop_ = value;
      }
    }

    /// <summary>Field number for the "missile" field.</summary>
    public const int MissileFieldNumber = 4;
    private global::Spellsource.Proto.Prefab missile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Prefab Missile {
      get { return missile_; }
      set {
        missile_ = value;
      }
    }

    /// <summary>Field number for the "onCast" field.</summary>
    public const int OnCastFieldNumber = 5;
    private global::Spellsource.Proto.Prefab onCast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Prefab OnCast {
      get { return onCast_; }
      set {
        onCast_ = value;
      }
    }

    /// <summary>Field number for the "onHit" field.</summary>
    public const int OnHitFieldNumber = 6;
    private global::Spellsource.Proto.Prefab onHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Prefab OnHit {
      get { return onHit_; }
      set {
        onHit_ = value;
      }
    }

    /// <summary>Field number for the "primary" field.</summary>
    public const int PrimaryFieldNumber = 7;
    private global::Spellsource.Proto.Color primary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Color Primary {
      get { return primary_; }
      set {
        primary_ = value;
      }
    }

    /// <summary>Field number for the "secondary" field.</summary>
    public const int SecondaryFieldNumber = 8;
    private global::Spellsource.Proto.Color secondary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Color Secondary {
      get { return secondary_; }
      set {
        secondary_ = value;
      }
    }

    /// <summary>Field number for the "shadow" field.</summary>
    public const int ShadowFieldNumber = 9;
    private global::Spellsource.Proto.Color shadow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Color Shadow {
      get { return shadow_; }
      set {
        shadow_ = value;
      }
    }

    /// <summary>Field number for the "spell" field.</summary>
    public const int SpellFieldNumber = 10;
    private global::Spellsource.Proto.Prefab spell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Prefab Spell {
      get { return spell_; }
      set {
        spell_ = value;
      }
    }

    /// <summary>Field number for the "sprite" field.</summary>
    public const int SpriteFieldNumber = 11;
    private global::Spellsource.Proto.Sprite sprite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Sprite Sprite {
      get { return sprite_; }
      set {
        sprite_ = value;
      }
    }

    /// <summary>Field number for the "spriteShadow" field.</summary>
    public const int SpriteShadowFieldNumber = 12;
    private global::Spellsource.Proto.Sprite spriteShadow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Sprite SpriteShadow {
      get { return spriteShadow_; }
      set {
        spriteShadow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Art);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Art other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Body, other.Body)) return false;
      if (!object.Equals(Highlight, other.Highlight)) return false;
      if (!object.Equals(Loop, other.Loop)) return false;
      if (!object.Equals(Missile, other.Missile)) return false;
      if (!object.Equals(OnCast, other.OnCast)) return false;
      if (!object.Equals(OnHit, other.OnHit)) return false;
      if (!object.Equals(Primary, other.Primary)) return false;
      if (!object.Equals(Secondary, other.Secondary)) return false;
      if (!object.Equals(Shadow, other.Shadow)) return false;
      if (!object.Equals(Spell, other.Spell)) return false;
      if (!object.Equals(Sprite, other.Sprite)) return false;
      if (!object.Equals(SpriteShadow, other.SpriteShadow)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (body_ != null) hash ^= Body.GetHashCode();
      if (highlight_ != null) hash ^= Highlight.GetHashCode();
      if (loop_ != null) hash ^= Loop.GetHashCode();
      if (missile_ != null) hash ^= Missile.GetHashCode();
      if (onCast_ != null) hash ^= OnCast.GetHashCode();
      if (onHit_ != null) hash ^= OnHit.GetHashCode();
      if (primary_ != null) hash ^= Primary.GetHashCode();
      if (secondary_ != null) hash ^= Secondary.GetHashCode();
      if (shadow_ != null) hash ^= Shadow.GetHashCode();
      if (spell_ != null) hash ^= Spell.GetHashCode();
      if (sprite_ != null) hash ^= Sprite.GetHashCode();
      if (spriteShadow_ != null) hash ^= SpriteShadow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (body_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Body);
      }
      if (highlight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Highlight);
      }
      if (loop_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Loop);
      }
      if (missile_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Missile);
      }
      if (onCast_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OnCast);
      }
      if (onHit_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OnHit);
      }
      if (primary_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Primary);
      }
      if (secondary_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Secondary);
      }
      if (shadow_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Shadow);
      }
      if (spell_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Spell);
      }
      if (sprite_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Sprite);
      }
      if (spriteShadow_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SpriteShadow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (body_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Body);
      }
      if (highlight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Highlight);
      }
      if (loop_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Loop);
      }
      if (missile_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Missile);
      }
      if (onCast_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OnCast);
      }
      if (onHit_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OnHit);
      }
      if (primary_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Primary);
      }
      if (secondary_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Secondary);
      }
      if (shadow_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Shadow);
      }
      if (spell_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Spell);
      }
      if (sprite_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Sprite);
      }
      if (spriteShadow_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SpriteShadow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (highlight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Highlight);
      }
      if (loop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loop);
      }
      if (missile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Missile);
      }
      if (onCast_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnCast);
      }
      if (onHit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnHit);
      }
      if (primary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Primary);
      }
      if (secondary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Secondary);
      }
      if (shadow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shadow);
      }
      if (spell_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spell);
      }
      if (sprite_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sprite);
      }
      if (spriteShadow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpriteShadow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Art other) {
      if (other == null) {
        return;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Spellsource.Proto.Font();
        }
        Body.MergeFrom(other.Body);
      }
      if (other.highlight_ != null) {
        if (highlight_ == null) {
          Highlight = new global::Spellsource.Proto.Color();
        }
        Highlight.MergeFrom(other.Highlight);
      }
      if (other.loop_ != null) {
        if (loop_ == null) {
          Loop = new global::Spellsource.Proto.Prefab();
        }
        Loop.MergeFrom(other.Loop);
      }
      if (other.missile_ != null) {
        if (missile_ == null) {
          Missile = new global::Spellsource.Proto.Prefab();
        }
        Missile.MergeFrom(other.Missile);
      }
      if (other.onCast_ != null) {
        if (onCast_ == null) {
          OnCast = new global::Spellsource.Proto.Prefab();
        }
        OnCast.MergeFrom(other.OnCast);
      }
      if (other.onHit_ != null) {
        if (onHit_ == null) {
          OnHit = new global::Spellsource.Proto.Prefab();
        }
        OnHit.MergeFrom(other.OnHit);
      }
      if (other.primary_ != null) {
        if (primary_ == null) {
          Primary = new global::Spellsource.Proto.Color();
        }
        Primary.MergeFrom(other.Primary);
      }
      if (other.secondary_ != null) {
        if (secondary_ == null) {
          Secondary = new global::Spellsource.Proto.Color();
        }
        Secondary.MergeFrom(other.Secondary);
      }
      if (other.shadow_ != null) {
        if (shadow_ == null) {
          Shadow = new global::Spellsource.Proto.Color();
        }
        Shadow.MergeFrom(other.Shadow);
      }
      if (other.spell_ != null) {
        if (spell_ == null) {
          Spell = new global::Spellsource.Proto.Prefab();
        }
        Spell.MergeFrom(other.Spell);
      }
      if (other.sprite_ != null) {
        if (sprite_ == null) {
          Sprite = new global::Spellsource.Proto.Sprite();
        }
        Sprite.MergeFrom(other.Sprite);
      }
      if (other.spriteShadow_ != null) {
        if (spriteShadow_ == null) {
          SpriteShadow = new global::Spellsource.Proto.Sprite();
        }
        SpriteShadow.MergeFrom(other.SpriteShadow);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (body_ == null) {
              Body = new global::Spellsource.Proto.Font();
            }
            input.ReadMessage(Body);
            break;
          }
          case 18: {
            if (highlight_ == null) {
              Highlight = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Highlight);
            break;
          }
          case 26: {
            if (loop_ == null) {
              Loop = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(Loop);
            break;
          }
          case 34: {
            if (missile_ == null) {
              Missile = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(Missile);
            break;
          }
          case 42: {
            if (onCast_ == null) {
              OnCast = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(OnCast);
            break;
          }
          case 50: {
            if (onHit_ == null) {
              OnHit = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(OnHit);
            break;
          }
          case 58: {
            if (primary_ == null) {
              Primary = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Primary);
            break;
          }
          case 66: {
            if (secondary_ == null) {
              Secondary = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Secondary);
            break;
          }
          case 74: {
            if (shadow_ == null) {
              Shadow = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Shadow);
            break;
          }
          case 82: {
            if (spell_ == null) {
              Spell = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(Spell);
            break;
          }
          case 90: {
            if (sprite_ == null) {
              Sprite = new global::Spellsource.Proto.Sprite();
            }
            input.ReadMessage(Sprite);
            break;
          }
          case 98: {
            if (spriteShadow_ == null) {
              SpriteShadow = new global::Spellsource.Proto.Sprite();
            }
            input.ReadMessage(SpriteShadow);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (body_ == null) {
              Body = new global::Spellsource.Proto.Font();
            }
            input.ReadMessage(Body);
            break;
          }
          case 18: {
            if (highlight_ == null) {
              Highlight = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Highlight);
            break;
          }
          case 26: {
            if (loop_ == null) {
              Loop = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(Loop);
            break;
          }
          case 34: {
            if (missile_ == null) {
              Missile = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(Missile);
            break;
          }
          case 42: {
            if (onCast_ == null) {
              OnCast = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(OnCast);
            break;
          }
          case 50: {
            if (onHit_ == null) {
              OnHit = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(OnHit);
            break;
          }
          case 58: {
            if (primary_ == null) {
              Primary = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Primary);
            break;
          }
          case 66: {
            if (secondary_ == null) {
              Secondary = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Secondary);
            break;
          }
          case 74: {
            if (shadow_ == null) {
              Shadow = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Shadow);
            break;
          }
          case 82: {
            if (spell_ == null) {
              Spell = new global::Spellsource.Proto.Prefab();
            }
            input.ReadMessage(Spell);
            break;
          }
          case 90: {
            if (sprite_ == null) {
              Sprite = new global::Spellsource.Proto.Sprite();
            }
            input.ReadMessage(Sprite);
            break;
          }
          case 98: {
            if (spriteShadow_ == null) {
              SpriteShadow = new global::Spellsource.Proto.Sprite();
            }
            input.ReadMessage(SpriteShadow);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A tuple of attribute, attribute-value.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class AttributeValueTuple : pb::IMessage<AttributeValueTuple>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AttributeValueTuple> _parser = new pb::MessageParser<AttributeValueTuple>(() => new AttributeValueTuple());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeValueTuple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValueTuple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValueTuple(AttributeValueTuple other) : this() {
      attribute_ = other.attribute_;
      stringValue_ = other.stringValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValueTuple Clone() {
      return new AttributeValueTuple(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private global::Spellsource.Proto.PlayerEntityAttributes attribute_ = global::Spellsource.Proto.PlayerEntityAttributes.Signature;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.PlayerEntityAttributes Attribute {
      get { return attribute_; }
      set {
        attribute_ = value;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 2;
    private string stringValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeValueTuple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeValueTuple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Attribute != other.Attribute) return false;
      if (StringValue != other.StringValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) hash ^= Attribute.GetHashCode();
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Attribute);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StringValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Attribute);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StringValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Attribute);
      }
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeValueTuple other) {
      if (other == null) {
        return;
      }
      if (other.Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) {
        Attribute = other.Attribute;
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Attribute = (global::Spellsource.Proto.PlayerEntityAttributes) input.ReadEnum();
            break;
          }
          case 18: {
            StringValue = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Attribute = (global::Spellsource.Proto.PlayerEntityAttributes) input.ReadEnum();
            break;
          }
          case 18: {
            StringValue = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class CardEvent : pb::IMessage<CardEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardEvent> _parser = new pb::MessageParser<CardEvent>(() => new CardEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardEvent(CardEvent other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      showLocal_ = other.showLocal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardEvent Clone() {
      return new CardEvent(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Spellsource.Proto.Entity card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "showLocal" field.</summary>
    public const int ShowLocalFieldNumber = 2;
    private bool showLocal_;
    /// <summary>
    /// Forces this card event to be shown locally
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowLocal {
      get { return showLocal_; }
      set {
        showLocal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (ShowLocal != other.ShowLocal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (ShowLocal != false) hash ^= ShowLocal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (ShowLocal != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShowLocal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (ShowLocal != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShowLocal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (ShowLocal != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardEvent other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Spellsource.Proto.Entity();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.ShowLocal != false) {
        ShowLocal = other.ShowLocal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Card);
            break;
          }
          case 16: {
            ShowLocal = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Card);
            break;
          }
          case 16: {
            ShowLocal = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class CardRecord : pb::IMessage<CardRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CardRecord> _parser = new pb::MessageParser<CardRecord>(() => new CardRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRecord(CardRecord other) : this() {
      Id_ = other.Id_;
      allianceId_ = other.allianceId_;
      borrowedByUserId_ = other.borrowedByUserId_;
      collectionIds_ = other.collectionIds_.Clone();
      donorUserId_ = other.donorUserId_;
      entity_ = other.entity_ != null ? other.entity_.Clone() : null;
      userId_ = other.userId_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardRecord Clone() {
      return new CardRecord(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allianceId" field.</summary>
    public const int AllianceIdFieldNumber = 2;
    private string allianceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "borrowedByUserId" field.</summary>
    public const int BorrowedByUserIdFieldNumber = 3;
    private string borrowedByUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BorrowedByUserId {
      get { return borrowedByUserId_; }
      set {
        borrowedByUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collectionIds" field.</summary>
    public const int CollectionIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_collectionIds_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> collectionIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CollectionIds {
      get { return collectionIds_; }
    }

    /// <summary>Field number for the "donorUserId" field.</summary>
    public const int DonorUserIdFieldNumber = 5;
    private string donorUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DonorUserId {
      get { return donorUserId_; }
      set {
        donorUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 6;
    private global::Spellsource.Proto.Entity entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 7;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 8;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AllianceId != other.AllianceId) return false;
      if (BorrowedByUserId != other.BorrowedByUserId) return false;
      if(!collectionIds_.Equals(other.collectionIds_)) return false;
      if (DonorUserId != other.DonorUserId) return false;
      if (!object.Equals(Entity, other.Entity)) return false;
      if (UserId != other.UserId) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AllianceId.Length != 0) hash ^= AllianceId.GetHashCode();
      if (BorrowedByUserId.Length != 0) hash ^= BorrowedByUserId.GetHashCode();
      hash ^= collectionIds_.GetHashCode();
      if (DonorUserId.Length != 0) hash ^= DonorUserId.GetHashCode();
      if (entity_ != null) hash ^= Entity.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AllianceId);
      }
      if (BorrowedByUserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BorrowedByUserId);
      }
      collectionIds_.WriteTo(output, _repeated_collectionIds_codec);
      if (DonorUserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DonorUserId);
      }
      if (entity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Entity);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserId);
      }
      if (Count != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AllianceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AllianceId);
      }
      if (BorrowedByUserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BorrowedByUserId);
      }
      collectionIds_.WriteTo(ref output, _repeated_collectionIds_codec);
      if (DonorUserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DonorUserId);
      }
      if (entity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Entity);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserId);
      }
      if (Count != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AllianceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceId);
      }
      if (BorrowedByUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BorrowedByUserId);
      }
      size += collectionIds_.CalculateSize(_repeated_collectionIds_codec);
      if (DonorUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DonorUserId);
      }
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardRecord other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AllianceId.Length != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.BorrowedByUserId.Length != 0) {
        BorrowedByUserId = other.BorrowedByUserId;
      }
      collectionIds_.Add(other.collectionIds_);
      if (other.DonorUserId.Length != 0) {
        DonorUserId = other.DonorUserId;
      }
      if (other.entity_ != null) {
        if (entity_ == null) {
          Entity = new global::Spellsource.Proto.Entity();
        }
        Entity.MergeFrom(other.Entity);
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            AllianceId = input.ReadString();
            break;
          }
          case 26: {
            BorrowedByUserId = input.ReadString();
            break;
          }
          case 34: {
            collectionIds_.AddEntriesFrom(input, _repeated_collectionIds_codec);
            break;
          }
          case 42: {
            DonorUserId = input.ReadString();
            break;
          }
          case 50: {
            if (entity_ == null) {
              Entity = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Entity);
            break;
          }
          case 58: {
            UserId = input.ReadString();
            break;
          }
          case 64: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            AllianceId = input.ReadString();
            break;
          }
          case 26: {
            BorrowedByUserId = input.ReadString();
            break;
          }
          case 34: {
            collectionIds_.AddEntriesFrom(ref input, _repeated_collectionIds_codec);
            break;
          }
          case 42: {
            DonorUserId = input.ReadString();
            break;
          }
          case 50: {
            if (entity_ == null) {
              Entity = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Entity);
            break;
          }
          case 58: {
            UserId = input.ReadString();
            break;
          }
          case 64: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class ChangePasswordRequest : pb::IMessage<ChangePasswordRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangePasswordRequest> _parser = new pb::MessageParser<ChangePasswordRequest>(() => new ChangePasswordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePasswordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest(ChangePasswordRequest other) : this() {
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest Clone() {
      return new ChangePasswordRequest(this);
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private string password_ = "";
    /// <summary>
    /// The new password
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePasswordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePasswordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePasswordRequest other) {
      if (other == null) {
        return;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An empty response signifying your password was correctly changed
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class ChangePasswordResponse : pb::IMessage<ChangePasswordResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChangePasswordResponse> _parser = new pb::MessageParser<ChangePasswordResponse>(() => new ChangePasswordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePasswordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordResponse(ChangePasswordResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordResponse Clone() {
      return new ChangePasswordResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePasswordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePasswordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePasswordResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A chat message.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class ChatMessage : pb::IMessage<ChatMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      conversationId_ = other.conversationId_;
      dateLabel_ = other.dateLabel_;
      message_ = other.message_;
      messageId_ = other.messageId_;
      senderName_ = other.senderName_;
      senderUserId_ = other.senderUserId_;
      timestamp_ = other.timestamp_;
      notification_ = other.notification_ != null ? other.notification_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "conversationId" field.</summary>
    public const int ConversationIdFieldNumber = 1;
    private string conversationId_ = "";
    /// <summary>
    /// A conversation ID looks like userId1,userId2 where the first user ID is the one that comes first
    /// lexicographically.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversationId {
      get { return conversationId_; }
      set {
        conversationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dateLabel" field.</summary>
    public const int DateLabelFieldNumber = 2;
    private string dateLabel_ = "";
    /// <summary>
    /// The text that should be used to render when this message was sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateLabel {
      get { return dateLabel_; }
      set {
        dateLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// The contents of this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 4;
    private string messageId_ = "";
    /// <summary>
    /// The ID of the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 5;
    private string senderName_ = "";
    /// <summary>
    /// The text to render in the sender name field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderUserId" field.</summary>
    public const int SenderUserIdFieldNumber = 6;
    private string senderUserId_ = "";
    /// <summary>
    /// The user ID of the sender. Useful for looking up against the presence notifications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderUserId {
      get { return senderUserId_; }
      set {
        senderUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private long timestamp_;
    /// <summary>
    /// The timestamp of the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "notification" field.</summary>
    public const int NotificationFieldNumber = 8;
    private global::Spellsource.AddedChangedRemoved notification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.AddedChangedRemoved Notification {
      get { return notification_; }
      set {
        notification_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConversationId != other.ConversationId) return false;
      if (DateLabel != other.DateLabel) return false;
      if (Message != other.Message) return false;
      if (MessageId != other.MessageId) return false;
      if (SenderName != other.SenderName) return false;
      if (SenderUserId != other.SenderUserId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Notification, other.Notification)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConversationId.Length != 0) hash ^= ConversationId.GetHashCode();
      if (DateLabel.Length != 0) hash ^= DateLabel.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (SenderName.Length != 0) hash ^= SenderName.GetHashCode();
      if (SenderUserId.Length != 0) hash ^= SenderUserId.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (notification_ != null) hash ^= Notification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ConversationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConversationId);
      }
      if (DateLabel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DateLabel);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SenderName);
      }
      if (SenderUserId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SenderUserId);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Timestamp);
      }
      if (notification_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Notification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ConversationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConversationId);
      }
      if (DateLabel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DateLabel);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SenderName);
      }
      if (SenderUserId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SenderUserId);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Timestamp);
      }
      if (notification_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Notification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConversationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConversationId);
      }
      if (DateLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateLabel);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (SenderUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderUserId);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (notification_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Notification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.ConversationId.Length != 0) {
        ConversationId = other.ConversationId;
      }
      if (other.DateLabel.Length != 0) {
        DateLabel = other.DateLabel;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.SenderName.Length != 0) {
        SenderName = other.SenderName;
      }
      if (other.SenderUserId.Length != 0) {
        SenderUserId = other.SenderUserId;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.notification_ != null) {
        if (notification_ == null) {
          Notification = new global::Spellsource.AddedChangedRemoved();
        }
        Notification.MergeFrom(other.Notification);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConversationId = input.ReadString();
            break;
          }
          case 18: {
            DateLabel = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            MessageId = input.ReadString();
            break;
          }
          case 42: {
            SenderName = input.ReadString();
            break;
          }
          case 50: {
            SenderUserId = input.ReadString();
            break;
          }
          case 56: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 66: {
            if (notification_ == null) {
              Notification = new global::Spellsource.AddedChangedRemoved();
            }
            input.ReadMessage(Notification);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ConversationId = input.ReadString();
            break;
          }
          case 18: {
            DateLabel = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            MessageId = input.ReadString();
            break;
          }
          case 42: {
            SenderName = input.ReadString();
            break;
          }
          case 50: {
            SenderUserId = input.ReadString();
            break;
          }
          case 56: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 66: {
            if (notification_ == null) {
              Notification = new global::Spellsource.AddedChangedRemoved();
            }
            input.ReadMessage(Notification);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class ClientToServerMessage : pb::IMessage<ClientToServerMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientToServerMessage> _parser = new pb::MessageParser<ClientToServerMessage>(() => new ClientToServerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientToServerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServerMessage(ClientToServerMessage other) : this() {
      actionIndex_ = other.actionIndex_;
      discardedCardIndices_ = other.discardedCardIndices_.Clone();
      emote_ = other.emote_ != null ? other.emote_.Clone() : null;
      EntityTouch = other.EntityTouch;
      EntityUntouch = other.EntityUntouch;
      firstMessage_ = other.firstMessage_ != null ? other.firstMessage_.Clone() : null;
      messageType_ = other.messageType_;
      repliesTo_ = other.repliesTo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientToServerMessage Clone() {
      return new ClientToServerMessage(this);
    }

    /// <summary>Field number for the "actionIndex" field.</summary>
    public const int ActionIndexFieldNumber = 1;
    private int actionIndex_;
    /// <summary>
    /// The index of the available actions to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionIndex {
      get { return actionIndex_; }
      set {
        actionIndex_ = value;
      }
    }

    /// <summary>Field number for the "discardedCardIndices" field.</summary>
    public const int DiscardedCardIndicesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_discardedCardIndices_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> discardedCardIndices_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The indices of cards to discard in a mulligan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DiscardedCardIndices {
      get { return discardedCardIndices_; }
    }

    /// <summary>Field number for the "emote" field.</summary>
    public const int EmoteFieldNumber = 3;
    private global::Spellsource.Proto.Emote emote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Emote Emote {
      get { return emote_; }
      set {
        emote_ = value;
      }
    }

    /// <summary>Field number for the "entityTouch" field.</summary>
    public const int EntityTouchFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_entityTouch_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? entityTouch_;
    /// <summary>
    /// When specified with an entity ID, indicates the client is "touching" this entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? EntityTouch {
      get { return entityTouch_; }
      set {
        entityTouch_ = value;
      }
    }


    /// <summary>Field number for the "entityUntouch" field.</summary>
    public const int EntityUntouchFieldNumber = 5;
    private static readonly pb::FieldCodec<int?> _single_entityUntouch_codec = pb::FieldCodec.ForStructWrapper<int>(42);
    private int? entityUntouch_;
    /// <summary>
    /// When specified with an entity ID, indicates the client is no longer touching the specified entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? EntityUntouch {
      get { return entityUntouch_; }
      set {
        entityUntouch_ = value;
      }
    }


    /// <summary>Field number for the "firstMessage" field.</summary>
    public const int FirstMessageFieldNumber = 6;
    private global::Spellsource.Proto.ClientToServerMessage.Types.FirstMessageMessage firstMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.ClientToServerMessage.Types.FirstMessageMessage FirstMessage {
      get { return firstMessage_; }
      set {
        firstMessage_ = value;
      }
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 7;
    private global::Spellsource.Proto.MessageType messageType_ = global::Spellsource.Proto.MessageType.UpdateAction;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.MessageType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "repliesTo" field.</summary>
    public const int RepliesToFieldNumber = 8;
    private string repliesTo_ = "";
    /// <summary>
    /// The ID of the server message this client message is replying to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepliesTo {
      get { return repliesTo_; }
      set {
        repliesTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientToServerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientToServerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionIndex != other.ActionIndex) return false;
      if(!discardedCardIndices_.Equals(other.discardedCardIndices_)) return false;
      if (!object.Equals(Emote, other.Emote)) return false;
      if (EntityTouch != other.EntityTouch) return false;
      if (EntityUntouch != other.EntityUntouch) return false;
      if (!object.Equals(FirstMessage, other.FirstMessage)) return false;
      if (MessageType != other.MessageType) return false;
      if (RepliesTo != other.RepliesTo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionIndex != 0) hash ^= ActionIndex.GetHashCode();
      hash ^= discardedCardIndices_.GetHashCode();
      if (emote_ != null) hash ^= Emote.GetHashCode();
      if (entityTouch_ != null) hash ^= EntityTouch.GetHashCode();
      if (entityUntouch_ != null) hash ^= EntityUntouch.GetHashCode();
      if (firstMessage_ != null) hash ^= FirstMessage.GetHashCode();
      if (MessageType != global::Spellsource.Proto.MessageType.UpdateAction) hash ^= MessageType.GetHashCode();
      if (RepliesTo.Length != 0) hash ^= RepliesTo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ActionIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionIndex);
      }
      discardedCardIndices_.WriteTo(output, _repeated_discardedCardIndices_codec);
      if (emote_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Emote);
      }
      if (entityTouch_ != null) {
        _single_entityTouch_codec.WriteTagAndValue(output, EntityTouch);
      }
      if (entityUntouch_ != null) {
        _single_entityUntouch_codec.WriteTagAndValue(output, EntityUntouch);
      }
      if (firstMessage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FirstMessage);
      }
      if (MessageType != global::Spellsource.Proto.MessageType.UpdateAction) {
        output.WriteRawTag(56);
        output.WriteEnum((int) MessageType);
      }
      if (RepliesTo.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RepliesTo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ActionIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionIndex);
      }
      discardedCardIndices_.WriteTo(ref output, _repeated_discardedCardIndices_codec);
      if (emote_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Emote);
      }
      if (entityTouch_ != null) {
        _single_entityTouch_codec.WriteTagAndValue(ref output, EntityTouch);
      }
      if (entityUntouch_ != null) {
        _single_entityUntouch_codec.WriteTagAndValue(ref output, EntityUntouch);
      }
      if (firstMessage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FirstMessage);
      }
      if (MessageType != global::Spellsource.Proto.MessageType.UpdateAction) {
        output.WriteRawTag(56);
        output.WriteEnum((int) MessageType);
      }
      if (RepliesTo.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RepliesTo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionIndex);
      }
      size += discardedCardIndices_.CalculateSize(_repeated_discardedCardIndices_codec);
      if (emote_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Emote);
      }
      if (entityTouch_ != null) {
        size += _single_entityTouch_codec.CalculateSizeWithTag(EntityTouch);
      }
      if (entityUntouch_ != null) {
        size += _single_entityUntouch_codec.CalculateSizeWithTag(EntityUntouch);
      }
      if (firstMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstMessage);
      }
      if (MessageType != global::Spellsource.Proto.MessageType.UpdateAction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      if (RepliesTo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepliesTo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientToServerMessage other) {
      if (other == null) {
        return;
      }
      if (other.ActionIndex != 0) {
        ActionIndex = other.ActionIndex;
      }
      discardedCardIndices_.Add(other.discardedCardIndices_);
      if (other.emote_ != null) {
        if (emote_ == null) {
          Emote = new global::Spellsource.Proto.Emote();
        }
        Emote.MergeFrom(other.Emote);
      }
      if (other.entityTouch_ != null) {
        if (entityTouch_ == null || other.EntityTouch != 0) {
          EntityTouch = other.EntityTouch;
        }
      }
      if (other.entityUntouch_ != null) {
        if (entityUntouch_ == null || other.EntityUntouch != 0) {
          EntityUntouch = other.EntityUntouch;
        }
      }
      if (other.firstMessage_ != null) {
        if (firstMessage_ == null) {
          FirstMessage = new global::Spellsource.Proto.ClientToServerMessage.Types.FirstMessageMessage();
        }
        FirstMessage.MergeFrom(other.FirstMessage);
      }
      if (other.MessageType != global::Spellsource.Proto.MessageType.UpdateAction) {
        MessageType = other.MessageType;
      }
      if (other.RepliesTo.Length != 0) {
        RepliesTo = other.RepliesTo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActionIndex = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            discardedCardIndices_.AddEntriesFrom(input, _repeated_discardedCardIndices_codec);
            break;
          }
          case 26: {
            if (emote_ == null) {
              Emote = new global::Spellsource.Proto.Emote();
            }
            input.ReadMessage(Emote);
            break;
          }
          case 34: {
            int? value = _single_entityTouch_codec.Read(input);
            if (entityTouch_ == null || value != 0) {
              EntityTouch = value;
            }
            break;
          }
          case 42: {
            int? value = _single_entityUntouch_codec.Read(input);
            if (entityUntouch_ == null || value != 0) {
              EntityUntouch = value;
            }
            break;
          }
          case 50: {
            if (firstMessage_ == null) {
              FirstMessage = new global::Spellsource.Proto.ClientToServerMessage.Types.FirstMessageMessage();
            }
            input.ReadMessage(FirstMessage);
            break;
          }
          case 56: {
            MessageType = (global::Spellsource.Proto.MessageType) input.ReadEnum();
            break;
          }
          case 66: {
            RepliesTo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActionIndex = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            discardedCardIndices_.AddEntriesFrom(ref input, _repeated_discardedCardIndices_codec);
            break;
          }
          case 26: {
            if (emote_ == null) {
              Emote = new global::Spellsource.Proto.Emote();
            }
            input.ReadMessage(Emote);
            break;
          }
          case 34: {
            int? value = _single_entityTouch_codec.Read(ref input);
            if (entityTouch_ == null || value != 0) {
              EntityTouch = value;
            }
            break;
          }
          case 42: {
            int? value = _single_entityUntouch_codec.Read(ref input);
            if (entityUntouch_ == null || value != 0) {
              EntityUntouch = value;
            }
            break;
          }
          case 50: {
            if (firstMessage_ == null) {
              FirstMessage = new global::Spellsource.Proto.ClientToServerMessage.Types.FirstMessageMessage();
            }
            input.ReadMessage(FirstMessage);
            break;
          }
          case 56: {
            MessageType = (global::Spellsource.Proto.MessageType) input.ReadEnum();
            break;
          }
          case 66: {
            RepliesTo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ClientToServerMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      [global::System.SerializableAttribute]
      public sealed partial class FirstMessageMessage : pb::IMessage<FirstMessageMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FirstMessageMessage> _parser = new pb::MessageParser<FirstMessageMessage>(() => new FirstMessageMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FirstMessageMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.ClientToServerMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FirstMessageMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FirstMessageMessage(FirstMessageMessage other) : this() {
          playerKey_ = other.playerKey_;
          playerSecret_ = other.playerSecret_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FirstMessageMessage Clone() {
          return new FirstMessageMessage(this);
        }

        /// <summary>Field number for the "playerKey" field.</summary>
        public const int PlayerKeyFieldNumber = 1;
        private string playerKey_ = "";
        /// <summary>
        /// A key authenticating this connection. Used only for the first message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerKey {
          get { return playerKey_; }
          set {
            playerKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "playerSecret" field.</summary>
        public const int PlayerSecretFieldNumber = 2;
        private string playerSecret_ = "";
        /// <summary>
        /// A server-signed secret that authenticates this player for this match. Used only for the first message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerSecret {
          get { return playerSecret_; }
          set {
            playerSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FirstMessageMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FirstMessageMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerKey != other.PlayerKey) return false;
          if (PlayerSecret != other.PlayerSecret) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerKey.Length != 0) hash ^= PlayerKey.GetHashCode();
          if (PlayerSecret.Length != 0) hash ^= PlayerSecret.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PlayerKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PlayerKey);
          }
          if (PlayerSecret.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PlayerSecret);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PlayerKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PlayerKey);
          }
          if (PlayerSecret.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(PlayerSecret);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerKey);
          }
          if (PlayerSecret.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerSecret);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FirstMessageMessage other) {
          if (other == null) {
            return;
          }
          if (other.PlayerKey.Length != 0) {
            PlayerKey = other.PlayerKey;
          }
          if (other.PlayerSecret.Length != 0) {
            PlayerSecret = other.PlayerSecret;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PlayerKey = input.ReadString();
                break;
              }
              case 18: {
                PlayerSecret = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                PlayerKey = input.ReadString();
                break;
              }
              case 18: {
                PlayerSecret = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Describes a Unity color.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Color : pb::IMessage<Color>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      g_ = other.g_;
      r_ = other.r_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private float a_;
    /// <summary>
    /// Alpha in units of 0.0-1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private float b_;
    /// <summary>
    /// Blue channel in units of 0.0-1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 3;
    private float g_;
    /// <summary>
    /// Green channel in units of 0.0-1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 4;
    private float r_;
    /// <summary>
    /// Red channel in units of 0.0-1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (A != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(A);
      }
      if (B != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(B);
      }
      if (G != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(G);
      }
      if (R != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(R);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (A != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(A);
      }
      if (B != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(B);
      }
      if (G != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(G);
      }
      if (R != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(R);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (G != 0F) {
        size += 1 + 4;
      }
      if (R != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      if (other.G != 0F) {
        G = other.G;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            A = input.ReadFloat();
            break;
          }
          case 21: {
            B = input.ReadFloat();
            break;
          }
          case 29: {
            G = input.ReadFloat();
            break;
          }
          case 37: {
            R = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            A = input.ReadFloat();
            break;
          }
          case 21: {
            B = input.ReadFloat();
            break;
          }
          case 29: {
            G = input.ReadFloat();
            break;
          }
          case 37: {
            R = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class CreateAccountRequest : pb::IMessage<CreateAccountRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateAccountRequest> _parser = new pb::MessageParser<CreateAccountRequest>(() => new CreateAccountRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccountRequest(CreateAccountRequest other) : this() {
      email_ = other.email_;
      name_ = other.name_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccountRequest Clone() {
      return new CreateAccountRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    /// <summary>
    /// An email account for password resets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// A display name for the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    /// <summary>
    /// A password used to login to Spellsource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class CreateAccountResponse : pb::IMessage<CreateAccountResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateAccountResponse> _parser = new pb::MessageParser<CreateAccountResponse>(() => new CreateAccountResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateAccountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccountResponse(CreateAccountResponse other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      loginToken_ = other.loginToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateAccountResponse Clone() {
      return new CreateAccountResponse(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Spellsource.Proto.Account account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Account Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "loginToken" field.</summary>
    public const int LoginTokenFieldNumber = 2;
    private string loginToken_ = "";
    /// <summary>
    /// A string containing the token to login with via the standard Spellsource authentication method.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginToken {
      get { return loginToken_; }
      set {
        loginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateAccountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateAccountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (LoginToken != other.LoginToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (LoginToken.Length != 0) hash ^= LoginToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (LoginToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LoginToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (LoginToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LoginToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (LoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateAccountResponse other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Spellsource.Proto.Account();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.LoginToken.Length != 0) {
        LoginToken = other.LoginToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Spellsource.Proto.Account();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            LoginToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Spellsource.Proto.Account();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            LoginToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class DecksDeleteRequest : pb::IMessage<DecksDeleteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecksDeleteRequest> _parser = new pb::MessageParser<DecksDeleteRequest>(() => new DecksDeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksDeleteRequest(DecksDeleteRequest other) : this() {
      deckId_ = other.deckId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksDeleteRequest Clone() {
      return new DecksDeleteRequest(this);
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 1;
    private string deckId_ = "";
    /// <summary>
    /// The Deck ID to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeckId {
      get { return deckId_; }
      set {
        deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeckId != other.DeckId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeckId.Length != 0) {
        DeckId = other.DeckId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeckId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DeckId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class DecksGetAllResponse : pb::IMessage<DecksGetAllResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecksGetAllResponse> _parser = new pb::MessageParser<DecksGetAllResponse>(() => new DecksGetAllResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksGetAllResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetAllResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetAllResponse(DecksGetAllResponse other) : this() {
      decks_ = other.decks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetAllResponse Clone() {
      return new DecksGetAllResponse(this);
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.DecksGetResponse> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.DecksGetResponse.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.DecksGetResponse> decks_ = new pbc::RepeatedField<global::Spellsource.Proto.DecksGetResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.DecksGetResponse> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksGetAllResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksGetAllResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!decks_.Equals(other.decks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= decks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      decks_.WriteTo(output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      decks_.WriteTo(ref output, _repeated_decks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += decks_.CalculateSize(_repeated_decks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksGetAllResponse other) {
      if (other == null) {
        return;
      }
      decks_.Add(other.decks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            decks_.AddEntriesFrom(ref input, _repeated_decks_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class DecksGetRequest : pb::IMessage<DecksGetRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecksGetRequest> _parser = new pb::MessageParser<DecksGetRequest>(() => new DecksGetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetRequest(DecksGetRequest other) : this() {
      deckId_ = other.deckId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetRequest Clone() {
      return new DecksGetRequest(this);
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 1;
    private string deckId_ = "";
    /// <summary>
    /// The Deck ID to get.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeckId {
      get { return deckId_; }
      set {
        deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeckId != other.DeckId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeckId.Length != 0) {
        DeckId = other.DeckId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeckId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DeckId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class DecksGetResponse : pb::IMessage<DecksGetResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecksGetResponse> _parser = new pb::MessageParser<DecksGetResponse>(() => new DecksGetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetResponse(DecksGetResponse other) : this() {
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      inventoryIdsSize_ = other.inventoryIdsSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksGetResponse Clone() {
      return new DecksGetResponse(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private global::Spellsource.Proto.InventoryCollection collection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.InventoryCollection Collection {
      get { return collection_; }
      set {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "inventoryIdsSize" field.</summary>
    public const int InventoryIdsSizeFieldNumber = 2;
    private int inventoryIdsSize_;
    /// <summary>
    /// The current number of cards in this deck.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InventoryIdsSize {
      get { return inventoryIdsSize_; }
      set {
        inventoryIdsSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (InventoryIdsSize != other.InventoryIdsSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (InventoryIdsSize != 0) hash ^= InventoryIdsSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (InventoryIdsSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InventoryIdsSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (InventoryIdsSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InventoryIdsSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (collection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (InventoryIdsSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InventoryIdsSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksGetResponse other) {
      if (other == null) {
        return;
      }
      if (other.collection_ != null) {
        if (collection_ == null) {
          Collection = new global::Spellsource.Proto.InventoryCollection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.InventoryIdsSize != 0) {
        InventoryIdsSize = other.InventoryIdsSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Spellsource.Proto.InventoryCollection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 16: {
            InventoryIdsSize = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Spellsource.Proto.InventoryCollection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 16: {
            InventoryIdsSize = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This request allows a user to specify a decklist or deck properies for creating a new deck. Whenever a deck list
  /// is specified (non-null and not equal to the empty string), the deck list will be preferred. Decks created without
  /// a deck list may have no properties specified, and the deck will still be successfully created.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class DecksPutRequest : pb::IMessage<DecksPutRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecksPutRequest> _parser = new pb::MessageParser<DecksPutRequest>(() => new DecksPutRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksPutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksPutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksPutRequest(DecksPutRequest other) : this() {
      deckList_ = other.deckList_;
      format_ = other.format_;
      heroClass_ = other.heroClass_;
      inventoryIds_ = other.inventoryIds_.Clone();
      name_ = other.name_;
      cardIds_ = other.cardIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksPutRequest Clone() {
      return new DecksPutRequest(this);
    }

    /// <summary>Field number for the "deckList" field.</summary>
    public const int DeckListFieldNumber = 1;
    private string deckList_ = "";
    /// <summary>
    /// A community-standard decklist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeckList {
      get { return deckList_; }
      set {
        deckList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private string format_ = "";
    /// <summary>
    /// The format of this deck. Format specifies which cards are allowable in this deck for validation. It also
    /// specifies which cards will appear in discovers during matchmaking.
    /// 
    /// Currenly, matchmaking occurs between decks of all formats, regardless of your choice of format. The smallest
    /// possible format encompassing both decks in a match is selected when the formats of the decks do not match.
    /// 
    /// Certain queues only support certain formats. Typically, when requesting the listing of queues with
    /// matchmakingGet, the queues will specify which current decks can be chosen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroClass" field.</summary>
    public const int HeroClassFieldNumber = 3;
    private string heroClass_ = "";
    /// <summary>
    /// A valid hero class for creating the deck. The appropriate hero card will be chosen for this deck unless
    /// otherwise specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroClass {
      get { return heroClass_; }
      set {
        heroClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inventoryIds" field.</summary>
    public const int InventoryIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_inventoryIds_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> inventoryIds_ = new pbc::RepeatedField<string>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InventoryIds {
      get { return inventoryIds_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// The name of the deck as it will appear in the collections view. Typically, your opponent will not be able to
    /// see this name.
    /// 
    /// Some custom cards interact with specific named decks in your collection. For those purposes, the deck names
    /// are case sensitive. When multiple decks share a name, one will be chosen arbitrarily (not at random).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cardIds" field.</summary>
    public const int CardIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_cardIds_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> cardIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CardIds {
      get { return cardIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksPutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksPutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeckList != other.DeckList) return false;
      if (Format != other.Format) return false;
      if (HeroClass != other.HeroClass) return false;
      if(!inventoryIds_.Equals(other.inventoryIds_)) return false;
      if (Name != other.Name) return false;
      if(!cardIds_.Equals(other.cardIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeckList.Length != 0) hash ^= DeckList.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (HeroClass.Length != 0) hash ^= HeroClass.GetHashCode();
      hash ^= inventoryIds_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= cardIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DeckList.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckList);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
      if (HeroClass.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeroClass);
      }
      inventoryIds_.WriteTo(output, _repeated_inventoryIds_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DeckList.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckList);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
      if (HeroClass.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeroClass);
      }
      inventoryIds_.WriteTo(ref output, _repeated_inventoryIds_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      cardIds_.WriteTo(ref output, _repeated_cardIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeckList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckList);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (HeroClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroClass);
      }
      size += inventoryIds_.CalculateSize(_repeated_inventoryIds_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksPutRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeckList.Length != 0) {
        DeckList = other.DeckList;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.HeroClass.Length != 0) {
        HeroClass = other.HeroClass;
      }
      inventoryIds_.Add(other.inventoryIds_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      cardIds_.Add(other.cardIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeckList = input.ReadString();
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
          case 26: {
            HeroClass = input.ReadString();
            break;
          }
          case 34: {
            inventoryIds_.AddEntriesFrom(input, _repeated_inventoryIds_codec);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DeckList = input.ReadString();
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
          case 26: {
            HeroClass = input.ReadString();
            break;
          }
          case 34: {
            inventoryIds_.AddEntriesFrom(ref input, _repeated_inventoryIds_codec);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            cardIds_.AddEntriesFrom(ref input, _repeated_cardIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The deck that was created by a deck put request.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class DecksPutResponse : pb::IMessage<DecksPutResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecksPutResponse> _parser = new pb::MessageParser<DecksPutResponse>(() => new DecksPutResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksPutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksPutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksPutResponse(DecksPutResponse other) : this() {
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      deckId_ = other.deckId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksPutResponse Clone() {
      return new DecksPutResponse(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private global::Spellsource.Proto.InventoryCollection collection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.InventoryCollection Collection {
      get { return collection_; }
      set {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 2;
    private string deckId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeckId {
      get { return deckId_; }
      set {
        deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksPutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksPutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (DeckId != other.DeckId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (DeckId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (DeckId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeckId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (collection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (DeckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksPutResponse other) {
      if (other == null) {
        return;
      }
      if (other.collection_ != null) {
        if (collection_ == null) {
          Collection = new global::Spellsource.Proto.InventoryCollection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.DeckId.Length != 0) {
        DeckId = other.DeckId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Spellsource.Proto.InventoryCollection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 18: {
            DeckId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Spellsource.Proto.InventoryCollection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 18: {
            DeckId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This command contains a variable number of changes to apply to a deck. Whenever multiple fields are set, the
  /// server will try to resolve their effects in the least surprising way possible.
  /// 
  /// Specifically, if setInventoryIds is set, it will override all other changes to the inventory. Otherwise, removals
  /// will be evaluated first, preferring inventory ID removals over card ID removals, followed by adds.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class DecksUpdateCommand : pb::IMessage<DecksUpdateCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecksUpdateCommand> _parser = new pb::MessageParser<DecksUpdateCommand>(() => new DecksUpdateCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksUpdateCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksUpdateCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksUpdateCommand(DecksUpdateCommand other) : this() {
      pullAllCardIds_ = other.pullAllCardIds_.Clone();
      pullAllInventoryIds_ = other.pullAllInventoryIds_.Clone();
      pushCardIds_ = other.pushCardIds_ != null ? other.pushCardIds_.Clone() : null;
      pushInventoryIds_ = other.pushInventoryIds_ != null ? other.pushInventoryIds_.Clone() : null;
      setHeroClass_ = other.setHeroClass_;
      setInventoryIds_ = other.setInventoryIds_.Clone();
      setName_ = other.setName_;
      setPlayerEntityAttribute_ = other.setPlayerEntityAttribute_ != null ? other.setPlayerEntityAttribute_.Clone() : null;
      unsetPlayerEntityAttribute_ = other.unsetPlayerEntityAttribute_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksUpdateCommand Clone() {
      return new DecksUpdateCommand(this);
    }

    /// <summary>Field number for the "pullAllCardIds" field.</summary>
    public const int PullAllCardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_pullAllCardIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> pullAllCardIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Removes all the specified card IDs from the user's deck. Does nothing if the deck does not contain any of the
    /// specified card IDs. This method will still succeed for deck IDs that are found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PullAllCardIds {
      get { return pullAllCardIds_; }
    }

    /// <summary>Field number for the "pullAllInventoryIds" field.</summary>
    public const int PullAllInventoryIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_pullAllInventoryIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> pullAllInventoryIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Removes all the specified inventory IDs from the user's deck. Does nothing if the deck does not contain any of
    /// the specified inventory IDs. This method will still succeed for inventory IDs that are found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PullAllInventoryIds {
      get { return pullAllInventoryIds_; }
    }

    /// <summary>Field number for the "pushCardIds" field.</summary>
    public const int PushCardIdsFieldNumber = 3;
    private global::Spellsource.Proto.DecksUpdateCommand.Types.PushCardIdsMessage pushCardIds_;
    /// <summary>
    /// Adds the specified card IDs to the deck with this command. If the player doesn't own the card IDs, the current
    /// Spellsource inventory rules will grant the cards to the user. Duplicates are allowed. Under standard rules,
    /// the deck becomes invalid if the number of duplicates exceeds 2; or, if the hero class isn't neutral or the
    /// same as the deck's hero class.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.DecksUpdateCommand.Types.PushCardIdsMessage PushCardIds {
      get { return pushCardIds_; }
      set {
        pushCardIds_ = value;
      }
    }

    /// <summary>Field number for the "pushInventoryIds" field.</summary>
    public const int PushInventoryIdsFieldNumber = 4;
    private global::Spellsource.Proto.DecksUpdateCommand.Types.PushInventoryIdsMessage pushInventoryIds_;
    /// <summary>
    /// Adds the specified inventory IDs to the deck in this command. Duplicate inventory IDs will cause the update to
    /// be rejected. If the user does not own these inventory IDs, the deck becomes invalid. Under standard rules,
    /// duplicate card IDs also make the deck invalid. Finally, adding cards whose hero class isn't neutral or the
    /// same as the deck's hero class marks the deck as invalid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.DecksUpdateCommand.Types.PushInventoryIdsMessage PushInventoryIds {
      get { return pushInventoryIds_; }
      set {
        pushInventoryIds_ = value;
      }
    }

    /// <summary>Field number for the "setHeroClass" field.</summary>
    public const int SetHeroClassFieldNumber = 5;
    private string setHeroClass_ = "";
    /// <summary>
    /// Sets the hero class of the deck in this command. If the deck now contains cards that no longer belong to this
    /// hero class, the deck becomes invalid under standard rules.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SetHeroClass {
      get { return setHeroClass_; }
      set {
        setHeroClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setInventoryIds" field.</summary>
    public const int SetInventoryIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_setInventoryIds_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> setInventoryIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Sets the entire deck's inventory IDs in this command. Duplicate inventory IDs will cause the update to
    /// be rejected. If the user does not own these inventory IDs, the deck becomes invalid. Under standard rules,
    /// duplicate card IDs also make the deck invalid. Finally, adding cards whose hero class isn't neutral or the
    /// same as the deck's hero class marks the deck as invalid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SetInventoryIds {
      get { return setInventoryIds_; }
    }

    /// <summary>Field number for the "setName" field.</summary>
    public const int SetNameFieldNumber = 7;
    private string setName_ = "";
    /// <summary>
    /// Sets the name of the deck in this command. If the name is null, the deck becomes invalid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SetName {
      get { return setName_; }
      set {
        setName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setPlayerEntityAttribute" field.</summary>
    public const int SetPlayerEntityAttributeFieldNumber = 8;
    private global::Spellsource.Proto.DecksUpdateCommand.Types.SetPlayerEntityAttributeMessage setPlayerEntityAttribute_;
    /// <summary>
    /// Sets a player entity attribute in CAMEL_CASE, like SIGNATURE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.DecksUpdateCommand.Types.SetPlayerEntityAttributeMessage SetPlayerEntityAttribute {
      get { return setPlayerEntityAttribute_; }
      set {
        setPlayerEntityAttribute_ = value;
      }
    }

    /// <summary>Field number for the "unsetPlayerEntityAttribute" field.</summary>
    public const int UnsetPlayerEntityAttributeFieldNumber = 9;
    private string unsetPlayerEntityAttribute_ = "";
    /// <summary>
    /// Unsets (clears) the player entity attribute specified here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnsetPlayerEntityAttribute {
      get { return unsetPlayerEntityAttribute_; }
      set {
        unsetPlayerEntityAttribute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksUpdateCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksUpdateCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pullAllCardIds_.Equals(other.pullAllCardIds_)) return false;
      if(!pullAllInventoryIds_.Equals(other.pullAllInventoryIds_)) return false;
      if (!object.Equals(PushCardIds, other.PushCardIds)) return false;
      if (!object.Equals(PushInventoryIds, other.PushInventoryIds)) return false;
      if (SetHeroClass != other.SetHeroClass) return false;
      if(!setInventoryIds_.Equals(other.setInventoryIds_)) return false;
      if (SetName != other.SetName) return false;
      if (!object.Equals(SetPlayerEntityAttribute, other.SetPlayerEntityAttribute)) return false;
      if (UnsetPlayerEntityAttribute != other.UnsetPlayerEntityAttribute) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pullAllCardIds_.GetHashCode();
      hash ^= pullAllInventoryIds_.GetHashCode();
      if (pushCardIds_ != null) hash ^= PushCardIds.GetHashCode();
      if (pushInventoryIds_ != null) hash ^= PushInventoryIds.GetHashCode();
      if (SetHeroClass.Length != 0) hash ^= SetHeroClass.GetHashCode();
      hash ^= setInventoryIds_.GetHashCode();
      if (SetName.Length != 0) hash ^= SetName.GetHashCode();
      if (setPlayerEntityAttribute_ != null) hash ^= SetPlayerEntityAttribute.GetHashCode();
      if (UnsetPlayerEntityAttribute.Length != 0) hash ^= UnsetPlayerEntityAttribute.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pullAllCardIds_.WriteTo(output, _repeated_pullAllCardIds_codec);
      pullAllInventoryIds_.WriteTo(output, _repeated_pullAllInventoryIds_codec);
      if (pushCardIds_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PushCardIds);
      }
      if (pushInventoryIds_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PushInventoryIds);
      }
      if (SetHeroClass.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SetHeroClass);
      }
      setInventoryIds_.WriteTo(output, _repeated_setInventoryIds_codec);
      if (SetName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SetName);
      }
      if (setPlayerEntityAttribute_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SetPlayerEntityAttribute);
      }
      if (UnsetPlayerEntityAttribute.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UnsetPlayerEntityAttribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pullAllCardIds_.WriteTo(ref output, _repeated_pullAllCardIds_codec);
      pullAllInventoryIds_.WriteTo(ref output, _repeated_pullAllInventoryIds_codec);
      if (pushCardIds_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PushCardIds);
      }
      if (pushInventoryIds_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PushInventoryIds);
      }
      if (SetHeroClass.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SetHeroClass);
      }
      setInventoryIds_.WriteTo(ref output, _repeated_setInventoryIds_codec);
      if (SetName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SetName);
      }
      if (setPlayerEntityAttribute_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SetPlayerEntityAttribute);
      }
      if (UnsetPlayerEntityAttribute.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UnsetPlayerEntityAttribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pullAllCardIds_.CalculateSize(_repeated_pullAllCardIds_codec);
      size += pullAllInventoryIds_.CalculateSize(_repeated_pullAllInventoryIds_codec);
      if (pushCardIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PushCardIds);
      }
      if (pushInventoryIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PushInventoryIds);
      }
      if (SetHeroClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SetHeroClass);
      }
      size += setInventoryIds_.CalculateSize(_repeated_setInventoryIds_codec);
      if (SetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SetName);
      }
      if (setPlayerEntityAttribute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetPlayerEntityAttribute);
      }
      if (UnsetPlayerEntityAttribute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnsetPlayerEntityAttribute);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksUpdateCommand other) {
      if (other == null) {
        return;
      }
      pullAllCardIds_.Add(other.pullAllCardIds_);
      pullAllInventoryIds_.Add(other.pullAllInventoryIds_);
      if (other.pushCardIds_ != null) {
        if (pushCardIds_ == null) {
          PushCardIds = new global::Spellsource.Proto.DecksUpdateCommand.Types.PushCardIdsMessage();
        }
        PushCardIds.MergeFrom(other.PushCardIds);
      }
      if (other.pushInventoryIds_ != null) {
        if (pushInventoryIds_ == null) {
          PushInventoryIds = new global::Spellsource.Proto.DecksUpdateCommand.Types.PushInventoryIdsMessage();
        }
        PushInventoryIds.MergeFrom(other.PushInventoryIds);
      }
      if (other.SetHeroClass.Length != 0) {
        SetHeroClass = other.SetHeroClass;
      }
      setInventoryIds_.Add(other.setInventoryIds_);
      if (other.SetName.Length != 0) {
        SetName = other.SetName;
      }
      if (other.setPlayerEntityAttribute_ != null) {
        if (setPlayerEntityAttribute_ == null) {
          SetPlayerEntityAttribute = new global::Spellsource.Proto.DecksUpdateCommand.Types.SetPlayerEntityAttributeMessage();
        }
        SetPlayerEntityAttribute.MergeFrom(other.SetPlayerEntityAttribute);
      }
      if (other.UnsetPlayerEntityAttribute.Length != 0) {
        UnsetPlayerEntityAttribute = other.UnsetPlayerEntityAttribute;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pullAllCardIds_.AddEntriesFrom(input, _repeated_pullAllCardIds_codec);
            break;
          }
          case 18: {
            pullAllInventoryIds_.AddEntriesFrom(input, _repeated_pullAllInventoryIds_codec);
            break;
          }
          case 26: {
            if (pushCardIds_ == null) {
              PushCardIds = new global::Spellsource.Proto.DecksUpdateCommand.Types.PushCardIdsMessage();
            }
            input.ReadMessage(PushCardIds);
            break;
          }
          case 34: {
            if (pushInventoryIds_ == null) {
              PushInventoryIds = new global::Spellsource.Proto.DecksUpdateCommand.Types.PushInventoryIdsMessage();
            }
            input.ReadMessage(PushInventoryIds);
            break;
          }
          case 42: {
            SetHeroClass = input.ReadString();
            break;
          }
          case 50: {
            setInventoryIds_.AddEntriesFrom(input, _repeated_setInventoryIds_codec);
            break;
          }
          case 58: {
            SetName = input.ReadString();
            break;
          }
          case 66: {
            if (setPlayerEntityAttribute_ == null) {
              SetPlayerEntityAttribute = new global::Spellsource.Proto.DecksUpdateCommand.Types.SetPlayerEntityAttributeMessage();
            }
            input.ReadMessage(SetPlayerEntityAttribute);
            break;
          }
          case 74: {
            UnsetPlayerEntityAttribute = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pullAllCardIds_.AddEntriesFrom(ref input, _repeated_pullAllCardIds_codec);
            break;
          }
          case 18: {
            pullAllInventoryIds_.AddEntriesFrom(ref input, _repeated_pullAllInventoryIds_codec);
            break;
          }
          case 26: {
            if (pushCardIds_ == null) {
              PushCardIds = new global::Spellsource.Proto.DecksUpdateCommand.Types.PushCardIdsMessage();
            }
            input.ReadMessage(PushCardIds);
            break;
          }
          case 34: {
            if (pushInventoryIds_ == null) {
              PushInventoryIds = new global::Spellsource.Proto.DecksUpdateCommand.Types.PushInventoryIdsMessage();
            }
            input.ReadMessage(PushInventoryIds);
            break;
          }
          case 42: {
            SetHeroClass = input.ReadString();
            break;
          }
          case 50: {
            setInventoryIds_.AddEntriesFrom(ref input, _repeated_setInventoryIds_codec);
            break;
          }
          case 58: {
            SetName = input.ReadString();
            break;
          }
          case 66: {
            if (setPlayerEntityAttribute_ == null) {
              SetPlayerEntityAttribute = new global::Spellsource.Proto.DecksUpdateCommand.Types.SetPlayerEntityAttributeMessage();
            }
            input.ReadMessage(SetPlayerEntityAttribute);
            break;
          }
          case 74: {
            UnsetPlayerEntityAttribute = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DecksUpdateCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      [global::System.SerializableAttribute]
      public sealed partial class PushCardIdsMessage : pb::IMessage<PushCardIdsMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PushCardIdsMessage> _parser = new pb::MessageParser<PushCardIdsMessage>(() => new PushCardIdsMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PushCardIdsMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.DecksUpdateCommand.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushCardIdsMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushCardIdsMessage(PushCardIdsMessage other) : this() {
          Each_ = other.Each_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushCardIdsMessage Clone() {
          return new PushCardIdsMessage(this);
        }

        /// <summary>Field number for the "_each" field.</summary>
        public const int EachFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_Each_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> Each_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// The items in this array specify which card IDs should be added.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Each {
          get { return Each_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PushCardIdsMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PushCardIdsMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!Each_.Equals(other.Each_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= Each_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          Each_.WriteTo(output, _repeated_Each_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          Each_.WriteTo(ref output, _repeated_Each_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += Each_.CalculateSize(_repeated_Each_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PushCardIdsMessage other) {
          if (other == null) {
            return;
          }
          Each_.Add(other.Each_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Each_.AddEntriesFrom(input, _repeated_Each_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Each_.AddEntriesFrom(ref input, _repeated_Each_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.SerializableAttribute]
      public sealed partial class PushInventoryIdsMessage : pb::IMessage<PushInventoryIdsMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PushInventoryIdsMessage> _parser = new pb::MessageParser<PushInventoryIdsMessage>(() => new PushInventoryIdsMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PushInventoryIdsMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.DecksUpdateCommand.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushInventoryIdsMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushInventoryIdsMessage(PushInventoryIdsMessage other) : this() {
          Each_ = other.Each_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PushInventoryIdsMessage Clone() {
          return new PushInventoryIdsMessage(this);
        }

        /// <summary>Field number for the "_each" field.</summary>
        public const int EachFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_Each_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> Each_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// The items in this array specify which inventory IDs should be added.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Each {
          get { return Each_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PushInventoryIdsMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PushInventoryIdsMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!Each_.Equals(other.Each_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= Each_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          Each_.WriteTo(output, _repeated_Each_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          Each_.WriteTo(ref output, _repeated_Each_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += Each_.CalculateSize(_repeated_Each_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PushInventoryIdsMessage other) {
          if (other == null) {
            return;
          }
          Each_.Add(other.Each_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Each_.AddEntriesFrom(input, _repeated_Each_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Each_.AddEntriesFrom(ref input, _repeated_Each_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.SerializableAttribute]
      public sealed partial class SetPlayerEntityAttributeMessage : pb::IMessage<SetPlayerEntityAttributeMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SetPlayerEntityAttributeMessage> _parser = new pb::MessageParser<SetPlayerEntityAttributeMessage>(() => new SetPlayerEntityAttributeMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SetPlayerEntityAttributeMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.DecksUpdateCommand.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetPlayerEntityAttributeMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetPlayerEntityAttributeMessage(SetPlayerEntityAttributeMessage other) : this() {
          attribute_ = other.attribute_;
          stringValue_ = other.stringValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SetPlayerEntityAttributeMessage Clone() {
          return new SetPlayerEntityAttributeMessage(this);
        }

        /// <summary>Field number for the "attribute" field.</summary>
        public const int AttributeFieldNumber = 1;
        private global::Spellsource.Proto.PlayerEntityAttributes attribute_ = global::Spellsource.Proto.PlayerEntityAttributes.Signature;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.PlayerEntityAttributes Attribute {
          get { return attribute_; }
          set {
            attribute_ = value;
          }
        }

        /// <summary>Field number for the "stringValue" field.</summary>
        public const int StringValueFieldNumber = 2;
        private string stringValue_ = "";
        /// <summary>
        /// The string value of the attribute.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringValue {
          get { return stringValue_; }
          set {
            stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SetPlayerEntityAttributeMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SetPlayerEntityAttributeMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Attribute != other.Attribute) return false;
          if (StringValue != other.StringValue) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) hash ^= Attribute.GetHashCode();
          if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Attribute);
          }
          if (StringValue.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(StringValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Attribute);
          }
          if (StringValue.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(StringValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Attribute);
          }
          if (StringValue.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SetPlayerEntityAttributeMessage other) {
          if (other == null) {
            return;
          }
          if (other.Attribute != global::Spellsource.Proto.PlayerEntityAttributes.Signature) {
            Attribute = other.Attribute;
          }
          if (other.StringValue.Length != 0) {
            StringValue = other.StringValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Attribute = (global::Spellsource.Proto.PlayerEntityAttributes) input.ReadEnum();
                break;
              }
              case 18: {
                StringValue = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Attribute = (global::Spellsource.Proto.PlayerEntityAttributes) input.ReadEnum();
                break;
              }
              case 18: {
                StringValue = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  [global::System.SerializableAttribute]
  public sealed partial class DecksUpdateRequest : pb::IMessage<DecksUpdateRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DecksUpdateRequest> _parser = new pb::MessageParser<DecksUpdateRequest>(() => new DecksUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecksUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksUpdateRequest(DecksUpdateRequest other) : this() {
      deckId_ = other.deckId_;
      updateCommand_ = other.updateCommand_ != null ? other.updateCommand_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecksUpdateRequest Clone() {
      return new DecksUpdateRequest(this);
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 1;
    private string deckId_ = "";
    /// <summary>
    /// The Deck ID to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeckId {
      get { return deckId_; }
      set {
        deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateCommand" field.</summary>
    public const int UpdateCommandFieldNumber = 2;
    private global::Spellsource.Proto.DecksUpdateCommand updateCommand_;
    /// <summary>
    /// An update command modifying specified properties of the deck.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.DecksUpdateCommand UpdateCommand {
      get { return updateCommand_; }
      set {
        updateCommand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecksUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecksUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeckId != other.DeckId) return false;
      if (!object.Equals(UpdateCommand, other.UpdateCommand)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
      if (updateCommand_ != null) hash ^= UpdateCommand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckId);
      }
      if (updateCommand_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckId);
      }
      if (updateCommand_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
      }
      if (updateCommand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateCommand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecksUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeckId.Length != 0) {
        DeckId = other.DeckId;
      }
      if (other.updateCommand_ != null) {
        if (updateCommand_ == null) {
          UpdateCommand = new global::Spellsource.Proto.DecksUpdateCommand();
        }
        UpdateCommand.MergeFrom(other.UpdateCommand);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeckId = input.ReadString();
            break;
          }
          case 18: {
            if (updateCommand_ == null) {
              UpdateCommand = new global::Spellsource.Proto.DecksUpdateCommand();
            }
            input.ReadMessage(UpdateCommand);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DeckId = input.ReadString();
            break;
          }
          case 18: {
            if (updateCommand_ == null) {
              UpdateCommand = new global::Spellsource.Proto.DecksUpdateCommand();
            }
            input.ReadMessage(UpdateCommand);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Indicates a default, successful response.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class DefaultMethodResponse : pb::IMessage<DefaultMethodResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DefaultMethodResponse> _parser = new pb::MessageParser<DefaultMethodResponse>(() => new DefaultMethodResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefaultMethodResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultMethodResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultMethodResponse(DefaultMethodResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultMethodResponse Clone() {
      return new DefaultMethodResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefaultMethodResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefaultMethodResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefaultMethodResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class DeleteInviteRequest : pb::IMessage<DeleteInviteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteInviteRequest> _parser = new pb::MessageParser<DeleteInviteRequest>(() => new DeleteInviteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteInviteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInviteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInviteRequest(DeleteInviteRequest other) : this() {
      inviteId_ = other.inviteId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInviteRequest Clone() {
      return new DeleteInviteRequest(this);
    }

    /// <summary>Field number for the "inviteId" field.</summary>
    public const int InviteIdFieldNumber = 1;
    private string inviteId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteInviteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteInviteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InviteId != other.InviteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InviteId.Length != 0) hash ^= InviteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InviteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InviteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InviteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InviteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InviteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InviteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteInviteRequest other) {
      if (other == null) {
        return;
      }
      if (other.InviteId.Length != 0) {
        InviteId = other.InviteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InviteId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InviteId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Contains information about an actor being destroyed.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Destroy : pb::IMessage<Destroy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Destroy> _parser = new pb::MessageParser<Destroy>(() => new Destroy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Destroy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy(Destroy other) : this() {
      aftermaths_ = other.aftermaths_.Clone();
      source_ = other.source_ != null ? other.source_.Clone() : null;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Destroy Clone() {
      return new Destroy(this);
    }

    /// <summary>Field number for the "aftermaths" field.</summary>
    public const int AftermathsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Entity> _repeated_aftermaths_codec
        = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.Entity.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Entity> aftermaths_ = new pbc::RepeatedField<global::Spellsource.Proto.Entity>();
    /// <summary>
    /// Aftermaths that will fire due to this actor being destroyed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Entity> Aftermaths {
      get { return aftermaths_; }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::Spellsource.Proto.Entity source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private global::Spellsource.Proto.Entity target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Destroy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Destroy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aftermaths_.Equals(other.aftermaths_)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aftermaths_.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      aftermaths_.WriteTo(output, _repeated_aftermaths_codec);
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      aftermaths_.WriteTo(ref output, _repeated_aftermaths_codec);
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aftermaths_.CalculateSize(_repeated_aftermaths_codec);
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Destroy other) {
      if (other == null) {
        return;
      }
      aftermaths_.Add(other.aftermaths_);
      if (other.source_ != null) {
        if (source_ == null) {
          Source = new global::Spellsource.Proto.Entity();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Spellsource.Proto.Entity();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            aftermaths_.AddEntriesFrom(input, _repeated_aftermaths_codec);
            break;
          }
          case 18: {
            if (source_ == null) {
              Source = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Source);
            break;
          }
          case 26: {
            if (target_ == null) {
              Target = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            aftermaths_.AddEntriesFrom(ref input, _repeated_aftermaths_codec);
            break;
          }
          case 18: {
            if (source_ == null) {
              Source = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Source);
            break;
          }
          case 26: {
            if (target_ == null) {
              Target = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Describes the current state of a draft, including the deck in progress, the new choices,
  /// and the hero choices.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class DraftState : pb::IMessage<DraftState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DraftState> _parser = new pb::MessageParser<DraftState>(() => new DraftState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DraftState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftState(DraftState other) : this() {
      cardsRemaining_ = other.cardsRemaining_;
      currentCardChoices_ = other.currentCardChoices_.Clone();
      deckId_ = other.deckId_;
      draftIndex_ = other.draftIndex_;
      heroClass_ = other.heroClass_ != null ? other.heroClass_.Clone() : null;
      heroClassChoices_ = other.heroClassChoices_.Clone();
      losses_ = other.losses_;
      selectedCardIds_ = other.selectedCardIds_.Clone();
      status_ = other.status_;
      wins_ = other.wins_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftState Clone() {
      return new DraftState(this);
    }

    /// <summary>Field number for the "cardsRemaining" field.</summary>
    public const int CardsRemainingFieldNumber = 1;
    private int cardsRemaining_;
    /// <summary>
    /// Gets the number of card choices remaining to make.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardsRemaining {
      get { return cardsRemaining_; }
      set {
        cardsRemaining_ = value;
      }
    }

    /// <summary>Field number for the "currentCardChoices" field.</summary>
    public const int CurrentCardChoicesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Entity> _repeated_currentCardChoices_codec
        = pb::FieldCodec.ForMessage(18, global::Spellsource.Proto.Entity.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Entity> currentCardChoices_ = new pbc::RepeatedField<global::Spellsource.Proto.Entity>();
    /// <summary>
    /// When not null, contains the cards that correspond to your choices for the next draft selection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Entity> CurrentCardChoices {
      get { return currentCardChoices_; }
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 3;
    private string deckId_ = "";
    /// <summary>
    /// The deck that corresponds to your finished draft deck.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeckId {
      get { return deckId_; }
      set {
        deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "draftIndex" field.</summary>
    public const int DraftIndexFieldNumber = 4;
    private int draftIndex_;
    /// <summary>
    /// Gets the current draft index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DraftIndex {
      get { return draftIndex_; }
      set {
        draftIndex_ = value;
      }
    }

    /// <summary>Field number for the "heroClass" field.</summary>
    public const int HeroClassFieldNumber = 5;
    private global::Spellsource.Proto.Entity heroClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity HeroClass {
      get { return heroClass_; }
      set {
        heroClass_ = value;
      }
    }

    /// <summary>Field number for the "heroClassChoices" field.</summary>
    public const int HeroClassChoicesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Entity> _repeated_heroClassChoices_codec
        = pb::FieldCodec.ForMessage(50, global::Spellsource.Proto.Entity.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Entity> heroClassChoices_ = new pbc::RepeatedField<global::Spellsource.Proto.Entity>();
    /// <summary>
    /// When not null, contains three choices you should reply with to choose the hero of your draft.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Entity> HeroClassChoices {
      get { return heroClassChoices_; }
    }

    /// <summary>Field number for the "losses" field.</summary>
    public const int LossesFieldNumber = 7;
    private int losses_;
    /// <summary>
    /// The number of losses you have suffered with your current draft deck.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Losses {
      get { return losses_; }
      set {
        losses_ = value;
      }
    }

    /// <summary>Field number for the "selectedCardIds" field.</summary>
    public const int SelectedCardIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_selectedCardIds_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> selectedCardIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SelectedCardIds {
      get { return selectedCardIds_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private global::Spellsource.Proto.DraftState.Types.DraftStateStatus status_ = global::Spellsource.Proto.DraftState.Types.DraftStateStatus.InProgress;
    /// <summary>
    /// Gets the status of the draft.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.DraftState.Types.DraftStateStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 10;
    private int wins_;
    /// <summary>
    /// The number of wins you have achieved with your current draft deck.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wins {
      get { return wins_; }
      set {
        wins_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DraftState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DraftState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardsRemaining != other.CardsRemaining) return false;
      if(!currentCardChoices_.Equals(other.currentCardChoices_)) return false;
      if (DeckId != other.DeckId) return false;
      if (DraftIndex != other.DraftIndex) return false;
      if (!object.Equals(HeroClass, other.HeroClass)) return false;
      if(!heroClassChoices_.Equals(other.heroClassChoices_)) return false;
      if (Losses != other.Losses) return false;
      if(!selectedCardIds_.Equals(other.selectedCardIds_)) return false;
      if (Status != other.Status) return false;
      if (Wins != other.Wins) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardsRemaining != 0) hash ^= CardsRemaining.GetHashCode();
      hash ^= currentCardChoices_.GetHashCode();
      if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
      if (DraftIndex != 0) hash ^= DraftIndex.GetHashCode();
      if (heroClass_ != null) hash ^= HeroClass.GetHashCode();
      hash ^= heroClassChoices_.GetHashCode();
      if (Losses != 0) hash ^= Losses.GetHashCode();
      hash ^= selectedCardIds_.GetHashCode();
      if (Status != global::Spellsource.Proto.DraftState.Types.DraftStateStatus.InProgress) hash ^= Status.GetHashCode();
      if (Wins != 0) hash ^= Wins.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CardsRemaining != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardsRemaining);
      }
      currentCardChoices_.WriteTo(output, _repeated_currentCardChoices_codec);
      if (DeckId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeckId);
      }
      if (DraftIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DraftIndex);
      }
      if (heroClass_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(HeroClass);
      }
      heroClassChoices_.WriteTo(output, _repeated_heroClassChoices_codec);
      if (Losses != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Losses);
      }
      selectedCardIds_.WriteTo(output, _repeated_selectedCardIds_codec);
      if (Status != global::Spellsource.Proto.DraftState.Types.DraftStateStatus.InProgress) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
      if (Wins != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Wins);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CardsRemaining != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardsRemaining);
      }
      currentCardChoices_.WriteTo(ref output, _repeated_currentCardChoices_codec);
      if (DeckId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeckId);
      }
      if (DraftIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DraftIndex);
      }
      if (heroClass_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(HeroClass);
      }
      heroClassChoices_.WriteTo(ref output, _repeated_heroClassChoices_codec);
      if (Losses != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Losses);
      }
      selectedCardIds_.WriteTo(ref output, _repeated_selectedCardIds_codec);
      if (Status != global::Spellsource.Proto.DraftState.Types.DraftStateStatus.InProgress) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
      if (Wins != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Wins);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardsRemaining != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsRemaining);
      }
      size += currentCardChoices_.CalculateSize(_repeated_currentCardChoices_codec);
      if (DeckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
      }
      if (DraftIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DraftIndex);
      }
      if (heroClass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroClass);
      }
      size += heroClassChoices_.CalculateSize(_repeated_heroClassChoices_codec);
      if (Losses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Losses);
      }
      size += selectedCardIds_.CalculateSize(_repeated_selectedCardIds_codec);
      if (Status != global::Spellsource.Proto.DraftState.Types.DraftStateStatus.InProgress) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Wins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wins);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DraftState other) {
      if (other == null) {
        return;
      }
      if (other.CardsRemaining != 0) {
        CardsRemaining = other.CardsRemaining;
      }
      currentCardChoices_.Add(other.currentCardChoices_);
      if (other.DeckId.Length != 0) {
        DeckId = other.DeckId;
      }
      if (other.DraftIndex != 0) {
        DraftIndex = other.DraftIndex;
      }
      if (other.heroClass_ != null) {
        if (heroClass_ == null) {
          HeroClass = new global::Spellsource.Proto.Entity();
        }
        HeroClass.MergeFrom(other.HeroClass);
      }
      heroClassChoices_.Add(other.heroClassChoices_);
      if (other.Losses != 0) {
        Losses = other.Losses;
      }
      selectedCardIds_.Add(other.selectedCardIds_);
      if (other.Status != global::Spellsource.Proto.DraftState.Types.DraftStateStatus.InProgress) {
        Status = other.Status;
      }
      if (other.Wins != 0) {
        Wins = other.Wins;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardsRemaining = input.ReadInt32();
            break;
          }
          case 18: {
            currentCardChoices_.AddEntriesFrom(input, _repeated_currentCardChoices_codec);
            break;
          }
          case 26: {
            DeckId = input.ReadString();
            break;
          }
          case 32: {
            DraftIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (heroClass_ == null) {
              HeroClass = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(HeroClass);
            break;
          }
          case 50: {
            heroClassChoices_.AddEntriesFrom(input, _repeated_heroClassChoices_codec);
            break;
          }
          case 56: {
            Losses = input.ReadInt32();
            break;
          }
          case 66: {
            selectedCardIds_.AddEntriesFrom(input, _repeated_selectedCardIds_codec);
            break;
          }
          case 72: {
            Status = (global::Spellsource.Proto.DraftState.Types.DraftStateStatus) input.ReadEnum();
            break;
          }
          case 80: {
            Wins = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CardsRemaining = input.ReadInt32();
            break;
          }
          case 18: {
            currentCardChoices_.AddEntriesFrom(ref input, _repeated_currentCardChoices_codec);
            break;
          }
          case 26: {
            DeckId = input.ReadString();
            break;
          }
          case 32: {
            DraftIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (heroClass_ == null) {
              HeroClass = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(HeroClass);
            break;
          }
          case 50: {
            heroClassChoices_.AddEntriesFrom(ref input, _repeated_heroClassChoices_codec);
            break;
          }
          case 56: {
            Losses = input.ReadInt32();
            break;
          }
          case 66: {
            selectedCardIds_.AddEntriesFrom(ref input, _repeated_selectedCardIds_codec);
            break;
          }
          case 72: {
            Status = (global::Spellsource.Proto.DraftState.Types.DraftStateStatus) input.ReadEnum();
            break;
          }
          case 80: {
            Wins = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DraftState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DraftStateStatus {
        [pbr::OriginalName("DRAFT_STATE_STATUS_IN_PROGRESS")] InProgress = 0,
        [pbr::OriginalName("DRAFT_STATE_STATUS_SELECT_HERO")] SelectHero = 1,
        [pbr::OriginalName("DRAFT_STATE_STATUS_COMPLETE")] Complete = 2,
        [pbr::OriginalName("DRAFT_STATE_STATUS_RETIRED")] Retired = 3,
      }

    }
    #endregion

  }

  [global::System.SerializableAttribute]
  public sealed partial class DraftsChooseCardRequest : pb::IMessage<DraftsChooseCardRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DraftsChooseCardRequest> _parser = new pb::MessageParser<DraftsChooseCardRequest>(() => new DraftsChooseCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DraftsChooseCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsChooseCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsChooseCardRequest(DraftsChooseCardRequest other) : this() {
      cardIndex_ = other.cardIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsChooseCardRequest Clone() {
      return new DraftsChooseCardRequest(this);
    }

    /// <summary>Field number for the "cardIndex" field.</summary>
    public const int CardIndexFieldNumber = 1;
    private int cardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardIndex {
      get { return cardIndex_; }
      set {
        cardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DraftsChooseCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DraftsChooseCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardIndex != other.CardIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardIndex != 0) hash ^= CardIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CardIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CardIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DraftsChooseCardRequest other) {
      if (other == null) {
        return;
      }
      if (other.CardIndex != 0) {
        CardIndex = other.CardIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CardIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class DraftsChooseHeroRequest : pb::IMessage<DraftsChooseHeroRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DraftsChooseHeroRequest> _parser = new pb::MessageParser<DraftsChooseHeroRequest>(() => new DraftsChooseHeroRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DraftsChooseHeroRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsChooseHeroRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsChooseHeroRequest(DraftsChooseHeroRequest other) : this() {
      heroIndex_ = other.heroIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsChooseHeroRequest Clone() {
      return new DraftsChooseHeroRequest(this);
    }

    /// <summary>Field number for the "heroIndex" field.</summary>
    public const int HeroIndexFieldNumber = 1;
    private int heroIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroIndex {
      get { return heroIndex_; }
      set {
        heroIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DraftsChooseHeroRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DraftsChooseHeroRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroIndex != other.HeroIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroIndex != 0) hash ^= HeroIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HeroIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HeroIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DraftsChooseHeroRequest other) {
      if (other == null) {
        return;
      }
      if (other.HeroIndex != 0) {
        HeroIndex = other.HeroIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HeroIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class DraftsPostRequest : pb::IMessage<DraftsPostRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DraftsPostRequest> _parser = new pb::MessageParser<DraftsPostRequest>(() => new DraftsPostRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DraftsPostRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsPostRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsPostRequest(DraftsPostRequest other) : this() {
      retireEarly_ = other.retireEarly_;
      startDraft_ = other.startDraft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DraftsPostRequest Clone() {
      return new DraftsPostRequest(this);
    }

    /// <summary>Field number for the "retireEarly" field.</summary>
    public const int RetireEarlyFieldNumber = 1;
    private bool retireEarly_;
    /// <summary>
    /// Retires a draft early. Typically this costs some number of lives.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RetireEarly {
      get { return retireEarly_; }
      set {
        retireEarly_ = value;
      }
    }

    /// <summary>Field number for the "startDraft" field.</summary>
    public const int StartDraftFieldNumber = 2;
    private bool startDraft_;
    /// <summary>
    /// Starts a new draft.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StartDraft {
      get { return startDraft_; }
      set {
        startDraft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DraftsPostRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DraftsPostRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetireEarly != other.RetireEarly) return false;
      if (StartDraft != other.StartDraft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RetireEarly != false) hash ^= RetireEarly.GetHashCode();
      if (StartDraft != false) hash ^= StartDraft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RetireEarly != false) {
        output.WriteRawTag(8);
        output.WriteBool(RetireEarly);
      }
      if (StartDraft != false) {
        output.WriteRawTag(16);
        output.WriteBool(StartDraft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RetireEarly != false) {
        output.WriteRawTag(8);
        output.WriteBool(RetireEarly);
      }
      if (StartDraft != false) {
        output.WriteRawTag(16);
        output.WriteBool(StartDraft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetireEarly != false) {
        size += 1 + 1;
      }
      if (StartDraft != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DraftsPostRequest other) {
      if (other == null) {
        return;
      }
      if (other.RetireEarly != false) {
        RetireEarly = other.RetireEarly;
      }
      if (other.StartDraft != false) {
        StartDraft = other.StartDraft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetireEarly = input.ReadBool();
            break;
          }
          case 16: {
            StartDraft = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RetireEarly = input.ReadBool();
            break;
          }
          case 16: {
            StartDraft = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Stores data about a card currently being edited.
  /// 
  /// For now, the text-editable view of the card is just stored as a string.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class EditableCard : pb::IMessage<EditableCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EditableCard> _parser = new pb::MessageParser<EditableCard>(() => new EditableCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditableCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditableCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditableCard(EditableCard other) : this() {
      Id_ = other.Id_;
      ownerUserId_ = other.ownerUserId_;
      source_ = other.source_;
      notification_ = other.notification_ != null ? other.notification_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditableCard Clone() {
      return new EditableCard(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    /// <summary>
    /// The ID of the card in the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ownerUserId" field.</summary>
    public const int OwnerUserIdFieldNumber = 2;
    private string ownerUserId_ = "";
    /// <summary>
    /// The user ID of the owner of this card, i.e. its creator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUserId {
      get { return ownerUserId_; }
      set {
        ownerUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    /// <summary>
    /// The CardScript source code of the card.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notification" field.</summary>
    public const int NotificationFieldNumber = 4;
    private global::Spellsource.AddedChangedRemoved notification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.AddedChangedRemoved Notification {
      get { return notification_; }
      set {
        notification_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditableCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditableCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OwnerUserId != other.OwnerUserId) return false;
      if (Source != other.Source) return false;
      if (!object.Equals(Notification, other.Notification)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (OwnerUserId.Length != 0) hash ^= OwnerUserId.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (notification_ != null) hash ^= Notification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (OwnerUserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerUserId);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (notification_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Notification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (OwnerUserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerUserId);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (notification_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Notification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (OwnerUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUserId);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (notification_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Notification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditableCard other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.OwnerUserId.Length != 0) {
        OwnerUserId = other.OwnerUserId;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.notification_ != null) {
        if (notification_ == null) {
          Notification = new global::Spellsource.AddedChangedRemoved();
        }
        Notification.MergeFrom(other.Notification);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            OwnerUserId = input.ReadString();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 34: {
            if (notification_ == null) {
              Notification = new global::Spellsource.AddedChangedRemoved();
            }
            input.ReadMessage(Notification);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            OwnerUserId = input.ReadString();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 34: {
            if (notification_ == null) {
              Notification = new global::Spellsource.AddedChangedRemoved();
            }
            input.ReadMessage(Notification);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An emote that should play from the specified entity.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Emote : pb::IMessage<Emote>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Emote> _parser = new pb::MessageParser<Emote>(() => new Emote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Emote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Emote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Emote(Emote other) : this() {
      entityId_ = other.entityId_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Emote Clone() {
      return new Emote(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private global::Spellsource.Proto.Emote.Types.EmoteMessage message_ = global::Spellsource.Proto.Emote.Types.EmoteMessage.Hello;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Emote.Types.EmoteMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Emote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Emote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0) hash ^= EntityId.GetHashCode();
      if (Message != global::Spellsource.Proto.Emote.Types.EmoteMessage.Hello) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (Message != global::Spellsource.Proto.Emote.Types.EmoteMessage.Hello) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (Message != global::Spellsource.Proto.Emote.Types.EmoteMessage.Hello) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (Message != global::Spellsource.Proto.Emote.Types.EmoteMessage.Hello) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Emote other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0) {
        EntityId = other.EntityId;
      }
      if (other.Message != global::Spellsource.Proto.Emote.Types.EmoteMessage.Hello) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            Message = (global::Spellsource.Proto.Emote.Types.EmoteMessage) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            Message = (global::Spellsource.Proto.Emote.Types.EmoteMessage) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Emote message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EmoteMessage {
        [pbr::OriginalName("EMOTE_MESSAGE_HELLO")] Hello = 0,
        [pbr::OriginalName("EMOTE_MESSAGE_AMAZING")] Amazing = 1,
        [pbr::OriginalName("EMOTE_MESSAGE_WHOOPS")] Whoops = 2,
        [pbr::OriginalName("EMOTE_MESSAGE_GOOD_GAME")] GoodGame = 3,
        [pbr::OriginalName("EMOTE_MESSAGE_FACE_MY_WRATH")] FaceMyWrath = 4,
        [pbr::OriginalName("EMOTE_MESSAGE_WELL_PLAYED")] WellPlayed = 5,
      }

    }
    #endregion

  }

  [global::System.SerializableAttribute]
  public sealed partial class Entity : pb::IMessage<Entity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity(Entity other) : this() {
      id_ = other.id_;
      Armor = other.Armor;
      art_ = other.art_ != null ? other.art_.Clone() : null;
      Attack = other.Attack;
      BaseAttack = other.BaseAttack;
      BaseHp = other.BaseHp;
      BaseManaCost = other.BaseManaCost;
      battlecry_ = other.battlecry_;
      boardPosition_ = other.boardPosition_;
      cannotAttack_ = other.cannotAttack_;
      cardId_ = other.cardId_;
      cardSet_ = other.cardSet_;
      cardSets_ = other.cardSets_.Clone();
      cardType_ = other.cardType_;
      charge_ = other.charge_;
      Charges = other.Charges;
      chooseOne_ = other.chooseOne_;
      collectible_ = other.collectible_;
      combo_ = other.combo_;
      conditionMet_ = other.conditionMet_;
      CountUntilCast = other.CountUntilCast;
      deathrattles_ = other.deathrattles_;
      deflect_ = other.deflect_;
      description_ = other.description_;
      destroyed_ = other.destroyed_;
      discarded_ = other.discarded_;
      divineShield_ = other.divineShield_;
      Durability = other.Durability;
      enchantmentType_ = other.enchantmentType_;
      enraged_ = other.enraged_;
      entityType_ = other.entityType_;
      Fires = other.Fires;
      frozen_ = other.frozen_;
      gameStarted_ = other.gameStarted_;
      gold_ = other.gold_;
      heroClass_ = other.heroClass_;
      host_ = other.host_;
      hostsTrigger_ = other.hostsTrigger_;
      Hp = other.Hp;
      immune_ = other.immune_;
      isStartingTurn_ = other.isStartingTurn_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      lifesteal_ = other.lifesteal_;
      lockedMana_ = other.lockedMana_;
      mana_ = other.mana_;
      ManaCost = other.ManaCost;
      MaxHp = other.MaxHp;
      maxMana_ = other.maxMana_;
      name_ = other.name_;
      note_ = other.note_;
      Overload = other.Overload;
      owner_ = other.owner_;
      permanent_ = other.permanent_;
      playable_ = other.playable_;
      poisonous_ = other.poisonous_;
      rarity_ = other.rarity_;
      roasted_ = other.roasted_;
      rush_ = other.rush_;
      silenced_ = other.silenced_;
      SpellDamage = other.SpellDamage;
      stealth_ = other.stealth_;
      summoningSickness_ = other.summoningSickness_;
      taunt_ = other.taunt_;
      tooltips_ = other.tooltips_.Clone();
      tribe_ = other.tribe_;
      uncensored_ = other.uncensored_;
      underAura_ = other.underAura_;
      untargetableBySpells_ = other.untargetableBySpells_;
      windfury_ = other.windfury_;
      ExtraAttack = other.ExtraAttack;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// The entity's ID in the game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 41;
    private static readonly pb::FieldCodec<int?> _single_armor_codec = pb::FieldCodec.ForStructWrapper<int>(330);
    private int? armor_;
    /// <summary>
    /// The entity's armor. Conventionally, this value should be rendered on a hero entity's armor token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Armor {
      get { return armor_; }
      set {
        armor_ = value;
      }
    }


    /// <summary>Field number for the "art" field.</summary>
    public const int ArtFieldNumber = 2;
    private global::Spellsource.Proto.Art art_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Art Art {
      get { return art_; }
      set {
        art_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_attack_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? attack_;
    /// <summary>
    /// The entity's current attack value. Conventionally, this value should be rendered on the attack token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }


    /// <summary>Field number for the "baseAttack" field.</summary>
    public const int BaseAttackFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_baseAttack_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? baseAttack_;
    /// <summary>
    /// The entity's base attack value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BaseAttack {
      get { return baseAttack_; }
      set {
        baseAttack_ = value;
      }
    }


    /// <summary>Field number for the "baseHp" field.</summary>
    public const int BaseHpFieldNumber = 5;
    private static readonly pb::FieldCodec<int?> _single_baseHp_codec = pb::FieldCodec.ForStructWrapper<int>(42);
    private int? baseHp_;
    /// <summary>
    /// The base hitpoints of the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BaseHp {
      get { return baseHp_; }
      set {
        baseHp_ = value;
      }
    }


    /// <summary>Field number for the "baseManaCost" field.</summary>
    public const int BaseManaCostFieldNumber = 6;
    private static readonly pb::FieldCodec<int?> _single_baseManaCost_codec = pb::FieldCodec.ForStructWrapper<int>(50);
    private int? baseManaCost_;
    /// <summary>
    /// The entity's base mana cost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? BaseManaCost {
      get { return baseManaCost_; }
      set {
        baseManaCost_ = value;
      }
    }


    /// <summary>Field number for the "battlecry" field.</summary>
    public const int BattlecryFieldNumber = 7;
    private bool battlecry_;
    /// <summary>
    /// When true, this entity has an effect that gets triggered when it is played from the hand.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Battlecry {
      get { return battlecry_; }
      set {
        battlecry_ = value;
      }
    }

    /// <summary>Field number for the "boardPosition" field.</summary>
    public const int BoardPositionFieldNumber = 8;
    private int boardPosition_;
    /// <summary>
    /// The index of the entity in its zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardPosition {
      get { return boardPosition_; }
      set {
        boardPosition_ = value;
      }
    }

    /// <summary>Field number for the "cannotAttack" field.</summary>
    public const int CannotAttackFieldNumber = 9;
    private bool cannotAttack_;
    /// <summary>
    /// When true, indicates this minion cannot attack, even though it normally can.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CannotAttack {
      get { return cannotAttack_; }
      set {
        cannotAttack_ = value;
      }
    }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 10;
    private string cardId_ = "";
    /// <summary>
    /// The entity's Card ID. When null, it typically should not be rendered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardId {
      get { return cardId_; }
      set {
        cardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cardSet" field.</summary>
    public const int CardSetFieldNumber = 11;
    private string cardSet_ = "";
    /// <summary>
    /// The card expansion set this entity belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardSet {
      get { return cardSet_; }
      set {
        cardSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cardSets" field.</summary>
    public const int CardSetsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_cardSets_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> cardSets_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The card sets listed by the card
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CardSets {
      get { return cardSets_; }
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 13;
    private global::Spellsource.Proto.CardType cardType_ = global::Spellsource.Proto.CardType.Hero;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.CardType CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "charge" field.</summary>
    public const int ChargeFieldNumber = 14;
    private bool charge_;
    /// <summary>
    /// When true, the entity can attack the same turn it is summoned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Charge {
      get { return charge_; }
      set {
        charge_ = value;
      }
    }

    /// <summary>Field number for the "charges" field.</summary>
    public const int ChargesFieldNumber = 15;
    private static readonly pb::FieldCodec<int?> _single_charges_codec = pb::FieldCodec.ForStructWrapper<int>(122);
    private int? charges_;
    /// <summary>
    /// An integer number of glowing orbs to render above the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Charges {
      get { return charges_; }
      set {
        charges_ = value;
      }
    }


    /// <summary>Field number for the "chooseOne" field.</summary>
    public const int ChooseOneFieldNumber = 16;
    private bool chooseOne_;
    /// <summary>
    /// Indicates this card has a choose-one effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChooseOne {
      get { return chooseOne_; }
      set {
        chooseOne_ = value;
      }
    }

    /// <summary>Field number for the "collectible" field.</summary>
    public const int CollectibleFieldNumber = 17;
    private bool collectible_;
    /// <summary>
    /// Indicates the card is collectible - valid for putting into decks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Collectible {
      get { return collectible_; }
      set {
        collectible_ = value;
      }
    }

    /// <summary>Field number for the "combo" field.</summary>
    public const int ComboFieldNumber = 18;
    private bool combo_;
    /// <summary>
    /// Indicates this minion has a combo effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Combo {
      get { return combo_; }
      set {
        combo_ = value;
      }
    }

    /// <summary>Field number for the "conditionMet" field.</summary>
    public const int ConditionMetFieldNumber = 19;
    private bool conditionMet_;
    /// <summary>
    /// When true, indicates that a condition written on the card is met and the player should be informed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConditionMet {
      get { return conditionMet_; }
      set {
        conditionMet_ = value;
      }
    }

    /// <summary>Field number for the "countUntilCast" field.</summary>
    public const int CountUntilCastFieldNumber = 20;
    private static readonly pb::FieldCodec<int?> _single_countUntilCast_codec = pb::FieldCodec.ForStructWrapper<int>(162);
    private int? countUntilCast_;
    /// <summary>
    /// The number of times this enchantment (secret, quest or trigger on card) must fire before its spell effect is
    /// triggered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? CountUntilCast {
      get { return countUntilCast_; }
      set {
        countUntilCast_ = value;
      }
    }


    /// <summary>Field number for the "deathrattles" field.</summary>
    public const int DeathrattlesFieldNumber = 23;
    private bool deathrattles_;
    /// <summary>
    /// When true, this entity has an effect that gets triggered when it is destroyed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deathrattles {
      get { return deathrattles_; }
      set {
        deathrattles_ = value;
      }
    }

    /// <summary>Field number for the "deflect" field.</summary>
    public const int DeflectFieldNumber = 24;
    private bool deflect_;
    /// <summary>
    /// When true, the entity's first incoming hit will hit its owner rather than itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deflect {
      get { return deflect_; }
      set {
        deflect_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 25;
    private string description_ = "";
    /// <summary>
    /// The text that would go into the entity's description field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destroyed" field.</summary>
    public const int DestroyedFieldNumber = 26;
    private bool destroyed_;
    /// <summary>
    /// When true, indicates that this entity is destroyed. During event evaluation, an entity can be destroyed but
    /// still in a zone other than the graveyard; render a death icon over the entity when it is so marked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Destroyed {
      get { return destroyed_; }
      set {
        destroyed_ = value;
      }
    }

    /// <summary>Field number for the "discarded" field.</summary>
    public const int DiscardedFieldNumber = 27;
    private bool discarded_;
    /// <summary>
    /// Indicates the entity was discarded from the hand.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Discarded {
      get { return discarded_; }
      set {
        discarded_ = value;
      }
    }

    /// <summary>Field number for the "divineShield" field.</summary>
    public const int DivineShieldFieldNumber = 28;
    private bool divineShield_;
    /// <summary>
    /// When true, the entity will take no loss in hitpoints the first time it would ordinarily take damage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DivineShield {
      get { return divineShield_; }
      set {
        divineShield_ = value;
      }
    }

    /// <summary>Field number for the "durability" field.</summary>
    public const int DurabilityFieldNumber = 29;
    private static readonly pb::FieldCodec<int?> _single_durability_codec = pb::FieldCodec.ForStructWrapper<int>(234);
    private int? durability_;
    /// <summary>
    /// The durability (number of uses) that the weapon still has.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }


    /// <summary>Field number for the "enchantmentType" field.</summary>
    public const int EnchantmentTypeFieldNumber = 30;
    private string enchantmentType_ = "";
    /// <summary>
    /// The class hierarchy of this enchantment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnchantmentType {
      get { return enchantmentType_; }
      set {
        enchantmentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enraged" field.</summary>
    public const int EnragedFieldNumber = 31;
    private bool enraged_;
    /// <summary>
    /// When true, this entity is under the influence of "enrage," or a bonus when it takes damage the first time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enraged {
      get { return enraged_; }
      set {
        enraged_ = value;
      }
    }

    /// <summary>Field number for the "entityType" field.</summary>
    public const int EntityTypeFieldNumber = 32;
    private global::Spellsource.Proto.EntityType entityType_ = global::Spellsource.Proto.EntityType.Any;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.EntityType EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "fires" field.</summary>
    public const int FiresFieldNumber = 33;
    private static readonly pb::FieldCodec<int?> _single_fires_codec = pb::FieldCodec.ForStructWrapper<int>(266);
    private int? fires_;
    /// <summary>
    /// The number of times this enchantment (secret, quest or trigger on card) has fired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Fires {
      get { return fires_; }
      set {
        fires_ = value;
      }
    }


    /// <summary>Field number for the "frozen" field.</summary>
    public const int FrozenFieldNumber = 34;
    private bool frozen_;
    /// <summary>
    /// When true, the entity cannot attack because a spell casted on it prevents it so, until the next turn when
    /// it would normally be able to attack.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Frozen {
      get { return frozen_; }
      set {
        frozen_ = value;
      }
    }

    /// <summary>Field number for the "gameStarted" field.</summary>
    public const int GameStartedFieldNumber = 35;
    private bool gameStarted_;
    /// <summary>
    /// For player entities, indicates whether or not the player has finished the mulligan phase and is awaiting the
    /// other player to finish mulligan or, if both players have this field as true, indicates the game has begun on
    /// turn 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GameStarted {
      get { return gameStarted_; }
      set {
        gameStarted_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 36;
    private bool gold_;
    /// <summary>
    /// Render this entity with a "gold" effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "heroClass" field.</summary>
    public const int HeroClassFieldNumber = 37;
    private string heroClass_ = "";
    /// <summary>
    /// The string enum value that corresponds to this entity's hero class.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroClass {
      get { return heroClass_; }
      set {
        heroClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 38;
    private int host_;
    /// <summary>
    /// An integer corresponding to the enchantment's host
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }

    /// <summary>Field number for the "hostsTrigger" field.</summary>
    public const int HostsTriggerFieldNumber = 39;
    private bool hostsTrigger_;
    /// <summary>
    /// When true, indicates this entity has an effect that triggers on game events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HostsTrigger {
      get { return hostsTrigger_; }
      set {
        hostsTrigger_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 40;
    private static readonly pb::FieldCodec<int?> _single_hp_codec = pb::FieldCodec.ForStructWrapper<int>(322);
    private int? hp_;
    /// <summary>
    /// The current hitpoints of the entity. Conventionally, this value should be rendered on the hitpoints token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }


    /// <summary>Field number for the "immune" field.</summary>
    public const int ImmuneFieldNumber = 42;
    private bool immune_;
    /// <summary>
    /// Indicates the entity does not take damage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Immune {
      get { return immune_; }
      set {
        immune_ = value;
      }
    }

    /// <summary>Field number for the "isStartingTurn" field.</summary>
    public const int IsStartingTurnFieldNumber = 43;
    private bool isStartingTurn_;
    /// <summary>
    /// When set on the player entity, indicates the effects occuring now are during the player's turn start phase.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStartingTurn {
      get { return isStartingTurn_; }
      set {
        isStartingTurn_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 44;
    private global::Spellsource.Proto.EntityLocation location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.EntityLocation Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "lifesteal" field.</summary>
    public const int LifestealFieldNumber = 45;
    private bool lifesteal_;
    /// <summary>
    /// When true, the entity heals its owner when it deals damage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lifesteal {
      get { return lifesteal_; }
      set {
        lifesteal_ = value;
      }
    }

    /// <summary>Field number for the "lockedMana" field.</summary>
    public const int LockedManaFieldNumber = 46;
    private int lockedMana_;
    /// <summary>
    /// The amount of mana that was locked due to overload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockedMana {
      get { return lockedMana_; }
      set {
        lockedMana_ = value;
      }
    }

    /// <summary>Field number for the "mana" field.</summary>
    public const int ManaFieldNumber = 47;
    private int mana_;
    /// <summary>
    /// The player's current mana.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mana {
      get { return mana_; }
      set {
        mana_ = value;
      }
    }

    /// <summary>Field number for the "manaCost" field.</summary>
    public const int ManaCostFieldNumber = 48;
    private static readonly pb::FieldCodec<int?> _single_manaCost_codec = pb::FieldCodec.ForStructWrapper<int>(386);
    private int? manaCost_;
    /// <summary>
    /// The entity's current mana cost. Conventionally, this value should be rendered on the mana token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ManaCost {
      get { return manaCost_; }
      set {
        manaCost_ = value;
      }
    }


    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 49;
    private static readonly pb::FieldCodec<int?> _single_maxHp_codec = pb::FieldCodec.ForStructWrapper<int>(394);
    private int? maxHp_;
    /// <summary>
    /// The maximum number of hitpoints this entity can have.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }


    /// <summary>Field number for the "maxMana" field.</summary>
    public const int MaxManaFieldNumber = 50;
    private int maxMana_;
    /// <summary>
    /// The player's maximum amount of mana.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMana {
      get { return maxMana_; }
      set {
        maxMana_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 51;
    private string name_ = "";
    /// <summary>
    /// The text that would go into the entity's name field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 52;
    private string note_ = "";
    /// <summary>
    /// A renderable note attached to this entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "overload" field.</summary>
    public const int OverloadFieldNumber = 53;
    private static readonly pb::FieldCodec<int?> _single_overload_codec = pb::FieldCodec.ForStructWrapper<int>(426);
    private int? overload_;
    /// <summary>
    /// Indicates the amount of mana that would be locked if this card were played.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Overload {
      get { return overload_; }
      set {
        overload_ = value;
      }
    }


    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 54;
    private int owner_;
    /// <summary>
    /// An integer corresponding to the entity's owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "permanent" field.</summary>
    public const int PermanentFieldNumber = 55;
    private bool permanent_;
    /// <summary>
    /// Indicates the entity is an on-battlefield permanent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Permanent {
      get { return permanent_; }
      set {
        permanent_ = value;
      }
    }

    /// <summary>Field number for the "playable" field.</summary>
    public const int PlayableFieldNumber = 56;
    private bool playable_;
    /// <summary>
    /// When true, indicates the card can be played, or the hero / minion can initiate a physical attack.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Playable {
      get { return playable_; }
      set {
        playable_ = value;
      }
    }

    /// <summary>Field number for the "poisonous" field.</summary>
    public const int PoisonousFieldNumber = 57;
    private bool poisonous_;
    /// <summary>
    /// When true, the entity will destroy any target it damages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Poisonous {
      get { return poisonous_; }
      set {
        poisonous_ = value;
      }
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 58;
    private global::Spellsource.Proto.Rarity rarity_ = global::Spellsource.Proto.Rarity.Free;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Rarity Rarity {
      get { return rarity_; }
      set {
        rarity_ = value;
      }
    }

    /// <summary>Field number for the "roasted" field.</summary>
    public const int RoastedFieldNumber = 59;
    private bool roasted_;
    /// <summary>
    /// Indicates the entity was roasted (removed due to excess cards or otherwise discarded from the deck).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Roasted {
      get { return roasted_; }
      set {
        roasted_ = value;
      }
    }

    /// <summary>Field number for the "rush" field.</summary>
    public const int RushFieldNumber = 60;
    private bool rush_;
    /// <summary>
    /// When true, the entity can attack a minion the same turn it is summoned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rush {
      get { return rush_; }
      set {
        rush_ = value;
      }
    }

    /// <summary>Field number for the "silenced" field.</summary>
    public const int SilencedFieldNumber = 61;
    private bool silenced_;
    /// <summary>
    /// Indicates that the entity was silenced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Silenced {
      get { return silenced_; }
      set {
        silenced_ = value;
      }
    }

    /// <summary>Field number for the "spellDamage" field.</summary>
    public const int SpellDamageFieldNumber = 62;
    private static readonly pb::FieldCodec<int?> _single_spellDamage_codec = pb::FieldCodec.ForStructWrapper<int>(498);
    private int? spellDamage_;
    /// <summary>
    /// Indicates the amount of additional spell damage this entity gives its owning player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? SpellDamage {
      get { return spellDamage_; }
      set {
        spellDamage_ = value;
      }
    }


    /// <summary>Field number for the "stealth" field.</summary>
    public const int StealthFieldNumber = 63;
    private bool stealth_;
    /// <summary>
    /// When true, the minion cannot be targeted by the opponent until the entity attacks for the first time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stealth {
      get { return stealth_; }
      set {
        stealth_ = value;
      }
    }

    /// <summary>Field number for the "summoningSickness" field.</summary>
    public const int SummoningSicknessFieldNumber = 64;
    private bool summoningSickness_;
    /// <summary>
    /// When true, the entity cannot attack this turn because it has "summoning sickness," or a disability related
    /// to the first turn the entity came into play. Typically rendered with snooze icons.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SummoningSickness {
      get { return summoningSickness_; }
      set {
        summoningSickness_ = value;
      }
    }

    /// <summary>Field number for the "taunt" field.</summary>
    public const int TauntFieldNumber = 65;
    private bool taunt_;
    /// <summary>
    /// Indicates the entity and other taunt entities must be targeted by enemy actors first during an opponent's
    /// physical attack action targeting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Taunt {
      get { return taunt_; }
      set {
        taunt_ = value;
      }
    }

    /// <summary>Field number for the "tooltips" field.</summary>
    public const int TooltipsFieldNumber = 66;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Tooltip> _repeated_tooltips_codec
        = pb::FieldCodec.ForMessage(530, global::Spellsource.Proto.Tooltip.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Tooltip> tooltips_ = new pbc::RepeatedField<global::Spellsource.Proto.Tooltip>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Tooltip> Tooltips {
      get { return tooltips_; }
    }

    /// <summary>Field number for the "tribe" field.</summary>
    public const int TribeFieldNumber = 67;
    private string tribe_ = "";
    /// <summary>
    /// When not null, indicates the card's tribe/race. Typically only minions have this field set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tribe {
      get { return tribe_; }
      set {
        tribe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uncensored" field.</summary>
    public const int UncensoredFieldNumber = 68;
    private bool uncensored_;
    /// <summary>
    /// When true, indicates that this entity that is ordinarily censored to this user is not. It can be "flipped" and
    /// shown to the opponent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Uncensored {
      get { return uncensored_; }
      set {
        uncensored_ = value;
      }
    }

    /// <summary>Field number for the "underAura" field.</summary>
    public const int UnderAuraFieldNumber = 69;
    private bool underAura_;
    /// <summary>
    /// When true, indicates this minion is benefiting from the aura of another effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnderAura {
      get { return underAura_; }
      set {
        underAura_ = value;
      }
    }

    /// <summary>Field number for the "untargetableBySpells" field.</summary>
    public const int UntargetableBySpellsFieldNumber = 70;
    private bool untargetableBySpells_;
    /// <summary>
    /// Indicates this entity cannot be targeted by spells.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UntargetableBySpells {
      get { return untargetableBySpells_; }
      set {
        untargetableBySpells_ = value;
      }
    }

    /// <summary>Field number for the "windfury" field.</summary>
    public const int WindfuryFieldNumber = 71;
    private bool windfury_;
    /// <summary>
    /// Indicates the entity can attack twice a turn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Windfury {
      get { return windfury_; }
      set {
        windfury_ = value;
      }
    }

    /// <summary>Field number for the "extraAttack" field.</summary>
    public const int ExtraAttackFieldNumber = 72;
    private static readonly pb::FieldCodec<int?> _single_extraAttack_codec = pb::FieldCodec.ForStructWrapper<int>(578);
    private int? extraAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ExtraAttack {
      get { return extraAttack_; }
      set {
        extraAttack_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Armor != other.Armor) return false;
      if (!object.Equals(Art, other.Art)) return false;
      if (Attack != other.Attack) return false;
      if (BaseAttack != other.BaseAttack) return false;
      if (BaseHp != other.BaseHp) return false;
      if (BaseManaCost != other.BaseManaCost) return false;
      if (Battlecry != other.Battlecry) return false;
      if (BoardPosition != other.BoardPosition) return false;
      if (CannotAttack != other.CannotAttack) return false;
      if (CardId != other.CardId) return false;
      if (CardSet != other.CardSet) return false;
      if(!cardSets_.Equals(other.cardSets_)) return false;
      if (CardType != other.CardType) return false;
      if (Charge != other.Charge) return false;
      if (Charges != other.Charges) return false;
      if (ChooseOne != other.ChooseOne) return false;
      if (Collectible != other.Collectible) return false;
      if (Combo != other.Combo) return false;
      if (ConditionMet != other.ConditionMet) return false;
      if (CountUntilCast != other.CountUntilCast) return false;
      if (Deathrattles != other.Deathrattles) return false;
      if (Deflect != other.Deflect) return false;
      if (Description != other.Description) return false;
      if (Destroyed != other.Destroyed) return false;
      if (Discarded != other.Discarded) return false;
      if (DivineShield != other.DivineShield) return false;
      if (Durability != other.Durability) return false;
      if (EnchantmentType != other.EnchantmentType) return false;
      if (Enraged != other.Enraged) return false;
      if (EntityType != other.EntityType) return false;
      if (Fires != other.Fires) return false;
      if (Frozen != other.Frozen) return false;
      if (GameStarted != other.GameStarted) return false;
      if (Gold != other.Gold) return false;
      if (HeroClass != other.HeroClass) return false;
      if (Host != other.Host) return false;
      if (HostsTrigger != other.HostsTrigger) return false;
      if (Hp != other.Hp) return false;
      if (Immune != other.Immune) return false;
      if (IsStartingTurn != other.IsStartingTurn) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (Lifesteal != other.Lifesteal) return false;
      if (LockedMana != other.LockedMana) return false;
      if (Mana != other.Mana) return false;
      if (ManaCost != other.ManaCost) return false;
      if (MaxHp != other.MaxHp) return false;
      if (MaxMana != other.MaxMana) return false;
      if (Name != other.Name) return false;
      if (Note != other.Note) return false;
      if (Overload != other.Overload) return false;
      if (Owner != other.Owner) return false;
      if (Permanent != other.Permanent) return false;
      if (Playable != other.Playable) return false;
      if (Poisonous != other.Poisonous) return false;
      if (Rarity != other.Rarity) return false;
      if (Roasted != other.Roasted) return false;
      if (Rush != other.Rush) return false;
      if (Silenced != other.Silenced) return false;
      if (SpellDamage != other.SpellDamage) return false;
      if (Stealth != other.Stealth) return false;
      if (SummoningSickness != other.SummoningSickness) return false;
      if (Taunt != other.Taunt) return false;
      if(!tooltips_.Equals(other.tooltips_)) return false;
      if (Tribe != other.Tribe) return false;
      if (Uncensored != other.Uncensored) return false;
      if (UnderAura != other.UnderAura) return false;
      if (UntargetableBySpells != other.UntargetableBySpells) return false;
      if (Windfury != other.Windfury) return false;
      if (ExtraAttack != other.ExtraAttack) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (armor_ != null) hash ^= Armor.GetHashCode();
      if (art_ != null) hash ^= Art.GetHashCode();
      if (attack_ != null) hash ^= Attack.GetHashCode();
      if (baseAttack_ != null) hash ^= BaseAttack.GetHashCode();
      if (baseHp_ != null) hash ^= BaseHp.GetHashCode();
      if (baseManaCost_ != null) hash ^= BaseManaCost.GetHashCode();
      if (Battlecry != false) hash ^= Battlecry.GetHashCode();
      if (BoardPosition != 0) hash ^= BoardPosition.GetHashCode();
      if (CannotAttack != false) hash ^= CannotAttack.GetHashCode();
      if (CardId.Length != 0) hash ^= CardId.GetHashCode();
      if (CardSet.Length != 0) hash ^= CardSet.GetHashCode();
      hash ^= cardSets_.GetHashCode();
      if (CardType != global::Spellsource.Proto.CardType.Hero) hash ^= CardType.GetHashCode();
      if (Charge != false) hash ^= Charge.GetHashCode();
      if (charges_ != null) hash ^= Charges.GetHashCode();
      if (ChooseOne != false) hash ^= ChooseOne.GetHashCode();
      if (Collectible != false) hash ^= Collectible.GetHashCode();
      if (Combo != false) hash ^= Combo.GetHashCode();
      if (ConditionMet != false) hash ^= ConditionMet.GetHashCode();
      if (countUntilCast_ != null) hash ^= CountUntilCast.GetHashCode();
      if (Deathrattles != false) hash ^= Deathrattles.GetHashCode();
      if (Deflect != false) hash ^= Deflect.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Destroyed != false) hash ^= Destroyed.GetHashCode();
      if (Discarded != false) hash ^= Discarded.GetHashCode();
      if (DivineShield != false) hash ^= DivineShield.GetHashCode();
      if (durability_ != null) hash ^= Durability.GetHashCode();
      if (EnchantmentType.Length != 0) hash ^= EnchantmentType.GetHashCode();
      if (Enraged != false) hash ^= Enraged.GetHashCode();
      if (EntityType != global::Spellsource.Proto.EntityType.Any) hash ^= EntityType.GetHashCode();
      if (fires_ != null) hash ^= Fires.GetHashCode();
      if (Frozen != false) hash ^= Frozen.GetHashCode();
      if (GameStarted != false) hash ^= GameStarted.GetHashCode();
      if (Gold != false) hash ^= Gold.GetHashCode();
      if (HeroClass.Length != 0) hash ^= HeroClass.GetHashCode();
      if (Host != 0) hash ^= Host.GetHashCode();
      if (HostsTrigger != false) hash ^= HostsTrigger.GetHashCode();
      if (hp_ != null) hash ^= Hp.GetHashCode();
      if (Immune != false) hash ^= Immune.GetHashCode();
      if (IsStartingTurn != false) hash ^= IsStartingTurn.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (Lifesteal != false) hash ^= Lifesteal.GetHashCode();
      if (LockedMana != 0) hash ^= LockedMana.GetHashCode();
      if (Mana != 0) hash ^= Mana.GetHashCode();
      if (manaCost_ != null) hash ^= ManaCost.GetHashCode();
      if (maxHp_ != null) hash ^= MaxHp.GetHashCode();
      if (MaxMana != 0) hash ^= MaxMana.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (overload_ != null) hash ^= Overload.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (Permanent != false) hash ^= Permanent.GetHashCode();
      if (Playable != false) hash ^= Playable.GetHashCode();
      if (Poisonous != false) hash ^= Poisonous.GetHashCode();
      if (Rarity != global::Spellsource.Proto.Rarity.Free) hash ^= Rarity.GetHashCode();
      if (Roasted != false) hash ^= Roasted.GetHashCode();
      if (Rush != false) hash ^= Rush.GetHashCode();
      if (Silenced != false) hash ^= Silenced.GetHashCode();
      if (spellDamage_ != null) hash ^= SpellDamage.GetHashCode();
      if (Stealth != false) hash ^= Stealth.GetHashCode();
      if (SummoningSickness != false) hash ^= SummoningSickness.GetHashCode();
      if (Taunt != false) hash ^= Taunt.GetHashCode();
      hash ^= tooltips_.GetHashCode();
      if (Tribe.Length != 0) hash ^= Tribe.GetHashCode();
      if (Uncensored != false) hash ^= Uncensored.GetHashCode();
      if (UnderAura != false) hash ^= UnderAura.GetHashCode();
      if (UntargetableBySpells != false) hash ^= UntargetableBySpells.GetHashCode();
      if (Windfury != false) hash ^= Windfury.GetHashCode();
      if (extraAttack_ != null) hash ^= ExtraAttack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (art_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Art);
      }
      if (attack_ != null) {
        _single_attack_codec.WriteTagAndValue(output, Attack);
      }
      if (baseAttack_ != null) {
        _single_baseAttack_codec.WriteTagAndValue(output, BaseAttack);
      }
      if (baseHp_ != null) {
        _single_baseHp_codec.WriteTagAndValue(output, BaseHp);
      }
      if (baseManaCost_ != null) {
        _single_baseManaCost_codec.WriteTagAndValue(output, BaseManaCost);
      }
      if (Battlecry != false) {
        output.WriteRawTag(56);
        output.WriteBool(Battlecry);
      }
      if (BoardPosition != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BoardPosition);
      }
      if (CannotAttack != false) {
        output.WriteRawTag(72);
        output.WriteBool(CannotAttack);
      }
      if (CardId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CardId);
      }
      if (CardSet.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CardSet);
      }
      cardSets_.WriteTo(output, _repeated_cardSets_codec);
      if (CardType != global::Spellsource.Proto.CardType.Hero) {
        output.WriteRawTag(104);
        output.WriteEnum((int) CardType);
      }
      if (Charge != false) {
        output.WriteRawTag(112);
        output.WriteBool(Charge);
      }
      if (charges_ != null) {
        _single_charges_codec.WriteTagAndValue(output, Charges);
      }
      if (ChooseOne != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(ChooseOne);
      }
      if (Collectible != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Collectible);
      }
      if (Combo != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Combo);
      }
      if (ConditionMet != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ConditionMet);
      }
      if (countUntilCast_ != null) {
        _single_countUntilCast_codec.WriteTagAndValue(output, CountUntilCast);
      }
      if (Deathrattles != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(Deathrattles);
      }
      if (Deflect != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Deflect);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Description);
      }
      if (Destroyed != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Destroyed);
      }
      if (Discarded != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Discarded);
      }
      if (DivineShield != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(DivineShield);
      }
      if (durability_ != null) {
        _single_durability_codec.WriteTagAndValue(output, Durability);
      }
      if (EnchantmentType.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(EnchantmentType);
      }
      if (Enraged != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Enraged);
      }
      if (EntityType != global::Spellsource.Proto.EntityType.Any) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) EntityType);
      }
      if (fires_ != null) {
        _single_fires_codec.WriteTagAndValue(output, Fires);
      }
      if (Frozen != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(Frozen);
      }
      if (GameStarted != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(GameStarted);
      }
      if (Gold != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Gold);
      }
      if (HeroClass.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(HeroClass);
      }
      if (Host != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Host);
      }
      if (HostsTrigger != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(HostsTrigger);
      }
      if (hp_ != null) {
        _single_hp_codec.WriteTagAndValue(output, Hp);
      }
      if (armor_ != null) {
        _single_armor_codec.WriteTagAndValue(output, Armor);
      }
      if (Immune != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(Immune);
      }
      if (IsStartingTurn != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsStartingTurn);
      }
      if (location_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(Location);
      }
      if (Lifesteal != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(Lifesteal);
      }
      if (LockedMana != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(LockedMana);
      }
      if (Mana != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(Mana);
      }
      if (manaCost_ != null) {
        _single_manaCost_codec.WriteTagAndValue(output, ManaCost);
      }
      if (maxHp_ != null) {
        _single_maxHp_codec.WriteTagAndValue(output, MaxHp);
      }
      if (MaxMana != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(MaxMana);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(Name);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(Note);
      }
      if (overload_ != null) {
        _single_overload_codec.WriteTagAndValue(output, Overload);
      }
      if (Owner != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Owner);
      }
      if (Permanent != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(Permanent);
      }
      if (Playable != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(Playable);
      }
      if (Poisonous != false) {
        output.WriteRawTag(200, 3);
        output.WriteBool(Poisonous);
      }
      if (Rarity != global::Spellsource.Proto.Rarity.Free) {
        output.WriteRawTag(208, 3);
        output.WriteEnum((int) Rarity);
      }
      if (Roasted != false) {
        output.WriteRawTag(216, 3);
        output.WriteBool(Roasted);
      }
      if (Rush != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(Rush);
      }
      if (Silenced != false) {
        output.WriteRawTag(232, 3);
        output.WriteBool(Silenced);
      }
      if (spellDamage_ != null) {
        _single_spellDamage_codec.WriteTagAndValue(output, SpellDamage);
      }
      if (Stealth != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(Stealth);
      }
      if (SummoningSickness != false) {
        output.WriteRawTag(128, 4);
        output.WriteBool(SummoningSickness);
      }
      if (Taunt != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(Taunt);
      }
      tooltips_.WriteTo(output, _repeated_tooltips_codec);
      if (Tribe.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(Tribe);
      }
      if (Uncensored != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(Uncensored);
      }
      if (UnderAura != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(UnderAura);
      }
      if (UntargetableBySpells != false) {
        output.WriteRawTag(176, 4);
        output.WriteBool(UntargetableBySpells);
      }
      if (Windfury != false) {
        output.WriteRawTag(184, 4);
        output.WriteBool(Windfury);
      }
      if (extraAttack_ != null) {
        _single_extraAttack_codec.WriteTagAndValue(output, ExtraAttack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (art_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Art);
      }
      if (attack_ != null) {
        _single_attack_codec.WriteTagAndValue(ref output, Attack);
      }
      if (baseAttack_ != null) {
        _single_baseAttack_codec.WriteTagAndValue(ref output, BaseAttack);
      }
      if (baseHp_ != null) {
        _single_baseHp_codec.WriteTagAndValue(ref output, BaseHp);
      }
      if (baseManaCost_ != null) {
        _single_baseManaCost_codec.WriteTagAndValue(ref output, BaseManaCost);
      }
      if (Battlecry != false) {
        output.WriteRawTag(56);
        output.WriteBool(Battlecry);
      }
      if (BoardPosition != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BoardPosition);
      }
      if (CannotAttack != false) {
        output.WriteRawTag(72);
        output.WriteBool(CannotAttack);
      }
      if (CardId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CardId);
      }
      if (CardSet.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CardSet);
      }
      cardSets_.WriteTo(ref output, _repeated_cardSets_codec);
      if (CardType != global::Spellsource.Proto.CardType.Hero) {
        output.WriteRawTag(104);
        output.WriteEnum((int) CardType);
      }
      if (Charge != false) {
        output.WriteRawTag(112);
        output.WriteBool(Charge);
      }
      if (charges_ != null) {
        _single_charges_codec.WriteTagAndValue(ref output, Charges);
      }
      if (ChooseOne != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(ChooseOne);
      }
      if (Collectible != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Collectible);
      }
      if (Combo != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Combo);
      }
      if (ConditionMet != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ConditionMet);
      }
      if (countUntilCast_ != null) {
        _single_countUntilCast_codec.WriteTagAndValue(ref output, CountUntilCast);
      }
      if (Deathrattles != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(Deathrattles);
      }
      if (Deflect != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Deflect);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Description);
      }
      if (Destroyed != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Destroyed);
      }
      if (Discarded != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Discarded);
      }
      if (DivineShield != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(DivineShield);
      }
      if (durability_ != null) {
        _single_durability_codec.WriteTagAndValue(ref output, Durability);
      }
      if (EnchantmentType.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(EnchantmentType);
      }
      if (Enraged != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Enraged);
      }
      if (EntityType != global::Spellsource.Proto.EntityType.Any) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) EntityType);
      }
      if (fires_ != null) {
        _single_fires_codec.WriteTagAndValue(ref output, Fires);
      }
      if (Frozen != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(Frozen);
      }
      if (GameStarted != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(GameStarted);
      }
      if (Gold != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Gold);
      }
      if (HeroClass.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(HeroClass);
      }
      if (Host != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Host);
      }
      if (HostsTrigger != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(HostsTrigger);
      }
      if (hp_ != null) {
        _single_hp_codec.WriteTagAndValue(ref output, Hp);
      }
      if (armor_ != null) {
        _single_armor_codec.WriteTagAndValue(ref output, Armor);
      }
      if (Immune != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(Immune);
      }
      if (IsStartingTurn != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsStartingTurn);
      }
      if (location_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(Location);
      }
      if (Lifesteal != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(Lifesteal);
      }
      if (LockedMana != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(LockedMana);
      }
      if (Mana != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(Mana);
      }
      if (manaCost_ != null) {
        _single_manaCost_codec.WriteTagAndValue(ref output, ManaCost);
      }
      if (maxHp_ != null) {
        _single_maxHp_codec.WriteTagAndValue(ref output, MaxHp);
      }
      if (MaxMana != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(MaxMana);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(Name);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(Note);
      }
      if (overload_ != null) {
        _single_overload_codec.WriteTagAndValue(ref output, Overload);
      }
      if (Owner != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Owner);
      }
      if (Permanent != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(Permanent);
      }
      if (Playable != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(Playable);
      }
      if (Poisonous != false) {
        output.WriteRawTag(200, 3);
        output.WriteBool(Poisonous);
      }
      if (Rarity != global::Spellsource.Proto.Rarity.Free) {
        output.WriteRawTag(208, 3);
        output.WriteEnum((int) Rarity);
      }
      if (Roasted != false) {
        output.WriteRawTag(216, 3);
        output.WriteBool(Roasted);
      }
      if (Rush != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(Rush);
      }
      if (Silenced != false) {
        output.WriteRawTag(232, 3);
        output.WriteBool(Silenced);
      }
      if (spellDamage_ != null) {
        _single_spellDamage_codec.WriteTagAndValue(ref output, SpellDamage);
      }
      if (Stealth != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(Stealth);
      }
      if (SummoningSickness != false) {
        output.WriteRawTag(128, 4);
        output.WriteBool(SummoningSickness);
      }
      if (Taunt != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(Taunt);
      }
      tooltips_.WriteTo(ref output, _repeated_tooltips_codec);
      if (Tribe.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(Tribe);
      }
      if (Uncensored != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(Uncensored);
      }
      if (UnderAura != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(UnderAura);
      }
      if (UntargetableBySpells != false) {
        output.WriteRawTag(176, 4);
        output.WriteBool(UntargetableBySpells);
      }
      if (Windfury != false) {
        output.WriteRawTag(184, 4);
        output.WriteBool(Windfury);
      }
      if (extraAttack_ != null) {
        _single_extraAttack_codec.WriteTagAndValue(ref output, ExtraAttack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (armor_ != null) {
        size += _single_armor_codec.CalculateSizeWithTag(Armor);
      }
      if (art_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Art);
      }
      if (attack_ != null) {
        size += _single_attack_codec.CalculateSizeWithTag(Attack);
      }
      if (baseAttack_ != null) {
        size += _single_baseAttack_codec.CalculateSizeWithTag(BaseAttack);
      }
      if (baseHp_ != null) {
        size += _single_baseHp_codec.CalculateSizeWithTag(BaseHp);
      }
      if (baseManaCost_ != null) {
        size += _single_baseManaCost_codec.CalculateSizeWithTag(BaseManaCost);
      }
      if (Battlecry != false) {
        size += 1 + 1;
      }
      if (BoardPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardPosition);
      }
      if (CannotAttack != false) {
        size += 1 + 1;
      }
      if (CardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardId);
      }
      if (CardSet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardSet);
      }
      size += cardSets_.CalculateSize(_repeated_cardSets_codec);
      if (CardType != global::Spellsource.Proto.CardType.Hero) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
      }
      if (Charge != false) {
        size += 1 + 1;
      }
      if (charges_ != null) {
        size += _single_charges_codec.CalculateSizeWithTag(Charges);
      }
      if (ChooseOne != false) {
        size += 2 + 1;
      }
      if (Collectible != false) {
        size += 2 + 1;
      }
      if (Combo != false) {
        size += 2 + 1;
      }
      if (ConditionMet != false) {
        size += 2 + 1;
      }
      if (countUntilCast_ != null) {
        size += _single_countUntilCast_codec.CalculateSizeWithTag(CountUntilCast);
      }
      if (Deathrattles != false) {
        size += 2 + 1;
      }
      if (Deflect != false) {
        size += 2 + 1;
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Destroyed != false) {
        size += 2 + 1;
      }
      if (Discarded != false) {
        size += 2 + 1;
      }
      if (DivineShield != false) {
        size += 2 + 1;
      }
      if (durability_ != null) {
        size += _single_durability_codec.CalculateSizeWithTag(Durability);
      }
      if (EnchantmentType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EnchantmentType);
      }
      if (Enraged != false) {
        size += 2 + 1;
      }
      if (EntityType != global::Spellsource.Proto.EntityType.Any) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (fires_ != null) {
        size += _single_fires_codec.CalculateSizeWithTag(Fires);
      }
      if (Frozen != false) {
        size += 2 + 1;
      }
      if (GameStarted != false) {
        size += 2 + 1;
      }
      if (Gold != false) {
        size += 2 + 1;
      }
      if (HeroClass.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeroClass);
      }
      if (Host != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Host);
      }
      if (HostsTrigger != false) {
        size += 2 + 1;
      }
      if (hp_ != null) {
        size += _single_hp_codec.CalculateSizeWithTag(Hp);
      }
      if (Immune != false) {
        size += 2 + 1;
      }
      if (IsStartingTurn != false) {
        size += 2 + 1;
      }
      if (location_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (Lifesteal != false) {
        size += 2 + 1;
      }
      if (LockedMana != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LockedMana);
      }
      if (Mana != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mana);
      }
      if (manaCost_ != null) {
        size += _single_manaCost_codec.CalculateSizeWithTag(ManaCost);
      }
      if (maxHp_ != null) {
        size += _single_maxHp_codec.CalculateSizeWithTag(MaxHp);
      }
      if (MaxMana != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxMana);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Note.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (overload_ != null) {
        size += _single_overload_codec.CalculateSizeWithTag(Overload);
      }
      if (Owner != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Owner);
      }
      if (Permanent != false) {
        size += 2 + 1;
      }
      if (Playable != false) {
        size += 2 + 1;
      }
      if (Poisonous != false) {
        size += 2 + 1;
      }
      if (Rarity != global::Spellsource.Proto.Rarity.Free) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Rarity);
      }
      if (Roasted != false) {
        size += 2 + 1;
      }
      if (Rush != false) {
        size += 2 + 1;
      }
      if (Silenced != false) {
        size += 2 + 1;
      }
      if (spellDamage_ != null) {
        size += _single_spellDamage_codec.CalculateSizeWithTag(SpellDamage);
      }
      if (Stealth != false) {
        size += 2 + 1;
      }
      if (SummoningSickness != false) {
        size += 2 + 1;
      }
      if (Taunt != false) {
        size += 2 + 1;
      }
      size += tooltips_.CalculateSize(_repeated_tooltips_codec);
      if (Tribe.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tribe);
      }
      if (Uncensored != false) {
        size += 2 + 1;
      }
      if (UnderAura != false) {
        size += 2 + 1;
      }
      if (UntargetableBySpells != false) {
        size += 2 + 1;
      }
      if (Windfury != false) {
        size += 2 + 1;
      }
      if (extraAttack_ != null) {
        size += _single_extraAttack_codec.CalculateSizeWithTag(ExtraAttack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.armor_ != null) {
        if (armor_ == null || other.Armor != 0) {
          Armor = other.Armor;
        }
      }
      if (other.art_ != null) {
        if (art_ == null) {
          Art = new global::Spellsource.Proto.Art();
        }
        Art.MergeFrom(other.Art);
      }
      if (other.attack_ != null) {
        if (attack_ == null || other.Attack != 0) {
          Attack = other.Attack;
        }
      }
      if (other.baseAttack_ != null) {
        if (baseAttack_ == null || other.BaseAttack != 0) {
          BaseAttack = other.BaseAttack;
        }
      }
      if (other.baseHp_ != null) {
        if (baseHp_ == null || other.BaseHp != 0) {
          BaseHp = other.BaseHp;
        }
      }
      if (other.baseManaCost_ != null) {
        if (baseManaCost_ == null || other.BaseManaCost != 0) {
          BaseManaCost = other.BaseManaCost;
        }
      }
      if (other.Battlecry != false) {
        Battlecry = other.Battlecry;
      }
      if (other.BoardPosition != 0) {
        BoardPosition = other.BoardPosition;
      }
      if (other.CannotAttack != false) {
        CannotAttack = other.CannotAttack;
      }
      if (other.CardId.Length != 0) {
        CardId = other.CardId;
      }
      if (other.CardSet.Length != 0) {
        CardSet = other.CardSet;
      }
      cardSets_.Add(other.cardSets_);
      if (other.CardType != global::Spellsource.Proto.CardType.Hero) {
        CardType = other.CardType;
      }
      if (other.Charge != false) {
        Charge = other.Charge;
      }
      if (other.charges_ != null) {
        if (charges_ == null || other.Charges != 0) {
          Charges = other.Charges;
        }
      }
      if (other.ChooseOne != false) {
        ChooseOne = other.ChooseOne;
      }
      if (other.Collectible != false) {
        Collectible = other.Collectible;
      }
      if (other.Combo != false) {
        Combo = other.Combo;
      }
      if (other.ConditionMet != false) {
        ConditionMet = other.ConditionMet;
      }
      if (other.countUntilCast_ != null) {
        if (countUntilCast_ == null || other.CountUntilCast != 0) {
          CountUntilCast = other.CountUntilCast;
        }
      }
      if (other.Deathrattles != false) {
        Deathrattles = other.Deathrattles;
      }
      if (other.Deflect != false) {
        Deflect = other.Deflect;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Destroyed != false) {
        Destroyed = other.Destroyed;
      }
      if (other.Discarded != false) {
        Discarded = other.Discarded;
      }
      if (other.DivineShield != false) {
        DivineShield = other.DivineShield;
      }
      if (other.durability_ != null) {
        if (durability_ == null || other.Durability != 0) {
          Durability = other.Durability;
        }
      }
      if (other.EnchantmentType.Length != 0) {
        EnchantmentType = other.EnchantmentType;
      }
      if (other.Enraged != false) {
        Enraged = other.Enraged;
      }
      if (other.EntityType != global::Spellsource.Proto.EntityType.Any) {
        EntityType = other.EntityType;
      }
      if (other.fires_ != null) {
        if (fires_ == null || other.Fires != 0) {
          Fires = other.Fires;
        }
      }
      if (other.Frozen != false) {
        Frozen = other.Frozen;
      }
      if (other.GameStarted != false) {
        GameStarted = other.GameStarted;
      }
      if (other.Gold != false) {
        Gold = other.Gold;
      }
      if (other.HeroClass.Length != 0) {
        HeroClass = other.HeroClass;
      }
      if (other.Host != 0) {
        Host = other.Host;
      }
      if (other.HostsTrigger != false) {
        HostsTrigger = other.HostsTrigger;
      }
      if (other.hp_ != null) {
        if (hp_ == null || other.Hp != 0) {
          Hp = other.Hp;
        }
      }
      if (other.Immune != false) {
        Immune = other.Immune;
      }
      if (other.IsStartingTurn != false) {
        IsStartingTurn = other.IsStartingTurn;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Spellsource.Proto.EntityLocation();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.Lifesteal != false) {
        Lifesteal = other.Lifesteal;
      }
      if (other.LockedMana != 0) {
        LockedMana = other.LockedMana;
      }
      if (other.Mana != 0) {
        Mana = other.Mana;
      }
      if (other.manaCost_ != null) {
        if (manaCost_ == null || other.ManaCost != 0) {
          ManaCost = other.ManaCost;
        }
      }
      if (other.maxHp_ != null) {
        if (maxHp_ == null || other.MaxHp != 0) {
          MaxHp = other.MaxHp;
        }
      }
      if (other.MaxMana != 0) {
        MaxMana = other.MaxMana;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      if (other.overload_ != null) {
        if (overload_ == null || other.Overload != 0) {
          Overload = other.Overload;
        }
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.Permanent != false) {
        Permanent = other.Permanent;
      }
      if (other.Playable != false) {
        Playable = other.Playable;
      }
      if (other.Poisonous != false) {
        Poisonous = other.Poisonous;
      }
      if (other.Rarity != global::Spellsource.Proto.Rarity.Free) {
        Rarity = other.Rarity;
      }
      if (other.Roasted != false) {
        Roasted = other.Roasted;
      }
      if (other.Rush != false) {
        Rush = other.Rush;
      }
      if (other.Silenced != false) {
        Silenced = other.Silenced;
      }
      if (other.spellDamage_ != null) {
        if (spellDamage_ == null || other.SpellDamage != 0) {
          SpellDamage = other.SpellDamage;
        }
      }
      if (other.Stealth != false) {
        Stealth = other.Stealth;
      }
      if (other.SummoningSickness != false) {
        SummoningSickness = other.SummoningSickness;
      }
      if (other.Taunt != false) {
        Taunt = other.Taunt;
      }
      tooltips_.Add(other.tooltips_);
      if (other.Tribe.Length != 0) {
        Tribe = other.Tribe;
      }
      if (other.Uncensored != false) {
        Uncensored = other.Uncensored;
      }
      if (other.UnderAura != false) {
        UnderAura = other.UnderAura;
      }
      if (other.UntargetableBySpells != false) {
        UntargetableBySpells = other.UntargetableBySpells;
      }
      if (other.Windfury != false) {
        Windfury = other.Windfury;
      }
      if (other.extraAttack_ != null) {
        if (extraAttack_ == null || other.ExtraAttack != 0) {
          ExtraAttack = other.ExtraAttack;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (art_ == null) {
              Art = new global::Spellsource.Proto.Art();
            }
            input.ReadMessage(Art);
            break;
          }
          case 26: {
            int? value = _single_attack_codec.Read(input);
            if (attack_ == null || value != 0) {
              Attack = value;
            }
            break;
          }
          case 34: {
            int? value = _single_baseAttack_codec.Read(input);
            if (baseAttack_ == null || value != 0) {
              BaseAttack = value;
            }
            break;
          }
          case 42: {
            int? value = _single_baseHp_codec.Read(input);
            if (baseHp_ == null || value != 0) {
              BaseHp = value;
            }
            break;
          }
          case 50: {
            int? value = _single_baseManaCost_codec.Read(input);
            if (baseManaCost_ == null || value != 0) {
              BaseManaCost = value;
            }
            break;
          }
          case 56: {
            Battlecry = input.ReadBool();
            break;
          }
          case 64: {
            BoardPosition = input.ReadInt32();
            break;
          }
          case 72: {
            CannotAttack = input.ReadBool();
            break;
          }
          case 82: {
            CardId = input.ReadString();
            break;
          }
          case 90: {
            CardSet = input.ReadString();
            break;
          }
          case 98: {
            cardSets_.AddEntriesFrom(input, _repeated_cardSets_codec);
            break;
          }
          case 104: {
            CardType = (global::Spellsource.Proto.CardType) input.ReadEnum();
            break;
          }
          case 112: {
            Charge = input.ReadBool();
            break;
          }
          case 122: {
            int? value = _single_charges_codec.Read(input);
            if (charges_ == null || value != 0) {
              Charges = value;
            }
            break;
          }
          case 128: {
            ChooseOne = input.ReadBool();
            break;
          }
          case 136: {
            Collectible = input.ReadBool();
            break;
          }
          case 144: {
            Combo = input.ReadBool();
            break;
          }
          case 152: {
            ConditionMet = input.ReadBool();
            break;
          }
          case 162: {
            int? value = _single_countUntilCast_codec.Read(input);
            if (countUntilCast_ == null || value != 0) {
              CountUntilCast = value;
            }
            break;
          }
          case 184: {
            Deathrattles = input.ReadBool();
            break;
          }
          case 192: {
            Deflect = input.ReadBool();
            break;
          }
          case 202: {
            Description = input.ReadString();
            break;
          }
          case 208: {
            Destroyed = input.ReadBool();
            break;
          }
          case 216: {
            Discarded = input.ReadBool();
            break;
          }
          case 224: {
            DivineShield = input.ReadBool();
            break;
          }
          case 234: {
            int? value = _single_durability_codec.Read(input);
            if (durability_ == null || value != 0) {
              Durability = value;
            }
            break;
          }
          case 242: {
            EnchantmentType = input.ReadString();
            break;
          }
          case 248: {
            Enraged = input.ReadBool();
            break;
          }
          case 256: {
            EntityType = (global::Spellsource.Proto.EntityType) input.ReadEnum();
            break;
          }
          case 266: {
            int? value = _single_fires_codec.Read(input);
            if (fires_ == null || value != 0) {
              Fires = value;
            }
            break;
          }
          case 272: {
            Frozen = input.ReadBool();
            break;
          }
          case 280: {
            GameStarted = input.ReadBool();
            break;
          }
          case 288: {
            Gold = input.ReadBool();
            break;
          }
          case 298: {
            HeroClass = input.ReadString();
            break;
          }
          case 304: {
            Host = input.ReadInt32();
            break;
          }
          case 312: {
            HostsTrigger = input.ReadBool();
            break;
          }
          case 322: {
            int? value = _single_hp_codec.Read(input);
            if (hp_ == null || value != 0) {
              Hp = value;
            }
            break;
          }
          case 330: {
            int? value = _single_armor_codec.Read(input);
            if (armor_ == null || value != 0) {
              Armor = value;
            }
            break;
          }
          case 336: {
            Immune = input.ReadBool();
            break;
          }
          case 344: {
            IsStartingTurn = input.ReadBool();
            break;
          }
          case 354: {
            if (location_ == null) {
              Location = new global::Spellsource.Proto.EntityLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 360: {
            Lifesteal = input.ReadBool();
            break;
          }
          case 368: {
            LockedMana = input.ReadInt32();
            break;
          }
          case 376: {
            Mana = input.ReadInt32();
            break;
          }
          case 386: {
            int? value = _single_manaCost_codec.Read(input);
            if (manaCost_ == null || value != 0) {
              ManaCost = value;
            }
            break;
          }
          case 394: {
            int? value = _single_maxHp_codec.Read(input);
            if (maxHp_ == null || value != 0) {
              MaxHp = value;
            }
            break;
          }
          case 400: {
            MaxMana = input.ReadInt32();
            break;
          }
          case 410: {
            Name = input.ReadString();
            break;
          }
          case 418: {
            Note = input.ReadString();
            break;
          }
          case 426: {
            int? value = _single_overload_codec.Read(input);
            if (overload_ == null || value != 0) {
              Overload = value;
            }
            break;
          }
          case 432: {
            Owner = input.ReadInt32();
            break;
          }
          case 440: {
            Permanent = input.ReadBool();
            break;
          }
          case 448: {
            Playable = input.ReadBool();
            break;
          }
          case 456: {
            Poisonous = input.ReadBool();
            break;
          }
          case 464: {
            Rarity = (global::Spellsource.Proto.Rarity) input.ReadEnum();
            break;
          }
          case 472: {
            Roasted = input.ReadBool();
            break;
          }
          case 480: {
            Rush = input.ReadBool();
            break;
          }
          case 488: {
            Silenced = input.ReadBool();
            break;
          }
          case 498: {
            int? value = _single_spellDamage_codec.Read(input);
            if (spellDamage_ == null || value != 0) {
              SpellDamage = value;
            }
            break;
          }
          case 504: {
            Stealth = input.ReadBool();
            break;
          }
          case 512: {
            SummoningSickness = input.ReadBool();
            break;
          }
          case 520: {
            Taunt = input.ReadBool();
            break;
          }
          case 530: {
            tooltips_.AddEntriesFrom(input, _repeated_tooltips_codec);
            break;
          }
          case 538: {
            Tribe = input.ReadString();
            break;
          }
          case 544: {
            Uncensored = input.ReadBool();
            break;
          }
          case 552: {
            UnderAura = input.ReadBool();
            break;
          }
          case 560: {
            UntargetableBySpells = input.ReadBool();
            break;
          }
          case 568: {
            Windfury = input.ReadBool();
            break;
          }
          case 578: {
            int? value = _single_extraAttack_codec.Read(input);
            if (extraAttack_ == null || value != 0) {
              ExtraAttack = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (art_ == null) {
              Art = new global::Spellsource.Proto.Art();
            }
            input.ReadMessage(Art);
            break;
          }
          case 26: {
            int? value = _single_attack_codec.Read(ref input);
            if (attack_ == null || value != 0) {
              Attack = value;
            }
            break;
          }
          case 34: {
            int? value = _single_baseAttack_codec.Read(ref input);
            if (baseAttack_ == null || value != 0) {
              BaseAttack = value;
            }
            break;
          }
          case 42: {
            int? value = _single_baseHp_codec.Read(ref input);
            if (baseHp_ == null || value != 0) {
              BaseHp = value;
            }
            break;
          }
          case 50: {
            int? value = _single_baseManaCost_codec.Read(ref input);
            if (baseManaCost_ == null || value != 0) {
              BaseManaCost = value;
            }
            break;
          }
          case 56: {
            Battlecry = input.ReadBool();
            break;
          }
          case 64: {
            BoardPosition = input.ReadInt32();
            break;
          }
          case 72: {
            CannotAttack = input.ReadBool();
            break;
          }
          case 82: {
            CardId = input.ReadString();
            break;
          }
          case 90: {
            CardSet = input.ReadString();
            break;
          }
          case 98: {
            cardSets_.AddEntriesFrom(ref input, _repeated_cardSets_codec);
            break;
          }
          case 104: {
            CardType = (global::Spellsource.Proto.CardType) input.ReadEnum();
            break;
          }
          case 112: {
            Charge = input.ReadBool();
            break;
          }
          case 122: {
            int? value = _single_charges_codec.Read(ref input);
            if (charges_ == null || value != 0) {
              Charges = value;
            }
            break;
          }
          case 128: {
            ChooseOne = input.ReadBool();
            break;
          }
          case 136: {
            Collectible = input.ReadBool();
            break;
          }
          case 144: {
            Combo = input.ReadBool();
            break;
          }
          case 152: {
            ConditionMet = input.ReadBool();
            break;
          }
          case 162: {
            int? value = _single_countUntilCast_codec.Read(ref input);
            if (countUntilCast_ == null || value != 0) {
              CountUntilCast = value;
            }
            break;
          }
          case 184: {
            Deathrattles = input.ReadBool();
            break;
          }
          case 192: {
            Deflect = input.ReadBool();
            break;
          }
          case 202: {
            Description = input.ReadString();
            break;
          }
          case 208: {
            Destroyed = input.ReadBool();
            break;
          }
          case 216: {
            Discarded = input.ReadBool();
            break;
          }
          case 224: {
            DivineShield = input.ReadBool();
            break;
          }
          case 234: {
            int? value = _single_durability_codec.Read(ref input);
            if (durability_ == null || value != 0) {
              Durability = value;
            }
            break;
          }
          case 242: {
            EnchantmentType = input.ReadString();
            break;
          }
          case 248: {
            Enraged = input.ReadBool();
            break;
          }
          case 256: {
            EntityType = (global::Spellsource.Proto.EntityType) input.ReadEnum();
            break;
          }
          case 266: {
            int? value = _single_fires_codec.Read(ref input);
            if (fires_ == null || value != 0) {
              Fires = value;
            }
            break;
          }
          case 272: {
            Frozen = input.ReadBool();
            break;
          }
          case 280: {
            GameStarted = input.ReadBool();
            break;
          }
          case 288: {
            Gold = input.ReadBool();
            break;
          }
          case 298: {
            HeroClass = input.ReadString();
            break;
          }
          case 304: {
            Host = input.ReadInt32();
            break;
          }
          case 312: {
            HostsTrigger = input.ReadBool();
            break;
          }
          case 322: {
            int? value = _single_hp_codec.Read(ref input);
            if (hp_ == null || value != 0) {
              Hp = value;
            }
            break;
          }
          case 330: {
            int? value = _single_armor_codec.Read(ref input);
            if (armor_ == null || value != 0) {
              Armor = value;
            }
            break;
          }
          case 336: {
            Immune = input.ReadBool();
            break;
          }
          case 344: {
            IsStartingTurn = input.ReadBool();
            break;
          }
          case 354: {
            if (location_ == null) {
              Location = new global::Spellsource.Proto.EntityLocation();
            }
            input.ReadMessage(Location);
            break;
          }
          case 360: {
            Lifesteal = input.ReadBool();
            break;
          }
          case 368: {
            LockedMana = input.ReadInt32();
            break;
          }
          case 376: {
            Mana = input.ReadInt32();
            break;
          }
          case 386: {
            int? value = _single_manaCost_codec.Read(ref input);
            if (manaCost_ == null || value != 0) {
              ManaCost = value;
            }
            break;
          }
          case 394: {
            int? value = _single_maxHp_codec.Read(ref input);
            if (maxHp_ == null || value != 0) {
              MaxHp = value;
            }
            break;
          }
          case 400: {
            MaxMana = input.ReadInt32();
            break;
          }
          case 410: {
            Name = input.ReadString();
            break;
          }
          case 418: {
            Note = input.ReadString();
            break;
          }
          case 426: {
            int? value = _single_overload_codec.Read(ref input);
            if (overload_ == null || value != 0) {
              Overload = value;
            }
            break;
          }
          case 432: {
            Owner = input.ReadInt32();
            break;
          }
          case 440: {
            Permanent = input.ReadBool();
            break;
          }
          case 448: {
            Playable = input.ReadBool();
            break;
          }
          case 456: {
            Poisonous = input.ReadBool();
            break;
          }
          case 464: {
            Rarity = (global::Spellsource.Proto.Rarity) input.ReadEnum();
            break;
          }
          case 472: {
            Roasted = input.ReadBool();
            break;
          }
          case 480: {
            Rush = input.ReadBool();
            break;
          }
          case 488: {
            Silenced = input.ReadBool();
            break;
          }
          case 498: {
            int? value = _single_spellDamage_codec.Read(ref input);
            if (spellDamage_ == null || value != 0) {
              SpellDamage = value;
            }
            break;
          }
          case 504: {
            Stealth = input.ReadBool();
            break;
          }
          case 512: {
            SummoningSickness = input.ReadBool();
            break;
          }
          case 520: {
            Taunt = input.ReadBool();
            break;
          }
          case 530: {
            tooltips_.AddEntriesFrom(ref input, _repeated_tooltips_codec);
            break;
          }
          case 538: {
            Tribe = input.ReadString();
            break;
          }
          case 544: {
            Uncensored = input.ReadBool();
            break;
          }
          case 552: {
            UnderAura = input.ReadBool();
            break;
          }
          case 560: {
            UntargetableBySpells = input.ReadBool();
            break;
          }
          case 568: {
            Windfury = input.ReadBool();
            break;
          }
          case 578: {
            int? value = _single_extraAttack_codec.Read(ref input);
            if (extraAttack_ == null || value != 0) {
              ExtraAttack = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An array that corresponds to the visible entities in this game state notification. The client is responsible for
  /// determining which indices have been added, changed or removed.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class EntityChangeSet : pb::IMessage<EntityChangeSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntityChangeSet> _parser = new pb::MessageParser<EntityChangeSet>(() => new EntityChangeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityChangeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeSet(EntityChangeSet other) : this() {
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityChangeSet Clone() {
      return new EntityChangeSet(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityChangeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityChangeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityChangeSet other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Encodes the location of the entity. Its index should be ordered in the entity change set.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class EntityLocation : pb::IMessage<EntityLocation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EntityLocation> _parser = new pb::MessageParser<EntityLocation>(() => new EntityLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityLocation(EntityLocation other) : this() {
      index_ = other.index_;
      zone_ = other.zone_;
      player_ = other.player_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityLocation Clone() {
      return new EntityLocation(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    /// The index of the entity inside its zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 2;
    private global::Spellsource.Proto.Zones zone_ = global::Spellsource.Proto.Zones.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Zones Zone {
      get { return zone_; }
      set {
        zone_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private int player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Zone != other.Zone) return false;
      if (Player != other.Player) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Zone != global::Spellsource.Proto.Zones.None) hash ^= Zone.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Zone != global::Spellsource.Proto.Zones.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Zone);
      }
      if (Player != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Zone != global::Spellsource.Proto.Zones.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Zone);
      }
      if (Player != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Zone != global::Spellsource.Proto.Zones.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Zone);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityLocation other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Zone != global::Spellsource.Proto.Zones.None) {
        Zone = other.Zone;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Zone = (global::Spellsource.Proto.Zones) input.ReadEnum();
            break;
          }
          case 24: {
            Player = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Zone = (global::Spellsource.Proto.Zones) input.ReadEnum();
            break;
          }
          case 24: {
            Player = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A container for data to and from the server. This envelope is the type of every message sent through the
  /// /realtime websocket endpoint.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Envelope : pb::IMessage<Envelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Envelope message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      [global::System.SerializableAttribute]
      public sealed partial class GameMessage : pb::IMessage<GameMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GameMessage> _parser = new pb::MessageParser<GameMessage>(() => new GameMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.Envelope.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMessage(GameMessage other) : this() {
          clientToServer_ = other.clientToServer_ != null ? other.clientToServer_.Clone() : null;
          serverToClient_ = other.serverToClient_ != null ? other.serverToClient_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameMessage Clone() {
          return new GameMessage(this);
        }

        /// <summary>Field number for the "clientToServer" field.</summary>
        public const int ClientToServerFieldNumber = 1;
        private global::Spellsource.Proto.ClientToServerMessage clientToServer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.ClientToServerMessage ClientToServer {
          get { return clientToServer_; }
          set {
            clientToServer_ = value;
          }
        }

        /// <summary>Field number for the "serverToClient" field.</summary>
        public const int ServerToClientFieldNumber = 2;
        private global::Spellsource.Proto.ServerToClientMessage serverToClient_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.ServerToClientMessage ServerToClient {
          get { return serverToClient_; }
          set {
            serverToClient_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ClientToServer, other.ClientToServer)) return false;
          if (!object.Equals(ServerToClient, other.ServerToClient)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (clientToServer_ != null) hash ^= ClientToServer.GetHashCode();
          if (serverToClient_ != null) hash ^= ServerToClient.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (clientToServer_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ClientToServer);
          }
          if (serverToClient_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ServerToClient);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (clientToServer_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ClientToServer);
          }
          if (serverToClient_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ServerToClient);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (clientToServer_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientToServer);
          }
          if (serverToClient_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerToClient);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameMessage other) {
          if (other == null) {
            return;
          }
          if (other.clientToServer_ != null) {
            if (clientToServer_ == null) {
              ClientToServer = new global::Spellsource.Proto.ClientToServerMessage();
            }
            ClientToServer.MergeFrom(other.ClientToServer);
          }
          if (other.serverToClient_ != null) {
            if (serverToClient_ == null) {
              ServerToClient = new global::Spellsource.Proto.ServerToClientMessage();
            }
            ServerToClient.MergeFrom(other.ServerToClient);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (clientToServer_ == null) {
                  ClientToServer = new global::Spellsource.Proto.ClientToServerMessage();
                }
                input.ReadMessage(ClientToServer);
                break;
              }
              case 18: {
                if (serverToClient_ == null) {
                  ServerToClient = new global::Spellsource.Proto.ServerToClientMessage();
                }
                input.ReadMessage(ServerToClient);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (clientToServer_ == null) {
                  ClientToServer = new global::Spellsource.Proto.ClientToServerMessage();
                }
                input.ReadMessage(ClientToServer);
                break;
              }
              case 18: {
                if (serverToClient_ == null) {
                  ServerToClient = new global::Spellsource.Proto.ServerToClientMessage();
                }
                input.ReadMessage(ServerToClient);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.SerializableAttribute]
      public sealed partial class MethodMessage : pb::IMessage<MethodMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MethodMessage> _parser = new pb::MessageParser<MethodMessage>(() => new MethodMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MethodMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.Envelope.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MethodMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MethodMessage(MethodMessage other) : this() {
          deleteCard_ = other.deleteCard_ != null ? other.deleteCard_.Clone() : null;
          dequeue_ = other.dequeue_ != null ? other.dequeue_.Clone() : null;
          enqueue_ = other.enqueue_ != null ? other.enqueue_.Clone() : null;
          methodId_ = other.methodId_;
          putCard_ = other.putCard_ != null ? other.putCard_.Clone() : null;
          sendMessage_ = other.sendMessage_ != null ? other.sendMessage_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MethodMessage Clone() {
          return new MethodMessage(this);
        }

        /// <summary>Field number for the "deleteCard" field.</summary>
        public const int DeleteCardFieldNumber = 1;
        private global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage deleteCard_;
        /// <summary>
        /// Removes the card with the specified record ID from the editable cards list.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage DeleteCard {
          get { return deleteCard_; }
          set {
            deleteCard_ = value;
          }
        }

        /// <summary>Field number for the "dequeue" field.</summary>
        public const int DequeueFieldNumber = 2;
        private global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DequeueMessage dequeue_;
        /// <summary>
        /// Leave the specified queue
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DequeueMessage Dequeue {
          get { return dequeue_; }
          set {
            dequeue_ = value;
          }
        }

        /// <summary>Field number for the "enqueue" field.</summary>
        public const int EnqueueFieldNumber = 3;
        private global::Spellsource.Proto.MatchmakingQueuePutRequest enqueue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.MatchmakingQueuePutRequest Enqueue {
          get { return enqueue_; }
          set {
            enqueue_ = value;
          }
        }

        /// <summary>Field number for the "methodId" field.</summary>
        public const int MethodIdFieldNumber = 4;
        private string methodId_ = "";
        /// <summary>
        /// The client-specified ID that will be used to mark the reply (the result) of this method call.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MethodId {
          get { return methodId_; }
          set {
            methodId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "putCard" field.</summary>
        public const int PutCardFieldNumber = 5;
        private global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage putCard_;
        /// <summary>
        /// Upserts and draws a card with the specified JSON representation.
        ///
        /// Only available in bot games.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage PutCard {
          get { return putCard_; }
          set {
            putCard_ = value;
          }
        }

        /// <summary>Field number for the "sendMessage" field.</summary>
        public const int SendMessageFieldNumber = 6;
        private global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage sendMessage_;
        /// <summary>
        /// Send a change message to the indicated conversationId.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage SendMessage {
          get { return sendMessage_; }
          set {
            sendMessage_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MethodMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MethodMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(DeleteCard, other.DeleteCard)) return false;
          if (!object.Equals(Dequeue, other.Dequeue)) return false;
          if (!object.Equals(Enqueue, other.Enqueue)) return false;
          if (MethodId != other.MethodId) return false;
          if (!object.Equals(PutCard, other.PutCard)) return false;
          if (!object.Equals(SendMessage, other.SendMessage)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (deleteCard_ != null) hash ^= DeleteCard.GetHashCode();
          if (dequeue_ != null) hash ^= Dequeue.GetHashCode();
          if (enqueue_ != null) hash ^= Enqueue.GetHashCode();
          if (MethodId.Length != 0) hash ^= MethodId.GetHashCode();
          if (putCard_ != null) hash ^= PutCard.GetHashCode();
          if (sendMessage_ != null) hash ^= SendMessage.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (deleteCard_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(DeleteCard);
          }
          if (dequeue_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Dequeue);
          }
          if (enqueue_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Enqueue);
          }
          if (MethodId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(MethodId);
          }
          if (putCard_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(PutCard);
          }
          if (sendMessage_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(SendMessage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (deleteCard_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(DeleteCard);
          }
          if (dequeue_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Dequeue);
          }
          if (enqueue_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Enqueue);
          }
          if (MethodId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(MethodId);
          }
          if (putCard_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(PutCard);
          }
          if (sendMessage_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(SendMessage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (deleteCard_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteCard);
          }
          if (dequeue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dequeue);
          }
          if (enqueue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enqueue);
          }
          if (MethodId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodId);
          }
          if (putCard_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PutCard);
          }
          if (sendMessage_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendMessage);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MethodMessage other) {
          if (other == null) {
            return;
          }
          if (other.deleteCard_ != null) {
            if (deleteCard_ == null) {
              DeleteCard = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage();
            }
            DeleteCard.MergeFrom(other.DeleteCard);
          }
          if (other.dequeue_ != null) {
            if (dequeue_ == null) {
              Dequeue = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DequeueMessage();
            }
            Dequeue.MergeFrom(other.Dequeue);
          }
          if (other.enqueue_ != null) {
            if (enqueue_ == null) {
              Enqueue = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
            }
            Enqueue.MergeFrom(other.Enqueue);
          }
          if (other.MethodId.Length != 0) {
            MethodId = other.MethodId;
          }
          if (other.putCard_ != null) {
            if (putCard_ == null) {
              PutCard = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage();
            }
            PutCard.MergeFrom(other.PutCard);
          }
          if (other.sendMessage_ != null) {
            if (sendMessage_ == null) {
              SendMessage = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage();
            }
            SendMessage.MergeFrom(other.SendMessage);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (deleteCard_ == null) {
                  DeleteCard = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage();
                }
                input.ReadMessage(DeleteCard);
                break;
              }
              case 18: {
                if (dequeue_ == null) {
                  Dequeue = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DequeueMessage();
                }
                input.ReadMessage(Dequeue);
                break;
              }
              case 26: {
                if (enqueue_ == null) {
                  Enqueue = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
                }
                input.ReadMessage(Enqueue);
                break;
              }
              case 34: {
                MethodId = input.ReadString();
                break;
              }
              case 42: {
                if (putCard_ == null) {
                  PutCard = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage();
                }
                input.ReadMessage(PutCard);
                break;
              }
              case 50: {
                if (sendMessage_ == null) {
                  SendMessage = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage();
                }
                input.ReadMessage(SendMessage);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (deleteCard_ == null) {
                  DeleteCard = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DeleteCardMessage();
                }
                input.ReadMessage(DeleteCard);
                break;
              }
              case 18: {
                if (dequeue_ == null) {
                  Dequeue = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.DequeueMessage();
                }
                input.ReadMessage(Dequeue);
                break;
              }
              case 26: {
                if (enqueue_ == null) {
                  Enqueue = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
                }
                input.ReadMessage(Enqueue);
                break;
              }
              case 34: {
                MethodId = input.ReadString();
                break;
              }
              case 42: {
                if (putCard_ == null) {
                  PutCard = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.PutCardMessage();
                }
                input.ReadMessage(PutCard);
                break;
              }
              case 50: {
                if (sendMessage_ == null) {
                  SendMessage = new global::Spellsource.Proto.Envelope.Types.MethodMessage.Types.SendMessageMessage();
                }
                input.ReadMessage(SendMessage);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the MethodMessage message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          [global::System.SerializableAttribute]
          public sealed partial class DeleteCardMessage : pb::IMessage<DeleteCardMessage>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<DeleteCardMessage> _parser = new pb::MessageParser<DeleteCardMessage>(() => new DeleteCardMessage());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DeleteCardMessage> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spellsource.Proto.Envelope.Types.MethodMessage.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeleteCardMessage() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeleteCardMessage(DeleteCardMessage other) : this() {
              editableCardId_ = other.editableCardId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeleteCardMessage Clone() {
              return new DeleteCardMessage(this);
            }

            /// <summary>Field number for the "editableCardId" field.</summary>
            public const int EditableCardIdFieldNumber = 1;
            private string editableCardId_ = "";
            /// <summary>
            /// The editable card record ID, or null if one should be created.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string EditableCardId {
              get { return editableCardId_; }
              set {
                editableCardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DeleteCardMessage);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DeleteCardMessage other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (EditableCardId != other.EditableCardId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (EditableCardId.Length != 0) hash ^= EditableCardId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (EditableCardId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(EditableCardId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (EditableCardId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(EditableCardId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (EditableCardId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EditableCardId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DeleteCardMessage other) {
              if (other == null) {
                return;
              }
              if (other.EditableCardId.Length != 0) {
                EditableCardId = other.EditableCardId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    EditableCardId = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    EditableCardId = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          [global::System.SerializableAttribute]
          public sealed partial class DequeueMessage : pb::IMessage<DequeueMessage>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<DequeueMessage> _parser = new pb::MessageParser<DequeueMessage>(() => new DequeueMessage());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DequeueMessage> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spellsource.Proto.Envelope.Types.MethodMessage.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DequeueMessage() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DequeueMessage(DequeueMessage other) : this() {
              queueId_ = other.queueId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DequeueMessage Clone() {
              return new DequeueMessage(this);
            }

            /// <summary>Field number for the "queueId" field.</summary>
            public const int QueueIdFieldNumber = 1;
            private string queueId_ = "";
            /// <summary>
            /// The queue to which the server should direct this request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string QueueId {
              get { return queueId_; }
              set {
                queueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DequeueMessage);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DequeueMessage other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (QueueId != other.QueueId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (QueueId.Length != 0) hash ^= QueueId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (QueueId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(QueueId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (QueueId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(QueueId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (QueueId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DequeueMessage other) {
              if (other == null) {
                return;
              }
              if (other.QueueId.Length != 0) {
                QueueId = other.QueueId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    QueueId = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    QueueId = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          [global::System.SerializableAttribute]
          public sealed partial class PutCardMessage : pb::IMessage<PutCardMessage>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<PutCardMessage> _parser = new pb::MessageParser<PutCardMessage>(() => new PutCardMessage());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PutCardMessage> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spellsource.Proto.Envelope.Types.MethodMessage.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PutCardMessage() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PutCardMessage(PutCardMessage other) : this() {
              draw_ = other.draw_;
              editableCardId_ = other.editableCardId_;
              source_ = other.source_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PutCardMessage Clone() {
              return new PutCardMessage(this);
            }

            /// <summary>Field number for the "draw" field.</summary>
            public const int DrawFieldNumber = 1;
            private bool draw_;
            /// <summary>
            /// When true, indicates that the editor should draw the card in a live game, if there is one.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Draw {
              get { return draw_; }
              set {
                draw_ = value;
              }
            }

            /// <summary>Field number for the "editableCardId" field.</summary>
            public const int EditableCardIdFieldNumber = 2;
            private string editableCardId_ = "";
            /// <summary>
            /// The editable card record ID, or null if one should be created.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string EditableCardId {
              get { return editableCardId_; }
              set {
                editableCardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "source" field.</summary>
            public const int SourceFieldNumber = 3;
            private string source_ = "";
            /// <summary>
            /// A JSON-formatted specification for the card.
            /// 
            /// The ID is auto-generated and ignored, which means drawing tokens at the moment is not supported.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Source {
              get { return source_; }
              set {
                source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PutCardMessage);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PutCardMessage other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Draw != other.Draw) return false;
              if (EditableCardId != other.EditableCardId) return false;
              if (Source != other.Source) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Draw != false) hash ^= Draw.GetHashCode();
              if (EditableCardId.Length != 0) hash ^= EditableCardId.GetHashCode();
              if (Source.Length != 0) hash ^= Source.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Draw != false) {
                output.WriteRawTag(8);
                output.WriteBool(Draw);
              }
              if (EditableCardId.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(EditableCardId);
              }
              if (Source.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Source);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Draw != false) {
                output.WriteRawTag(8);
                output.WriteBool(Draw);
              }
              if (EditableCardId.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(EditableCardId);
              }
              if (Source.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Source);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Draw != false) {
                size += 1 + 1;
              }
              if (EditableCardId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EditableCardId);
              }
              if (Source.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PutCardMessage other) {
              if (other == null) {
                return;
              }
              if (other.Draw != false) {
                Draw = other.Draw;
              }
              if (other.EditableCardId.Length != 0) {
                EditableCardId = other.EditableCardId;
              }
              if (other.Source.Length != 0) {
                Source = other.Source;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Draw = input.ReadBool();
                    break;
                  }
                  case 18: {
                    EditableCardId = input.ReadString();
                    break;
                  }
                  case 26: {
                    Source = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Draw = input.ReadBool();
                    break;
                  }
                  case 18: {
                    EditableCardId = input.ReadString();
                    break;
                  }
                  case 26: {
                    Source = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          [global::System.SerializableAttribute]
          public sealed partial class SendMessageMessage : pb::IMessage<SendMessageMessage>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<SendMessageMessage> _parser = new pb::MessageParser<SendMessageMessage>(() => new SendMessageMessage());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SendMessageMessage> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spellsource.Proto.Envelope.Types.MethodMessage.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SendMessageMessage() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SendMessageMessage(SendMessageMessage other) : this() {
              conversationId_ = other.conversationId_;
              message_ = other.message_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SendMessageMessage Clone() {
              return new SendMessageMessage(this);
            }

            /// <summary>Field number for the "conversationId" field.</summary>
            public const int ConversationIdFieldNumber = 1;
            private string conversationId_ = "";
            /// <summary>
            /// A conversation ID looks like userId1,userId2 where the first user ID is the one that comes first
            /// lexicographically.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ConversationId {
              get { return conversationId_; }
              set {
                conversationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "message" field.</summary>
            public const int MessageFieldNumber = 2;
            private string message_ = "";
            /// <summary>
            /// The contents of the message to send to the conversation.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Message {
              get { return message_; }
              set {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SendMessageMessage);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SendMessageMessage other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ConversationId != other.ConversationId) return false;
              if (Message != other.Message) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ConversationId.Length != 0) hash ^= ConversationId.GetHashCode();
              if (Message.Length != 0) hash ^= Message.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (ConversationId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ConversationId);
              }
              if (Message.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Message);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (ConversationId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ConversationId);
              }
              if (Message.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Message);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ConversationId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ConversationId);
              }
              if (Message.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SendMessageMessage other) {
              if (other == null) {
                return;
              }
              if (other.ConversationId.Length != 0) {
                ConversationId = other.ConversationId;
              }
              if (other.Message.Length != 0) {
                Message = other.Message;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ConversationId = input.ReadString();
                    break;
                  }
                  case 18: {
                    Message = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    ConversationId = input.ReadString();
                    break;
                  }
                  case 18: {
                    Message = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      [global::System.SerializableAttribute]
      public sealed partial class RemovedMessage : pb::IMessage<RemovedMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RemovedMessage> _parser = new pb::MessageParser<RemovedMessage>(() => new RemovedMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemovedMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.Envelope.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemovedMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemovedMessage(RemovedMessage other) : this() {
          switch (other.IdCase) {
            case IdOneofCase.EditableCardId:
              EditableCardId = other.EditableCardId;
              break;
            case IdOneofCase.FriendId:
              FriendId = other.FriendId;
              break;
            case IdOneofCase.InviteId:
              InviteId = other.InviteId;
              break;
            case IdOneofCase.MatchId:
              MatchId = other.MatchId;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemovedMessage Clone() {
          return new RemovedMessage(this);
        }

        /// <summary>Field number for the "editableCardId" field.</summary>
        public const int EditableCardIdFieldNumber = 1;
        /// <summary>
        /// The unique ID of the editable card.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EditableCardId {
          get { return idCase_ == IdOneofCase.EditableCardId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.EditableCardId;
          }
        }

        /// <summary>Field number for the "friendId" field.</summary>
        public const int FriendIdFieldNumber = 2;
        /// <summary>
        /// The unique ID of the friend that should be removed,
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FriendId {
          get { return idCase_ == IdOneofCase.FriendId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.FriendId;
          }
        }

        /// <summary>Field number for the "inviteId" field.</summary>
        public const int InviteIdFieldNumber = 3;
        /// <summary>
        /// The unique ID of the invitation that should be removed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string InviteId {
          get { return idCase_ == IdOneofCase.InviteId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.InviteId;
          }
        }

        /// <summary>Field number for the "matchId" field.</summary>
        public const int MatchIdFieldNumber = 4;
        /// <summary>
        /// The unique ID of the match that should be removed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchId {
          get { return idCase_ == IdOneofCase.MatchId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.MatchId;
          }
        }

        private object id_;
        /// <summary>Enum of possible cases for the "id" oneof.</summary>
        public enum IdOneofCase {
          None = 0,
          EditableCardId = 1,
          FriendId = 2,
          InviteId = 3,
          MatchId = 4,
        }
        private IdOneofCase idCase_ = IdOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofCase IdCase {
          get { return idCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          idCase_ = IdOneofCase.None;
          id_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemovedMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemovedMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EditableCardId != other.EditableCardId) return false;
          if (FriendId != other.FriendId) return false;
          if (InviteId != other.InviteId) return false;
          if (MatchId != other.MatchId) return false;
          if (IdCase != other.IdCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (idCase_ == IdOneofCase.EditableCardId) hash ^= EditableCardId.GetHashCode();
          if (idCase_ == IdOneofCase.FriendId) hash ^= FriendId.GetHashCode();
          if (idCase_ == IdOneofCase.InviteId) hash ^= InviteId.GetHashCode();
          if (idCase_ == IdOneofCase.MatchId) hash ^= MatchId.GetHashCode();
          hash ^= (int) idCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (idCase_ == IdOneofCase.EditableCardId) {
            output.WriteRawTag(10);
            output.WriteString(EditableCardId);
          }
          if (idCase_ == IdOneofCase.FriendId) {
            output.WriteRawTag(18);
            output.WriteString(FriendId);
          }
          if (idCase_ == IdOneofCase.InviteId) {
            output.WriteRawTag(26);
            output.WriteString(InviteId);
          }
          if (idCase_ == IdOneofCase.MatchId) {
            output.WriteRawTag(34);
            output.WriteString(MatchId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (idCase_ == IdOneofCase.EditableCardId) {
            output.WriteRawTag(10);
            output.WriteString(EditableCardId);
          }
          if (idCase_ == IdOneofCase.FriendId) {
            output.WriteRawTag(18);
            output.WriteString(FriendId);
          }
          if (idCase_ == IdOneofCase.InviteId) {
            output.WriteRawTag(26);
            output.WriteString(InviteId);
          }
          if (idCase_ == IdOneofCase.MatchId) {
            output.WriteRawTag(34);
            output.WriteString(MatchId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (idCase_ == IdOneofCase.EditableCardId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EditableCardId);
          }
          if (idCase_ == IdOneofCase.FriendId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
          }
          if (idCase_ == IdOneofCase.InviteId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(InviteId);
          }
          if (idCase_ == IdOneofCase.MatchId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemovedMessage other) {
          if (other == null) {
            return;
          }
          switch (other.IdCase) {
            case IdOneofCase.EditableCardId:
              EditableCardId = other.EditableCardId;
              break;
            case IdOneofCase.FriendId:
              FriendId = other.FriendId;
              break;
            case IdOneofCase.InviteId:
              InviteId = other.InviteId;
              break;
            case IdOneofCase.MatchId:
              MatchId = other.MatchId;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                EditableCardId = input.ReadString();
                break;
              }
              case 18: {
                FriendId = input.ReadString();
                break;
              }
              case 26: {
                InviteId = input.ReadString();
                break;
              }
              case 34: {
                MatchId = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                EditableCardId = input.ReadString();
                break;
              }
              case 18: {
                FriendId = input.ReadString();
                break;
              }
              case 26: {
                InviteId = input.ReadString();
                break;
              }
              case 34: {
                MatchId = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.SerializableAttribute]
      public sealed partial class ResultMessage : pb::IMessage<ResultMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ResultMessage> _parser = new pb::MessageParser<ResultMessage>(() => new ResultMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResultMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.Envelope.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultMessage(ResultMessage other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResultMessage Clone() {
          return new ResultMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ResultMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResultMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResultMessage other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the ResultMessage message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          [global::System.SerializableAttribute]
          public sealed partial class PutCardMessage : pb::IMessage<PutCardMessage>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<PutCardMessage> _parser = new pb::MessageParser<PutCardMessage>(() => new PutCardMessage());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PutCardMessage> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spellsource.Proto.Envelope.Types.ResultMessage.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PutCardMessage() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PutCardMessage(PutCardMessage other) : this() {
              cardId_ = other.cardId_;
              cardScriptErrors_ = other.cardScriptErrors_.Clone();
              editableCardId_ = other.editableCardId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PutCardMessage Clone() {
              return new PutCardMessage(this);
            }

            /// <summary>Field number for the "cardId" field.</summary>
            public const int CardIdFieldNumber = 1;
            private string cardId_ = "";
            /// <summary>
            /// The card ID that was put into the game.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CardId {
              get { return cardId_; }
              set {
                cardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "cardScriptErrors" field.</summary>
            public const int CardScriptErrorsFieldNumber = 2;
            private static readonly pb::FieldCodec<string> _repeated_cardScriptErrors_codec
                = pb::FieldCodec.ForString(18);
            private readonly pbc::RepeatedField<string> cardScriptErrors_ = new pbc::RepeatedField<string>();
            /// <summary>
            /// An array of errors with the card, if applicable.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> CardScriptErrors {
              get { return cardScriptErrors_; }
            }

            /// <summary>Field number for the "editableCardId" field.</summary>
            public const int EditableCardIdFieldNumber = 3;
            private string editableCardId_ = "";
            /// <summary>
            /// When not null, contains the editable card ID that was created by putting a record
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string EditableCardId {
              get { return editableCardId_; }
              set {
                editableCardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PutCardMessage);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PutCardMessage other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (CardId != other.CardId) return false;
              if(!cardScriptErrors_.Equals(other.cardScriptErrors_)) return false;
              if (EditableCardId != other.EditableCardId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (CardId.Length != 0) hash ^= CardId.GetHashCode();
              hash ^= cardScriptErrors_.GetHashCode();
              if (EditableCardId.Length != 0) hash ^= EditableCardId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (CardId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(CardId);
              }
              cardScriptErrors_.WriteTo(output, _repeated_cardScriptErrors_codec);
              if (EditableCardId.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(EditableCardId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (CardId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(CardId);
              }
              cardScriptErrors_.WriteTo(ref output, _repeated_cardScriptErrors_codec);
              if (EditableCardId.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(EditableCardId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (CardId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CardId);
              }
              size += cardScriptErrors_.CalculateSize(_repeated_cardScriptErrors_codec);
              if (EditableCardId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EditableCardId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PutCardMessage other) {
              if (other == null) {
                return;
              }
              if (other.CardId.Length != 0) {
                CardId = other.CardId;
              }
              cardScriptErrors_.Add(other.cardScriptErrors_);
              if (other.EditableCardId.Length != 0) {
                EditableCardId = other.EditableCardId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    CardId = input.ReadString();
                    break;
                  }
                  case 18: {
                    cardScriptErrors_.AddEntriesFrom(input, _repeated_cardScriptErrors_codec);
                    break;
                  }
                  case 26: {
                    EditableCardId = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    CardId = input.ReadString();
                    break;
                  }
                  case 18: {
                    cardScriptErrors_.AddEntriesFrom(ref input, _repeated_cardScriptErrors_codec);
                    break;
                  }
                  case 26: {
                    EditableCardId = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          [global::System.SerializableAttribute]
          public sealed partial class SendMessageMessage : pb::IMessage<SendMessageMessage>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<SendMessageMessage> _parser = new pb::MessageParser<SendMessageMessage>(() => new SendMessageMessage());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SendMessageMessage> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spellsource.Proto.Envelope.Types.ResultMessage.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SendMessageMessage() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SendMessageMessage(SendMessageMessage other) : this() {
              messageId_ = other.messageId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SendMessageMessage Clone() {
              return new SendMessageMessage(this);
            }

            /// <summary>Field number for the "messageId" field.</summary>
            public const int MessageIdFieldNumber = 1;
            private string messageId_ = "";
            /// <summary>
            /// The new message ID.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string MessageId {
              get { return messageId_; }
              set {
                messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SendMessageMessage);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SendMessageMessage other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (MessageId != other.MessageId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (MessageId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(MessageId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (MessageId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(MessageId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MessageId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SendMessageMessage other) {
              if (other == null) {
                return;
              }
              if (other.MessageId.Length != 0) {
                MessageId = other.MessageId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    MessageId = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    MessageId = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Contains a font (type, size, styling, etc.) specification
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Font : pb::IMessage<Font>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Font> _parser = new pb::MessageParser<Font>(() => new Font());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Font> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Font() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Font(Font other) : this() {
      vertex_ = other.vertex_ != null ? other.vertex_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Font Clone() {
      return new Font(this);
    }

    /// <summary>Field number for the "vertex" field.</summary>
    public const int VertexFieldNumber = 1;
    private global::Spellsource.Proto.Color vertex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Color Vertex {
      get { return vertex_; }
      set {
        vertex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Font);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Font other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Vertex, other.Vertex)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (vertex_ != null) hash ^= Vertex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (vertex_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Vertex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (vertex_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Vertex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (vertex_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vertex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Font other) {
      if (other == null) {
        return;
      }
      if (other.vertex_ != null) {
        if (vertex_ == null) {
          Vertex = new global::Spellsource.Proto.Color();
        }
        Vertex.MergeFrom(other.Vertex);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (vertex_ == null) {
              Vertex = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Vertex);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (vertex_ == null) {
              Vertex = new global::Spellsource.Proto.Color();
            }
            input.ReadMessage(Vertex);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class Friend : pb::IMessage<Friend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Friend> _parser = new pb::MessageParser<Friend>(() => new Friend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend(Friend other) : this() {
      friendId_ = other.friendId_;
      friendName_ = other.friendName_;
      presence_ = other.presence_;
      since_ = other.since_;
      notification_ = other.notification_ != null ? other.notification_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend Clone() {
      return new Friend(this);
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private string friendId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friendName" field.</summary>
    public const int FriendNameFieldNumber = 2;
    private string friendName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendName {
      get { return friendName_; }
      set {
        friendName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presence" field.</summary>
    public const int PresenceFieldNumber = 3;
    private global::Spellsource.Proto.PresenceEnum presence_ = global::Spellsource.Proto.PresenceEnum.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.PresenceEnum Presence {
      get { return presence_; }
      set {
        presence_ = value;
      }
    }

    /// <summary>Field number for the "since" field.</summary>
    public const int SinceFieldNumber = 4;
    private long since_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Since {
      get { return since_; }
      set {
        since_ = value;
      }
    }

    /// <summary>Field number for the "notification" field.</summary>
    public const int NotificationFieldNumber = 5;
    private global::Spellsource.AddedChangedRemoved notification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.AddedChangedRemoved Notification {
      get { return notification_; }
      set {
        notification_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      if (FriendName != other.FriendName) return false;
      if (Presence != other.Presence) return false;
      if (Since != other.Since) return false;
      if (!object.Equals(Notification, other.Notification)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FriendId.Length != 0) hash ^= FriendId.GetHashCode();
      if (FriendName.Length != 0) hash ^= FriendName.GetHashCode();
      if (Presence != global::Spellsource.Proto.PresenceEnum.Unknown) hash ^= Presence.GetHashCode();
      if (Since != 0L) hash ^= Since.GetHashCode();
      if (notification_ != null) hash ^= Notification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FriendId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (FriendName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FriendName);
      }
      if (Presence != global::Spellsource.Proto.PresenceEnum.Unknown) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Presence);
      }
      if (Since != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Since);
      }
      if (notification_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Notification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FriendId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (FriendName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FriendName);
      }
      if (Presence != global::Spellsource.Proto.PresenceEnum.Unknown) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Presence);
      }
      if (Since != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Since);
      }
      if (notification_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Notification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (FriendName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendName);
      }
      if (Presence != global::Spellsource.Proto.PresenceEnum.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Presence);
      }
      if (Since != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Since);
      }
      if (notification_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Notification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend other) {
      if (other == null) {
        return;
      }
      if (other.FriendId.Length != 0) {
        FriendId = other.FriendId;
      }
      if (other.FriendName.Length != 0) {
        FriendName = other.FriendName;
      }
      if (other.Presence != global::Spellsource.Proto.PresenceEnum.Unknown) {
        Presence = other.Presence;
      }
      if (other.Since != 0L) {
        Since = other.Since;
      }
      if (other.notification_ != null) {
        if (notification_ == null) {
          Notification = new global::Spellsource.AddedChangedRemoved();
        }
        Notification.MergeFrom(other.Notification);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 18: {
            FriendName = input.ReadString();
            break;
          }
          case 24: {
            Presence = (global::Spellsource.Proto.PresenceEnum) input.ReadEnum();
            break;
          }
          case 32: {
            Since = input.ReadInt64();
            break;
          }
          case 42: {
            if (notification_ == null) {
              Notification = new global::Spellsource.AddedChangedRemoved();
            }
            input.ReadMessage(Notification);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 18: {
            FriendName = input.ReadString();
            break;
          }
          case 24: {
            Presence = (global::Spellsource.Proto.PresenceEnum) input.ReadEnum();
            break;
          }
          case 32: {
            Since = input.ReadInt64();
            break;
          }
          case 42: {
            if (notification_ == null) {
              Notification = new global::Spellsource.AddedChangedRemoved();
            }
            input.ReadMessage(Notification);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class FriendDeleteRequest : pb::IMessage<FriendDeleteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FriendDeleteRequest> _parser = new pb::MessageParser<FriendDeleteRequest>(() => new FriendDeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendDeleteRequest(FriendDeleteRequest other) : this() {
      friendId_ = other.friendId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendDeleteRequest Clone() {
      return new FriendDeleteRequest(this);
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private string friendId_ = "";
    /// <summary>
    /// id of friend to unfriend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FriendId.Length != 0) hash ^= FriendId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FriendId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FriendId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.FriendId.Length != 0) {
        FriendId = other.FriendId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Adds two users to each other's friends list.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class FriendPutRequest : pb::IMessage<FriendPutRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FriendPutRequest> _parser = new pb::MessageParser<FriendPutRequest>(() => new FriendPutRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendPutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendPutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendPutRequest(FriendPutRequest other) : this() {
      friendId_ = other.friendId_;
      usernameWithToken_ = other.usernameWithToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendPutRequest Clone() {
      return new FriendPutRequest(this);
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private string friendId_ = "";
    /// <summary>
    /// Not supported. Throws an error if this is specified on the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usernameWithToken" field.</summary>
    public const int UsernameWithTokenFieldNumber = 2;
    private string usernameWithToken_ = "";
    /// <summary>
    /// The username with the privacy token, like "username#1234".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UsernameWithToken {
      get { return usernameWithToken_; }
      set {
        usernameWithToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendPutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendPutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      if (UsernameWithToken != other.UsernameWithToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FriendId.Length != 0) hash ^= FriendId.GetHashCode();
      if (UsernameWithToken.Length != 0) hash ^= UsernameWithToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FriendId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (UsernameWithToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UsernameWithToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FriendId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FriendId);
      }
      if (UsernameWithToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UsernameWithToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (UsernameWithToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UsernameWithToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendPutRequest other) {
      if (other == null) {
        return;
      }
      if (other.FriendId.Length != 0) {
        FriendId = other.FriendId;
      }
      if (other.UsernameWithToken.Length != 0) {
        UsernameWithToken = other.UsernameWithToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 18: {
            UsernameWithToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FriendId = input.ReadString();
            break;
          }
          case 18: {
            UsernameWithToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class FriendPutResponse : pb::IMessage<FriendPutResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FriendPutResponse> _parser = new pb::MessageParser<FriendPutResponse>(() => new FriendPutResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendPutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendPutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendPutResponse(FriendPutResponse other) : this() {
      friend_ = other.friend_ != null ? other.friend_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendPutResponse Clone() {
      return new FriendPutResponse(this);
    }

    /// <summary>Field number for the "friend" field.</summary>
    public const int FriendFieldNumber = 1;
    private global::Spellsource.Proto.Friend friend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Friend Friend {
      get { return friend_; }
      set {
        friend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendPutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendPutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Friend, other.Friend)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (friend_ != null) hash ^= Friend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (friend_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Friend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (friend_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Friend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (friend_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Friend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendPutResponse other) {
      if (other == null) {
        return;
      }
      if (other.friend_ != null) {
        if (friend_ == null) {
          Friend = new global::Spellsource.Proto.Friend();
        }
        Friend.MergeFrom(other.Friend);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (friend_ == null) {
              Friend = new global::Spellsource.Proto.Friend();
            }
            input.ReadMessage(Friend);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (friend_ == null) {
              Friend = new global::Spellsource.Proto.Friend();
            }
            input.ReadMessage(Friend);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An object representing all valid game actions in this action request.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class GameActions : pb::IMessage<GameActions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameActions> _parser = new pb::MessageParser<GameActions>(() => new GameActions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameActions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameActions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameActions(GameActions other) : this() {
      all_ = other.all_.Clone();
      compatibility_ = other.compatibility_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameActions Clone() {
      return new GameActions(this);
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.SpellAction> _repeated_all_codec
        = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.SpellAction.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.SpellAction> all_ = new pbc::RepeatedField<global::Spellsource.Proto.SpellAction>();
    /// <summary>
    /// An array of actions containing source, target, type and a short description of the action. Some actions make come with additional display data like a specific card, card ID or other content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.SpellAction> All {
      get { return all_; }
    }

    /// <summary>Field number for the "compatibility" field.</summary>
    public const int CompatibilityFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_compatibility_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> compatibility_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// An array of game action indices. Choose one at random for compatibility purposes until the client can support
    /// all actions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Compatibility {
      get { return compatibility_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameActions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameActions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!all_.Equals(other.all_)) return false;
      if(!compatibility_.Equals(other.compatibility_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= all_.GetHashCode();
      hash ^= compatibility_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      all_.WriteTo(output, _repeated_all_codec);
      compatibility_.WriteTo(output, _repeated_compatibility_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      all_.WriteTo(ref output, _repeated_all_codec);
      compatibility_.WriteTo(ref output, _repeated_compatibility_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += all_.CalculateSize(_repeated_all_codec);
      size += compatibility_.CalculateSize(_repeated_compatibility_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameActions other) {
      if (other == null) {
        return;
      }
      all_.Add(other.all_);
      compatibility_.Add(other.compatibility_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            all_.AddEntriesFrom(input, _repeated_all_codec);
            break;
          }
          case 18:
          case 16: {
            compatibility_.AddEntriesFrom(input, _repeated_compatibility_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            all_.AddEntriesFrom(ref input, _repeated_all_codec);
            break;
          }
          case 18:
          case 16: {
            compatibility_.AddEntriesFrom(ref input, _repeated_compatibility_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class GameEvent : pb::IMessage<GameEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameEvent> _parser = new pb::MessageParser<GameEvent>(() => new GameEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent(GameEvent other) : this() {
      cardEvent_ = other.cardEvent_ != null ? other.cardEvent_.Clone() : null;
      damage_ = other.damage_ != null ? other.damage_.Clone() : null;
      description_ = other.description_;
      destroy_ = other.destroy_ != null ? other.destroy_.Clone() : null;
      entityTouched_ = other.entityTouched_;
      entityUntouched_ = other.entityUntouched_;
      eventType_ = other.eventType_;
      id_ = other.id_;
      isPowerHistory_ = other.isPowerHistory_;
      isSourcePlayerLocal_ = other.isSourcePlayerLocal_;
      isTargetPlayerLocal_ = other.isTargetPlayerLocal_;
      joust_ = other.joust_ != null ? other.joust_.Clone() : null;
      performedGameAction_ = other.performedGameAction_ != null ? other.performedGameAction_.Clone() : null;
      source_ = other.source_ != null ? other.source_.Clone() : null;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      targets_ = other.targets_.Clone();
      triggerFired_ = other.triggerFired_ != null ? other.triggerFired_.Clone() : null;
      Value = other.Value;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEvent Clone() {
      return new GameEvent(this);
    }

    /// <summary>Field number for the "cardEvent" field.</summary>
    public const int CardEventFieldNumber = 1;
    private global::Spellsource.Proto.CardEvent cardEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.CardEvent CardEvent {
      get { return cardEvent_; }
      set {
        cardEvent_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private global::Spellsource.Proto.GameEvent.Types.DamageMessage damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameEvent.Types.DamageMessage Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// A plain text description of this event that should be shown to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destroy" field.</summary>
    public const int DestroyFieldNumber = 4;
    private global::Spellsource.Proto.GameEvent.Types.DestroyMessage destroy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameEvent.Types.DestroyMessage Destroy {
      get { return destroy_; }
      set {
        destroy_ = value;
      }
    }

    /// <summary>Field number for the "entityTouched" field.</summary>
    public const int EntityTouchedFieldNumber = 5;
    private int entityTouched_;
    /// <summary>
    /// The ID of the entity that has starting being touched by the opponent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityTouched {
      get { return entityTouched_; }
      set {
        entityTouched_ = value;
      }
    }

    /// <summary>Field number for the "entityUntouched" field.</summary>
    public const int EntityUntouchedFieldNumber = 6;
    private int entityUntouched_;
    /// <summary>
    /// The ID of the entity that is no longer being touched by the opponent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityUntouched {
      get { return entityUntouched_; }
      set {
        entityUntouched_ = value;
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 7;
    private global::Spellsource.Proto.GameEventType eventType_ = global::Spellsource.Proto.GameEventType.All;
    /// <summary>
    /// The game event type corresponding to this game event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameEventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 8;
    private int id_;
    /// <summary>
    /// An integer ID corresponding to the order of this event from the client's point of view.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "isPowerHistory" field.</summary>
    public const int IsPowerHistoryFieldNumber = 9;
    private bool isPowerHistory_;
    /// <summary>
    /// Should this event be rendered in the power history?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPowerHistory {
      get { return isPowerHistory_; }
      set {
        isPowerHistory_ = value;
      }
    }

    /// <summary>Field number for the "isSourcePlayerLocal" field.</summary>
    public const int IsSourcePlayerLocalFieldNumber = 10;
    private bool isSourcePlayerLocal_;
    /// <summary>
    /// Stores the source player according to the game event data. Typically this is the player who is casting the
    /// card or otherwise the source of an event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSourcePlayerLocal {
      get { return isSourcePlayerLocal_; }
      set {
        isSourcePlayerLocal_ = value;
      }
    }

    /// <summary>Field number for the "isTargetPlayerLocal" field.</summary>
    public const int IsTargetPlayerLocalFieldNumber = 11;
    private bool isTargetPlayerLocal_;
    /// <summary>
    /// Stores the target player according to the game event data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetPlayerLocal {
      get { return isTargetPlayerLocal_; }
      set {
        isTargetPlayerLocal_ = value;
      }
    }

    /// <summary>Field number for the "joust" field.</summary>
    public const int JoustFieldNumber = 12;
    private global::Spellsource.Proto.GameEvent.Types.JoustMessage joust_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameEvent.Types.JoustMessage Joust {
      get { return joust_; }
      set {
        joust_ = value;
      }
    }

    /// <summary>Field number for the "performedGameAction" field.</summary>
    public const int PerformedGameActionFieldNumber = 13;
    private global::Spellsource.Proto.GameEvent.Types.PerformedGameActionMessage performedGameAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameEvent.Types.PerformedGameActionMessage PerformedGameAction {
      get { return performedGameAction_; }
      set {
        performedGameAction_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 14;
    private global::Spellsource.Proto.Entity source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 15;
    private global::Spellsource.Proto.Entity target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Entity> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(130, global::Spellsource.Proto.Entity.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Entity> targets_ = new pbc::RepeatedField<global::Spellsource.Proto.Entity>();
    /// <summary>
    /// An array of targets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Entity> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "triggerFired" field.</summary>
    public const int TriggerFiredFieldNumber = 17;
    private global::Spellsource.Proto.GameEvent.Types.TriggerFiredMessage triggerFired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameEvent.Types.TriggerFiredMessage TriggerFired {
      get { return triggerFired_; }
      set {
        triggerFired_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 18;
    private static readonly pb::FieldCodec<int?> _single_value_codec = pb::FieldCodec.ForStructWrapper<int>(146);
    private int? value_;
    /// <summary>
    /// When not null, indicates this game event comes with a value. This is typically the damage dealt, the amount of
    /// healing, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardEvent, other.CardEvent)) return false;
      if (!object.Equals(Damage, other.Damage)) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Destroy, other.Destroy)) return false;
      if (EntityTouched != other.EntityTouched) return false;
      if (EntityUntouched != other.EntityUntouched) return false;
      if (EventType != other.EventType) return false;
      if (Id != other.Id) return false;
      if (IsPowerHistory != other.IsPowerHistory) return false;
      if (IsSourcePlayerLocal != other.IsSourcePlayerLocal) return false;
      if (IsTargetPlayerLocal != other.IsTargetPlayerLocal) return false;
      if (!object.Equals(Joust, other.Joust)) return false;
      if (!object.Equals(PerformedGameAction, other.PerformedGameAction)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if (!object.Equals(TriggerFired, other.TriggerFired)) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardEvent_ != null) hash ^= CardEvent.GetHashCode();
      if (damage_ != null) hash ^= Damage.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (destroy_ != null) hash ^= Destroy.GetHashCode();
      if (EntityTouched != 0) hash ^= EntityTouched.GetHashCode();
      if (EntityUntouched != 0) hash ^= EntityUntouched.GetHashCode();
      if (EventType != global::Spellsource.Proto.GameEventType.All) hash ^= EventType.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsPowerHistory != false) hash ^= IsPowerHistory.GetHashCode();
      if (IsSourcePlayerLocal != false) hash ^= IsSourcePlayerLocal.GetHashCode();
      if (IsTargetPlayerLocal != false) hash ^= IsTargetPlayerLocal.GetHashCode();
      if (joust_ != null) hash ^= Joust.GetHashCode();
      if (performedGameAction_ != null) hash ^= PerformedGameAction.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (triggerFired_ != null) hash ^= TriggerFired.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardEvent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardEvent);
      }
      if (damage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Damage);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (destroy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Destroy);
      }
      if (EntityTouched != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EntityTouched);
      }
      if (EntityUntouched != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EntityUntouched);
      }
      if (EventType != global::Spellsource.Proto.GameEventType.All) {
        output.WriteRawTag(56);
        output.WriteEnum((int) EventType);
      }
      if (Id != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Id);
      }
      if (IsPowerHistory != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsPowerHistory);
      }
      if (IsSourcePlayerLocal != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsSourcePlayerLocal);
      }
      if (IsTargetPlayerLocal != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsTargetPlayerLocal);
      }
      if (joust_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Joust);
      }
      if (performedGameAction_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PerformedGameAction);
      }
      if (source_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Target);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (triggerFired_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TriggerFired);
      }
      if (value_ != null) {
        _single_value_codec.WriteTagAndValue(output, Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardEvent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardEvent);
      }
      if (damage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Damage);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (destroy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Destroy);
      }
      if (EntityTouched != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EntityTouched);
      }
      if (EntityUntouched != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EntityUntouched);
      }
      if (EventType != global::Spellsource.Proto.GameEventType.All) {
        output.WriteRawTag(56);
        output.WriteEnum((int) EventType);
      }
      if (Id != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Id);
      }
      if (IsPowerHistory != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsPowerHistory);
      }
      if (IsSourcePlayerLocal != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsSourcePlayerLocal);
      }
      if (IsTargetPlayerLocal != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsTargetPlayerLocal);
      }
      if (joust_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Joust);
      }
      if (performedGameAction_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PerformedGameAction);
      }
      if (source_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Target);
      }
      targets_.WriteTo(ref output, _repeated_targets_codec);
      if (triggerFired_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TriggerFired);
      }
      if (value_ != null) {
        _single_value_codec.WriteTagAndValue(ref output, Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardEvent);
      }
      if (damage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Damage);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (destroy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destroy);
      }
      if (EntityTouched != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityTouched);
      }
      if (EntityUntouched != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityUntouched);
      }
      if (EventType != global::Spellsource.Proto.GameEventType.All) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsPowerHistory != false) {
        size += 1 + 1;
      }
      if (IsSourcePlayerLocal != false) {
        size += 1 + 1;
      }
      if (IsTargetPlayerLocal != false) {
        size += 1 + 1;
      }
      if (joust_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Joust);
      }
      if (performedGameAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PerformedGameAction);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (triggerFired_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TriggerFired);
      }
      if (value_ != null) {
        size += _single_value_codec.CalculateSizeWithTag(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEvent other) {
      if (other == null) {
        return;
      }
      if (other.cardEvent_ != null) {
        if (cardEvent_ == null) {
          CardEvent = new global::Spellsource.Proto.CardEvent();
        }
        CardEvent.MergeFrom(other.CardEvent);
      }
      if (other.damage_ != null) {
        if (damage_ == null) {
          Damage = new global::Spellsource.Proto.GameEvent.Types.DamageMessage();
        }
        Damage.MergeFrom(other.Damage);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.destroy_ != null) {
        if (destroy_ == null) {
          Destroy = new global::Spellsource.Proto.GameEvent.Types.DestroyMessage();
        }
        Destroy.MergeFrom(other.Destroy);
      }
      if (other.EntityTouched != 0) {
        EntityTouched = other.EntityTouched;
      }
      if (other.EntityUntouched != 0) {
        EntityUntouched = other.EntityUntouched;
      }
      if (other.EventType != global::Spellsource.Proto.GameEventType.All) {
        EventType = other.EventType;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsPowerHistory != false) {
        IsPowerHistory = other.IsPowerHistory;
      }
      if (other.IsSourcePlayerLocal != false) {
        IsSourcePlayerLocal = other.IsSourcePlayerLocal;
      }
      if (other.IsTargetPlayerLocal != false) {
        IsTargetPlayerLocal = other.IsTargetPlayerLocal;
      }
      if (other.joust_ != null) {
        if (joust_ == null) {
          Joust = new global::Spellsource.Proto.GameEvent.Types.JoustMessage();
        }
        Joust.MergeFrom(other.Joust);
      }
      if (other.performedGameAction_ != null) {
        if (performedGameAction_ == null) {
          PerformedGameAction = new global::Spellsource.Proto.GameEvent.Types.PerformedGameActionMessage();
        }
        PerformedGameAction.MergeFrom(other.PerformedGameAction);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          Source = new global::Spellsource.Proto.Entity();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Spellsource.Proto.Entity();
        }
        Target.MergeFrom(other.Target);
      }
      targets_.Add(other.targets_);
      if (other.triggerFired_ != null) {
        if (triggerFired_ == null) {
          TriggerFired = new global::Spellsource.Proto.GameEvent.Types.TriggerFiredMessage();
        }
        TriggerFired.MergeFrom(other.TriggerFired);
      }
      if (other.value_ != null) {
        if (value_ == null || other.Value != 0) {
          Value = other.Value;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardEvent_ == null) {
              CardEvent = new global::Spellsource.Proto.CardEvent();
            }
            input.ReadMessage(CardEvent);
            break;
          }
          case 18: {
            if (damage_ == null) {
              Damage = new global::Spellsource.Proto.GameEvent.Types.DamageMessage();
            }
            input.ReadMessage(Damage);
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (destroy_ == null) {
              Destroy = new global::Spellsource.Proto.GameEvent.Types.DestroyMessage();
            }
            input.ReadMessage(Destroy);
            break;
          }
          case 40: {
            EntityTouched = input.ReadInt32();
            break;
          }
          case 48: {
            EntityUntouched = input.ReadInt32();
            break;
          }
          case 56: {
            EventType = (global::Spellsource.Proto.GameEventType) input.ReadEnum();
            break;
          }
          case 64: {
            Id = input.ReadInt32();
            break;
          }
          case 72: {
            IsPowerHistory = input.ReadBool();
            break;
          }
          case 80: {
            IsSourcePlayerLocal = input.ReadBool();
            break;
          }
          case 88: {
            IsTargetPlayerLocal = input.ReadBool();
            break;
          }
          case 98: {
            if (joust_ == null) {
              Joust = new global::Spellsource.Proto.GameEvent.Types.JoustMessage();
            }
            input.ReadMessage(Joust);
            break;
          }
          case 106: {
            if (performedGameAction_ == null) {
              PerformedGameAction = new global::Spellsource.Proto.GameEvent.Types.PerformedGameActionMessage();
            }
            input.ReadMessage(PerformedGameAction);
            break;
          }
          case 114: {
            if (source_ == null) {
              Source = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Source);
            break;
          }
          case 122: {
            if (target_ == null) {
              Target = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Target);
            break;
          }
          case 130: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 138: {
            if (triggerFired_ == null) {
              TriggerFired = new global::Spellsource.Proto.GameEvent.Types.TriggerFiredMessage();
            }
            input.ReadMessage(TriggerFired);
            break;
          }
          case 146: {
            int? value = _single_value_codec.Read(input);
            if (value_ == null || value != 0) {
              Value = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardEvent_ == null) {
              CardEvent = new global::Spellsource.Proto.CardEvent();
            }
            input.ReadMessage(CardEvent);
            break;
          }
          case 18: {
            if (damage_ == null) {
              Damage = new global::Spellsource.Proto.GameEvent.Types.DamageMessage();
            }
            input.ReadMessage(Damage);
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (destroy_ == null) {
              Destroy = new global::Spellsource.Proto.GameEvent.Types.DestroyMessage();
            }
            input.ReadMessage(Destroy);
            break;
          }
          case 40: {
            EntityTouched = input.ReadInt32();
            break;
          }
          case 48: {
            EntityUntouched = input.ReadInt32();
            break;
          }
          case 56: {
            EventType = (global::Spellsource.Proto.GameEventType) input.ReadEnum();
            break;
          }
          case 64: {
            Id = input.ReadInt32();
            break;
          }
          case 72: {
            IsPowerHistory = input.ReadBool();
            break;
          }
          case 80: {
            IsSourcePlayerLocal = input.ReadBool();
            break;
          }
          case 88: {
            IsTargetPlayerLocal = input.ReadBool();
            break;
          }
          case 98: {
            if (joust_ == null) {
              Joust = new global::Spellsource.Proto.GameEvent.Types.JoustMessage();
            }
            input.ReadMessage(Joust);
            break;
          }
          case 106: {
            if (performedGameAction_ == null) {
              PerformedGameAction = new global::Spellsource.Proto.GameEvent.Types.PerformedGameActionMessage();
            }
            input.ReadMessage(PerformedGameAction);
            break;
          }
          case 114: {
            if (source_ == null) {
              Source = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Source);
            break;
          }
          case 122: {
            if (target_ == null) {
              Target = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Target);
            break;
          }
          case 130: {
            targets_.AddEntriesFrom(ref input, _repeated_targets_codec);
            break;
          }
          case 138: {
            if (triggerFired_ == null) {
              TriggerFired = new global::Spellsource.Proto.GameEvent.Types.TriggerFiredMessage();
            }
            input.ReadMessage(TriggerFired);
            break;
          }
          case 146: {
            int? value = _single_value_codec.Read(ref input);
            if (value_ == null || value != 0) {
              Value = value;
            }
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GameEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      [global::System.SerializableAttribute]
      public sealed partial class DamageMessage : pb::IMessage<DamageMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DamageMessage> _parser = new pb::MessageParser<DamageMessage>(() => new DamageMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DamageMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.GameEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageMessage(DamageMessage other) : this() {
          damageType_ = other.damageType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DamageMessage Clone() {
          return new DamageMessage(this);
        }

        /// <summary>Field number for the "damageType" field.</summary>
        public const int DamageTypeFieldNumber = 1;
        private global::Spellsource.Proto.DamageTypeEnum damageType_ = global::Spellsource.Proto.DamageTypeEnum.Physical;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.DamageTypeEnum DamageType {
          get { return damageType_; }
          set {
            damageType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DamageMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DamageMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DamageType != other.DamageType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DamageType != global::Spellsource.Proto.DamageTypeEnum.Physical) hash ^= DamageType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (DamageType != global::Spellsource.Proto.DamageTypeEnum.Physical) {
            output.WriteRawTag(8);
            output.WriteEnum((int) DamageType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (DamageType != global::Spellsource.Proto.DamageTypeEnum.Physical) {
            output.WriteRawTag(8);
            output.WriteEnum((int) DamageType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DamageType != global::Spellsource.Proto.DamageTypeEnum.Physical) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DamageType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DamageMessage other) {
          if (other == null) {
            return;
          }
          if (other.DamageType != global::Spellsource.Proto.DamageTypeEnum.Physical) {
            DamageType = other.DamageType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DamageType = (global::Spellsource.Proto.DamageTypeEnum) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                DamageType = (global::Spellsource.Proto.DamageTypeEnum) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.SerializableAttribute]
      public sealed partial class DestroyMessage : pb::IMessage<DestroyMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DestroyMessage> _parser = new pb::MessageParser<DestroyMessage>(() => new DestroyMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DestroyMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.GameEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyMessage(DestroyMessage other) : this() {
          objects_ = other.objects_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DestroyMessage Clone() {
          return new DestroyMessage(this);
        }

        /// <summary>Field number for the "objects" field.</summary>
        public const int ObjectsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Spellsource.Proto.Destroy> _repeated_objects_codec
            = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.Destroy.Parser);
        private readonly pbc::RepeatedField<global::Spellsource.Proto.Destroy> objects_ = new pbc::RepeatedField<global::Spellsource.Proto.Destroy>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Spellsource.Proto.Destroy> Objects {
          get { return objects_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DestroyMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DestroyMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!objects_.Equals(other.objects_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= objects_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          objects_.WriteTo(output, _repeated_objects_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          objects_.WriteTo(ref output, _repeated_objects_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += objects_.CalculateSize(_repeated_objects_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DestroyMessage other) {
          if (other == null) {
            return;
          }
          objects_.Add(other.objects_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                objects_.AddEntriesFrom(input, _repeated_objects_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                objects_.AddEntriesFrom(ref input, _repeated_objects_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.SerializableAttribute]
      public sealed partial class JoustMessage : pb::IMessage<JoustMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<JoustMessage> _parser = new pb::MessageParser<JoustMessage>(() => new JoustMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<JoustMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.GameEvent.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoustMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoustMessage(JoustMessage other) : this() {
          opponentCard_ = other.opponentCard_ != null ? other.opponentCard_.Clone() : null;
          ownCard_ = other.ownCard_ != null ? other.ownCard_.Clone() : null;
          won_ = other.won_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public JoustMessage Clone() {
          return new JoustMessage(this);
        }

        /// <summary>Field number for the "opponentCard" field.</summary>
        public const int OpponentCardFieldNumber = 1;
        private global::Spellsource.Proto.Entity opponentCard_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.Entity OpponentCard {
          get { return opponentCard_; }
          set {
            opponentCard_ = value;
          }
        }

        /// <summary>Field number for the "ownCard" field.</summary>
        public const int OwnCardFieldNumber = 2;
        private global::Spellsource.Proto.Entity ownCard_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.Entity OwnCard {
          get { return ownCard_; }
          set {
            ownCard_ = value;
          }
        }

        /// <summary>Field number for the "won" field.</summary>
        public const int WonFieldNumber = 3;
        private bool won_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Won {
          get { return won_; }
          set {
            won_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as JoustMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(JoustMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(OpponentCard, other.OpponentCard)) return false;
          if (!object.Equals(OwnCard, other.OwnCard)) return false;
          if (Won != other.Won) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (opponentCard_ != null) hash ^= OpponentCard.GetHashCode();
          if (ownCard_ != null) hash ^= OwnCard.GetHashCode();
          if (Won != false) hash ^= Won.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (opponentCard_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(OpponentCard);
          }
          if (ownCard_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(OwnCard);
          }
          if (Won != false) {
            output.WriteRawTag(24);
            output.WriteBool(Won);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (opponentCard_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(OpponentCard);
          }
          if (ownCard_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(OwnCard);
          }
          if (Won != false) {
            output.WriteRawTag(24);
            output.WriteBool(Won);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (opponentCard_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpponentCard);
          }
          if (ownCard_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OwnCard);
          }
          if (Won != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(JoustMessage other) {
          if (other == null) {
            return;
          }
          if (other.opponentCard_ != null) {
            if (opponentCard_ == null) {
              OpponentCard = new global::Spellsource.Proto.Entity();
            }
            OpponentCard.MergeFrom(other.OpponentCard);
          }
          if (other.ownCard_ != null) {
            if (ownCard_ == null) {
              OwnCard = new global::Spellsource.Proto.Entity();
            }
            OwnCard.MergeFrom(other.OwnCard);
          }
          if (other.Won != false) {
            Won = other.Won;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (opponentCard_ == null) {
                  OpponentCard = new global::Spellsource.Proto.Entity();
                }
                input.ReadMessage(OpponentCard);
                break;
              }
              case 18: {
                if (ownCard_ == null) {
                  OwnCard = new global::Spellsource.Proto.Entity();
                }
                input.ReadMessage(OwnCard);
                break;
              }
              case 24: {
                Won = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (opponentCard_ == null) {
                  OpponentCard = new global::Spellsource.Proto.Entity();
                }
                input.ReadMessage(OpponentCard);
                break;
              }
              case 18: {
                if (ownCard_ == null) {
                  OwnCard = new global::Spellsource.Proto.Entity();
                }
                input.ReadMessage(OwnCard);
                break;
              }
              case 24: {
                Won = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.SerializableAttribute]
      public sealed partial class PerformedGameActionMessage : pb::IMessage<PerformedGameActionMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PerformedGameActionMessage> _parser = new pb::MessageParser<PerformedGameActionMessage>(() => new PerformedGameActionMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PerformedGameActionMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.GameEvent.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformedGameActionMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformedGameActionMessage(PerformedGameActionMessage other) : this() {
          actionType_ = other.actionType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerformedGameActionMessage Clone() {
          return new PerformedGameActionMessage(this);
        }

        /// <summary>Field number for the "actionType" field.</summary>
        public const int ActionTypeFieldNumber = 1;
        private global::Spellsource.Proto.ActionType actionType_ = global::Spellsource.Proto.ActionType.System;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Spellsource.Proto.ActionType ActionType {
          get { return actionType_; }
          set {
            actionType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PerformedGameActionMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PerformedGameActionMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ActionType != other.ActionType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ActionType != global::Spellsource.Proto.ActionType.System) hash ^= ActionType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ActionType != global::Spellsource.Proto.ActionType.System) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ActionType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ActionType != global::Spellsource.Proto.ActionType.System) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ActionType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ActionType != global::Spellsource.Proto.ActionType.System) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PerformedGameActionMessage other) {
          if (other == null) {
            return;
          }
          if (other.ActionType != global::Spellsource.Proto.ActionType.System) {
            ActionType = other.ActionType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ActionType = (global::Spellsource.Proto.ActionType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                ActionType = (global::Spellsource.Proto.ActionType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.SerializableAttribute]
      public sealed partial class TriggerFiredMessage : pb::IMessage<TriggerFiredMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TriggerFiredMessage> _parser = new pb::MessageParser<TriggerFiredMessage>(() => new TriggerFiredMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TriggerFiredMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.GameEvent.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TriggerFiredMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TriggerFiredMessage(TriggerFiredMessage other) : this() {
          triggerSourceId_ = other.triggerSourceId_;
          triggerTargetIds_ = other.triggerTargetIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TriggerFiredMessage Clone() {
          return new TriggerFiredMessage(this);
        }

        /// <summary>Field number for the "triggerSourceId" field.</summary>
        public const int TriggerSourceIdFieldNumber = 1;
        private int triggerSourceId_;
        /// <summary>
        /// The entity ID corresponding to the source of the trigger that got fired.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TriggerSourceId {
          get { return triggerSourceId_; }
          set {
            triggerSourceId_ = value;
          }
        }

        /// <summary>Field number for the "triggerTargetIds" field.</summary>
        public const int TriggerTargetIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_triggerTargetIds_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> triggerTargetIds_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// The targets of the trigger's effect.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> TriggerTargetIds {
          get { return triggerTargetIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TriggerFiredMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TriggerFiredMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TriggerSourceId != other.TriggerSourceId) return false;
          if(!triggerTargetIds_.Equals(other.triggerTargetIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TriggerSourceId != 0) hash ^= TriggerSourceId.GetHashCode();
          hash ^= triggerTargetIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TriggerSourceId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TriggerSourceId);
          }
          triggerTargetIds_.WriteTo(output, _repeated_triggerTargetIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TriggerSourceId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TriggerSourceId);
          }
          triggerTargetIds_.WriteTo(ref output, _repeated_triggerTargetIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TriggerSourceId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerSourceId);
          }
          size += triggerTargetIds_.CalculateSize(_repeated_triggerTargetIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TriggerFiredMessage other) {
          if (other == null) {
            return;
          }
          if (other.TriggerSourceId != 0) {
            TriggerSourceId = other.TriggerSourceId;
          }
          triggerTargetIds_.Add(other.triggerTargetIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TriggerSourceId = input.ReadInt32();
                break;
              }
              case 18:
              case 16: {
                triggerTargetIds_.AddEntriesFrom(input, _repeated_triggerTargetIds_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TriggerSourceId = input.ReadInt32();
                break;
              }
              case 18:
              case 16: {
                triggerTargetIds_.AddEntriesFrom(ref input, _repeated_triggerTargetIds_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// An object that describes the winner and loser of a game
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class GameOver : pb::IMessage<GameOver>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameOver> _parser = new pb::MessageParser<GameOver>(() => new GameOver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver(GameOver other) : this() {
      localPlayerWon_ = other.localPlayerWon_;
      WinningPlayerId = other.WinningPlayerId;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameOver Clone() {
      return new GameOver(this);
    }

    /// <summary>Field number for the "localPlayerWon" field.</summary>
    public const int LocalPlayerWonFieldNumber = 1;
    private bool localPlayerWon_;
    /// <summary>
    /// True when the local player has won.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LocalPlayerWon {
      get { return localPlayerWon_; }
      set {
        localPlayerWon_ = value;
      }
    }

    /// <summary>Field number for the "winningPlayerId" field.</summary>
    public const int WinningPlayerIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_winningPlayerId_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? winningPlayerId_;
    /// <summary>
    /// The ID of the player who has won. Null if no player has won.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? WinningPlayerId {
      get { return winningPlayerId_; }
      set {
        winningPlayerId_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalPlayerWon != other.LocalPlayerWon) return false;
      if (WinningPlayerId != other.WinningPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalPlayerWon != false) hash ^= LocalPlayerWon.GetHashCode();
      if (winningPlayerId_ != null) hash ^= WinningPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LocalPlayerWon != false) {
        output.WriteRawTag(8);
        output.WriteBool(LocalPlayerWon);
      }
      if (winningPlayerId_ != null) {
        _single_winningPlayerId_codec.WriteTagAndValue(output, WinningPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LocalPlayerWon != false) {
        output.WriteRawTag(8);
        output.WriteBool(LocalPlayerWon);
      }
      if (winningPlayerId_ != null) {
        _single_winningPlayerId_codec.WriteTagAndValue(ref output, WinningPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalPlayerWon != false) {
        size += 1 + 1;
      }
      if (winningPlayerId_ != null) {
        size += _single_winningPlayerId_codec.CalculateSizeWithTag(WinningPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameOver other) {
      if (other == null) {
        return;
      }
      if (other.LocalPlayerWon != false) {
        LocalPlayerWon = other.LocalPlayerWon;
      }
      if (other.winningPlayerId_ != null) {
        if (winningPlayerId_ == null || other.WinningPlayerId != 0) {
          WinningPlayerId = other.WinningPlayerId;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LocalPlayerWon = input.ReadBool();
            break;
          }
          case 18: {
            int? value = _single_winningPlayerId_codec.Read(input);
            if (winningPlayerId_ == null || value != 0) {
              WinningPlayerId = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LocalPlayerWon = input.ReadBool();
            break;
          }
          case 18: {
            int? value = _single_winningPlayerId_codec.Read(ref input);
            if (winningPlayerId_ == null || value != 0) {
              WinningPlayerId = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class GameState : pb::IMessage<GameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      entities_ = other.entities_.Clone();
      isLocalPlayerTurn_ = other.isLocalPlayerTurn_;
      powerHistory_ = other.powerHistory_.Clone();
      timestamp_ = other.timestamp_;
      turnNumber_ = other.turnNumber_;
      turnState_ = other.turnState_;
      hasPowerHistory_ = other.hasPowerHistory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "entities" field.</summary>
    public const int EntitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Entity> _repeated_entities_codec
        = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.Entity.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Entity> entities_ = new pbc::RepeatedField<global::Spellsource.Proto.Entity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Entity> Entities {
      get { return entities_; }
    }

    /// <summary>Field number for the "isLocalPlayerTurn" field.</summary>
    public const int IsLocalPlayerTurnFieldNumber = 2;
    private bool isLocalPlayerTurn_;
    /// <summary>
    /// When true, it is the local player's turn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocalPlayerTurn {
      get { return isLocalPlayerTurn_; }
      set {
        isLocalPlayerTurn_ = value;
      }
    }

    /// <summary>Field number for the "powerHistory" field.</summary>
    public const int PowerHistoryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.GameEvent> _repeated_powerHistory_codec
        = pb::FieldCodec.ForMessage(26, global::Spellsource.Proto.GameEvent.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.GameEvent> powerHistory_ = new pbc::RepeatedField<global::Spellsource.Proto.GameEvent>();
    /// <summary>
    /// The last ten game event objects with isPowerHistory == true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.GameEvent> PowerHistory {
      get { return powerHistory_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "turnNumber" field.</summary>
    public const int TurnNumberFieldNumber = 5;
    private int turnNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurnNumber {
      get { return turnNumber_; }
      set {
        turnNumber_ = value;
      }
    }

    /// <summary>Field number for the "turnState" field.</summary>
    public const int TurnStateFieldNumber = 6;
    private string turnState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TurnState {
      get { return turnState_; }
      set {
        turnState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hasPowerHistory" field.</summary>
    public const int HasPowerHistoryFieldNumber = 7;
    private bool hasPowerHistory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPowerHistory {
      get { return hasPowerHistory_; }
      set {
        hasPowerHistory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entities_.Equals(other.entities_)) return false;
      if (IsLocalPlayerTurn != other.IsLocalPlayerTurn) return false;
      if(!powerHistory_.Equals(other.powerHistory_)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (TurnNumber != other.TurnNumber) return false;
      if (TurnState != other.TurnState) return false;
      if (HasPowerHistory != other.HasPowerHistory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entities_.GetHashCode();
      if (IsLocalPlayerTurn != false) hash ^= IsLocalPlayerTurn.GetHashCode();
      hash ^= powerHistory_.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (TurnNumber != 0) hash ^= TurnNumber.GetHashCode();
      if (TurnState.Length != 0) hash ^= TurnState.GetHashCode();
      if (HasPowerHistory != false) hash ^= HasPowerHistory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      entities_.WriteTo(output, _repeated_entities_codec);
      if (IsLocalPlayerTurn != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLocalPlayerTurn);
      }
      powerHistory_.WriteTo(output, _repeated_powerHistory_codec);
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (TurnNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TurnNumber);
      }
      if (TurnState.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TurnState);
      }
      if (HasPowerHistory != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasPowerHistory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      entities_.WriteTo(ref output, _repeated_entities_codec);
      if (IsLocalPlayerTurn != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLocalPlayerTurn);
      }
      powerHistory_.WriteTo(ref output, _repeated_powerHistory_codec);
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (TurnNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TurnNumber);
      }
      if (TurnState.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TurnState);
      }
      if (HasPowerHistory != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasPowerHistory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entities_.CalculateSize(_repeated_entities_codec);
      if (IsLocalPlayerTurn != false) {
        size += 1 + 1;
      }
      size += powerHistory_.CalculateSize(_repeated_powerHistory_codec);
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (TurnNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurnNumber);
      }
      if (TurnState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TurnState);
      }
      if (HasPowerHistory != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      entities_.Add(other.entities_);
      if (other.IsLocalPlayerTurn != false) {
        IsLocalPlayerTurn = other.IsLocalPlayerTurn;
      }
      powerHistory_.Add(other.powerHistory_);
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.TurnNumber != 0) {
        TurnNumber = other.TurnNumber;
      }
      if (other.TurnState.Length != 0) {
        TurnState = other.TurnState;
      }
      if (other.HasPowerHistory != false) {
        HasPowerHistory = other.HasPowerHistory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entities_.AddEntriesFrom(input, _repeated_entities_codec);
            break;
          }
          case 16: {
            IsLocalPlayerTurn = input.ReadBool();
            break;
          }
          case 26: {
            powerHistory_.AddEntriesFrom(input, _repeated_powerHistory_codec);
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 40: {
            TurnNumber = input.ReadInt32();
            break;
          }
          case 50: {
            TurnState = input.ReadString();
            break;
          }
          case 56: {
            HasPowerHistory = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            entities_.AddEntriesFrom(ref input, _repeated_entities_codec);
            break;
          }
          case 16: {
            IsLocalPlayerTurn = input.ReadBool();
            break;
          }
          case 26: {
            powerHistory_.AddEntriesFrom(ref input, _repeated_powerHistory_codec);
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 40: {
            TurnNumber = input.ReadInt32();
            break;
          }
          case 50: {
            TurnState = input.ReadString();
            break;
          }
          case 56: {
            HasPowerHistory = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class GetAccountRequest : pb::IMessage<GetAccountRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccountRequest> _parser = new pb::MessageParser<GetAccountRequest>(() => new GetAccountRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest(GetAccountRequest other) : this() {
      targetUserId_ = other.targetUserId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountRequest Clone() {
      return new GetAccountRequest(this);
    }

    /// <summary>Field number for the "targetUserId" field.</summary>
    public const int TargetUserIdFieldNumber = 1;
    private string targetUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetUserId {
      get { return targetUserId_; }
      set {
        targetUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetUserId != other.TargetUserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetUserId.Length != 0) hash ^= TargetUserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TargetUserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TargetUserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetUserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.TargetUserId.Length != 0) {
        TargetUserId = other.TargetUserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetUserId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TargetUserId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class GetAccountsRequest : pb::IMessage<GetAccountsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccountsRequest> _parser = new pb::MessageParser<GetAccountsRequest>(() => new GetAccountsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountsRequest(GetAccountsRequest other) : this() {
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountsRequest Clone() {
      return new GetAccountsRequest(this);
    }

    /// <summary>Field number for the "userIds" field.</summary>
    public const int UserIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// An array of user IDs to fetch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      userIds_.WriteTo(ref output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountsRequest other) {
      if (other == null) {
        return;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            userIds_.AddEntriesFrom(ref input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class GetAccountsResponse : pb::IMessage<GetAccountsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccountsResponse> _parser = new pb::MessageParser<GetAccountsResponse>(() => new GetAccountsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccountsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountsResponse(GetAccountsResponse other) : this() {
      accounts_ = other.accounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccountsResponse Clone() {
      return new GetAccountsResponse(this);
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Account> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.Account.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Account> accounts_ = new pbc::RepeatedField<global::Spellsource.Proto.Account>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Account> Accounts {
      get { return accounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccountsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccountsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accounts_.Equals(other.accounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accounts_.WriteTo(output, _repeated_accounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accounts_.WriteTo(ref output, _repeated_accounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccountsResponse other) {
      if (other == null) {
        return;
      }
      accounts_.Add(other.accounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            accounts_.AddEntriesFrom(ref input, _repeated_accounts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Retrieves an array of game IDs played by this player. Eventually will require paging.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class GetGameRecordIdsResponse : pb::IMessage<GetGameRecordIdsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetGameRecordIdsResponse> _parser = new pb::MessageParser<GetGameRecordIdsResponse>(() => new GetGameRecordIdsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameRecordIdsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordIdsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordIdsResponse(GetGameRecordIdsResponse other) : this() {
      gameIds_ = other.gameIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordIdsResponse Clone() {
      return new GetGameRecordIdsResponse(this);
    }

    /// <summary>Field number for the "gameIds" field.</summary>
    public const int GameIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_gameIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> gameIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// All the game IDs ever played by this player
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GameIds {
      get { return gameIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameRecordIdsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameRecordIdsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gameIds_.Equals(other.gameIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gameIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gameIds_.WriteTo(output, _repeated_gameIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gameIds_.WriteTo(ref output, _repeated_gameIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gameIds_.CalculateSize(_repeated_gameIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameRecordIdsResponse other) {
      if (other == null) {
        return;
      }
      gameIds_.Add(other.gameIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gameIds_.AddEntriesFrom(input, _repeated_gameIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gameIds_.AddEntriesFrom(ref input, _repeated_gameIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class GetGameRecordRequest : pb::IMessage<GetGameRecordRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetGameRecordRequest> _parser = new pb::MessageParser<GetGameRecordRequest>(() => new GetGameRecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordRequest(GetGameRecordRequest other) : this() {
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordRequest Clone() {
      return new GetGameRecordRequest(this);
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Information about a game.
  /// 
  /// Statistics about the game will be stored at a later point in time.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class GetGameRecordResponse : pb::IMessage<GetGameRecordResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetGameRecordResponse> _parser = new pb::MessageParser<GetGameRecordResponse>(() => new GetGameRecordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGameRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordResponse(GetGameRecordResponse other) : this() {
      completedAt_ = other.completedAt_;
      completedAtLocalized_ = other.completedAtLocalized_;
      isBotGame_ = other.isBotGame_;
      playerNames_ = other.playerNames_.Clone();
      replay_ = other.replay_ != null ? other.replay_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGameRecordResponse Clone() {
      return new GetGameRecordResponse(this);
    }

    /// <summary>Field number for the "completedAt" field.</summary>
    public const int CompletedAtFieldNumber = 1;
    private long completedAt_;
    /// <summary>
    /// A timestamp for when this game was finished (approximate).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompletedAt {
      get { return completedAt_; }
      set {
        completedAt_ = value;
      }
    }

    /// <summary>Field number for the "completedAtLocalized" field.</summary>
    public const int CompletedAtLocalizedFieldNumber = 2;
    private string completedAtLocalized_ = "";
    /// <summary>
    /// The date and time when this game was finished in the client's local time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CompletedAtLocalized {
      get { return completedAtLocalized_; }
      set {
        completedAtLocalized_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isBotGame" field.</summary>
    public const int IsBotGameFieldNumber = 3;
    private bool isBotGame_;
    /// <summary>
    /// True if this game was played against a bot (or was played entirely by bots)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBotGame {
      get { return isBotGame_; }
      set {
        isBotGame_ = value;
      }
    }

    /// <summary>Field number for the "playerNames" field.</summary>
    public const int PlayerNamesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_playerNames_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> playerNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The names of the players in this game, without their privacy tokens
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayerNames {
      get { return playerNames_; }
    }

    /// <summary>Field number for the "replay" field.</summary>
    public const int ReplayFieldNumber = 5;
    private global::Spellsource.Proto.Replay replay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Replay Replay {
      get { return replay_; }
      set {
        replay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGameRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGameRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompletedAt != other.CompletedAt) return false;
      if (CompletedAtLocalized != other.CompletedAtLocalized) return false;
      if (IsBotGame != other.IsBotGame) return false;
      if(!playerNames_.Equals(other.playerNames_)) return false;
      if (!object.Equals(Replay, other.Replay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompletedAt != 0L) hash ^= CompletedAt.GetHashCode();
      if (CompletedAtLocalized.Length != 0) hash ^= CompletedAtLocalized.GetHashCode();
      if (IsBotGame != false) hash ^= IsBotGame.GetHashCode();
      hash ^= playerNames_.GetHashCode();
      if (replay_ != null) hash ^= Replay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CompletedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CompletedAt);
      }
      if (CompletedAtLocalized.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CompletedAtLocalized);
      }
      if (IsBotGame != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBotGame);
      }
      playerNames_.WriteTo(output, _repeated_playerNames_codec);
      if (replay_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Replay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CompletedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CompletedAt);
      }
      if (CompletedAtLocalized.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CompletedAtLocalized);
      }
      if (IsBotGame != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBotGame);
      }
      playerNames_.WriteTo(ref output, _repeated_playerNames_codec);
      if (replay_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Replay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompletedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompletedAt);
      }
      if (CompletedAtLocalized.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CompletedAtLocalized);
      }
      if (IsBotGame != false) {
        size += 1 + 1;
      }
      size += playerNames_.CalculateSize(_repeated_playerNames_codec);
      if (replay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Replay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGameRecordResponse other) {
      if (other == null) {
        return;
      }
      if (other.CompletedAt != 0L) {
        CompletedAt = other.CompletedAt;
      }
      if (other.CompletedAtLocalized.Length != 0) {
        CompletedAtLocalized = other.CompletedAtLocalized;
      }
      if (other.IsBotGame != false) {
        IsBotGame = other.IsBotGame;
      }
      playerNames_.Add(other.playerNames_);
      if (other.replay_ != null) {
        if (replay_ == null) {
          Replay = new global::Spellsource.Proto.Replay();
        }
        Replay.MergeFrom(other.Replay);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompletedAt = input.ReadInt64();
            break;
          }
          case 18: {
            CompletedAtLocalized = input.ReadString();
            break;
          }
          case 24: {
            IsBotGame = input.ReadBool();
            break;
          }
          case 34: {
            playerNames_.AddEntriesFrom(input, _repeated_playerNames_codec);
            break;
          }
          case 42: {
            if (replay_ == null) {
              Replay = new global::Spellsource.Proto.Replay();
            }
            input.ReadMessage(Replay);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CompletedAt = input.ReadInt64();
            break;
          }
          case 18: {
            CompletedAtLocalized = input.ReadString();
            break;
          }
          case 24: {
            IsBotGame = input.ReadBool();
            break;
          }
          case 34: {
            playerNames_.AddEntriesFrom(ref input, _repeated_playerNames_codec);
            break;
          }
          case 42: {
            if (replay_ == null) {
              Replay = new global::Spellsource.Proto.Replay();
            }
            input.ReadMessage(Replay);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class GetInviteRequest : pb::IMessage<GetInviteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetInviteRequest> _parser = new pb::MessageParser<GetInviteRequest>(() => new GetInviteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInviteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInviteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInviteRequest(GetInviteRequest other) : this() {
      inviteId_ = other.inviteId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInviteRequest Clone() {
      return new GetInviteRequest(this);
    }

    /// <summary>Field number for the "inviteId" field.</summary>
    public const int InviteIdFieldNumber = 1;
    private string inviteId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInviteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInviteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InviteId != other.InviteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InviteId.Length != 0) hash ^= InviteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InviteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InviteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InviteId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InviteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InviteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InviteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInviteRequest other) {
      if (other == null) {
        return;
      }
      if (other.InviteId.Length != 0) {
        InviteId = other.InviteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InviteId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            InviteId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A collection of cards.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class InventoryCollection : pb::IMessage<InventoryCollection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InventoryCollection> _parser = new pb::MessageParser<InventoryCollection>(() => new InventoryCollection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InventoryCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryCollection(InventoryCollection other) : this() {
      Id_ = other.Id_;
      deckType_ = other.deckType_;
      format_ = other.format_;
      heroClass_ = other.heroClass_;
      inventory_ = other.inventory_.Clone();
      isStandardDeck_ = other.isStandardDeck_;
      name_ = other.name_;
      playerEntityAttributes_ = other.playerEntityAttributes_.Clone();
      type_ = other.type_;
      userId_ = other.userId_;
      validationReport_ = other.validationReport_ != null ? other.validationReport_.Clone() : null;
      canEdit_ = other.canEdit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryCollection Clone() {
      return new InventoryCollection(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    /// <summary>
    /// The identifier of this collection. Corresponds to a deckId when this is a deck collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deckType" field.</summary>
    public const int DeckTypeFieldNumber = 2;
    private global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType deckType_ = global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType.Draft;
    /// <summary>
    /// Indicates whether this is a deck meant for draft or constructed play.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType DeckType {
      get { return deckType_; }
      set {
        deckType_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 3;
    private string format_ = "";
    /// <summary>
    /// The format when this is a deck collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroClass" field.</summary>
    public const int HeroClassFieldNumber = 4;
    private string heroClass_ = "";
    /// <summary>
    /// The hero class when this is a deck collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroClass {
      get { return heroClass_; }
      set {
        heroClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inventory" field.</summary>
    public const int InventoryFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.CardRecord> _repeated_inventory_codec
        = pb::FieldCodec.ForMessage(42, global::Spellsource.Proto.CardRecord.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.CardRecord> inventory_ = new pbc::RepeatedField<global::Spellsource.Proto.CardRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.CardRecord> Inventory {
      get { return inventory_; }
    }

    /// <summary>Field number for the "isStandardDeck" field.</summary>
    public const int IsStandardDeckFieldNumber = 6;
    private bool isStandardDeck_;
    /// <summary>
    /// When true, indicates this is a standard deck provided by the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStandardDeck {
      get { return isStandardDeck_; }
      set {
        isStandardDeck_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    /// The name of this collection. Corresponds to the deck name when this is a deck collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerEntityAttributes" field.</summary>
    public const int PlayerEntityAttributesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.AttributeValueTuple> _repeated_playerEntityAttributes_codec
        = pb::FieldCodec.ForMessage(66, global::Spellsource.Proto.AttributeValueTuple.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.AttributeValueTuple> playerEntityAttributes_ = new pbc::RepeatedField<global::Spellsource.Proto.AttributeValueTuple>();
    /// <summary>
    /// A list of player entity attributes associated with this deck.
    /// 
    /// A player entity attribute is an attribute that comes into play before the game starts. It is used to implement
    /// the Signature spell of the Ringmaster class.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.AttributeValueTuple> PlayerEntityAttributes {
      get { return playerEntityAttributes_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType type_ = global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType.User;
    /// <summary>
    /// The type of collection this object is. A user's personal collection is of type USER. A deck is of type DECK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 10;
    private string userId_ = "";
    /// <summary>
    /// The owner of this collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "validationReport" field.</summary>
    public const int ValidationReportFieldNumber = 11;
    private global::Spellsource.Proto.ValidationReport validationReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.ValidationReport ValidationReport {
      get { return validationReport_; }
      set {
        validationReport_ = value;
      }
    }

    /// <summary>Field number for the "canEdit" field.</summary>
    public const int CanEditFieldNumber = 12;
    private bool canEdit_;
    /// <summary>
    /// Can the user who received this record edit this deck?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanEdit {
      get { return canEdit_; }
      set {
        canEdit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InventoryCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InventoryCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DeckType != other.DeckType) return false;
      if (Format != other.Format) return false;
      if (HeroClass != other.HeroClass) return false;
      if(!inventory_.Equals(other.inventory_)) return false;
      if (IsStandardDeck != other.IsStandardDeck) return false;
      if (Name != other.Name) return false;
      if(!playerEntityAttributes_.Equals(other.playerEntityAttributes_)) return false;
      if (Type != other.Type) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(ValidationReport, other.ValidationReport)) return false;
      if (CanEdit != other.CanEdit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DeckType != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType.Draft) hash ^= DeckType.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (HeroClass.Length != 0) hash ^= HeroClass.GetHashCode();
      hash ^= inventory_.GetHashCode();
      if (IsStandardDeck != false) hash ^= IsStandardDeck.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= playerEntityAttributes_.GetHashCode();
      if (Type != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType.User) hash ^= Type.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (validationReport_ != null) hash ^= ValidationReport.GetHashCode();
      if (CanEdit != false) hash ^= CanEdit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (DeckType != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType.Draft) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DeckType);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Format);
      }
      if (HeroClass.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeroClass);
      }
      inventory_.WriteTo(output, _repeated_inventory_codec);
      if (IsStandardDeck != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsStandardDeck);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      playerEntityAttributes_.WriteTo(output, _repeated_playerEntityAttributes_codec);
      if (Type != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType.User) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserId);
      }
      if (validationReport_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ValidationReport);
      }
      if (CanEdit != false) {
        output.WriteRawTag(96);
        output.WriteBool(CanEdit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (DeckType != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType.Draft) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DeckType);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Format);
      }
      if (HeroClass.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeroClass);
      }
      inventory_.WriteTo(ref output, _repeated_inventory_codec);
      if (IsStandardDeck != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsStandardDeck);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      playerEntityAttributes_.WriteTo(ref output, _repeated_playerEntityAttributes_codec);
      if (Type != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType.User) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserId);
      }
      if (validationReport_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ValidationReport);
      }
      if (CanEdit != false) {
        output.WriteRawTag(96);
        output.WriteBool(CanEdit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DeckType != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType.Draft) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeckType);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (HeroClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroClass);
      }
      size += inventory_.CalculateSize(_repeated_inventory_codec);
      if (IsStandardDeck != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += playerEntityAttributes_.CalculateSize(_repeated_playerEntityAttributes_codec);
      if (Type != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType.User) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (validationReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidationReport);
      }
      if (CanEdit != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InventoryCollection other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DeckType != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType.Draft) {
        DeckType = other.DeckType;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.HeroClass.Length != 0) {
        HeroClass = other.HeroClass;
      }
      inventory_.Add(other.inventory_);
      if (other.IsStandardDeck != false) {
        IsStandardDeck = other.IsStandardDeck;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      playerEntityAttributes_.Add(other.playerEntityAttributes_);
      if (other.Type != global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType.User) {
        Type = other.Type;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.validationReport_ != null) {
        if (validationReport_ == null) {
          ValidationReport = new global::Spellsource.Proto.ValidationReport();
        }
        ValidationReport.MergeFrom(other.ValidationReport);
      }
      if (other.CanEdit != false) {
        CanEdit = other.CanEdit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            DeckType = (global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType) input.ReadEnum();
            break;
          }
          case 26: {
            Format = input.ReadString();
            break;
          }
          case 34: {
            HeroClass = input.ReadString();
            break;
          }
          case 42: {
            inventory_.AddEntriesFrom(input, _repeated_inventory_codec);
            break;
          }
          case 48: {
            IsStandardDeck = input.ReadBool();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            playerEntityAttributes_.AddEntriesFrom(input, _repeated_playerEntityAttributes_codec);
            break;
          }
          case 72: {
            Type = (global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType) input.ReadEnum();
            break;
          }
          case 82: {
            UserId = input.ReadString();
            break;
          }
          case 90: {
            if (validationReport_ == null) {
              ValidationReport = new global::Spellsource.Proto.ValidationReport();
            }
            input.ReadMessage(ValidationReport);
            break;
          }
          case 96: {
            CanEdit = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            DeckType = (global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionDeckType) input.ReadEnum();
            break;
          }
          case 26: {
            Format = input.ReadString();
            break;
          }
          case 34: {
            HeroClass = input.ReadString();
            break;
          }
          case 42: {
            inventory_.AddEntriesFrom(ref input, _repeated_inventory_codec);
            break;
          }
          case 48: {
            IsStandardDeck = input.ReadBool();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            playerEntityAttributes_.AddEntriesFrom(ref input, _repeated_playerEntityAttributes_codec);
            break;
          }
          case 72: {
            Type = (global::Spellsource.Proto.InventoryCollection.Types.InventoryCollectionType) input.ReadEnum();
            break;
          }
          case 82: {
            UserId = input.ReadString();
            break;
          }
          case 90: {
            if (validationReport_ == null) {
              ValidationReport = new global::Spellsource.Proto.ValidationReport();
            }
            input.ReadMessage(ValidationReport);
            break;
          }
          case 96: {
            CanEdit = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the InventoryCollection message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InventoryCollectionDeckType {
        [pbr::OriginalName("INVENTORY_COLLECTION_DECK_TYPE_DRAFT")] Draft = 0,
        [pbr::OriginalName("INVENTORY_COLLECTION_DECK_TYPE_CONSTRUCTED")] Constructed = 1,
      }

      public enum InventoryCollectionType {
        [pbr::OriginalName("INVENTORY_COLLECTION_TYPE_USER")] User = 0,
        [pbr::OriginalName("INVENTORY_COLLECTION_TYPE_ALLIANCE")] Alliance = 1,
        [pbr::OriginalName("INVENTORY_COLLECTION_TYPE_DECK")] Deck = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// An object that indicates the player has a pending invitation to a game.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Invite : pb::IMessage<Invite>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Invite> _parser = new pb::MessageParser<Invite>(() => new Invite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Invite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invite(Invite other) : this() {
      Id_ = other.Id_;
      expiresAt_ = other.expiresAt_;
      friendId_ = other.friendId_;
      fromName_ = other.fromName_;
      fromUserId_ = other.fromUserId_;
      message_ = other.message_;
      queueId_ = other.queueId_;
      status_ = other.status_;
      toName_ = other.toName_;
      toUserId_ = other.toUserId_;
      notification_ = other.notification_ != null ? other.notification_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invite Clone() {
      return new Invite(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    /// <summary>
    /// The ID of the invite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiresAt" field.</summary>
    public const int ExpiresAtFieldNumber = 2;
    private long expiresAt_;
    /// <summary>
    /// An expiration timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 3;
    private string friendId_ = "";
    /// <summary>
    /// When set, indicates this is an invitation to become friends.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendId {
      get { return friendId_; }
      set {
        friendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromName" field.</summary>
    public const int FromNameFieldNumber = 4;
    private string fromName_ = "";
    /// <summary>
    /// The user from whom the invite originates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromName {
      get { return fromName_; }
      set {
        fromName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromUserId" field.</summary>
    public const int FromUserIdFieldNumber = 5;
    private string fromUserId_ = "";
    /// <summary>
    /// The user ID from whom the invite originates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private string message_ = "";
    /// <summary>
    /// The description of this invite. Typically includes the queue contents and possibly a note from the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queueId" field.</summary>
    public const int QueueIdFieldNumber = 7;
    private string queueId_ = "";
    /// <summary>
    /// When set, indicates this is an invitation to play a game. The queue ID to put into the matchmaking request to
    /// fulfill this invite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueueId {
      get { return queueId_; }
      set {
        queueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private global::Spellsource.Proto.Invite.Types.InviteStatus status_ = global::Spellsource.Proto.Invite.Types.InviteStatus.Undelivered;
    /// <summary>
    /// Indicates the status of the invite.
    ///  * UNDELIVERED: The invitation was created and is awaiting delivery, either due to ordinary networking delay
    ///    or because the recipient is not yet online.
    ///  * PENDING: The invitation is delivered and awaiting a response.
    ///  * TIMEOUT: The recipient did not respond by the expiration time and the invitation expired.
    ///  * ACCEPTED: The recipient accepted the invitation. The sender should enter the queue if they haven't already
    ///    done so.
    ///  * REJECTED: The recipient rejected the invitation.
    ///  * CANCELLED: The sender cancelled the invitation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Invite.Types.InviteStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "toName" field.</summary>
    public const int ToNameFieldNumber = 9;
    private string toName_ = "";
    /// <summary>
    /// The name of the user to whom the invite is addressed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToName {
      get { return toName_; }
      set {
        toName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toUserId" field.</summary>
    public const int ToUserIdFieldNumber = 10;
    private string toUserId_ = "";
    /// <summary>
    /// The user ID to whom the invite is addressed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notification" field.</summary>
    public const int NotificationFieldNumber = 11;
    private global::Spellsource.AddedChangedRemoved notification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.AddedChangedRemoved Notification {
      get { return notification_; }
      set {
        notification_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Invite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Invite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (FriendId != other.FriendId) return false;
      if (FromName != other.FromName) return false;
      if (FromUserId != other.FromUserId) return false;
      if (Message != other.Message) return false;
      if (QueueId != other.QueueId) return false;
      if (Status != other.Status) return false;
      if (ToName != other.ToName) return false;
      if (ToUserId != other.ToUserId) return false;
      if (!object.Equals(Notification, other.Notification)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (FriendId.Length != 0) hash ^= FriendId.GetHashCode();
      if (FromName.Length != 0) hash ^= FromName.GetHashCode();
      if (FromUserId.Length != 0) hash ^= FromUserId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (QueueId.Length != 0) hash ^= QueueId.GetHashCode();
      if (Status != global::Spellsource.Proto.Invite.Types.InviteStatus.Undelivered) hash ^= Status.GetHashCode();
      if (ToName.Length != 0) hash ^= ToName.GetHashCode();
      if (ToUserId.Length != 0) hash ^= ToUserId.GetHashCode();
      if (notification_ != null) hash ^= Notification.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpiresAt);
      }
      if (FriendId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FriendId);
      }
      if (FromName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FromName);
      }
      if (FromUserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FromUserId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (QueueId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(QueueId);
      }
      if (Status != global::Spellsource.Proto.Invite.Types.InviteStatus.Undelivered) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Status);
      }
      if (ToName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ToName);
      }
      if (ToUserId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ToUserId);
      }
      if (notification_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Notification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpiresAt);
      }
      if (FriendId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FriendId);
      }
      if (FromName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FromName);
      }
      if (FromUserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FromUserId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (QueueId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(QueueId);
      }
      if (Status != global::Spellsource.Proto.Invite.Types.InviteStatus.Undelivered) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Status);
      }
      if (ToName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ToName);
      }
      if (ToUserId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ToUserId);
      }
      if (notification_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Notification);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (FriendId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendId);
      }
      if (FromName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromName);
      }
      if (FromUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromUserId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (QueueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueId);
      }
      if (Status != global::Spellsource.Proto.Invite.Types.InviteStatus.Undelivered) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ToName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToName);
      }
      if (ToUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToUserId);
      }
      if (notification_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Notification);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Invite other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.FriendId.Length != 0) {
        FriendId = other.FriendId;
      }
      if (other.FromName.Length != 0) {
        FromName = other.FromName;
      }
      if (other.FromUserId.Length != 0) {
        FromUserId = other.FromUserId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.QueueId.Length != 0) {
        QueueId = other.QueueId;
      }
      if (other.Status != global::Spellsource.Proto.Invite.Types.InviteStatus.Undelivered) {
        Status = other.Status;
      }
      if (other.ToName.Length != 0) {
        ToName = other.ToName;
      }
      if (other.ToUserId.Length != 0) {
        ToUserId = other.ToUserId;
      }
      if (other.notification_ != null) {
        if (notification_ == null) {
          Notification = new global::Spellsource.AddedChangedRemoved();
        }
        Notification.MergeFrom(other.Notification);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 26: {
            FriendId = input.ReadString();
            break;
          }
          case 34: {
            FromName = input.ReadString();
            break;
          }
          case 42: {
            FromUserId = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            QueueId = input.ReadString();
            break;
          }
          case 64: {
            Status = (global::Spellsource.Proto.Invite.Types.InviteStatus) input.ReadEnum();
            break;
          }
          case 74: {
            ToName = input.ReadString();
            break;
          }
          case 82: {
            ToUserId = input.ReadString();
            break;
          }
          case 90: {
            if (notification_ == null) {
              Notification = new global::Spellsource.AddedChangedRemoved();
            }
            input.ReadMessage(Notification);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 26: {
            FriendId = input.ReadString();
            break;
          }
          case 34: {
            FromName = input.ReadString();
            break;
          }
          case 42: {
            FromUserId = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            QueueId = input.ReadString();
            break;
          }
          case 64: {
            Status = (global::Spellsource.Proto.Invite.Types.InviteStatus) input.ReadEnum();
            break;
          }
          case 74: {
            ToName = input.ReadString();
            break;
          }
          case 82: {
            ToUserId = input.ReadString();
            break;
          }
          case 90: {
            if (notification_ == null) {
              Notification = new global::Spellsource.AddedChangedRemoved();
            }
            input.ReadMessage(Notification);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Invite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InviteStatus {
        [pbr::OriginalName("INVITE_STATUS_UNDELIVERED")] Undelivered = 0,
        [pbr::OriginalName("INVITE_STATUS_PENDING")] Pending = 1,
        [pbr::OriginalName("INVITE_STATUS_TIMEOUT")] Timeout = 2,
        [pbr::OriginalName("INVITE_STATUS_ACCEPTED")] Accepted = 3,
        [pbr::OriginalName("INVITE_STATUS_REJECTED")] Rejected = 4,
        [pbr::OriginalName("INVITE_STATUS_CANCELLED")] Cancelled = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// The invites where this user is either the sender or recipient.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class InviteGetResponse : pb::IMessage<InviteGetResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InviteGetResponse> _parser = new pb::MessageParser<InviteGetResponse>(() => new InviteGetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviteGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteGetResponse(InviteGetResponse other) : this() {
      invites_ = other.invites_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteGetResponse Clone() {
      return new InviteGetResponse(this);
    }

    /// <summary>Field number for the "invites" field.</summary>
    public const int InvitesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Invite> _repeated_invites_codec
        = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.Invite.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Invite> invites_ = new pbc::RepeatedField<global::Spellsource.Proto.Invite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Invite> Invites {
      get { return invites_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InviteGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InviteGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!invites_.Equals(other.invites_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= invites_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      invites_.WriteTo(output, _repeated_invites_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      invites_.WriteTo(ref output, _repeated_invites_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += invites_.CalculateSize(_repeated_invites_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InviteGetResponse other) {
      if (other == null) {
        return;
      }
      invites_.Add(other.invites_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            invites_.AddEntriesFrom(input, _repeated_invites_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            invites_.AddEntriesFrom(ref input, _repeated_invites_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Requests to send an invite to play a 1v1 match, to friend a player, or both.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class InvitePostRequest : pb::IMessage<InvitePostRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InvitePostRequest> _parser = new pb::MessageParser<InvitePostRequest>(() => new InvitePostRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvitePostRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvitePostRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvitePostRequest(InvitePostRequest other) : this() {
      deckId_ = other.deckId_;
      friend_ = other.friend_;
      message_ = other.message_;
      queueId_ = other.queueId_;
      toUserId_ = other.toUserId_;
      toUserNameWithToken_ = other.toUserNameWithToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvitePostRequest Clone() {
      return new InvitePostRequest(this);
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 1;
    private string deckId_ = "";
    /// <summary>
    /// The deck the user is creating this invite with. Used for 1v1 queues. If this is specified, the user is
    /// automatically enqueued.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeckId {
      get { return deckId_; }
      set {
        deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friend" field.</summary>
    public const int FriendFieldNumber = 2;
    private bool friend_;
    /// <summary>
    /// When true, indicates that this request is a friend invitation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Friend {
      get { return friend_; }
      set {
        friend_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// An optional message to add to the invite request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queueId" field.</summary>
    public const int QueueIdFieldNumber = 4;
    private string queueId_ = "";
    /// <summary>
    /// The queue that the player would like to 1v1 inside of. These may differ from the competitive queues.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueueId {
      get { return queueId_; }
      set {
        queueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toUserId" field.</summary>
    public const int ToUserIdFieldNumber = 5;
    private string toUserId_ = "";
    /// <summary>
    /// The user who should receive the invite
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toUserNameWithToken" field.</summary>
    public const int ToUserNameWithTokenFieldNumber = 6;
    private string toUserNameWithToken_ = "";
    /// <summary>
    /// The username and privacy token (#1234 part) to send the request to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToUserNameWithToken {
      get { return toUserNameWithToken_; }
      set {
        toUserNameWithToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvitePostRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvitePostRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeckId != other.DeckId) return false;
      if (Friend != other.Friend) return false;
      if (Message != other.Message) return false;
      if (QueueId != other.QueueId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (ToUserNameWithToken != other.ToUserNameWithToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
      if (Friend != false) hash ^= Friend.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (QueueId.Length != 0) hash ^= QueueId.GetHashCode();
      if (ToUserId.Length != 0) hash ^= ToUserId.GetHashCode();
      if (ToUserNameWithToken.Length != 0) hash ^= ToUserNameWithToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckId);
      }
      if (Friend != false) {
        output.WriteRawTag(16);
        output.WriteBool(Friend);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (QueueId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(QueueId);
      }
      if (ToUserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ToUserId);
      }
      if (ToUserNameWithToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ToUserNameWithToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeckId);
      }
      if (Friend != false) {
        output.WriteRawTag(16);
        output.WriteBool(Friend);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (QueueId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(QueueId);
      }
      if (ToUserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ToUserId);
      }
      if (ToUserNameWithToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ToUserNameWithToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
      }
      if (Friend != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (QueueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueId);
      }
      if (ToUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToUserId);
      }
      if (ToUserNameWithToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToUserNameWithToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvitePostRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeckId.Length != 0) {
        DeckId = other.DeckId;
      }
      if (other.Friend != false) {
        Friend = other.Friend;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.QueueId.Length != 0) {
        QueueId = other.QueueId;
      }
      if (other.ToUserId.Length != 0) {
        ToUserId = other.ToUserId;
      }
      if (other.ToUserNameWithToken.Length != 0) {
        ToUserNameWithToken = other.ToUserNameWithToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeckId = input.ReadString();
            break;
          }
          case 16: {
            Friend = input.ReadBool();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            QueueId = input.ReadString();
            break;
          }
          case 42: {
            ToUserId = input.ReadString();
            break;
          }
          case 50: {
            ToUserNameWithToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DeckId = input.ReadString();
            break;
          }
          case 16: {
            Friend = input.ReadBool();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            QueueId = input.ReadString();
            break;
          }
          case 42: {
            ToUserId = input.ReadString();
            break;
          }
          case 50: {
            ToUserNameWithToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The invitation that was sent, or the updated invite. If it is the kind of invite that results in matchmaking, returns
  /// the match if the other player accepted the challenge.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class InviteResponse : pb::IMessage<InviteResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InviteResponse> _parser = new pb::MessageParser<InviteResponse>(() => new InviteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteResponse(InviteResponse other) : this() {
      switch (other.ResultsCase) {
        case ResultsOneofCase.Invite:
          Invite = other.Invite.Clone();
          break;
        case ResultsOneofCase.Match:
          Match = other.Match.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteResponse Clone() {
      return new InviteResponse(this);
    }

    /// <summary>Field number for the "invite" field.</summary>
    public const int InviteFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Invite Invite {
      get { return resultsCase_ == ResultsOneofCase.Invite ? (global::Spellsource.Proto.Invite) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.Invite;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.MatchmakingQueuePutResponse Match {
      get { return resultsCase_ == ResultsOneofCase.Match ? (global::Spellsource.Proto.MatchmakingQueuePutResponse) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.Match;
      }
    }

    private object results_;
    /// <summary>Enum of possible cases for the "results" oneof.</summary>
    public enum ResultsOneofCase {
      None = 0,
      Invite = 1,
      Match = 2,
    }
    private ResultsOneofCase resultsCase_ = ResultsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultsOneofCase ResultsCase {
      get { return resultsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResults() {
      resultsCase_ = ResultsOneofCase.None;
      results_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InviteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InviteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Invite, other.Invite)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      if (ResultsCase != other.ResultsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultsCase_ == ResultsOneofCase.Invite) hash ^= Invite.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.Match) hash ^= Match.GetHashCode();
      hash ^= (int) resultsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (resultsCase_ == ResultsOneofCase.Invite) {
        output.WriteRawTag(10);
        output.WriteMessage(Invite);
      }
      if (resultsCase_ == ResultsOneofCase.Match) {
        output.WriteRawTag(18);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (resultsCase_ == ResultsOneofCase.Invite) {
        output.WriteRawTag(10);
        output.WriteMessage(Invite);
      }
      if (resultsCase_ == ResultsOneofCase.Match) {
        output.WriteRawTag(18);
        output.WriteMessage(Match);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultsCase_ == ResultsOneofCase.Invite) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Invite);
      }
      if (resultsCase_ == ResultsOneofCase.Match) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InviteResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResultsCase) {
        case ResultsOneofCase.Invite:
          if (Invite == null) {
            Invite = new global::Spellsource.Proto.Invite();
          }
          Invite.MergeFrom(other.Invite);
          break;
        case ResultsOneofCase.Match:
          if (Match == null) {
            Match = new global::Spellsource.Proto.MatchmakingQueuePutResponse();
          }
          Match.MergeFrom(other.Match);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spellsource.Proto.Invite subBuilder = new global::Spellsource.Proto.Invite();
            if (resultsCase_ == ResultsOneofCase.Invite) {
              subBuilder.MergeFrom(Invite);
            }
            input.ReadMessage(subBuilder);
            Invite = subBuilder;
            break;
          }
          case 18: {
            global::Spellsource.Proto.MatchmakingQueuePutResponse subBuilder = new global::Spellsource.Proto.MatchmakingQueuePutResponse();
            if (resultsCase_ == ResultsOneofCase.Match) {
              subBuilder.MergeFrom(Match);
            }
            input.ReadMessage(subBuilder);
            Match = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spellsource.Proto.Invite subBuilder = new global::Spellsource.Proto.Invite();
            if (resultsCase_ == ResultsOneofCase.Invite) {
              subBuilder.MergeFrom(Invite);
            }
            input.ReadMessage(subBuilder);
            Invite = subBuilder;
            break;
          }
          case 18: {
            global::Spellsource.Proto.MatchmakingQueuePutResponse subBuilder = new global::Spellsource.Proto.MatchmakingQueuePutResponse();
            if (resultsCase_ == ResultsOneofCase.Match) {
              subBuilder.MergeFrom(Match);
            }
            input.ReadMessage(subBuilder);
            Match = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      email_ = other.email_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class LoginResponse : pb::IMessage<LoginResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      loginToken_ = other.loginToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Spellsource.Proto.Account account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Account Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "loginToken" field.</summary>
    public const int LoginTokenFieldNumber = 2;
    private string loginToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginToken {
      get { return loginToken_; }
      set {
        loginToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (LoginToken != other.LoginToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (LoginToken.Length != 0) hash ^= LoginToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (LoginToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LoginToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (LoginToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LoginToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (LoginToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Spellsource.Proto.Account();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.LoginToken.Length != 0) {
        LoginToken = other.LoginToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Spellsource.Proto.Account();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            LoginToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Spellsource.Proto.Account();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            LoginToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A document that describes an awaiting match.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Match : pb::IMessage<Match>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      Id_ = other.Id_;
      createdAt_ = other.createdAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    /// <summary>
    /// The ID of the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private long createdAt_;
    /// <summary>
    /// A timestamp for when this game was created (approximate).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CreatedAt != other.CreatedAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            CreatedAt = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            CreatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class MatchCancelResponse : pb::IMessage<MatchCancelResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchCancelResponse> _parser = new pb::MessageParser<MatchCancelResponse>(() => new MatchCancelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchCancelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCancelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCancelResponse(MatchCancelResponse other) : this() {
      isCanceled_ = other.isCanceled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCancelResponse Clone() {
      return new MatchCancelResponse(this);
    }

    /// <summary>Field number for the "isCanceled" field.</summary>
    public const int IsCanceledFieldNumber = 1;
    private bool isCanceled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCanceled {
      get { return isCanceled_; }
      set {
        isCanceled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchCancelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchCancelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsCanceled != other.IsCanceled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsCanceled != false) hash ^= IsCanceled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsCanceled != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCanceled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsCanceled != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCanceled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsCanceled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchCancelResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsCanceled != false) {
        IsCanceled = other.IsCanceled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsCanceled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsCanceled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class MatchConcedeResponse : pb::IMessage<MatchConcedeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchConcedeResponse> _parser = new pb::MessageParser<MatchConcedeResponse>(() => new MatchConcedeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchConcedeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchConcedeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchConcedeResponse(MatchConcedeResponse other) : this() {
      isConceded_ = other.isConceded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchConcedeResponse Clone() {
      return new MatchConcedeResponse(this);
    }

    /// <summary>Field number for the "isConceded" field.</summary>
    public const int IsConcededFieldNumber = 1;
    private bool isConceded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConceded {
      get { return isConceded_; }
      set {
        isConceded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchConcedeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchConcedeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsConceded != other.IsConceded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsConceded != false) hash ^= IsConceded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsConceded != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsConceded);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsConceded != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsConceded);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsConceded != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchConcedeResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsConceded != false) {
        IsConceded = other.IsConceded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsConceded = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsConceded = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A queue the user can enter to play a match in.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class MatchmakingQueueItem : pb::IMessage<MatchmakingQueueItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakingQueueItem> _parser = new pb::MessageParser<MatchmakingQueueItem>(() => new MatchmakingQueueItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakingQueueItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueueItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueueItem(MatchmakingQueueItem other) : this() {
      description_ = other.description_;
      name_ = other.name_;
      queueId_ = other.queueId_;
      requires_ = other.requires_ != null ? other.requires_.Clone() : null;
      tooltip_ = other.tooltip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueueItem Clone() {
      return new MatchmakingQueueItem(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    /// <summary>
    /// A detailed description for this queue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The renderable name of the queue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queueId" field.</summary>
    public const int QueueIdFieldNumber = 3;
    private string queueId_ = "";
    /// <summary>
    /// The ID of the queue the user should put a MatchmakingQueuePutRequest into.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueueId {
      get { return queueId_; }
      set {
        queueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requires" field.</summary>
    public const int RequiresFieldNumber = 4;
    private global::Spellsource.Proto.MatchmakingQueueItem.Types.RequiresMessage requires_;
    /// <summary>
    /// The arguments required for the matchmaking request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.MatchmakingQueueItem.Types.RequiresMessage Requires {
      get { return requires_; }
      set {
        requires_ = value;
      }
    }

    /// <summary>Field number for the "tooltip" field.</summary>
    public const int TooltipFieldNumber = 5;
    private string tooltip_ = "";
    /// <summary>
    /// A tooltip for this queue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tooltip {
      get { return tooltip_; }
      set {
        tooltip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakingQueueItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakingQueueItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (Name != other.Name) return false;
      if (QueueId != other.QueueId) return false;
      if (!object.Equals(Requires, other.Requires)) return false;
      if (Tooltip != other.Tooltip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (QueueId.Length != 0) hash ^= QueueId.GetHashCode();
      if (requires_ != null) hash ^= Requires.GetHashCode();
      if (Tooltip.Length != 0) hash ^= Tooltip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (QueueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueueId);
      }
      if (requires_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Requires);
      }
      if (Tooltip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tooltip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (QueueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueueId);
      }
      if (requires_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Requires);
      }
      if (Tooltip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tooltip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (QueueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueId);
      }
      if (requires_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Requires);
      }
      if (Tooltip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tooltip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakingQueueItem other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.QueueId.Length != 0) {
        QueueId = other.QueueId;
      }
      if (other.requires_ != null) {
        if (requires_ == null) {
          Requires = new global::Spellsource.Proto.MatchmakingQueueItem.Types.RequiresMessage();
        }
        Requires.MergeFrom(other.Requires);
      }
      if (other.Tooltip.Length != 0) {
        Tooltip = other.Tooltip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            QueueId = input.ReadString();
            break;
          }
          case 34: {
            if (requires_ == null) {
              Requires = new global::Spellsource.Proto.MatchmakingQueueItem.Types.RequiresMessage();
            }
            input.ReadMessage(Requires);
            break;
          }
          case 42: {
            Tooltip = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            QueueId = input.ReadString();
            break;
          }
          case 34: {
            if (requires_ == null) {
              Requires = new global::Spellsource.Proto.MatchmakingQueueItem.Types.RequiresMessage();
            }
            input.ReadMessage(Requires);
            break;
          }
          case 42: {
            Tooltip = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MatchmakingQueueItem message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      [global::System.SerializableAttribute]
      public sealed partial class RequiresMessage : pb::IMessage<RequiresMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RequiresMessage> _parser = new pb::MessageParser<RequiresMessage>(() => new RequiresMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RequiresMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spellsource.Proto.MatchmakingQueueItem.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequiresMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequiresMessage(RequiresMessage other) : this() {
          deck_ = other.deck_;
          deckChoices_ = other.deckChoices_.Clone();
          deckIdChoices_ = other.deckIdChoices_.Clone();
          heroClass_ = other.heroClass_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RequiresMessage Clone() {
          return new RequiresMessage(this);
        }

        /// <summary>Field number for the "deck" field.</summary>
        public const int DeckFieldNumber = 1;
        private bool deck_;
        /// <summary>
        /// Indicates that a deck choice is required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Deck {
          get { return deck_; }
          set {
            deck_ = value;
          }
        }

        /// <summary>Field number for the "deckChoices" field.</summary>
        public const int DeckChoicesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Spellsource.Proto.InventoryCollection> _repeated_deckChoices_codec
            = pb::FieldCodec.ForMessage(18, global::Spellsource.Proto.InventoryCollection.Parser);
        private readonly pbc::RepeatedField<global::Spellsource.Proto.InventoryCollection> deckChoices_ = new pbc::RepeatedField<global::Spellsource.Proto.InventoryCollection>();
        /// <summary>
        /// Indicates that the player must choose from the specified decks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Spellsource.Proto.InventoryCollection> DeckChoices {
          get { return deckChoices_; }
        }

        /// <summary>Field number for the "deckIdChoices" field.</summary>
        public const int DeckIdChoicesFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_deckIdChoices_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> deckIdChoices_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Indicates that the player must choose from the specified deck IDs in the player's account.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> DeckIdChoices {
          get { return deckIdChoices_; }
        }

        /// <summary>Field number for the "heroClass" field.</summary>
        public const int HeroClassFieldNumber = 4;
        private bool heroClass_;
        /// <summary>
        /// Indicates that a hero class choice is required. When a deck choice is not required, the user only
        /// picks a hero.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HeroClass {
          get { return heroClass_; }
          set {
            heroClass_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RequiresMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RequiresMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Deck != other.Deck) return false;
          if(!deckChoices_.Equals(other.deckChoices_)) return false;
          if(!deckIdChoices_.Equals(other.deckIdChoices_)) return false;
          if (HeroClass != other.HeroClass) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Deck != false) hash ^= Deck.GetHashCode();
          hash ^= deckChoices_.GetHashCode();
          hash ^= deckIdChoices_.GetHashCode();
          if (HeroClass != false) hash ^= HeroClass.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Deck != false) {
            output.WriteRawTag(8);
            output.WriteBool(Deck);
          }
          deckChoices_.WriteTo(output, _repeated_deckChoices_codec);
          deckIdChoices_.WriteTo(output, _repeated_deckIdChoices_codec);
          if (HeroClass != false) {
            output.WriteRawTag(32);
            output.WriteBool(HeroClass);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Deck != false) {
            output.WriteRawTag(8);
            output.WriteBool(Deck);
          }
          deckChoices_.WriteTo(ref output, _repeated_deckChoices_codec);
          deckIdChoices_.WriteTo(ref output, _repeated_deckIdChoices_codec);
          if (HeroClass != false) {
            output.WriteRawTag(32);
            output.WriteBool(HeroClass);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Deck != false) {
            size += 1 + 1;
          }
          size += deckChoices_.CalculateSize(_repeated_deckChoices_codec);
          size += deckIdChoices_.CalculateSize(_repeated_deckIdChoices_codec);
          if (HeroClass != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RequiresMessage other) {
          if (other == null) {
            return;
          }
          if (other.Deck != false) {
            Deck = other.Deck;
          }
          deckChoices_.Add(other.deckChoices_);
          deckIdChoices_.Add(other.deckIdChoices_);
          if (other.HeroClass != false) {
            HeroClass = other.HeroClass;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Deck = input.ReadBool();
                break;
              }
              case 18: {
                deckChoices_.AddEntriesFrom(input, _repeated_deckChoices_codec);
                break;
              }
              case 26: {
                deckIdChoices_.AddEntriesFrom(input, _repeated_deckIdChoices_codec);
                break;
              }
              case 32: {
                HeroClass = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Deck = input.ReadBool();
                break;
              }
              case 18: {
                deckChoices_.AddEntriesFrom(ref input, _repeated_deckChoices_codec);
                break;
              }
              case 26: {
                deckIdChoices_.AddEntriesFrom(ref input, _repeated_deckIdChoices_codec);
                break;
              }
              case 32: {
                HeroClass = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  [global::System.SerializableAttribute]
  public sealed partial class MatchmakingQueuePutRequest : pb::IMessage<MatchmakingQueuePutRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakingQueuePutRequest> _parser = new pb::MessageParser<MatchmakingQueuePutRequest>(() => new MatchmakingQueuePutRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakingQueuePutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutRequest(MatchmakingQueuePutRequest other) : this() {
      botDeckId_ = other.botDeckId_;
      deckId_ = other.deckId_;
      queueId_ = other.queueId_;
      cancel_ = other.cancel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutRequest Clone() {
      return new MatchmakingQueuePutRequest(this);
    }

    /// <summary>Field number for the "botDeckId" field.</summary>
    public const int BotDeckIdFieldNumber = 1;
    private string botDeckId_ = "";
    /// <summary>
    /// When set, specifies that the bot should play the provided deck.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BotDeckId {
      get { return botDeckId_; }
      set {
        botDeckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deckId" field.</summary>
    public const int DeckIdFieldNumber = 2;
    private string deckId_ = "";
    /// <summary>
    /// When set, specifies the deck for this queue. Some queues do not accept deck IDs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeckId {
      get { return deckId_; }
      set {
        deckId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queueId" field.</summary>
    public const int QueueIdFieldNumber = 3;
    private string queueId_ = "";
    /// <summary>
    /// Indicates which queue this request is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueueId {
      get { return queueId_; }
      set {
        queueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cancel" field.</summary>
    public const int CancelFieldNumber = 4;
    private bool cancel_;
    /// <summary>
    /// Set to true if this is a request to cancel any queues the user is currently in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cancel {
      get { return cancel_; }
      set {
        cancel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakingQueuePutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakingQueuePutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BotDeckId != other.BotDeckId) return false;
      if (DeckId != other.DeckId) return false;
      if (QueueId != other.QueueId) return false;
      if (Cancel != other.Cancel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BotDeckId.Length != 0) hash ^= BotDeckId.GetHashCode();
      if (DeckId.Length != 0) hash ^= DeckId.GetHashCode();
      if (QueueId.Length != 0) hash ^= QueueId.GetHashCode();
      if (Cancel != false) hash ^= Cancel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BotDeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BotDeckId);
      }
      if (DeckId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeckId);
      }
      if (QueueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueueId);
      }
      if (Cancel != false) {
        output.WriteRawTag(32);
        output.WriteBool(Cancel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BotDeckId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BotDeckId);
      }
      if (DeckId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeckId);
      }
      if (QueueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueueId);
      }
      if (Cancel != false) {
        output.WriteRawTag(32);
        output.WriteBool(Cancel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BotDeckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BotDeckId);
      }
      if (DeckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeckId);
      }
      if (QueueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueId);
      }
      if (Cancel != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakingQueuePutRequest other) {
      if (other == null) {
        return;
      }
      if (other.BotDeckId.Length != 0) {
        BotDeckId = other.BotDeckId;
      }
      if (other.DeckId.Length != 0) {
        DeckId = other.DeckId;
      }
      if (other.QueueId.Length != 0) {
        QueueId = other.QueueId;
      }
      if (other.Cancel != false) {
        Cancel = other.Cancel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BotDeckId = input.ReadString();
            break;
          }
          case 18: {
            DeckId = input.ReadString();
            break;
          }
          case 26: {
            QueueId = input.ReadString();
            break;
          }
          case 32: {
            Cancel = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BotDeckId = input.ReadString();
            break;
          }
          case 18: {
            DeckId = input.ReadString();
            break;
          }
          case 26: {
            QueueId = input.ReadString();
            break;
          }
          case 32: {
            Cancel = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class MatchmakingQueuePutResponse : pb::IMessage<MatchmakingQueuePutResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakingQueuePutResponse> _parser = new pb::MessageParser<MatchmakingQueuePutResponse>(() => new MatchmakingQueuePutResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakingQueuePutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutResponse(MatchmakingQueuePutResponse other) : this() {
      retry_ = other.retry_ != null ? other.retry_.Clone() : null;
      unityConnection_ = other.unityConnection_ != null ? other.unityConnection_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutResponse Clone() {
      return new MatchmakingQueuePutResponse(this);
    }

    /// <summary>Field number for the "retry" field.</summary>
    public const int RetryFieldNumber = 1;
    private global::Spellsource.Proto.MatchmakingQueuePutRequest retry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.MatchmakingQueuePutRequest Retry {
      get { return retry_; }
      set {
        retry_ = value;
      }
    }

    /// <summary>Field number for the "unityConnection" field.</summary>
    public const int UnityConnectionFieldNumber = 2;
    private global::Spellsource.Proto.MatchmakingQueuePutResponseUnityConnection unityConnection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.MatchmakingQueuePutResponseUnityConnection UnityConnection {
      get { return unityConnection_; }
      set {
        unityConnection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakingQueuePutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakingQueuePutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Retry, other.Retry)) return false;
      if (!object.Equals(UnityConnection, other.UnityConnection)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (retry_ != null) hash ^= Retry.GetHashCode();
      if (unityConnection_ != null) hash ^= UnityConnection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (retry_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Retry);
      }
      if (unityConnection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UnityConnection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (retry_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Retry);
      }
      if (unityConnection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UnityConnection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (retry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Retry);
      }
      if (unityConnection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnityConnection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakingQueuePutResponse other) {
      if (other == null) {
        return;
      }
      if (other.retry_ != null) {
        if (retry_ == null) {
          Retry = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
        }
        Retry.MergeFrom(other.Retry);
      }
      if (other.unityConnection_ != null) {
        if (unityConnection_ == null) {
          UnityConnection = new global::Spellsource.Proto.MatchmakingQueuePutResponseUnityConnection();
        }
        UnityConnection.MergeFrom(other.UnityConnection);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (retry_ == null) {
              Retry = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
            }
            input.ReadMessage(Retry);
            break;
          }
          case 18: {
            if (unityConnection_ == null) {
              UnityConnection = new global::Spellsource.Proto.MatchmakingQueuePutResponseUnityConnection();
            }
            input.ReadMessage(UnityConnection);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (retry_ == null) {
              Retry = new global::Spellsource.Proto.MatchmakingQueuePutRequest();
            }
            input.ReadMessage(Retry);
            break;
          }
          case 18: {
            if (unityConnection_ == null) {
              UnityConnection = new global::Spellsource.Proto.MatchmakingQueuePutResponseUnityConnection();
            }
            input.ReadMessage(UnityConnection);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class MatchmakingQueuePutResponseUnityConnection : pb::IMessage<MatchmakingQueuePutResponseUnityConnection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakingQueuePutResponseUnityConnection> _parser = new pb::MessageParser<MatchmakingQueuePutResponseUnityConnection>(() => new MatchmakingQueuePutResponseUnityConnection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakingQueuePutResponseUnityConnection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutResponseUnityConnection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutResponseUnityConnection(MatchmakingQueuePutResponseUnityConnection other) : this() {
      firstMessage_ = other.firstMessage_ != null ? other.firstMessage_.Clone() : null;
      url_ = other.url_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuePutResponseUnityConnection Clone() {
      return new MatchmakingQueuePutResponseUnityConnection(this);
    }

    /// <summary>Field number for the "firstMessage" field.</summary>
    public const int FirstMessageFieldNumber = 1;
    private global::Spellsource.Proto.ClientToServerMessage firstMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.ClientToServerMessage FirstMessage {
      get { return firstMessage_; }
      set {
        firstMessage_ = value;
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private string url_ = "";
    /// <summary>
    /// The websocket URL to connect to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 3;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakingQueuePutResponseUnityConnection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakingQueuePutResponseUnityConnection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FirstMessage, other.FirstMessage)) return false;
      if (Url != other.Url) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (firstMessage_ != null) hash ^= FirstMessage.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (firstMessage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FirstMessage);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (firstMessage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FirstMessage);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (firstMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstMessage);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakingQueuePutResponseUnityConnection other) {
      if (other == null) {
        return;
      }
      if (other.firstMessage_ != null) {
        if (firstMessage_ == null) {
          FirstMessage = new global::Spellsource.Proto.ClientToServerMessage();
        }
        FirstMessage.MergeFrom(other.FirstMessage);
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (firstMessage_ == null) {
              FirstMessage = new global::Spellsource.Proto.ClientToServerMessage();
            }
            input.ReadMessage(FirstMessage);
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (firstMessage_ == null) {
              FirstMessage = new global::Spellsource.Proto.ClientToServerMessage();
            }
            input.ReadMessage(FirstMessage);
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a list of queues.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class MatchmakingQueuesResponse : pb::IMessage<MatchmakingQueuesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakingQueuesResponse> _parser = new pb::MessageParser<MatchmakingQueuesResponse>(() => new MatchmakingQueuesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakingQueuesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuesResponse(MatchmakingQueuesResponse other) : this() {
      queues_ = other.queues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakingQueuesResponse Clone() {
      return new MatchmakingQueuesResponse(this);
    }

    /// <summary>Field number for the "queues" field.</summary>
    public const int QueuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.MatchmakingQueueItem> _repeated_queues_codec
        = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.MatchmakingQueueItem.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.MatchmakingQueueItem> queues_ = new pbc::RepeatedField<global::Spellsource.Proto.MatchmakingQueueItem>();
    /// <summary>
    /// The available queues.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.MatchmakingQueueItem> Queues {
      get { return queues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakingQueuesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakingQueuesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!queues_.Equals(other.queues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= queues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      queues_.WriteTo(output, _repeated_queues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      queues_.WriteTo(ref output, _repeated_queues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += queues_.CalculateSize(_repeated_queues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakingQueuesResponse other) {
      if (other == null) {
        return;
      }
      queues_.Add(other.queues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            queues_.AddEntriesFrom(input, _repeated_queues_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            queues_.AddEntriesFrom(ref input, _repeated_queues_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class PhysicalAttackEvent : pb::IMessage<PhysicalAttackEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PhysicalAttackEvent> _parser = new pb::MessageParser<PhysicalAttackEvent>(() => new PhysicalAttackEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhysicalAttackEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicalAttackEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicalAttackEvent(PhysicalAttackEvent other) : this() {
      attacker_ = other.attacker_ != null ? other.attacker_.Clone() : null;
      damageDealt_ = other.damageDealt_;
      defender_ = other.defender_ != null ? other.defender_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicalAttackEvent Clone() {
      return new PhysicalAttackEvent(this);
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 1;
    private global::Spellsource.Proto.Entity attacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    /// <summary>Field number for the "damageDealt" field.</summary>
    public const int DamageDealtFieldNumber = 2;
    private int damageDealt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageDealt {
      get { return damageDealt_; }
      set {
        damageDealt_ = value;
      }
    }

    /// <summary>Field number for the "defender" field.</summary>
    public const int DefenderFieldNumber = 3;
    private global::Spellsource.Proto.Entity defender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Defender {
      get { return defender_; }
      set {
        defender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhysicalAttackEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhysicalAttackEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attacker, other.Attacker)) return false;
      if (DamageDealt != other.DamageDealt) return false;
      if (!object.Equals(Defender, other.Defender)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attacker_ != null) hash ^= Attacker.GetHashCode();
      if (DamageDealt != 0) hash ^= DamageDealt.GetHashCode();
      if (defender_ != null) hash ^= Defender.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (attacker_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attacker);
      }
      if (DamageDealt != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DamageDealt);
      }
      if (defender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Defender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (attacker_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attacker);
      }
      if (DamageDealt != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DamageDealt);
      }
      if (defender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Defender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attacker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attacker);
      }
      if (DamageDealt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDealt);
      }
      if (defender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Defender);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhysicalAttackEvent other) {
      if (other == null) {
        return;
      }
      if (other.attacker_ != null) {
        if (attacker_ == null) {
          Attacker = new global::Spellsource.Proto.Entity();
        }
        Attacker.MergeFrom(other.Attacker);
      }
      if (other.DamageDealt != 0) {
        DamageDealt = other.DamageDealt;
      }
      if (other.defender_ != null) {
        if (defender_ == null) {
          Defender = new global::Spellsource.Proto.Entity();
        }
        Defender.MergeFrom(other.Defender);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attacker_ == null) {
              Attacker = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Attacker);
            break;
          }
          case 16: {
            DamageDealt = input.ReadInt32();
            break;
          }
          case 26: {
            if (defender_ == null) {
              Defender = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Defender);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (attacker_ == null) {
              Attacker = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Attacker);
            break;
          }
          case 16: {
            DamageDealt = input.ReadInt32();
            break;
          }
          case 26: {
            if (defender_ == null) {
              Defender = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Defender);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class PostInviteRequest : pb::IMessage<PostInviteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PostInviteRequest> _parser = new pb::MessageParser<PostInviteRequest>(() => new PostInviteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostInviteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostInviteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostInviteRequest(PostInviteRequest other) : this() {
      request_ = other.request_ != null ? other.request_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostInviteRequest Clone() {
      return new PostInviteRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::Spellsource.Proto.InvitePostRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.InvitePostRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostInviteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostInviteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostInviteRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::Spellsource.Proto.InvitePostRequest();
        }
        Request.MergeFrom(other.Request);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Spellsource.Proto.InvitePostRequest();
            }
            input.ReadMessage(Request);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Spellsource.Proto.InvitePostRequest();
            }
            input.ReadMessage(Request);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class PostPasswordResetRequest : pb::IMessage<PostPasswordResetRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PostPasswordResetRequest> _parser = new pb::MessageParser<PostPasswordResetRequest>(() => new PostPasswordResetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostPasswordResetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostPasswordResetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostPasswordResetRequest(PostPasswordResetRequest other) : this() {
      password1_ = other.password1_;
      password2_ = other.password2_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostPasswordResetRequest Clone() {
      return new PostPasswordResetRequest(this);
    }

    /// <summary>Field number for the "password1" field.</summary>
    public const int Password1FieldNumber = 1;
    private string password1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password1 {
      get { return password1_; }
      set {
        password1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password2" field.</summary>
    public const int Password2FieldNumber = 2;
    private string password2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password2 {
      get { return password2_; }
      set {
        password2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostPasswordResetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostPasswordResetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Password1 != other.Password1) return false;
      if (Password2 != other.Password2) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Password1.Length != 0) hash ^= Password1.GetHashCode();
      if (Password2.Length != 0) hash ^= Password2.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Password1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password1);
      }
      if (Password2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password2);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Password1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password1);
      }
      if (Password2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password2);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password1);
      }
      if (Password2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password2);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostPasswordResetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Password1.Length != 0) {
        Password1 = other.Password1;
      }
      if (other.Password2.Length != 0) {
        Password2 = other.Password2;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Password1 = input.ReadString();
            break;
          }
          case 18: {
            Password2 = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Password1 = input.ReadString();
            break;
          }
          case 18: {
            Password2 = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specifies a prefab (game object)
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Prefab : pb::IMessage<Prefab>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Prefab> _parser = new pb::MessageParser<Prefab>(() => new Prefab());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Prefab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prefab() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prefab(Prefab other) : this() {
      named_ = other.named_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prefab Clone() {
      return new Prefab(this);
    }

    /// <summary>Field number for the "named" field.</summary>
    public const int NamedFieldNumber = 1;
    private string named_ = "";
    /// <summary>
    /// The name of the prefab.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Named {
      get { return named_; }
      set {
        named_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Prefab);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Prefab other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Named != other.Named) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Named.Length != 0) hash ^= Named.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Named.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Named);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Named.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Named);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Named.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Named);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Prefab other) {
      if (other == null) {
        return;
      }
      if (other.Named.Length != 0) {
        Named = other.Named;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Named = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Named = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Description of a (possibly partially complete) match. Useful for viewing said match in retrospect.
  /// Note: If there are `n` elements in `gameStates` then there should be `n-1` elements in `deltas`.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Replay : pb::IMessage<Replay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Replay> _parser = new pb::MessageParser<Replay>(() => new Replay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Replay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replay(Replay other) : this() {
      deltas_ = other.deltas_.Clone();
      gameStates_ = other.gameStates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Replay Clone() {
      return new Replay(this);
    }

    /// <summary>Field number for the "deltas" field.</summary>
    public const int DeltasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.ReplayDeltas> _repeated_deltas_codec
        = pb::FieldCodec.ForMessage(10, global::Spellsource.Proto.ReplayDeltas.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.ReplayDeltas> deltas_ = new pbc::RepeatedField<global::Spellsource.Proto.ReplayDeltas>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.ReplayDeltas> Deltas {
      get { return deltas_; }
    }

    /// <summary>Field number for the "gameStates" field.</summary>
    public const int GameStatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.ReplayGameStates> _repeated_gameStates_codec
        = pb::FieldCodec.ForMessage(18, global::Spellsource.Proto.ReplayGameStates.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.ReplayGameStates> gameStates_ = new pbc::RepeatedField<global::Spellsource.Proto.ReplayGameStates>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.ReplayGameStates> GameStates {
      get { return gameStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Replay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Replay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deltas_.Equals(other.deltas_)) return false;
      if(!gameStates_.Equals(other.gameStates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deltas_.GetHashCode();
      hash ^= gameStates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      deltas_.WriteTo(output, _repeated_deltas_codec);
      gameStates_.WriteTo(output, _repeated_gameStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      deltas_.WriteTo(ref output, _repeated_deltas_codec);
      gameStates_.WriteTo(ref output, _repeated_gameStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deltas_.CalculateSize(_repeated_deltas_codec);
      size += gameStates_.CalculateSize(_repeated_gameStates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Replay other) {
      if (other == null) {
        return;
      }
      deltas_.Add(other.deltas_);
      gameStates_.Add(other.gameStates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deltas_.AddEntriesFrom(input, _repeated_deltas_codec);
            break;
          }
          case 18: {
            gameStates_.AddEntriesFrom(input, _repeated_gameStates_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            deltas_.AddEntriesFrom(ref input, _repeated_deltas_codec);
            break;
          }
          case 18: {
            gameStates_.AddEntriesFrom(ref input, _repeated_gameStates_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The forward and backward deltas (change sets) required (along with player `GameState`s) to transition the client battlefield.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class ReplayDeltas : pb::IMessage<ReplayDeltas>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplayDeltas> _parser = new pb::MessageParser<ReplayDeltas>(() => new ReplayDeltas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplayDeltas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayDeltas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayDeltas(ReplayDeltas other) : this() {
      backward_ = other.backward_ != null ? other.backward_.Clone() : null;
      forward_ = other.forward_ != null ? other.forward_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayDeltas Clone() {
      return new ReplayDeltas(this);
    }

    /// <summary>Field number for the "backward" field.</summary>
    public const int BackwardFieldNumber = 1;
    private global::Spellsource.Proto.EntityChangeSet backward_;
    /// <summary>
    /// Backward delta.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.EntityChangeSet Backward {
      get { return backward_; }
      set {
        backward_ = value;
      }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 2;
    private global::Spellsource.Proto.EntityChangeSet forward_;
    /// <summary>
    /// Forward delta.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.EntityChangeSet Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplayDeltas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplayDeltas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Backward, other.Backward)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (backward_ != null) hash ^= Backward.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (backward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Backward);
      }
      if (forward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Forward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (backward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Backward);
      }
      if (forward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Forward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (backward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Backward);
      }
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplayDeltas other) {
      if (other == null) {
        return;
      }
      if (other.backward_ != null) {
        if (backward_ == null) {
          Backward = new global::Spellsource.Proto.EntityChangeSet();
        }
        Backward.MergeFrom(other.Backward);
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          Forward = new global::Spellsource.Proto.EntityChangeSet();
        }
        Forward.MergeFrom(other.Forward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (backward_ == null) {
              Backward = new global::Spellsource.Proto.EntityChangeSet();
            }
            input.ReadMessage(Backward);
            break;
          }
          case 18: {
            if (forward_ == null) {
              Forward = new global::Spellsource.Proto.EntityChangeSet();
            }
            input.ReadMessage(Forward);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (backward_ == null) {
              Backward = new global::Spellsource.Proto.EntityChangeSet();
            }
            input.ReadMessage(Backward);
            break;
          }
          case 18: {
            if (forward_ == null) {
              Forward = new global::Spellsource.Proto.EntityChangeSet();
            }
            input.ReadMessage(Forward);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A pair of game states. Used to capture a game from each player's point of view (useful for example in replays).
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class ReplayGameStates : pb::IMessage<ReplayGameStates>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplayGameStates> _parser = new pb::MessageParser<ReplayGameStates>(() => new ReplayGameStates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplayGameStates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayGameStates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayGameStates(ReplayGameStates other) : this() {
      first_ = other.first_ != null ? other.first_.Clone() : null;
      second_ = other.second_ != null ? other.second_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayGameStates Clone() {
      return new ReplayGameStates(this);
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 1;
    private global::Spellsource.Proto.GameState first_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameState First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "second" field.</summary>
    public const int SecondFieldNumber = 2;
    private global::Spellsource.Proto.GameState second_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameState Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplayGameStates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplayGameStates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(First, other.First)) return false;
      if (!object.Equals(Second, other.Second)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (first_ != null) hash ^= First.GetHashCode();
      if (second_ != null) hash ^= Second.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (first_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(First);
      }
      if (second_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Second);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (first_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(First);
      }
      if (second_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Second);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (first_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(First);
      }
      if (second_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Second);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplayGameStates other) {
      if (other == null) {
        return;
      }
      if (other.first_ != null) {
        if (first_ == null) {
          First = new global::Spellsource.Proto.GameState();
        }
        First.MergeFrom(other.First);
      }
      if (other.second_ != null) {
        if (second_ == null) {
          Second = new global::Spellsource.Proto.GameState();
        }
        Second.MergeFrom(other.Second);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (first_ == null) {
              First = new global::Spellsource.Proto.GameState();
            }
            input.ReadMessage(First);
            break;
          }
          case 18: {
            if (second_ == null) {
              Second = new global::Spellsource.Proto.GameState();
            }
            input.ReadMessage(Second);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (first_ == null) {
              First = new global::Spellsource.Proto.GameState();
            }
            input.ReadMessage(First);
            break;
          }
          case 18: {
            if (second_ == null) {
              Second = new global::Spellsource.Proto.GameState();
            }
            input.ReadMessage(Second);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An envelope for messages from the server during gameplay.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class ServerToClientMessage : pb::IMessage<ServerToClientMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServerToClientMessage> _parser = new pb::MessageParser<ServerToClientMessage>(() => new ServerToClientMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerToClientMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClientMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClientMessage(ServerToClientMessage other) : this() {
      actions_ = other.actions_ != null ? other.actions_.Clone() : null;
      changes_ = other.changes_ != null ? other.changes_.Clone() : null;
      emote_ = other.emote_ != null ? other.emote_.Clone() : null;
      event_ = other.event_ != null ? other.event_.Clone() : null;
      gameOver_ = other.gameOver_ != null ? other.gameOver_.Clone() : null;
      gameState_ = other.gameState_ != null ? other.gameState_.Clone() : null;
      id_ = other.id_;
      isReplayMessage_ = other.isReplayMessage_;
      localPlayerId_ = other.localPlayerId_;
      messageType_ = other.messageType_;
      startingCards_ = other.startingCards_.Clone();
      timers_ = other.timers_ != null ? other.timers_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerToClientMessage Clone() {
      return new ServerToClientMessage(this);
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 1;
    private global::Spellsource.Proto.GameActions actions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameActions Actions {
      get { return actions_; }
      set {
        actions_ = value;
      }
    }

    /// <summary>Field number for the "changes" field.</summary>
    public const int ChangesFieldNumber = 2;
    private global::Spellsource.Proto.EntityChangeSet changes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.EntityChangeSet Changes {
      get { return changes_; }
      set {
        changes_ = value;
      }
    }

    /// <summary>Field number for the "emote" field.</summary>
    public const int EmoteFieldNumber = 3;
    private global::Spellsource.Proto.Emote emote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Emote Emote {
      get { return emote_; }
      set {
        emote_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 4;
    private global::Spellsource.Proto.GameEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "gameOver" field.</summary>
    public const int GameOverFieldNumber = 5;
    private global::Spellsource.Proto.GameOver gameOver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameOver GameOver {
      get { return gameOver_; }
      set {
        gameOver_ = value;
      }
    }

    /// <summary>Field number for the "gameState" field.</summary>
    public const int GameStateFieldNumber = 6;
    private global::Spellsource.Proto.GameState gameState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    private string id_ = "";
    /// <summary>
    /// An optional ID used to disambiguate multiple client replies. Include this ID in the repliesTo field of your
    /// ClientToServerMessage if this field is not null.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isReplayMessage" field.</summary>
    public const int IsReplayMessageFieldNumber = 8;
    private bool isReplayMessage_;
    /// <summary>
    /// True iff this message is a part of a replay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReplayMessage {
      get { return isReplayMessage_; }
      set {
        isReplayMessage_ = value;
      }
    }

    /// <summary>Field number for the "localPlayerId" field.</summary>
    public const int LocalPlayerIdFieldNumber = 9;
    private int localPlayerId_;
    /// <summary>
    /// The ID of the player that corresponds to the local player (the recipient).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalPlayerId {
      get { return localPlayerId_; }
      set {
        localPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 10;
    private global::Spellsource.Proto.MessageType messageType_ = global::Spellsource.Proto.MessageType.UpdateAction;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.MessageType MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "startingCards" field.</summary>
    public const int StartingCardsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.Entity> _repeated_startingCards_codec
        = pb::FieldCodec.ForMessage(90, global::Spellsource.Proto.Entity.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.Entity> startingCards_ = new pbc::RepeatedField<global::Spellsource.Proto.Entity>();
    /// <summary>
    /// Used for a mulligan request. An array of entities representing the cards you may mulligan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.Entity> StartingCards {
      get { return startingCards_; }
    }

    /// <summary>Field number for the "timers" field.</summary>
    public const int TimersFieldNumber = 12;
    private global::Spellsource.Proto.Timers timers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Timers Timers {
      get { return timers_; }
      set {
        timers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerToClientMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerToClientMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Actions, other.Actions)) return false;
      if (!object.Equals(Changes, other.Changes)) return false;
      if (!object.Equals(Emote, other.Emote)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(GameOver, other.GameOver)) return false;
      if (!object.Equals(GameState, other.GameState)) return false;
      if (Id != other.Id) return false;
      if (IsReplayMessage != other.IsReplayMessage) return false;
      if (LocalPlayerId != other.LocalPlayerId) return false;
      if (MessageType != other.MessageType) return false;
      if(!startingCards_.Equals(other.startingCards_)) return false;
      if (!object.Equals(Timers, other.Timers)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actions_ != null) hash ^= Actions.GetHashCode();
      if (changes_ != null) hash ^= Changes.GetHashCode();
      if (emote_ != null) hash ^= Emote.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (gameOver_ != null) hash ^= GameOver.GetHashCode();
      if (gameState_ != null) hash ^= GameState.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (IsReplayMessage != false) hash ^= IsReplayMessage.GetHashCode();
      if (LocalPlayerId != 0) hash ^= LocalPlayerId.GetHashCode();
      if (MessageType != global::Spellsource.Proto.MessageType.UpdateAction) hash ^= MessageType.GetHashCode();
      hash ^= startingCards_.GetHashCode();
      if (timers_ != null) hash ^= Timers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Actions);
      }
      if (changes_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Changes);
      }
      if (emote_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Emote);
      }
      if (event_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Event);
      }
      if (gameOver_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GameOver);
      }
      if (gameState_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GameState);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Id);
      }
      if (IsReplayMessage != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsReplayMessage);
      }
      if (LocalPlayerId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LocalPlayerId);
      }
      if (MessageType != global::Spellsource.Proto.MessageType.UpdateAction) {
        output.WriteRawTag(80);
        output.WriteEnum((int) MessageType);
      }
      startingCards_.WriteTo(output, _repeated_startingCards_codec);
      if (timers_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Timers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Actions);
      }
      if (changes_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Changes);
      }
      if (emote_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Emote);
      }
      if (event_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Event);
      }
      if (gameOver_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GameOver);
      }
      if (gameState_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GameState);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Id);
      }
      if (IsReplayMessage != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsReplayMessage);
      }
      if (LocalPlayerId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LocalPlayerId);
      }
      if (MessageType != global::Spellsource.Proto.MessageType.UpdateAction) {
        output.WriteRawTag(80);
        output.WriteEnum((int) MessageType);
      }
      startingCards_.WriteTo(ref output, _repeated_startingCards_codec);
      if (timers_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Timers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actions);
      }
      if (changes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Changes);
      }
      if (emote_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Emote);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (gameOver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameOver);
      }
      if (gameState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (IsReplayMessage != false) {
        size += 1 + 1;
      }
      if (LocalPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalPlayerId);
      }
      if (MessageType != global::Spellsource.Proto.MessageType.UpdateAction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageType);
      }
      size += startingCards_.CalculateSize(_repeated_startingCards_codec);
      if (timers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerToClientMessage other) {
      if (other == null) {
        return;
      }
      if (other.actions_ != null) {
        if (actions_ == null) {
          Actions = new global::Spellsource.Proto.GameActions();
        }
        Actions.MergeFrom(other.Actions);
      }
      if (other.changes_ != null) {
        if (changes_ == null) {
          Changes = new global::Spellsource.Proto.EntityChangeSet();
        }
        Changes.MergeFrom(other.Changes);
      }
      if (other.emote_ != null) {
        if (emote_ == null) {
          Emote = new global::Spellsource.Proto.Emote();
        }
        Emote.MergeFrom(other.Emote);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          Event = new global::Spellsource.Proto.GameEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.gameOver_ != null) {
        if (gameOver_ == null) {
          GameOver = new global::Spellsource.Proto.GameOver();
        }
        GameOver.MergeFrom(other.GameOver);
      }
      if (other.gameState_ != null) {
        if (gameState_ == null) {
          GameState = new global::Spellsource.Proto.GameState();
        }
        GameState.MergeFrom(other.GameState);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.IsReplayMessage != false) {
        IsReplayMessage = other.IsReplayMessage;
      }
      if (other.LocalPlayerId != 0) {
        LocalPlayerId = other.LocalPlayerId;
      }
      if (other.MessageType != global::Spellsource.Proto.MessageType.UpdateAction) {
        MessageType = other.MessageType;
      }
      startingCards_.Add(other.startingCards_);
      if (other.timers_ != null) {
        if (timers_ == null) {
          Timers = new global::Spellsource.Proto.Timers();
        }
        Timers.MergeFrom(other.Timers);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (actions_ == null) {
              Actions = new global::Spellsource.Proto.GameActions();
            }
            input.ReadMessage(Actions);
            break;
          }
          case 18: {
            if (changes_ == null) {
              Changes = new global::Spellsource.Proto.EntityChangeSet();
            }
            input.ReadMessage(Changes);
            break;
          }
          case 26: {
            if (emote_ == null) {
              Emote = new global::Spellsource.Proto.Emote();
            }
            input.ReadMessage(Emote);
            break;
          }
          case 34: {
            if (event_ == null) {
              Event = new global::Spellsource.Proto.GameEvent();
            }
            input.ReadMessage(Event);
            break;
          }
          case 42: {
            if (gameOver_ == null) {
              GameOver = new global::Spellsource.Proto.GameOver();
            }
            input.ReadMessage(GameOver);
            break;
          }
          case 50: {
            if (gameState_ == null) {
              GameState = new global::Spellsource.Proto.GameState();
            }
            input.ReadMessage(GameState);
            break;
          }
          case 58: {
            Id = input.ReadString();
            break;
          }
          case 64: {
            IsReplayMessage = input.ReadBool();
            break;
          }
          case 72: {
            LocalPlayerId = input.ReadInt32();
            break;
          }
          case 80: {
            MessageType = (global::Spellsource.Proto.MessageType) input.ReadEnum();
            break;
          }
          case 90: {
            startingCards_.AddEntriesFrom(input, _repeated_startingCards_codec);
            break;
          }
          case 98: {
            if (timers_ == null) {
              Timers = new global::Spellsource.Proto.Timers();
            }
            input.ReadMessage(Timers);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (actions_ == null) {
              Actions = new global::Spellsource.Proto.GameActions();
            }
            input.ReadMessage(Actions);
            break;
          }
          case 18: {
            if (changes_ == null) {
              Changes = new global::Spellsource.Proto.EntityChangeSet();
            }
            input.ReadMessage(Changes);
            break;
          }
          case 26: {
            if (emote_ == null) {
              Emote = new global::Spellsource.Proto.Emote();
            }
            input.ReadMessage(Emote);
            break;
          }
          case 34: {
            if (event_ == null) {
              Event = new global::Spellsource.Proto.GameEvent();
            }
            input.ReadMessage(Event);
            break;
          }
          case 42: {
            if (gameOver_ == null) {
              GameOver = new global::Spellsource.Proto.GameOver();
            }
            input.ReadMessage(GameOver);
            break;
          }
          case 50: {
            if (gameState_ == null) {
              GameState = new global::Spellsource.Proto.GameState();
            }
            input.ReadMessage(GameState);
            break;
          }
          case 58: {
            Id = input.ReadString();
            break;
          }
          case 64: {
            IsReplayMessage = input.ReadBool();
            break;
          }
          case 72: {
            LocalPlayerId = input.ReadInt32();
            break;
          }
          case 80: {
            MessageType = (global::Spellsource.Proto.MessageType) input.ReadEnum();
            break;
          }
          case 90: {
            startingCards_.AddEntriesFrom(ref input, _repeated_startingCards_codec);
            break;
          }
          case 98: {
            if (timers_ == null) {
              Timers = new global::Spellsource.Proto.Timers();
            }
            input.ReadMessage(Timers);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A piece of data that assists in OpenTracing from the client.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class SpanContext : pb::IMessage<SpanContext>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpanContext> _parser = new pb::MessageParser<SpanContext>(() => new SpanContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanContext(SpanContext other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanContext Clone() {
      return new SpanContext(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    /// <summary>
    /// Binary carried opentracing span context
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanContext other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A spell action describes a possible action the player can take. The list of SpellAction objects in the ServerToClientMessage is exhaustive and represents every possible action.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class SpellAction : pb::IMessage<SpellAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpellAction> _parser = new pb::MessageParser<SpellAction>(() => new SpellAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpellAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpellAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpellAction(SpellAction other) : this() {
      action_ = other.action_;
      actionType_ = other.actionType_;
      choices_ = other.choices_.Clone();
      description_ = other.description_;
      entity_ = other.entity_ != null ? other.entity_.Clone() : null;
      sourceId_ = other.sourceId_;
      targetKeyToActions_ = other.targetKeyToActions_.Clone();
      request_ = other.request_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpellAction Clone() {
      return new SpellAction(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private int action_;
    /// <summary>
    /// The action index corresponding to this action.
    /// 
    /// If targetKeyToActions is length zero or null, the action is valid and set, corresponding to an action that
    /// does not take a user-specified target. This includes all DISCOVER actions, ENDTURN, but *never* a summon,
    /// even if no minions are on the board.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 2;
    private global::Spellsource.Proto.ActionType actionType_ = global::Spellsource.Proto.ActionType.System;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.ActionType ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.SpellAction> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(26, global::Spellsource.Proto.SpellAction.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.SpellAction> choices_ = new pbc::RepeatedField<global::Spellsource.Proto.SpellAction>();
    /// <summary>
    /// When set, represents a choose one action with entities set to render.
    /// Those entities' id property corresponds to the choices's sourceId property. The parent/root action's sourceId corresponds to the actual entity that reveals the choices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.SpellAction> Choices {
      get { return choices_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// A user-readable description of this action. This is typically not rendered in the client except in logs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 5;
    private global::Spellsource.Proto.Entity entity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Entity Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "sourceId" field.</summary>
    public const int SourceIdFieldNumber = 6;
    private int sourceId_;
    /// <summary>
    /// The ID of the entity (minion or card) that is the source of the action.
    /// The client is guaranteed to have this entity in its entities array.
    /// For a SpellAction whose actionType is DISCOVER, the source is the entity in the acting player's discover zone. In the engine, the source is the entity that is prompting the discover (e.g. a minion if an opener is causing the discover, or the spell card being played).
    /// Sometimes ENDTURN will not be available, this is because some actions like DISCOVER and BATTLECRY cannot be interrupted.
    /// Running out of time will result in ENDTURN being chosen or a random DISCOVER or BATTLECRY action. This will occur on the server, not the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceId {
      get { return sourceId_; }
      set {
        sourceId_ = value;
      }
    }

    /// <summary>Field number for the "targetKeyToActions" field.</summary>
    public const int TargetKeyToActionsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Spellsource.Proto.TargetActionPair> _repeated_targetKeyToActions_codec
        = pb::FieldCodec.ForMessage(58, global::Spellsource.Proto.TargetActionPair.Parser);
    private readonly pbc::RepeatedField<global::Spellsource.Proto.TargetActionPair> targetKeyToActions_ = new pbc::RepeatedField<global::Spellsource.Proto.TargetActionPair>();
    /// <summary>
    /// An array of entity ID-action pairs that let you convert a valid target to an action index to respond with.
    /// Defined if this spell is targetable.
    /// 
    /// This is null or length zero if the target does not have targeted actions. Use the action property instead for
    /// that situation.
    /// 
    /// A SpellAction with actionType SUMMON will have a targetKeyToActions entry with a target of -1 corresponding to
    /// the *last* (rightmost) minion position to summon, while all other targets correspond to minions on the board.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spellsource.Proto.TargetActionPair> TargetKeyToActions {
      get { return targetKeyToActions_; }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 8;
    private string request_ = "";
    /// <summary>
    /// Allows the client to set a request field on the SpellAction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Request {
      get { return request_; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpellAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpellAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (ActionType != other.ActionType) return false;
      if(!choices_.Equals(other.choices_)) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Entity, other.Entity)) return false;
      if (SourceId != other.SourceId) return false;
      if(!targetKeyToActions_.Equals(other.targetKeyToActions_)) return false;
      if (Request != other.Request) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (ActionType != global::Spellsource.Proto.ActionType.System) hash ^= ActionType.GetHashCode();
      hash ^= choices_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (entity_ != null) hash ^= Entity.GetHashCode();
      if (SourceId != 0) hash ^= SourceId.GetHashCode();
      hash ^= targetKeyToActions_.GetHashCode();
      if (Request.Length != 0) hash ^= Request.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Action);
      }
      if (ActionType != global::Spellsource.Proto.ActionType.System) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (entity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Entity);
      }
      if (SourceId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SourceId);
      }
      targetKeyToActions_.WriteTo(output, _repeated_targetKeyToActions_codec);
      if (Request.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Request);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Action);
      }
      if (ActionType != global::Spellsource.Proto.ActionType.System) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionType);
      }
      choices_.WriteTo(ref output, _repeated_choices_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (entity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Entity);
      }
      if (SourceId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SourceId);
      }
      targetKeyToActions_.WriteTo(ref output, _repeated_targetKeyToActions_codec);
      if (Request.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Request);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (ActionType != global::Spellsource.Proto.ActionType.System) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (SourceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceId);
      }
      size += targetKeyToActions_.CalculateSize(_repeated_targetKeyToActions_codec);
      if (Request.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Request);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpellAction other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.ActionType != global::Spellsource.Proto.ActionType.System) {
        ActionType = other.ActionType;
      }
      choices_.Add(other.choices_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.entity_ != null) {
        if (entity_ == null) {
          Entity = new global::Spellsource.Proto.Entity();
        }
        Entity.MergeFrom(other.Entity);
      }
      if (other.SourceId != 0) {
        SourceId = other.SourceId;
      }
      targetKeyToActions_.Add(other.targetKeyToActions_);
      if (other.Request.Length != 0) {
        Request = other.Request;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = input.ReadInt32();
            break;
          }
          case 16: {
            ActionType = (global::Spellsource.Proto.ActionType) input.ReadEnum();
            break;
          }
          case 26: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (entity_ == null) {
              Entity = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Entity);
            break;
          }
          case 48: {
            SourceId = input.ReadInt32();
            break;
          }
          case 58: {
            targetKeyToActions_.AddEntriesFrom(input, _repeated_targetKeyToActions_codec);
            break;
          }
          case 66: {
            Request = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Action = input.ReadInt32();
            break;
          }
          case 16: {
            ActionType = (global::Spellsource.Proto.ActionType) input.ReadEnum();
            break;
          }
          case 26: {
            choices_.AddEntriesFrom(ref input, _repeated_choices_codec);
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (entity_ == null) {
              Entity = new global::Spellsource.Proto.Entity();
            }
            input.ReadMessage(Entity);
            break;
          }
          case 48: {
            SourceId = input.ReadInt32();
            break;
          }
          case 58: {
            targetKeyToActions_.AddEntriesFrom(ref input, _repeated_targetKeyToActions_codec);
            break;
          }
          case 66: {
            Request = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A server-side exception with content renderable to the client.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class SpellsourceException : pb::IMessage<SpellsourceException>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpellsourceException> _parser = new pb::MessageParser<SpellsourceException>(() => new SpellsourceException());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpellsourceException> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpellsourceException() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpellsourceException(SpellsourceException other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpellsourceException Clone() {
      return new SpellsourceException(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    /// <summary>
    /// A user-renderable message explaining the source of the error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpellsourceException);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpellsourceException other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpellsourceException other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specifies a sprite or image
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Sprite : pb::IMessage<Sprite>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Sprite> _parser = new pb::MessageParser<Sprite>(() => new Sprite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sprite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sprite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sprite(Sprite other) : this() {
      named_ = other.named_;
      pivot_ = other.pivot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sprite Clone() {
      return new Sprite(this);
    }

    /// <summary>Field number for the "named" field.</summary>
    public const int NamedFieldNumber = 1;
    private string named_ = "";
    /// <summary>
    /// The sprite name in the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Named {
      get { return named_; }
      set {
        named_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pivot" field.</summary>
    public const int PivotFieldNumber = 2;
    private global::Spellsource.Proto.Sprite.Types.SpritePivot pivot_ = global::Spellsource.Proto.Sprite.Types.SpritePivot.Bottom;
    /// <summary>
    /// The sprite's pivor point.
    /// 
    ///  - BOTTOM: The center bottom of the sprite (i.e. 0.5, 1.0)
    ///  - DIMETRIC_2X1_FLOOR: Calculates the pivot point by ascending one pixel from the bottom for every four pixels
    ///    of width, as though the pivot point is the middle of the rectangle formed at the bottom of the sprite.
    ///  - CENTER: The center middle of the sprite (i.e. 0.5, 0.5)
    ///  - FLYING: Beyond the bottom of the sprite (i.e. 0.5, 2.0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Sprite.Types.SpritePivot Pivot {
      get { return pivot_; }
      set {
        pivot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sprite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sprite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Named != other.Named) return false;
      if (Pivot != other.Pivot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Named.Length != 0) hash ^= Named.GetHashCode();
      if (Pivot != global::Spellsource.Proto.Sprite.Types.SpritePivot.Bottom) hash ^= Pivot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Named.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Named);
      }
      if (Pivot != global::Spellsource.Proto.Sprite.Types.SpritePivot.Bottom) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Pivot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Named.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Named);
      }
      if (Pivot != global::Spellsource.Proto.Sprite.Types.SpritePivot.Bottom) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Pivot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Named.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Named);
      }
      if (Pivot != global::Spellsource.Proto.Sprite.Types.SpritePivot.Bottom) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pivot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sprite other) {
      if (other == null) {
        return;
      }
      if (other.Named.Length != 0) {
        Named = other.Named;
      }
      if (other.Pivot != global::Spellsource.Proto.Sprite.Types.SpritePivot.Bottom) {
        Pivot = other.Pivot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Named = input.ReadString();
            break;
          }
          case 16: {
            Pivot = (global::Spellsource.Proto.Sprite.Types.SpritePivot) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Named = input.ReadString();
            break;
          }
          case 16: {
            Pivot = (global::Spellsource.Proto.Sprite.Types.SpritePivot) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Sprite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SpritePivot {
        [pbr::OriginalName("SPRITE_PIVOT_BOTTOM")] Bottom = 0,
        [pbr::OriginalName("SPRITE_PIVOT_DIMETRIC_2_X1_FLOOR")] Dimetric2X1Floor = 1,
        [pbr::OriginalName("SPRITE_PIVOT_CENTER")] Center = 2,
        [pbr::OriginalName("SPRITE_PIVOT_FLYING")] Flying = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// A pair combining a target (entity ID) and the correponding action for that target.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class TargetActionPair : pb::IMessage<TargetActionPair>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TargetActionPair> _parser = new pb::MessageParser<TargetActionPair>(() => new TargetActionPair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetActionPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetActionPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetActionPair(TargetActionPair other) : this() {
      action_ = other.action_;
      friendlyBattlefieldIndex_ = other.friendlyBattlefieldIndex_;
      target_ = other.target_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetActionPair Clone() {
      return new TargetActionPair(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "friendlyBattlefieldIndex" field.</summary>
    public const int FriendlyBattlefieldIndexFieldNumber = 2;
    private int friendlyBattlefieldIndex_;
    /// <summary>
    /// The corresponding index on the friendly side of the battlefield for a summon action.
    /// The minion will be summoned to the left of this index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FriendlyBattlefieldIndex {
      get { return friendlyBattlefieldIndex_; }
      set {
        friendlyBattlefieldIndex_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private int target_;
    /// <summary>
    /// The corresponding target for this action.
    /// When -1, this indicates there is no target for this particular pair. This is relevant for summon actions which would ordinarily have a null value. A -1 here indicates the rightmost position on the battlefield.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetActionPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetActionPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (FriendlyBattlefieldIndex != other.FriendlyBattlefieldIndex) return false;
      if (Target != other.Target) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (FriendlyBattlefieldIndex != 0) hash ^= FriendlyBattlefieldIndex.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Action);
      }
      if (FriendlyBattlefieldIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FriendlyBattlefieldIndex);
      }
      if (Target != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Action);
      }
      if (FriendlyBattlefieldIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FriendlyBattlefieldIndex);
      }
      if (Target != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (FriendlyBattlefieldIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendlyBattlefieldIndex);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetActionPair other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.FriendlyBattlefieldIndex != 0) {
        FriendlyBattlefieldIndex = other.FriendlyBattlefieldIndex;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = input.ReadInt32();
            break;
          }
          case 16: {
            FriendlyBattlefieldIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Action = input.ReadInt32();
            break;
          }
          case 16: {
            FriendlyBattlefieldIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Information about timers. This helps the client render the countdown clock.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Timers : pb::IMessage<Timers>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Timers> _parser = new pb::MessageParser<Timers>(() => new Timers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timers(Timers other) : this() {
      millisRemaining_ = other.millisRemaining_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timers Clone() {
      return new Timers(this);
    }

    /// <summary>Field number for the "millisRemaining" field.</summary>
    public const int MillisRemainingFieldNumber = 1;
    private long millisRemaining_;
    /// <summary>
    /// The number of milliseconds remaining before the server will end the mulligan or turn.
    /// When null or less than zero, no timer is set. This property will be valid with respect to the
    /// last timestamped message from the server. Since typically emotes and touches are not timestamped,
    /// while other game state messages are, this property will be updated with actions and data. It is
    /// the responsibility of the client to lerp the millis-remaining values with the actual animated
    /// timer to prevent choppy animation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MillisRemaining {
      get { return millisRemaining_; }
      set {
        millisRemaining_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MillisRemaining != other.MillisRemaining) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MillisRemaining != 0L) hash ^= MillisRemaining.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MillisRemaining != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MillisRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MillisRemaining != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MillisRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MillisRemaining != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MillisRemaining);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timers other) {
      if (other == null) {
        return;
      }
      if (other.MillisRemaining != 0L) {
        MillisRemaining = other.MillisRemaining;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MillisRemaining = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MillisRemaining = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Provides an explanation for an effect or keyword that will appear beside the card.
  /// 
  /// Only delivered in the Entities from the CardRecords.
  /// </summary>
  [global::System.SerializableAttribute]
  public sealed partial class Tooltip : pb::IMessage<Tooltip>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Tooltip> _parser = new pb::MessageParser<Tooltip>(() => new Tooltip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tooltip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tooltip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tooltip(Tooltip other) : this() {
      keywords_ = other.keywords_.Clone();
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tooltip Clone() {
      return new Tooltip(this);
    }

    /// <summary>Field number for the "keywords" field.</summary>
    public const int KeywordsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_keywords_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> keywords_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// When set, this tooltip will only show if cards that have the same class as the card this tooltip appears on
    /// has the specified keyword appearing in its description. Typically used on the class card to provide tooltips
    /// for its entire class.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keywords {
      get { return keywords_; }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    /// <summary>
    /// The text that should appear on the tooltip.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tooltip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tooltip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keywords_.Equals(other.keywords_)) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keywords_.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      keywords_.WriteTo(output, _repeated_keywords_codec);
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      keywords_.WriteTo(ref output, _repeated_keywords_codec);
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keywords_.CalculateSize(_repeated_keywords_codec);
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tooltip other) {
      if (other == null) {
        return;
      }
      keywords_.Add(other.keywords_);
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            keywords_.AddEntriesFrom(input, _repeated_keywords_codec);
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            keywords_.AddEntriesFrom(ref input, _repeated_keywords_codec);
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class UnfriendResponse : pb::IMessage<UnfriendResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UnfriendResponse> _parser = new pb::MessageParser<UnfriendResponse>(() => new UnfriendResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnfriendResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnfriendResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnfriendResponse(UnfriendResponse other) : this() {
      deletedFriend_ = other.deletedFriend_ != null ? other.deletedFriend_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnfriendResponse Clone() {
      return new UnfriendResponse(this);
    }

    /// <summary>Field number for the "deletedFriend" field.</summary>
    public const int DeletedFriendFieldNumber = 1;
    private global::Spellsource.Proto.Friend deletedFriend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spellsource.Proto.Friend DeletedFriend {
      get { return deletedFriend_; }
      set {
        deletedFriend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnfriendResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnfriendResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeletedFriend, other.DeletedFriend)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deletedFriend_ != null) hash ^= DeletedFriend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (deletedFriend_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeletedFriend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (deletedFriend_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeletedFriend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deletedFriend_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeletedFriend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnfriendResponse other) {
      if (other == null) {
        return;
      }
      if (other.deletedFriend_ != null) {
        if (deletedFriend_ == null) {
          DeletedFriend = new global::Spellsource.Proto.Friend();
        }
        DeletedFriend.MergeFrom(other.DeletedFriend);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deletedFriend_ == null) {
              DeletedFriend = new global::Spellsource.Proto.Friend();
            }
            input.ReadMessage(DeletedFriend);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (deletedFriend_ == null) {
              DeletedFriend = new global::Spellsource.Proto.Friend();
            }
            input.ReadMessage(DeletedFriend);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.SerializableAttribute]
  public sealed partial class ValidationReport : pb::IMessage<ValidationReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ValidationReport> _parser = new pb::MessageParser<ValidationReport>(() => new ValidationReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidationReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spellsource.Proto.SpellsourceReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidationReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidationReport(ValidationReport other) : this() {
      errors_ = other.errors_.Clone();
      valid_ = other.valid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidationReport Clone() {
      return new ValidationReport(this);
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_errors_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 2;
    private bool valid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidationReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidationReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!errors_.Equals(other.errors_)) return false;
      if (Valid != other.Valid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= errors_.GetHashCode();
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      errors_.WriteTo(output, _repeated_errors_codec);
      if (Valid != false) {
        output.WriteRawTag(16);
        output.WriteBool(Valid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      errors_.WriteTo(ref output, _repeated_errors_codec);
      if (Valid != false) {
        output.WriteRawTag(16);
        output.WriteBool(Valid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (Valid != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidationReport other) {
      if (other == null) {
        return;
      }
      errors_.Add(other.errors_);
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 16: {
            Valid = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            errors_.AddEntriesFrom(ref input, _repeated_errors_codec);
            break;
          }
          case 16: {
            Valid = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
