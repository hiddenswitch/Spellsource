// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openmatch;
option go_package = "open-match.dev/open-match/pkg/pb";
option csharp_namespace = "OpenMatch";

import "api/messages.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Backend"
    version: "1.0"
    contact: {
      name: "Open Match"
      url: "https://open-match.dev"
      email: "open-match-discuss@googlegroups.com"
    }
    license: {
      name: "Apache 2.0 License"
      url: "https://github.com/googleforgames/open-match/blob/master/LICENSE"
    }
  }
  external_docs: {
    url: "https://open-match.dev/site/docs/"
    description: "Open Match Documentation"
  }
  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  responses: {
    key: "404"
    value: {
      description: "Returned when the resource does not exist."
      schema: { json_schema: { type: STRING } }
    }
  }
  // TODO Add annotations for security_defintiions.
  // See
  // https://github.com/grpc-ecosystem/grpc-gateway/blob/master/examples/proto/examplepb/a_bit_of_everything.proto
};

// FunctionConfig specifies a MMF address and client type for Backend to establish connections with the MMF
message FunctionConfig {
  string host = 1;
  int32 port = 2;
  Type type = 3;
  enum Type {
    GRPC = 0;
    REST = 1;
  }
}

message FetchMatchesRequest {
  // A configuration for the MatchFunction server of this FetchMatches call.
  FunctionConfig config = 1;

  // A MatchProfile that will be sent to the MatchFunction server of this FetchMatches call.
  MatchProfile profile = 2;
}

message FetchMatchesResponse {
  // A Match generated by the user-defined MMF with the specified MatchProfiles.
  // A valid Match response will contain at least one ticket.
  Match match = 1;
}

message ReleaseTicketsRequest{
  // TicketIds is a list of string representing Open Match generated Ids to be re-enabled for MMF querying
  // because they are no longer awaiting assignment from a previous match result
  repeated string ticket_ids = 1;
}

message ReleaseTicketsResponse {}

message ReleaseAllTicketsRequest{}

message ReleaseAllTicketsResponse {}

// AssignmentGroup contains an Assignment and the Tickets to which it should be applied. 
message AssignmentGroup {
  // TicketIds is a list of strings representing Open Match generated Ids which apply to an Assignment.
  repeated string ticket_ids = 1;

  // An Assignment specifies game connection related information to be associated with the TicketIds.
  Assignment assignment = 2;
}

// AssignmentFailure contains the id of the Ticket that failed the Assignment and the failure status.
message AssignmentFailure {
  enum Cause {
    UNKNOWN = 0;
    TICKET_NOT_FOUND = 1;
  }

  string ticket_id = 1;
  Cause cause = 2;
}

message AssignTicketsRequest {
  // Assignments is a list of assignment groups that contain assignment and the Tickets to which they should be applied.
  repeated AssignmentGroup assignments = 1;
}

message AssignTicketsResponse {
  // Failures is a list of all the Tickets that failed assignment along with the cause of failure. 
  repeated AssignmentFailure failures = 1;
}

// The BackendService implements APIs to generate matches and handle ticket assignments.
service BackendService {
  // FetchMatches triggers a MatchFunction with the specified MatchProfile and
  // returns a set of matches generated by the Match Making Function, and
  // accepted by the evaluator.
  // Tickets in matches returned by FetchMatches are moved from active to
  // pending, and will not be returned by query.
  rpc FetchMatches(FetchMatchesRequest) returns (stream FetchMatchesResponse) {
    option (google.api.http) = {
      post: "/v1/backendservice/matches:fetch"
      body: "*"
    };
  }

  // AssignTickets overwrites the Assignment field of the input TicketIds.
  rpc AssignTickets(AssignTicketsRequest) returns (AssignTicketsResponse) {
    option (google.api.http) = {
      post: "/v1/backendservice/tickets:assign"
      body: "*"
    };
  }

  // ReleaseTickets moves tickets from the pending state, to the active state.
  // This enables them to be returned by query, and find different matches.
  // 
  // BETA FEATURE WARNING:  This call and the associated Request and Response
  // messages are not finalized and still subject to possible change or removal.
  rpc ReleaseTickets(ReleaseTicketsRequest) returns (ReleaseTicketsResponse) {
    option (google.api.http) = {
      post: "/v1/backendservice/tickets:release"
      body: "*"
    };
  }

  // ReleaseAllTickets moves all tickets from the pending state, to the active
  // state. This enables them to be returned by query, and find different
  // matches.
  // 
  // BETA FEATURE WARNING:  This call and the associated Request and Response
  // messages are not finalized and still subject to possible change or removal.
  rpc ReleaseAllTickets(ReleaseAllTicketsRequest) returns (ReleaseAllTicketsResponse) {
    option (google.api.http) = {
      post: "/v1/backendservice/tickets:releaseall"
      body: "*"
    };
  }
}
