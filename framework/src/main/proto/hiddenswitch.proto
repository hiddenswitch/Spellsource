syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.hiddenswitch.framework.rpc";
option java_outer_classname = "Proto";
option csharp_namespace = "HiddenSwitch.Proto";
package hiddenswitch;

import "google/protobuf/wrappers.proto";

// Specifies a complete server configuration
message ServerConfiguration {
    message PostgresConfiguration {
        string host = 1;
        int32 port = 2;
        string database = 3;
        string user = 4;
        string password = 5;
    }

    message KeycloakConfiguration {
        string authUrl = 1;
        string adminUsername = 2;
        string adminPassword = 3;
        string clientId = 4;
        string clientSecret = 5;
        string realmDisplayName = 6;
        string realmId = 7;
    }

    message RedisConfiguration {
        string host = 1;
        int32 port = 2;
        string user = 3;
    }

    message RealtimeConfiguration {
        string uri = 1;
    }

    message GrpcConfiguration {
        int64 serverKeepAliveTimeMillis = 1;
        int64 serverKeepAliveTimeoutMillis = 2;
        bool serverPermitKeepAliveWithoutCalls = 3;
    }

    message MatchmakignConfiguration {
        int64 enqueueLockTimeoutMillis = 1;
    }

    PostgresConfiguration pg = 1;
    KeycloakConfiguration keycloak = 2;
    reserved 3;
    RealtimeConfiguration realtime = 4;
    GrpcConfiguration grpcConfiguration = 5;
    MatchmakignConfiguration matchmaking = 6;
}

service Unauthenticated {
    rpc CreateAccount (CreateAccountRequest) returns (LoginOrCreateReply) {}
    rpc Login (LoginRequest) returns (LoginOrCreateReply) {}
}

service Accounts {
    rpc GetAccounts(GetAccountsRequest) returns (GetAccountsReply) {}
}

message LoginRequest {
    string usernameOrEmail = 1;
    string password = 2;
}

// The request message containing the user's name.
message CreateAccountRequest {
    string email = 1;
    string username = 2;
    string password = 3;
}

message LoginOrCreateReply {
    AccessTokenResponse accessTokenResponse = 1;
    UserEntity userEntity = 2;
}

message AccessTokenResponse {
    string token = 1;
}

message UserEntity {
    string id = 1;
    string email = 2;
    string username = 10;
}

message GetAccountsRequest {
    repeated string ids = 1;
}

message GetAccountsReply {
    repeated UserEntity userEntities = 1;
}