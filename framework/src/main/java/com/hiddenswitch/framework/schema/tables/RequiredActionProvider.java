/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables;


import com.hiddenswitch.framework.schema.Indexes;
import com.hiddenswitch.framework.schema.Keys;
import com.hiddenswitch.framework.schema.Public;
import com.hiddenswitch.framework.schema.tables.records.RequiredActionProviderRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequiredActionProvider extends TableImpl<RequiredActionProviderRecord> {

    private static final long serialVersionUID = -307061846;

    /**
     * The reference instance of <code>public.required_action_provider</code>
     */
    public static final RequiredActionProvider REQUIRED_ACTION_PROVIDER = new RequiredActionProvider();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequiredActionProviderRecord> getRecordType() {
        return RequiredActionProviderRecord.class;
    }

    /**
     * The column <code>public.required_action_provider.id</code>.
     */
    public final TableField<RequiredActionProviderRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.required_action_provider.alias</code>.
     */
    public final TableField<RequiredActionProviderRecord, String> ALIAS = createField(DSL.name("alias"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.required_action_provider.name</code>.
     */
    public final TableField<RequiredActionProviderRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.required_action_provider.realm_id</code>.
     */
    public final TableField<RequiredActionProviderRecord, String> REALM_ID = createField(DSL.name("realm_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.required_action_provider.enabled</code>.
     */
    public final TableField<RequiredActionProviderRecord, Boolean> ENABLED = createField(DSL.name("enabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.required_action_provider.default_action</code>.
     */
    public final TableField<RequiredActionProviderRecord, Boolean> DEFAULT_ACTION = createField(DSL.name("default_action"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.required_action_provider.provider_id</code>.
     */
    public final TableField<RequiredActionProviderRecord, String> PROVIDER_ID = createField(DSL.name("provider_id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.required_action_provider.priority</code>.
     */
    public final TableField<RequiredActionProviderRecord, Integer> PRIORITY = createField(DSL.name("priority"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.required_action_provider</code> table reference
     */
    public RequiredActionProvider() {
        this(DSL.name("required_action_provider"), null);
    }

    /**
     * Create an aliased <code>public.required_action_provider</code> table reference
     */
    public RequiredActionProvider(String alias) {
        this(DSL.name(alias), REQUIRED_ACTION_PROVIDER);
    }

    /**
     * Create an aliased <code>public.required_action_provider</code> table reference
     */
    public RequiredActionProvider(Name alias) {
        this(alias, REQUIRED_ACTION_PROVIDER);
    }

    private RequiredActionProvider(Name alias, Table<RequiredActionProviderRecord> aliased) {
        this(alias, aliased, null);
    }

    private RequiredActionProvider(Name alias, Table<RequiredActionProviderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RequiredActionProvider(Table<O> child, ForeignKey<O, RequiredActionProviderRecord> key) {
        super(child, key, REQUIRED_ACTION_PROVIDER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_REQ_ACT_PROV_REALM);
    }

    @Override
    public UniqueKey<RequiredActionProviderRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_REQ_ACT_PRV_PK;
    }

    @Override
    public List<UniqueKey<RequiredActionProviderRecord>> getKeys() {
        return Arrays.<UniqueKey<RequiredActionProviderRecord>>asList(Keys.CONSTRAINT_REQ_ACT_PRV_PK);
    }

    @Override
    public List<ForeignKey<RequiredActionProviderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RequiredActionProviderRecord, ?>>asList(Keys.REQUIRED_ACTION_PROVIDER__FK_REQ_ACT_REALM);
    }

    public Realm realm() {
        return new Realm(this, Keys.REQUIRED_ACTION_PROVIDER__FK_REQ_ACT_REALM);
    }

    @Override
    public RequiredActionProvider as(String alias) {
        return new RequiredActionProvider(DSL.name(alias), this);
    }

    @Override
    public RequiredActionProvider as(Name alias) {
        return new RequiredActionProvider(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RequiredActionProvider rename(String name) {
        return new RequiredActionProvider(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RequiredActionProvider rename(Name name) {
        return new RequiredActionProvider(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, Boolean, Boolean, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
