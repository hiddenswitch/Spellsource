/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GameUsersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameUsers extends TableImpl<GameUsersRecord> {

    private static final long serialVersionUID = -1752349665;

    /**
     * The reference instance of <code>spellsource.game_users</code>
     */
    public static final GameUsers GAME_USERS = new GameUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameUsersRecord> getRecordType() {
        return GameUsersRecord.class;
    }

    /**
     * The column <code>spellsource.game_users.id</code>.
     */
    public final TableField<GameUsersRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spellsource.game_users.player_index</code>.
     */
    public final TableField<GameUsersRecord, Short> PLAYER_INDEX = createField(DSL.name("player_index"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>spellsource.game_users.game_id</code>.
     */
    public final TableField<GameUsersRecord, Long> GAME_ID = createField(DSL.name("game_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>spellsource.game_users.user_id</code>.
     */
    public final TableField<GameUsersRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>spellsource.game_users</code> table reference
     */
    public GameUsers() {
        this(DSL.name("game_users"), null);
    }

    /**
     * Create an aliased <code>spellsource.game_users</code> table reference
     */
    public GameUsers(String alias) {
        this(DSL.name(alias), GAME_USERS);
    }

    /**
     * Create an aliased <code>spellsource.game_users</code> table reference
     */
    public GameUsers(Name alias) {
        this(alias, GAME_USERS);
    }

    private GameUsers(Name alias, Table<GameUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private GameUsers(Name alias, Table<GameUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GameUsers(Table<O> child, ForeignKey<O, GameUsersRecord> key) {
        super(child, key, GAME_USERS);
    }

    @Override
    public Schema getSchema() {
        return Spellsource.SPELLSOURCE;
    }

    @Override
    public Identity<GameUsersRecord, Long> getIdentity() {
        return Keys.IDENTITY_GAME_USERS;
    }

    @Override
    public UniqueKey<GameUsersRecord> getPrimaryKey() {
        return Keys.GAME_USERS_PKEY;
    }

    @Override
    public List<UniqueKey<GameUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<GameUsersRecord>>asList(Keys.GAME_USERS_PKEY);
    }

    @Override
    public List<ForeignKey<GameUsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GameUsersRecord, ?>>asList(Keys.GAME_USERS__GAME_USERS_GAME_ID_FKEY, Keys.GAME_USERS__GAME_USERS_USER_ID_FKEY);
    }

    public Games games() {
        return new Games(this, Keys.GAME_USERS__GAME_USERS_GAME_ID_FKEY);
    }

    public UserEntity userEntity() {
        return new UserEntity(this, Keys.GAME_USERS__GAME_USERS_USER_ID_FKEY);
    }

    @Override
    public GameUsers as(String alias) {
        return new GameUsers(DSL.name(alias), this);
    }

    @Override
    public GameUsers as(Name alias) {
        return new GameUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameUsers rename(String name) {
        return new GameUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameUsers rename(Name name) {
        return new GameUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Short, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
