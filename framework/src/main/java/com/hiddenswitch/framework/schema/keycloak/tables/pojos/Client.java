/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IClient;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Client implements VertxPojo, IClient {

    private static final long serialVersionUID = 1225530346;

    private String  id;
    private Boolean enabled;
    private Boolean fullScopeAllowed;
    private String  clientId;
    private Integer notBefore;
    private Boolean publicClient;
    private String  secret;
    private String  baseUrl;
    private Boolean bearerOnly;
    private String  managementUrl;
    private Boolean surrogateAuthRequired;
    private String  realmId;
    private String  protocol;
    private Integer nodeReregTimeout;
    private Boolean frontchannelLogout;
    private Boolean consentRequired;
    private String  name;
    private Boolean serviceAccountsEnabled;
    private String  clientAuthenticatorType;
    private String  rootUrl;
    private String  description;
    private String  registrationToken;
    private Boolean standardFlowEnabled;
    private Boolean implicitFlowEnabled;
    private Boolean directAccessGrantsEnabled;
    private Boolean alwaysDisplayInConsole;

    public Client() {}

    public Client(IClient value) {
        this.id = value.getId();
        this.enabled = value.getEnabled();
        this.fullScopeAllowed = value.getFullScopeAllowed();
        this.clientId = value.getClientId();
        this.notBefore = value.getNotBefore();
        this.publicClient = value.getPublicClient();
        this.secret = value.getSecret();
        this.baseUrl = value.getBaseUrl();
        this.bearerOnly = value.getBearerOnly();
        this.managementUrl = value.getManagementUrl();
        this.surrogateAuthRequired = value.getSurrogateAuthRequired();
        this.realmId = value.getRealmId();
        this.protocol = value.getProtocol();
        this.nodeReregTimeout = value.getNodeReregTimeout();
        this.frontchannelLogout = value.getFrontchannelLogout();
        this.consentRequired = value.getConsentRequired();
        this.name = value.getName();
        this.serviceAccountsEnabled = value.getServiceAccountsEnabled();
        this.clientAuthenticatorType = value.getClientAuthenticatorType();
        this.rootUrl = value.getRootUrl();
        this.description = value.getDescription();
        this.registrationToken = value.getRegistrationToken();
        this.standardFlowEnabled = value.getStandardFlowEnabled();
        this.implicitFlowEnabled = value.getImplicitFlowEnabled();
        this.directAccessGrantsEnabled = value.getDirectAccessGrantsEnabled();
        this.alwaysDisplayInConsole = value.getAlwaysDisplayInConsole();
    }

    public Client(
        String  id,
        Boolean enabled,
        Boolean fullScopeAllowed,
        String  clientId,
        Integer notBefore,
        Boolean publicClient,
        String  secret,
        String  baseUrl,
        Boolean bearerOnly,
        String  managementUrl,
        Boolean surrogateAuthRequired,
        String  realmId,
        String  protocol,
        Integer nodeReregTimeout,
        Boolean frontchannelLogout,
        Boolean consentRequired,
        String  name,
        Boolean serviceAccountsEnabled,
        String  clientAuthenticatorType,
        String  rootUrl,
        String  description,
        String  registrationToken,
        Boolean standardFlowEnabled,
        Boolean implicitFlowEnabled,
        Boolean directAccessGrantsEnabled,
        Boolean alwaysDisplayInConsole
    ) {
        this.id = id;
        this.enabled = enabled;
        this.fullScopeAllowed = fullScopeAllowed;
        this.clientId = clientId;
        this.notBefore = notBefore;
        this.publicClient = publicClient;
        this.secret = secret;
        this.baseUrl = baseUrl;
        this.bearerOnly = bearerOnly;
        this.managementUrl = managementUrl;
        this.surrogateAuthRequired = surrogateAuthRequired;
        this.realmId = realmId;
        this.protocol = protocol;
        this.nodeReregTimeout = nodeReregTimeout;
        this.frontchannelLogout = frontchannelLogout;
        this.consentRequired = consentRequired;
        this.name = name;
        this.serviceAccountsEnabled = serviceAccountsEnabled;
        this.clientAuthenticatorType = clientAuthenticatorType;
        this.rootUrl = rootUrl;
        this.description = description;
        this.registrationToken = registrationToken;
        this.standardFlowEnabled = standardFlowEnabled;
        this.implicitFlowEnabled = implicitFlowEnabled;
        this.directAccessGrantsEnabled = directAccessGrantsEnabled;
        this.alwaysDisplayInConsole = alwaysDisplayInConsole;
    }

    public Client(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    public Client setId(String id) {
        this.id = id;
        return this;
    }

    @Override
    public Boolean getEnabled() {
        return this.enabled;
    }

    @Override
    public Client setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    @Override
    public Boolean getFullScopeAllowed() {
        return this.fullScopeAllowed;
    }

    @Override
    public Client setFullScopeAllowed(Boolean fullScopeAllowed) {
        this.fullScopeAllowed = fullScopeAllowed;
        return this;
    }

    @Override
    public String getClientId() {
        return this.clientId;
    }

    @Override
    public Client setClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    @Override
    public Integer getNotBefore() {
        return this.notBefore;
    }

    @Override
    public Client setNotBefore(Integer notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    @Override
    public Boolean getPublicClient() {
        return this.publicClient;
    }

    @Override
    public Client setPublicClient(Boolean publicClient) {
        this.publicClient = publicClient;
        return this;
    }

    @Override
    public String getSecret() {
        return this.secret;
    }

    @Override
    public Client setSecret(String secret) {
        this.secret = secret;
        return this;
    }

    @Override
    public String getBaseUrl() {
        return this.baseUrl;
    }

    @Override
    public Client setBaseUrl(String baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }

    @Override
    public Boolean getBearerOnly() {
        return this.bearerOnly;
    }

    @Override
    public Client setBearerOnly(Boolean bearerOnly) {
        this.bearerOnly = bearerOnly;
        return this;
    }

    @Override
    public String getManagementUrl() {
        return this.managementUrl;
    }

    @Override
    public Client setManagementUrl(String managementUrl) {
        this.managementUrl = managementUrl;
        return this;
    }

    @Override
    public Boolean getSurrogateAuthRequired() {
        return this.surrogateAuthRequired;
    }

    @Override
    public Client setSurrogateAuthRequired(Boolean surrogateAuthRequired) {
        this.surrogateAuthRequired = surrogateAuthRequired;
        return this;
    }

    @Override
    public String getRealmId() {
        return this.realmId;
    }

    @Override
    public Client setRealmId(String realmId) {
        this.realmId = realmId;
        return this;
    }

    @Override
    public String getProtocol() {
        return this.protocol;
    }

    @Override
    public Client setProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    @Override
    public Integer getNodeReregTimeout() {
        return this.nodeReregTimeout;
    }

    @Override
    public Client setNodeReregTimeout(Integer nodeReregTimeout) {
        this.nodeReregTimeout = nodeReregTimeout;
        return this;
    }

    @Override
    public Boolean getFrontchannelLogout() {
        return this.frontchannelLogout;
    }

    @Override
    public Client setFrontchannelLogout(Boolean frontchannelLogout) {
        this.frontchannelLogout = frontchannelLogout;
        return this;
    }

    @Override
    public Boolean getConsentRequired() {
        return this.consentRequired;
    }

    @Override
    public Client setConsentRequired(Boolean consentRequired) {
        this.consentRequired = consentRequired;
        return this;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public Client setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public Boolean getServiceAccountsEnabled() {
        return this.serviceAccountsEnabled;
    }

    @Override
    public Client setServiceAccountsEnabled(Boolean serviceAccountsEnabled) {
        this.serviceAccountsEnabled = serviceAccountsEnabled;
        return this;
    }

    @Override
    public String getClientAuthenticatorType() {
        return this.clientAuthenticatorType;
    }

    @Override
    public Client setClientAuthenticatorType(String clientAuthenticatorType) {
        this.clientAuthenticatorType = clientAuthenticatorType;
        return this;
    }

    @Override
    public String getRootUrl() {
        return this.rootUrl;
    }

    @Override
    public Client setRootUrl(String rootUrl) {
        this.rootUrl = rootUrl;
        return this;
    }

    @Override
    public String getDescription() {
        return this.description;
    }

    @Override
    public Client setDescription(String description) {
        this.description = description;
        return this;
    }

    @Override
    public String getRegistrationToken() {
        return this.registrationToken;
    }

    @Override
    public Client setRegistrationToken(String registrationToken) {
        this.registrationToken = registrationToken;
        return this;
    }

    @Override
    public Boolean getStandardFlowEnabled() {
        return this.standardFlowEnabled;
    }

    @Override
    public Client setStandardFlowEnabled(Boolean standardFlowEnabled) {
        this.standardFlowEnabled = standardFlowEnabled;
        return this;
    }

    @Override
    public Boolean getImplicitFlowEnabled() {
        return this.implicitFlowEnabled;
    }

    @Override
    public Client setImplicitFlowEnabled(Boolean implicitFlowEnabled) {
        this.implicitFlowEnabled = implicitFlowEnabled;
        return this;
    }

    @Override
    public Boolean getDirectAccessGrantsEnabled() {
        return this.directAccessGrantsEnabled;
    }

    @Override
    public Client setDirectAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
        this.directAccessGrantsEnabled = directAccessGrantsEnabled;
        return this;
    }

    @Override
    public Boolean getAlwaysDisplayInConsole() {
        return this.alwaysDisplayInConsole;
    }

    @Override
    public Client setAlwaysDisplayInConsole(Boolean alwaysDisplayInConsole) {
        this.alwaysDisplayInConsole = alwaysDisplayInConsole;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Client (");

        sb.append(id);
        sb.append(", ").append(enabled);
        sb.append(", ").append(fullScopeAllowed);
        sb.append(", ").append(clientId);
        sb.append(", ").append(notBefore);
        sb.append(", ").append(publicClient);
        sb.append(", ").append(secret);
        sb.append(", ").append(baseUrl);
        sb.append(", ").append(bearerOnly);
        sb.append(", ").append(managementUrl);
        sb.append(", ").append(surrogateAuthRequired);
        sb.append(", ").append(realmId);
        sb.append(", ").append(protocol);
        sb.append(", ").append(nodeReregTimeout);
        sb.append(", ").append(frontchannelLogout);
        sb.append(", ").append(consentRequired);
        sb.append(", ").append(name);
        sb.append(", ").append(serviceAccountsEnabled);
        sb.append(", ").append(clientAuthenticatorType);
        sb.append(", ").append(rootUrl);
        sb.append(", ").append(description);
        sb.append(", ").append(registrationToken);
        sb.append(", ").append(standardFlowEnabled);
        sb.append(", ").append(implicitFlowEnabled);
        sb.append(", ").append(directAccessGrantsEnabled);
        sb.append(", ").append(alwaysDisplayInConsole);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IClient from) {
        setId(from.getId());
        setEnabled(from.getEnabled());
        setFullScopeAllowed(from.getFullScopeAllowed());
        setClientId(from.getClientId());
        setNotBefore(from.getNotBefore());
        setPublicClient(from.getPublicClient());
        setSecret(from.getSecret());
        setBaseUrl(from.getBaseUrl());
        setBearerOnly(from.getBearerOnly());
        setManagementUrl(from.getManagementUrl());
        setSurrogateAuthRequired(from.getSurrogateAuthRequired());
        setRealmId(from.getRealmId());
        setProtocol(from.getProtocol());
        setNodeReregTimeout(from.getNodeReregTimeout());
        setFrontchannelLogout(from.getFrontchannelLogout());
        setConsentRequired(from.getConsentRequired());
        setName(from.getName());
        setServiceAccountsEnabled(from.getServiceAccountsEnabled());
        setClientAuthenticatorType(from.getClientAuthenticatorType());
        setRootUrl(from.getRootUrl());
        setDescription(from.getDescription());
        setRegistrationToken(from.getRegistrationToken());
        setStandardFlowEnabled(from.getStandardFlowEnabled());
        setImplicitFlowEnabled(from.getImplicitFlowEnabled());
        setDirectAccessGrantsEnabled(from.getDirectAccessGrantsEnabled());
        setAlwaysDisplayInConsole(from.getAlwaysDisplayInConsole());
    }

    @Override
    public <E extends IClient> E into(E into) {
        into.from(this);
        return into;
    }
}
