/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.FriendsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Friends extends TableImpl<FriendsRecord> {

    private static final long serialVersionUID = 280614245;

    /**
     * The reference instance of <code>spellsource.friends</code>
     */
    public static final Friends FRIENDS = new Friends();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FriendsRecord> getRecordType() {
        return FriendsRecord.class;
    }

    /**
     * The column <code>spellsource.friends.id</code>.
     */
    public final TableField<FriendsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.friends.friend</code>.
     */
    public final TableField<FriendsRecord, String> FRIEND = createField(DSL.name("friend"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.friends.created_at</code>.
     */
    public final TableField<FriendsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>spellsource.friends</code> table reference
     */
    public Friends() {
        this(DSL.name("friends"), null);
    }

    /**
     * Create an aliased <code>spellsource.friends</code> table reference
     */
    public Friends(String alias) {
        this(DSL.name(alias), FRIENDS);
    }

    /**
     * Create an aliased <code>spellsource.friends</code> table reference
     */
    public Friends(Name alias) {
        this(alias, FRIENDS);
    }

    private Friends(Name alias, Table<FriendsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Friends(Name alias, Table<FriendsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Friends(Table<O> child, ForeignKey<O, FriendsRecord> key) {
        super(child, key, FRIENDS);
    }

    @Override
    public Schema getSchema() {
        return Spellsource.SPELLSOURCE;
    }

    @Override
    public UniqueKey<FriendsRecord> getPrimaryKey() {
        return Keys.FRIENDS_PKEY;
    }

    @Override
    public List<UniqueKey<FriendsRecord>> getKeys() {
        return Arrays.<UniqueKey<FriendsRecord>>asList(Keys.FRIENDS_PKEY);
    }

    @Override
    public List<ForeignKey<FriendsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FriendsRecord, ?>>asList(Keys.FRIENDS__FRIENDS_ID_FKEY, Keys.FRIENDS__FRIENDS_FRIEND_FKEY);
    }

    public UserEntity friendsIdFkey() {
        return new UserEntity(this, Keys.FRIENDS__FRIENDS_ID_FKEY);
    }

    public UserEntity friendsFriendFkey() {
        return new UserEntity(this, Keys.FRIENDS__FRIENDS_FRIEND_FKEY);
    }

    @Override
    public Friends as(String alias) {
        return new Friends(DSL.name(alias), this);
    }

    @Override
    public Friends as(Name alias) {
        return new Friends(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Friends rename(String name) {
        return new Friends(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Friends rename(Name name) {
        return new Friends(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
