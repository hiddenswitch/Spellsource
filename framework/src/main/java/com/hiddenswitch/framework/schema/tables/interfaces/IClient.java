/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.UnexpectedJsonValueType;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IClient extends VertxPojo, Serializable {

    /**
     * Setter for <code>public.client.id</code>.
     */
    public IClient setId(String value);

    /**
     * Getter for <code>public.client.id</code>.
     */
    public String getId();

    /**
     * Setter for <code>public.client.enabled</code>.
     */
    public IClient setEnabled(Boolean value);

    /**
     * Getter for <code>public.client.enabled</code>.
     */
    public Boolean getEnabled();

    /**
     * Setter for <code>public.client.full_scope_allowed</code>.
     */
    public IClient setFullScopeAllowed(Boolean value);

    /**
     * Getter for <code>public.client.full_scope_allowed</code>.
     */
    public Boolean getFullScopeAllowed();

    /**
     * Setter for <code>public.client.client_id</code>.
     */
    public IClient setClientId(String value);

    /**
     * Getter for <code>public.client.client_id</code>.
     */
    public String getClientId();

    /**
     * Setter for <code>public.client.not_before</code>.
     */
    public IClient setNotBefore(Integer value);

    /**
     * Getter for <code>public.client.not_before</code>.
     */
    public Integer getNotBefore();

    /**
     * Setter for <code>public.client.public_client</code>.
     */
    public IClient setPublicClient(Boolean value);

    /**
     * Getter for <code>public.client.public_client</code>.
     */
    public Boolean getPublicClient();

    /**
     * Setter for <code>public.client.secret</code>.
     */
    public IClient setSecret(String value);

    /**
     * Getter for <code>public.client.secret</code>.
     */
    public String getSecret();

    /**
     * Setter for <code>public.client.base_url</code>.
     */
    public IClient setBaseUrl(String value);

    /**
     * Getter for <code>public.client.base_url</code>.
     */
    public String getBaseUrl();

    /**
     * Setter for <code>public.client.bearer_only</code>.
     */
    public IClient setBearerOnly(Boolean value);

    /**
     * Getter for <code>public.client.bearer_only</code>.
     */
    public Boolean getBearerOnly();

    /**
     * Setter for <code>public.client.management_url</code>.
     */
    public IClient setManagementUrl(String value);

    /**
     * Getter for <code>public.client.management_url</code>.
     */
    public String getManagementUrl();

    /**
     * Setter for <code>public.client.surrogate_auth_required</code>.
     */
    public IClient setSurrogateAuthRequired(Boolean value);

    /**
     * Getter for <code>public.client.surrogate_auth_required</code>.
     */
    public Boolean getSurrogateAuthRequired();

    /**
     * Setter for <code>public.client.realm_id</code>.
     */
    public IClient setRealmId(String value);

    /**
     * Getter for <code>public.client.realm_id</code>.
     */
    public String getRealmId();

    /**
     * Setter for <code>public.client.protocol</code>.
     */
    public IClient setProtocol(String value);

    /**
     * Getter for <code>public.client.protocol</code>.
     */
    public String getProtocol();

    /**
     * Setter for <code>public.client.node_rereg_timeout</code>.
     */
    public IClient setNodeReregTimeout(Integer value);

    /**
     * Getter for <code>public.client.node_rereg_timeout</code>.
     */
    public Integer getNodeReregTimeout();

    /**
     * Setter for <code>public.client.frontchannel_logout</code>.
     */
    public IClient setFrontchannelLogout(Boolean value);

    /**
     * Getter for <code>public.client.frontchannel_logout</code>.
     */
    public Boolean getFrontchannelLogout();

    /**
     * Setter for <code>public.client.consent_required</code>.
     */
    public IClient setConsentRequired(Boolean value);

    /**
     * Getter for <code>public.client.consent_required</code>.
     */
    public Boolean getConsentRequired();

    /**
     * Setter for <code>public.client.name</code>.
     */
    public IClient setName(String value);

    /**
     * Getter for <code>public.client.name</code>.
     */
    public String getName();

    /**
     * Setter for <code>public.client.service_accounts_enabled</code>.
     */
    public IClient setServiceAccountsEnabled(Boolean value);

    /**
     * Getter for <code>public.client.service_accounts_enabled</code>.
     */
    public Boolean getServiceAccountsEnabled();

    /**
     * Setter for <code>public.client.client_authenticator_type</code>.
     */
    public IClient setClientAuthenticatorType(String value);

    /**
     * Getter for <code>public.client.client_authenticator_type</code>.
     */
    public String getClientAuthenticatorType();

    /**
     * Setter for <code>public.client.root_url</code>.
     */
    public IClient setRootUrl(String value);

    /**
     * Getter for <code>public.client.root_url</code>.
     */
    public String getRootUrl();

    /**
     * Setter for <code>public.client.description</code>.
     */
    public IClient setDescription(String value);

    /**
     * Getter for <code>public.client.description</code>.
     */
    public String getDescription();

    /**
     * Setter for <code>public.client.registration_token</code>.
     */
    public IClient setRegistrationToken(String value);

    /**
     * Getter for <code>public.client.registration_token</code>.
     */
    public String getRegistrationToken();

    /**
     * Setter for <code>public.client.standard_flow_enabled</code>.
     */
    public IClient setStandardFlowEnabled(Boolean value);

    /**
     * Getter for <code>public.client.standard_flow_enabled</code>.
     */
    public Boolean getStandardFlowEnabled();

    /**
     * Setter for <code>public.client.implicit_flow_enabled</code>.
     */
    public IClient setImplicitFlowEnabled(Boolean value);

    /**
     * Getter for <code>public.client.implicit_flow_enabled</code>.
     */
    public Boolean getImplicitFlowEnabled();

    /**
     * Setter for <code>public.client.direct_access_grants_enabled</code>.
     */
    public IClient setDirectAccessGrantsEnabled(Boolean value);

    /**
     * Getter for <code>public.client.direct_access_grants_enabled</code>.
     */
    public Boolean getDirectAccessGrantsEnabled();

    /**
     * Setter for <code>public.client.always_display_in_console</code>.
     */
    public IClient setAlwaysDisplayInConsole(Boolean value);

    /**
     * Getter for <code>public.client.always_display_in_console</code>.
     */
    public Boolean getAlwaysDisplayInConsole();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IClient
     */
    public void from(IClient from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IClient
     */
    public <E extends IClient> E into(E into);

    @Override
    public default IClient fromJson(io.vertx.core.json.JsonObject json) {
        try {
            setId(json.getString("id"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("id","java.lang.String",e);
        }
        try {
            setEnabled(json.getBoolean("enabled"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("enabled","java.lang.Boolean",e);
        }
        try {
            setFullScopeAllowed(json.getBoolean("full_scope_allowed"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("full_scope_allowed","java.lang.Boolean",e);
        }
        try {
            setClientId(json.getString("client_id"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("client_id","java.lang.String",e);
        }
        try {
            setNotBefore(json.getInteger("not_before"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("not_before","java.lang.Integer",e);
        }
        try {
            setPublicClient(json.getBoolean("public_client"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("public_client","java.lang.Boolean",e);
        }
        try {
            setSecret(json.getString("secret"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("secret","java.lang.String",e);
        }
        try {
            setBaseUrl(json.getString("base_url"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("base_url","java.lang.String",e);
        }
        try {
            setBearerOnly(json.getBoolean("bearer_only"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("bearer_only","java.lang.Boolean",e);
        }
        try {
            setManagementUrl(json.getString("management_url"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("management_url","java.lang.String",e);
        }
        try {
            setSurrogateAuthRequired(json.getBoolean("surrogate_auth_required"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("surrogate_auth_required","java.lang.Boolean",e);
        }
        try {
            setRealmId(json.getString("realm_id"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("realm_id","java.lang.String",e);
        }
        try {
            setProtocol(json.getString("protocol"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("protocol","java.lang.String",e);
        }
        try {
            setNodeReregTimeout(json.getInteger("node_rereg_timeout"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("node_rereg_timeout","java.lang.Integer",e);
        }
        try {
            setFrontchannelLogout(json.getBoolean("frontchannel_logout"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("frontchannel_logout","java.lang.Boolean",e);
        }
        try {
            setConsentRequired(json.getBoolean("consent_required"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("consent_required","java.lang.Boolean",e);
        }
        try {
            setName(json.getString("name"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("name","java.lang.String",e);
        }
        try {
            setServiceAccountsEnabled(json.getBoolean("service_accounts_enabled"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("service_accounts_enabled","java.lang.Boolean",e);
        }
        try {
            setClientAuthenticatorType(json.getString("client_authenticator_type"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("client_authenticator_type","java.lang.String",e);
        }
        try {
            setRootUrl(json.getString("root_url"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("root_url","java.lang.String",e);
        }
        try {
            setDescription(json.getString("description"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("description","java.lang.String",e);
        }
        try {
            setRegistrationToken(json.getString("registration_token"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("registration_token","java.lang.String",e);
        }
        try {
            setStandardFlowEnabled(json.getBoolean("standard_flow_enabled"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("standard_flow_enabled","java.lang.Boolean",e);
        }
        try {
            setImplicitFlowEnabled(json.getBoolean("implicit_flow_enabled"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("implicit_flow_enabled","java.lang.Boolean",e);
        }
        try {
            setDirectAccessGrantsEnabled(json.getBoolean("direct_access_grants_enabled"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("direct_access_grants_enabled","java.lang.Boolean",e);
        }
        try {
            setAlwaysDisplayInConsole(json.getBoolean("always_display_in_console"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("always_display_in_console","java.lang.Boolean",e);
        }
        return this;
    }


    @Override
    public default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("id",getId());
        json.put("enabled",getEnabled());
        json.put("full_scope_allowed",getFullScopeAllowed());
        json.put("client_id",getClientId());
        json.put("not_before",getNotBefore());
        json.put("public_client",getPublicClient());
        json.put("secret",getSecret());
        json.put("base_url",getBaseUrl());
        json.put("bearer_only",getBearerOnly());
        json.put("management_url",getManagementUrl());
        json.put("surrogate_auth_required",getSurrogateAuthRequired());
        json.put("realm_id",getRealmId());
        json.put("protocol",getProtocol());
        json.put("node_rereg_timeout",getNodeReregTimeout());
        json.put("frontchannel_logout",getFrontchannelLogout());
        json.put("consent_required",getConsentRequired());
        json.put("name",getName());
        json.put("service_accounts_enabled",getServiceAccountsEnabled());
        json.put("client_authenticator_type",getClientAuthenticatorType());
        json.put("root_url",getRootUrl());
        json.put("description",getDescription());
        json.put("registration_token",getRegistrationToken());
        json.put("standard_flow_enabled",getStandardFlowEnabled());
        json.put("implicit_flow_enabled",getImplicitFlowEnabled());
        json.put("direct_access_grants_enabled",getDirectAccessGrantsEnabled());
        json.put("always_display_in_console",getAlwaysDisplayInConsole());
        return json;
    }

}
