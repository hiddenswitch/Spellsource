/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.daos;


import com.hiddenswitch.framework.schema.keycloak.tables.OfflineClientSession;
import com.hiddenswitch.framework.schema.keycloak.tables.records.OfflineClientSessionRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record3;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfflineClientSessionDao extends AbstractReactiveVertxDAO<OfflineClientSessionRecord, com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession, Record3<String, String, String>, Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>>, Future<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>, Future<Integer>, Future<Record3<String, String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<OfflineClientSessionRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession,Record3<String, String, String>> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public OfflineClientSessionDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(OfflineClientSession.OFFLINE_CLIENT_SESSION, com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession.class, new ReactiveClassicQueryExecutor<OfflineClientSessionRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession,Record3<String, String, String>>(configuration,delegate,com.hiddenswitch.framework.schema.keycloak.tables.mappers.RowMappers.getOfflineClientSessionMapper()));
    }

    @Override
    protected Record3<String, String, String> getId(com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession object) {
        return compositeKeyRecord(object.getUserSessionId(), object.getClientId(), object.getOfflineFlag());
    }

    /**
     * Find records that have <code>client_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByClientId(Collection<String> values) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.CLIENT_ID.in(values));
    }

    /**
     * Find records that have <code>client_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByClientId(Collection<String> values, int limit) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.CLIENT_ID.in(values),limit);
    }

    /**
     * Find records that have <code>offline_flag IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByOfflineFlag(Collection<String> values) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.OFFLINE_FLAG.in(values));
    }

    /**
     * Find records that have <code>offline_flag IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByOfflineFlag(Collection<String> values, int limit) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.OFFLINE_FLAG.in(values),limit);
    }

    /**
     * Find records that have <code>timestamp IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByTimestamp(Collection<Integer> values) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.TIMESTAMP.in(values));
    }

    /**
     * Find records that have <code>timestamp IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByTimestamp(Collection<Integer> values, int limit) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.TIMESTAMP.in(values),limit);
    }

    /**
     * Find records that have <code>data IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByData(Collection<String> values) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.DATA.in(values));
    }

    /**
     * Find records that have <code>data IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByData(Collection<String> values, int limit) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.DATA.in(values),limit);
    }

    /**
     * Find records that have <code>client_storage_provider IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByClientStorageProvider(Collection<String> values) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.CLIENT_STORAGE_PROVIDER.in(values));
    }

    /**
     * Find records that have <code>client_storage_provider IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByClientStorageProvider(Collection<String> values, int limit) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.CLIENT_STORAGE_PROVIDER.in(values),limit);
    }

    /**
     * Find records that have <code>external_client_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByExternalClientId(Collection<String> values) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.EXTERNAL_CLIENT_ID.in(values));
    }

    /**
     * Find records that have <code>external_client_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession>> findManyByExternalClientId(Collection<String> values, int limit) {
        return findManyByCondition(OfflineClientSession.OFFLINE_CLIENT_SESSION.EXTERNAL_CLIENT_ID.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<OfflineClientSessionRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession,Record3<String, String, String>> queryExecutor(){
        return (ReactiveClassicQueryExecutor<OfflineClientSessionRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession,Record3<String, String, String>>) super.queryExecutor();
    }
}
