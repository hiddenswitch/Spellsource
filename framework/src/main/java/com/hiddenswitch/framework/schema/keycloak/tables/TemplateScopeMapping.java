/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.tables.records.TemplateScopeMappingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TemplateScopeMapping extends TableImpl<TemplateScopeMappingRecord> {

    private static final long serialVersionUID = -996570828;

    /**
     * The reference instance of <code>keycloak.template_scope_mapping</code>
     */
    public static final TemplateScopeMapping TEMPLATE_SCOPE_MAPPING = new TemplateScopeMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemplateScopeMappingRecord> getRecordType() {
        return TemplateScopeMappingRecord.class;
    }

    /**
     * Create a <code>keycloak.template_scope_mapping</code> table reference
     */
    public TemplateScopeMapping() {
        this(DSL.name("template_scope_mapping"), null);
    }

    /**
     * Create an aliased <code>keycloak.template_scope_mapping</code> table reference
     */
    public TemplateScopeMapping(String alias) {
        this(DSL.name(alias), TEMPLATE_SCOPE_MAPPING);
    }

    /**
     * Create an aliased <code>keycloak.template_scope_mapping</code> table reference
     */
    public TemplateScopeMapping(Name alias) {
        this(alias, TEMPLATE_SCOPE_MAPPING);
    }

    private TemplateScopeMapping(Name alias, Table<TemplateScopeMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private TemplateScopeMapping(Name alias, Table<TemplateScopeMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TemplateScopeMapping(Table<O> child, ForeignKey<O, TemplateScopeMappingRecord> key) {
        super(child, key, TEMPLATE_SCOPE_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return Keycloak.KEYCLOAK;
    }

    @Override
    public TemplateScopeMapping as(String alias) {
        return new TemplateScopeMapping(DSL.name(alias), this);
    }

    @Override
    public TemplateScopeMapping as(Name alias) {
        return new TemplateScopeMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateScopeMapping rename(String name) {
        return new TemplateScopeMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateScopeMapping rename(Name name) {
        return new TemplateScopeMapping(name, null);
    }
}
