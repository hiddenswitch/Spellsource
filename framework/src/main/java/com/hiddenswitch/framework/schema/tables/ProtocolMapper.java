/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables;


import com.hiddenswitch.framework.schema.Indexes;
import com.hiddenswitch.framework.schema.Keys;
import com.hiddenswitch.framework.schema.Public;
import com.hiddenswitch.framework.schema.tables.records.ProtocolMapperRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProtocolMapper extends TableImpl<ProtocolMapperRecord> {

    private static final long serialVersionUID = -331896376;

    /**
     * The reference instance of <code>public.protocol_mapper</code>
     */
    public static final ProtocolMapper PROTOCOL_MAPPER = new ProtocolMapper();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProtocolMapperRecord> getRecordType() {
        return ProtocolMapperRecord.class;
    }

    /**
     * The column <code>public.protocol_mapper.id</code>.
     */
    public final TableField<ProtocolMapperRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.protocol_mapper.name</code>.
     */
    public final TableField<ProtocolMapperRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.protocol_mapper.protocol</code>.
     */
    public final TableField<ProtocolMapperRecord, String> PROTOCOL = createField(DSL.name("protocol"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.protocol_mapper.protocol_mapper_name</code>.
     */
    public final TableField<ProtocolMapperRecord, String> PROTOCOL_MAPPER_NAME = createField(DSL.name("protocol_mapper_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.protocol_mapper.client_id</code>.
     */
    public final TableField<ProtocolMapperRecord, String> CLIENT_ID = createField(DSL.name("client_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.protocol_mapper.client_scope_id</code>.
     */
    public final TableField<ProtocolMapperRecord, String> CLIENT_SCOPE_ID = createField(DSL.name("client_scope_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * Create a <code>public.protocol_mapper</code> table reference
     */
    public ProtocolMapper() {
        this(DSL.name("protocol_mapper"), null);
    }

    /**
     * Create an aliased <code>public.protocol_mapper</code> table reference
     */
    public ProtocolMapper(String alias) {
        this(DSL.name(alias), PROTOCOL_MAPPER);
    }

    /**
     * Create an aliased <code>public.protocol_mapper</code> table reference
     */
    public ProtocolMapper(Name alias) {
        this(alias, PROTOCOL_MAPPER);
    }

    private ProtocolMapper(Name alias, Table<ProtocolMapperRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProtocolMapper(Name alias, Table<ProtocolMapperRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ProtocolMapper(Table<O> child, ForeignKey<O, ProtocolMapperRecord> key) {
        super(child, key, PROTOCOL_MAPPER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_CLSCOPE_PROTMAP, Indexes.IDX_PROTOCOL_MAPPER_CLIENT);
    }

    @Override
    public UniqueKey<ProtocolMapperRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_PCM;
    }

    @Override
    public List<UniqueKey<ProtocolMapperRecord>> getKeys() {
        return Arrays.<UniqueKey<ProtocolMapperRecord>>asList(Keys.CONSTRAINT_PCM);
    }

    @Override
    public List<ForeignKey<ProtocolMapperRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProtocolMapperRecord, ?>>asList(Keys.PROTOCOL_MAPPER__FK_PCM_REALM, Keys.PROTOCOL_MAPPER__FK_CLI_SCOPE_MAPPER);
    }

    public Client client() {
        return new Client(this, Keys.PROTOCOL_MAPPER__FK_PCM_REALM);
    }

    public ClientScope clientScope() {
        return new ClientScope(this, Keys.PROTOCOL_MAPPER__FK_CLI_SCOPE_MAPPER);
    }

    @Override
    public ProtocolMapper as(String alias) {
        return new ProtocolMapper(DSL.name(alias), this);
    }

    @Override
    public ProtocolMapper as(Name alias) {
        return new ProtocolMapper(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProtocolMapper rename(String name) {
        return new ProtocolMapper(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProtocolMapper rename(Name name) {
        return new ProtocolMapper(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
