/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.daos;


import com.hiddenswitch.framework.schema.tables.RealmDefaultRoles;
import com.hiddenswitch.framework.schema.tables.records.RealmDefaultRolesRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record2;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RealmDefaultRolesDao extends AbstractReactiveVertxDAO<RealmDefaultRolesRecord, com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles, Record2<String, String>, Future<List<com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles>>, Future<com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles>, Future<Integer>, Future<Record2<String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<RealmDefaultRolesRecord,com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles,Record2<String, String>> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public RealmDefaultRolesDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(RealmDefaultRoles.REALM_DEFAULT_ROLES, com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles.class, new ReactiveClassicQueryExecutor<RealmDefaultRolesRecord,com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles,Record2<String, String>>(configuration,delegate,com.hiddenswitch.framework.schema.tables.mappers.RowMappers.getRealmDefaultRolesMapper()));
    }

    @Override
    protected Record2<String, String> getId(com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles object) {
        return compositeKeyRecord(object.getRealmId(), object.getRoleId());
    }

    /**
     * Find records that have <code>role_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles>> findManyByRoleId(Collection<String> values) {
        return findManyByCondition(RealmDefaultRoles.REALM_DEFAULT_ROLES.ROLE_ID.in(values));
    }

    /**
     * Find records that have <code>role_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles>> findManyByRoleId(Collection<String> values, int limit) {
        return findManyByCondition(RealmDefaultRoles.REALM_DEFAULT_ROLES.ROLE_ID.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<RealmDefaultRolesRecord,com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles,Record2<String, String>> queryExecutor(){
        return (ReactiveClassicQueryExecutor<RealmDefaultRolesRecord,com.hiddenswitch.framework.schema.tables.pojos.RealmDefaultRoles,Record2<String, String>>) super.queryExecutor();
    }
}
