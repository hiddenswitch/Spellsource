/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.records;


import com.hiddenswitch.framework.schema.tables.OfflineUserSession;
import com.hiddenswitch.framework.schema.tables.interfaces.IOfflineUserSession;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfflineUserSessionRecord extends UpdatableRecordImpl<OfflineUserSessionRecord> implements VertxPojo, Record7<String, String, String, Integer, String, String, Integer>, IOfflineUserSession {

    private static final long serialVersionUID = 2078584162;

    /**
     * Setter for <code>public.offline_user_session.user_session_id</code>.
     */
    @Override
    public OfflineUserSessionRecord setUserSessionId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.offline_user_session.user_session_id</code>.
     */
    @Override
    public String getUserSessionId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.offline_user_session.user_id</code>.
     */
    @Override
    public OfflineUserSessionRecord setUserId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.offline_user_session.user_id</code>.
     */
    @Override
    public String getUserId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.offline_user_session.realm_id</code>.
     */
    @Override
    public OfflineUserSessionRecord setRealmId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.offline_user_session.realm_id</code>.
     */
    @Override
    public String getRealmId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.offline_user_session.created_on</code>.
     */
    @Override
    public OfflineUserSessionRecord setCreatedOn(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.offline_user_session.created_on</code>.
     */
    @Override
    public Integer getCreatedOn() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.offline_user_session.offline_flag</code>.
     */
    @Override
    public OfflineUserSessionRecord setOfflineFlag(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.offline_user_session.offline_flag</code>.
     */
    @Override
    public String getOfflineFlag() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.offline_user_session.data</code>.
     */
    @Override
    public OfflineUserSessionRecord setData(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.offline_user_session.data</code>.
     */
    @Override
    public String getData() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.offline_user_session.last_session_refresh</code>.
     */
    @Override
    public OfflineUserSessionRecord setLastSessionRefresh(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.offline_user_session.last_session_refresh</code>.
     */
    @Override
    public Integer getLastSessionRefresh() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Integer, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, String, Integer, String, String, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return OfflineUserSession.OFFLINE_USER_SESSION.USER_SESSION_ID;
    }

    @Override
    public Field<String> field2() {
        return OfflineUserSession.OFFLINE_USER_SESSION.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return OfflineUserSession.OFFLINE_USER_SESSION.REALM_ID;
    }

    @Override
    public Field<Integer> field4() {
        return OfflineUserSession.OFFLINE_USER_SESSION.CREATED_ON;
    }

    @Override
    public Field<String> field5() {
        return OfflineUserSession.OFFLINE_USER_SESSION.OFFLINE_FLAG;
    }

    @Override
    public Field<String> field6() {
        return OfflineUserSession.OFFLINE_USER_SESSION.DATA;
    }

    @Override
    public Field<Integer> field7() {
        return OfflineUserSession.OFFLINE_USER_SESSION.LAST_SESSION_REFRESH;
    }

    @Override
    public String component1() {
        return getUserSessionId();
    }

    @Override
    public String component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getRealmId();
    }

    @Override
    public Integer component4() {
        return getCreatedOn();
    }

    @Override
    public String component5() {
        return getOfflineFlag();
    }

    @Override
    public String component6() {
        return getData();
    }

    @Override
    public Integer component7() {
        return getLastSessionRefresh();
    }

    @Override
    public String value1() {
        return getUserSessionId();
    }

    @Override
    public String value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getRealmId();
    }

    @Override
    public Integer value4() {
        return getCreatedOn();
    }

    @Override
    public String value5() {
        return getOfflineFlag();
    }

    @Override
    public String value6() {
        return getData();
    }

    @Override
    public Integer value7() {
        return getLastSessionRefresh();
    }

    @Override
    public OfflineUserSessionRecord value1(String value) {
        setUserSessionId(value);
        return this;
    }

    @Override
    public OfflineUserSessionRecord value2(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public OfflineUserSessionRecord value3(String value) {
        setRealmId(value);
        return this;
    }

    @Override
    public OfflineUserSessionRecord value4(Integer value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public OfflineUserSessionRecord value5(String value) {
        setOfflineFlag(value);
        return this;
    }

    @Override
    public OfflineUserSessionRecord value6(String value) {
        setData(value);
        return this;
    }

    @Override
    public OfflineUserSessionRecord value7(Integer value) {
        setLastSessionRefresh(value);
        return this;
    }

    @Override
    public OfflineUserSessionRecord values(String value1, String value2, String value3, Integer value4, String value5, String value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOfflineUserSession from) {
        setUserSessionId(from.getUserSessionId());
        setUserId(from.getUserId());
        setRealmId(from.getRealmId());
        setCreatedOn(from.getCreatedOn());
        setOfflineFlag(from.getOfflineFlag());
        setData(from.getData());
        setLastSessionRefresh(from.getLastSessionRefresh());
    }

    @Override
    public <E extends IOfflineUserSession> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OfflineUserSessionRecord
     */
    public OfflineUserSessionRecord() {
        super(OfflineUserSession.OFFLINE_USER_SESSION);
    }

    /**
     * Create a detached, initialised OfflineUserSessionRecord
     */
    public OfflineUserSessionRecord(String userSessionId, String userId, String realmId, Integer createdOn, String offlineFlag, String data, Integer lastSessionRefresh) {
        super(OfflineUserSession.OFFLINE_USER_SESSION);

        set(0, userSessionId);
        set(1, userId);
        set(2, realmId);
        set(3, createdOn);
        set(4, offlineFlag);
        set(5, data);
        set(6, lastSessionRefresh);
    }

    public OfflineUserSessionRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
