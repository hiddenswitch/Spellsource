/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.UnexpectedJsonValueType;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IDecks extends VertxPojo, Serializable {

    /**
     * Setter for <code>spellsource.decks.id</code>.
     */
    public IDecks setId(String value);

    /**
     * Getter for <code>spellsource.decks.id</code>.
     */
    public String getId();

    /**
     * Setter for <code>spellsource.decks.created_by</code>. who created this deck originally
     */
    public IDecks setCreatedBy(String value);

    /**
     * Getter for <code>spellsource.decks.created_by</code>. who created this deck originally
     */
    public String getCreatedBy();

    /**
     * Setter for <code>spellsource.decks.last_edited_by</code>. who last edited this deck
     */
    public IDecks setLastEditedBy(String value);

    /**
     * Getter for <code>spellsource.decks.last_edited_by</code>. who last edited this deck
     */
    public String getLastEditedBy();

    /**
     * Setter for <code>spellsource.decks.name</code>.
     */
    public IDecks setName(String value);

    /**
     * Getter for <code>spellsource.decks.name</code>.
     */
    public String getName();

    /**
     * Setter for <code>spellsource.decks.hero_class</code>.
     */
    public IDecks setHeroClass(String value);

    /**
     * Getter for <code>spellsource.decks.hero_class</code>.
     */
    public String getHeroClass();

    /**
     * Setter for <code>spellsource.decks.trashed</code>.
     */
    public IDecks setTrashed(Boolean value);

    /**
     * Getter for <code>spellsource.decks.trashed</code>.
     */
    public Boolean getTrashed();

    /**
     * Setter for <code>spellsource.decks.format</code>.
     */
    public IDecks setFormat(String value);

    /**
     * Getter for <code>spellsource.decks.format</code>.
     */
    public String getFormat();

    /**
     * Setter for <code>spellsource.decks.deck_type</code>.
     */
    public IDecks setDeckType(Integer value);

    /**
     * Getter for <code>spellsource.decks.deck_type</code>.
     */
    public Integer getDeckType();

    /**
     * Setter for <code>spellsource.decks.is_premade</code>.
     */
    public IDecks setIsPremade(Boolean value);

    /**
     * Getter for <code>spellsource.decks.is_premade</code>.
     */
    public Boolean getIsPremade();

    /**
     * Setter for <code>spellsource.decks.permitted_to_duplicate</code>.
     */
    public IDecks setPermittedToDuplicate(Boolean value);

    /**
     * Getter for <code>spellsource.decks.permitted_to_duplicate</code>.
     */
    public Boolean getPermittedToDuplicate();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IDecks
     */
    public void from(IDecks from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IDecks
     */
    public <E extends IDecks> E into(E into);

    @Override
    public default IDecks fromJson(io.vertx.core.json.JsonObject json) {
        try {
            setId(json.getString("id"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("id","java.lang.String",e);
        }
        try {
            setCreatedBy(json.getString("created_by"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("created_by","java.lang.String",e);
        }
        try {
            setLastEditedBy(json.getString("last_edited_by"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("last_edited_by","java.lang.String",e);
        }
        try {
            setName(json.getString("name"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("name","java.lang.String",e);
        }
        try {
            setHeroClass(json.getString("hero_class"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("hero_class","java.lang.String",e);
        }
        try {
            setTrashed(json.getBoolean("trashed"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("trashed","java.lang.Boolean",e);
        }
        try {
            setFormat(json.getString("format"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("format","java.lang.String",e);
        }
        try {
            setDeckType(json.getInteger("deck_type"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("deck_type","java.lang.Integer",e);
        }
        try {
            setIsPremade(json.getBoolean("is_premade"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("is_premade","java.lang.Boolean",e);
        }
        try {
            setPermittedToDuplicate(json.getBoolean("permitted_to_duplicate"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("permitted_to_duplicate","java.lang.Boolean",e);
        }
        return this;
    }


    @Override
    public default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("id",getId());
        json.put("created_by",getCreatedBy());
        json.put("last_edited_by",getLastEditedBy());
        json.put("name",getName());
        json.put("hero_class",getHeroClass());
        json.put("trashed",getTrashed());
        json.put("format",getFormat());
        json.put("deck_type",getDeckType());
        json.put("is_premade",getIsPremade());
        json.put("permitted_to_duplicate",getPermittedToDuplicate());
        return json;
    }

}
