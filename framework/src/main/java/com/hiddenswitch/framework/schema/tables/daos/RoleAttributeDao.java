/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.daos;


import com.hiddenswitch.framework.schema.tables.RoleAttribute;
import com.hiddenswitch.framework.schema.tables.records.RoleAttributeRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleAttributeDao extends AbstractReactiveVertxDAO<RoleAttributeRecord, com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute, String, Future<List<com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute>>, Future<com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<RoleAttributeRecord,com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute,String> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public RoleAttributeDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(RoleAttribute.ROLE_ATTRIBUTE, com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute.class, new ReactiveClassicQueryExecutor<RoleAttributeRecord,com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute,String>(configuration,delegate,com.hiddenswitch.framework.schema.tables.mappers.RowMappers.getRoleAttributeMapper()));
    }

    @Override
    protected String getId(com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute object) {
        return object.getId();
    }

    /**
     * Find records that have <code>role_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute>> findManyByRoleId(Collection<String> values) {
        return findManyByCondition(RoleAttribute.ROLE_ATTRIBUTE.ROLE_ID.in(values));
    }

    /**
     * Find records that have <code>role_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute>> findManyByRoleId(Collection<String> values, int limit) {
        return findManyByCondition(RoleAttribute.ROLE_ATTRIBUTE.ROLE_ID.in(values),limit);
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute>> findManyByName(Collection<String> values) {
        return findManyByCondition(RoleAttribute.ROLE_ATTRIBUTE.NAME.in(values));
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(RoleAttribute.ROLE_ATTRIBUTE.NAME.in(values),limit);
    }

    /**
     * Find records that have <code>value IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute>> findManyByValue(Collection<String> values) {
        return findManyByCondition(RoleAttribute.ROLE_ATTRIBUTE.VALUE.in(values));
    }

    /**
     * Find records that have <code>value IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute>> findManyByValue(Collection<String> values, int limit) {
        return findManyByCondition(RoleAttribute.ROLE_ATTRIBUTE.VALUE.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<RoleAttributeRecord,com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute,String> queryExecutor(){
        return (ReactiveClassicQueryExecutor<RoleAttributeRecord,com.hiddenswitch.framework.schema.tables.pojos.RoleAttribute,String>) super.queryExecutor();
    }
}
