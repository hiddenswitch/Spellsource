/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.records;


import com.hiddenswitch.framework.schema.spellsource.tables.CardsInDeck;
import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.ICardsInDeck;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsInDeckRecord extends UpdatableRecordImpl<CardsInDeckRecord> implements VertxPojo, Record3<Long, String, String>, ICardsInDeck {

    private static final long serialVersionUID = -1751941125;

    /**
     * Setter for <code>spellsource.cards_in_deck.id</code>.
     */
    @Override
    public CardsInDeckRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards_in_deck.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>spellsource.cards_in_deck.deck_id</code>. deleting a deck deletes all its card references
     */
    @Override
    public CardsInDeckRecord setDeckId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards_in_deck.deck_id</code>. deleting a deck deletes all its card references
     */
    @Override
    public String getDeckId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>spellsource.cards_in_deck.card_id</code>. cannot delete cards that are currently used in decks
     */
    @Override
    public CardsInDeckRecord setCardId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards_in_deck.card_id</code>. cannot delete cards that are currently used in decks
     */
    @Override
    public String getCardId() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return CardsInDeck.CARDS_IN_DECK.ID;
    }

    @Override
    public Field<String> field2() {
        return CardsInDeck.CARDS_IN_DECK.DECK_ID;
    }

    @Override
    public Field<String> field3() {
        return CardsInDeck.CARDS_IN_DECK.CARD_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDeckId();
    }

    @Override
    public String component3() {
        return getCardId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDeckId();
    }

    @Override
    public String value3() {
        return getCardId();
    }

    @Override
    public CardsInDeckRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CardsInDeckRecord value2(String value) {
        setDeckId(value);
        return this;
    }

    @Override
    public CardsInDeckRecord value3(String value) {
        setCardId(value);
        return this;
    }

    @Override
    public CardsInDeckRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICardsInDeck from) {
        setId(from.getId());
        setDeckId(from.getDeckId());
        setCardId(from.getCardId());
    }

    @Override
    public <E extends ICardsInDeck> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CardsInDeckRecord
     */
    public CardsInDeckRecord() {
        super(CardsInDeck.CARDS_IN_DECK);
    }

    /**
     * Create a detached, initialised CardsInDeckRecord
     */
    public CardsInDeckRecord(Long id, String deckId, String cardId) {
        super(CardsInDeck.CARDS_IN_DECK);

        set(0, id);
        set(1, deckId);
        set(2, cardId);
    }

    public CardsInDeckRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
