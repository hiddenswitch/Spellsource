/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.daos;


import com.hiddenswitch.framework.schema.tables.Databasechangeloglock;
import com.hiddenswitch.framework.schema.tables.records.DatabasechangeloglockRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatabasechangeloglockDao extends AbstractReactiveVertxDAO<DatabasechangeloglockRecord, com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock, Integer, Future<List<com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock>>, Future<com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock>, Future<Integer>, Future<Integer>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DatabasechangeloglockRecord,com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public DatabasechangeloglockDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(Databasechangeloglock.DATABASECHANGELOGLOCK, com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock.class, new ReactiveClassicQueryExecutor<DatabasechangeloglockRecord,com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock,Integer>(configuration,delegate,com.hiddenswitch.framework.schema.tables.mappers.RowMappers.getDatabasechangeloglockMapper()));
    }

    @Override
    protected Integer getId(com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock object) {
        return object.getId();
    }

    /**
     * Find records that have <code>locked IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock>> findManyByLocked(Collection<Boolean> values) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKED.in(values));
    }

    /**
     * Find records that have <code>locked IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock>> findManyByLocked(Collection<Boolean> values, int limit) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKED.in(values),limit);
    }

    /**
     * Find records that have <code>lockgranted IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock>> findManyByLockgranted(Collection<LocalDateTime> values) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKGRANTED.in(values));
    }

    /**
     * Find records that have <code>lockgranted IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock>> findManyByLockgranted(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKGRANTED.in(values),limit);
    }

    /**
     * Find records that have <code>lockedby IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock>> findManyByLockedby(Collection<String> values) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKEDBY.in(values));
    }

    /**
     * Find records that have <code>lockedby IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock>> findManyByLockedby(Collection<String> values, int limit) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKEDBY.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<DatabasechangeloglockRecord,com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock,Integer> queryExecutor(){
        return (ReactiveClassicQueryExecutor<DatabasechangeloglockRecord,com.hiddenswitch.framework.schema.tables.pojos.Databasechangeloglock,Integer>) super.queryExecutor();
    }
}
