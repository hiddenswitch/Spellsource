/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables;


import com.hiddenswitch.framework.schema.Keys;
import com.hiddenswitch.framework.schema.Public;
import com.hiddenswitch.framework.schema.tables.records.ClientUserSessionNoteRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientUserSessionNote extends TableImpl<ClientUserSessionNoteRecord> {

    private static final long serialVersionUID = 718754407;

    /**
     * The reference instance of <code>public.client_user_session_note</code>
     */
    public static final ClientUserSessionNote CLIENT_USER_SESSION_NOTE = new ClientUserSessionNote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientUserSessionNoteRecord> getRecordType() {
        return ClientUserSessionNoteRecord.class;
    }

    /**
     * The column <code>public.client_user_session_note.name</code>.
     */
    public final TableField<ClientUserSessionNoteRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.client_user_session_note.value</code>.
     */
    public final TableField<ClientUserSessionNoteRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.client_user_session_note.client_session</code>.
     */
    public final TableField<ClientUserSessionNoteRecord, String> CLIENT_SESSION = createField(DSL.name("client_session"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * Create a <code>public.client_user_session_note</code> table reference
     */
    public ClientUserSessionNote() {
        this(DSL.name("client_user_session_note"), null);
    }

    /**
     * Create an aliased <code>public.client_user_session_note</code> table reference
     */
    public ClientUserSessionNote(String alias) {
        this(DSL.name(alias), CLIENT_USER_SESSION_NOTE);
    }

    /**
     * Create an aliased <code>public.client_user_session_note</code> table reference
     */
    public ClientUserSessionNote(Name alias) {
        this(alias, CLIENT_USER_SESSION_NOTE);
    }

    private ClientUserSessionNote(Name alias, Table<ClientUserSessionNoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientUserSessionNote(Name alias, Table<ClientUserSessionNoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ClientUserSessionNote(Table<O> child, ForeignKey<O, ClientUserSessionNoteRecord> key) {
        super(child, key, CLIENT_USER_SESSION_NOTE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClientUserSessionNoteRecord> getPrimaryKey() {
        return Keys.CONSTR_CL_USR_SES_NOTE;
    }

    @Override
    public List<UniqueKey<ClientUserSessionNoteRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientUserSessionNoteRecord>>asList(Keys.CONSTR_CL_USR_SES_NOTE);
    }

    @Override
    public List<ForeignKey<ClientUserSessionNoteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClientUserSessionNoteRecord, ?>>asList(Keys.CLIENT_USER_SESSION_NOTE__FK_CL_USR_SES_NOTE);
    }

    public ClientSession clientSession() {
        return new ClientSession(this, Keys.CLIENT_USER_SESSION_NOTE__FK_CL_USR_SES_NOTE);
    }

    @Override
    public ClientUserSessionNote as(String alias) {
        return new ClientUserSessionNote(DSL.name(alias), this);
    }

    @Override
    public ClientUserSessionNote as(Name alias) {
        return new ClientUserSessionNote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientUserSessionNote rename(String name) {
        return new ClientUserSessionNote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientUserSessionNote rename(Name name) {
        return new ClientUserSessionNote(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
