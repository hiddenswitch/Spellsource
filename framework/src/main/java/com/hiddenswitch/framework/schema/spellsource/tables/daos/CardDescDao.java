/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.daos;


import com.hiddenswitch.framework.schema.spellsource.tables.CardDesc;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardDescRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.JSONB;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * a particular instance of a card desc, which may be referenced by a card
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardDescDao extends AbstractReactiveVertxDAO<CardDescRecord, com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc, Long, Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc>>, Future<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<CardDescRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public CardDescDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(CardDesc.CARD_DESC, com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc.class, new ReactiveClassicQueryExecutor<CardDescRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc,Long>(configuration,delegate,com.hiddenswitch.framework.schema.spellsource.tables.mappers.RowMappers.getCardDescMapper()));
    }

    @Override
    protected Long getId(com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc object) {
        return object.getId();
    }

    /**
     * Find records that have <code>uri IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc>> findManyByUri(Collection<String> values) {
        return findManyByCondition(CardDesc.CARD_DESC.URI.in(values));
    }

    /**
     * Find records that have <code>uri IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc>> findManyByUri(Collection<String> values, int limit) {
        return findManyByCondition(CardDesc.CARD_DESC.URI.in(values),limit);
    }

    /**
     * Find records that have <code>blockly_workspace IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc>> findManyByBlocklyWorkspace(Collection<Object> values) {
        return findManyByCondition(CardDesc.CARD_DESC.BLOCKLY_WORKSPACE.in(values));
    }

    /**
     * Find records that have <code>blockly_workspace IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc>> findManyByBlocklyWorkspace(Collection<Object> values, int limit) {
        return findManyByCondition(CardDesc.CARD_DESC.BLOCKLY_WORKSPACE.in(values),limit);
    }

    /**
     * Find records that have <code>card_script IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc>> findManyByCardScript(Collection<JSONB> values) {
        return findManyByCondition(CardDesc.CARD_DESC.CARD_SCRIPT.in(values));
    }

    /**
     * Find records that have <code>card_script IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc>> findManyByCardScript(Collection<JSONB> values, int limit) {
        return findManyByCondition(CardDesc.CARD_DESC.CARD_SCRIPT.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<CardDescRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc,Long> queryExecutor(){
        return (ReactiveClassicQueryExecutor<CardDescRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardDesc,Long>) super.queryExecutor();
    }
}
