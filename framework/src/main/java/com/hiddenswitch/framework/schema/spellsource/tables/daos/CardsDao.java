/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.daos;


import com.hiddenswitch.framework.schema.spellsource.tables.Cards;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardsRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record2;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * references a card at a particular point in time
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsDao extends AbstractReactiveVertxDAO<CardsRecord, com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards, Record2<String, Long>, Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards>>, Future<com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards>, Future<Integer>, Future<Record2<String, Long>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<CardsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards,Record2<String, Long>> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public CardsDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(Cards.CARDS, com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards.class, new ReactiveClassicQueryExecutor<CardsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards,Record2<String, Long>>(configuration,delegate,com.hiddenswitch.framework.schema.spellsource.tables.mappers.RowMappers.getCardsMapper()));
    }

    @Override
    protected Record2<String, Long> getId(com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards object) {
        return compositeKeyRecord(object.getCardId(), object.getId());
    }

    /**
     * Find records that have <code>id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards>> findManyById(Collection<Long> values) {
        return findManyByCondition(Cards.CARDS.ID.in(values));
    }

    /**
     * Find records that have <code>id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards>> findManyById(Collection<Long> values, int limit) {
        return findManyByCondition(Cards.CARDS.ID.in(values),limit);
    }

    /**
     * Find records that have <code>card_desc IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards>> findManyByCardDesc(Collection<Long> values) {
        return findManyByCondition(Cards.CARDS.CARD_DESC.in(values));
    }

    /**
     * Find records that have <code>card_desc IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards>> findManyByCardDesc(Collection<Long> values, int limit) {
        return findManyByCondition(Cards.CARDS.CARD_DESC.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<CardsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards,Record2<String, Long>> queryExecutor(){
        return (ReactiveClassicQueryExecutor<CardsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards,Record2<String, Long>>) super.queryExecutor();
    }
}
