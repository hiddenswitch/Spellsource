/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ComponentRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Component extends TableImpl<ComponentRecord> {

    private static final long serialVersionUID = -216137083;

    /**
     * The reference instance of <code>keycloak.component</code>
     */
    public static final Component COMPONENT = new Component();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponentRecord> getRecordType() {
        return ComponentRecord.class;
    }

    /**
     * The column <code>keycloak.component.id</code>.
     */
    public final TableField<ComponentRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.component.name</code>.
     */
    public final TableField<ComponentRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.component.parent_id</code>.
     */
    public final TableField<ComponentRecord, String> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.component.provider_id</code>.
     */
    public final TableField<ComponentRecord, String> PROVIDER_ID = createField(DSL.name("provider_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.component.provider_type</code>.
     */
    public final TableField<ComponentRecord, String> PROVIDER_TYPE = createField(DSL.name("provider_type"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.component.realm_id</code>.
     */
    public final TableField<ComponentRecord, String> REALM_ID = createField(DSL.name("realm_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.component.sub_type</code>.
     */
    public final TableField<ComponentRecord, String> SUB_TYPE = createField(DSL.name("sub_type"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>keycloak.component</code> table reference
     */
    public Component() {
        this(DSL.name("component"), null);
    }

    /**
     * Create an aliased <code>keycloak.component</code> table reference
     */
    public Component(String alias) {
        this(DSL.name(alias), COMPONENT);
    }

    /**
     * Create an aliased <code>keycloak.component</code> table reference
     */
    public Component(Name alias) {
        this(alias, COMPONENT);
    }

    private Component(Name alias, Table<ComponentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Component(Name alias, Table<ComponentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Component(Table<O> child, ForeignKey<O, ComponentRecord> key) {
        super(child, key, COMPONENT);
    }

    @Override
    public Schema getSchema() {
        return Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_COMPONENT_PROVIDER_TYPE, Indexes.IDX_COMPONENT_REALM);
    }

    @Override
    public UniqueKey<ComponentRecord> getPrimaryKey() {
        return Keys.CONSTR_COMPONENT_PK;
    }

    @Override
    public List<UniqueKey<ComponentRecord>> getKeys() {
        return Arrays.<UniqueKey<ComponentRecord>>asList(Keys.CONSTR_COMPONENT_PK);
    }

    @Override
    public List<ForeignKey<ComponentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ComponentRecord, ?>>asList(Keys.COMPONENT__FK_COMPONENT_REALM);
    }

    public Realm realm() {
        return new Realm(this, Keys.COMPONENT__FK_COMPONENT_REALM);
    }

    @Override
    public Component as(String alias) {
        return new Component(DSL.name(alias), this);
    }

    @Override
    public Component as(Name alias) {
        return new Component(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(String name) {
        return new Component(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(Name name) {
        return new Component(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
