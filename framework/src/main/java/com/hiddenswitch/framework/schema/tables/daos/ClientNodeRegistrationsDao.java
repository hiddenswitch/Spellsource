/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.daos;


import com.hiddenswitch.framework.schema.tables.ClientNodeRegistrations;
import com.hiddenswitch.framework.schema.tables.records.ClientNodeRegistrationsRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record2;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientNodeRegistrationsDao extends AbstractReactiveVertxDAO<ClientNodeRegistrationsRecord, com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations, Record2<String, String>, Future<List<com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations>>, Future<com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations>, Future<Integer>, Future<Record2<String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<ClientNodeRegistrationsRecord,com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations,Record2<String, String>> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public ClientNodeRegistrationsDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS, com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations.class, new ReactiveClassicQueryExecutor<ClientNodeRegistrationsRecord,com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations,Record2<String, String>>(configuration,delegate,com.hiddenswitch.framework.schema.tables.mappers.RowMappers.getClientNodeRegistrationsMapper()));
    }

    @Override
    protected Record2<String, String> getId(com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations object) {
        return compositeKeyRecord(object.getClientId(), object.getName());
    }

    /**
     * Find records that have <code>value IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations>> findManyByValue(Collection<Integer> values) {
        return findManyByCondition(ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS.VALUE.in(values));
    }

    /**
     * Find records that have <code>value IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations>> findManyByValue(Collection<Integer> values, int limit) {
        return findManyByCondition(ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS.VALUE.in(values),limit);
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations>> findManyByName(Collection<String> values) {
        return findManyByCondition(ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS.NAME.in(values));
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS.NAME.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<ClientNodeRegistrationsRecord,com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations,Record2<String, String>> queryExecutor(){
        return (ReactiveClassicQueryExecutor<ClientNodeRegistrationsRecord,com.hiddenswitch.framework.schema.tables.pojos.ClientNodeRegistrations,Record2<String, String>>) super.queryExecutor();
    }
}
