/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.OfflineUserSessionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfflineUserSession extends TableImpl<OfflineUserSessionRecord> {

    private static final long serialVersionUID = -1055932884;

    /**
     * The reference instance of <code>keycloak.offline_user_session</code>
     */
    public static final OfflineUserSession OFFLINE_USER_SESSION = new OfflineUserSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfflineUserSessionRecord> getRecordType() {
        return OfflineUserSessionRecord.class;
    }

    /**
     * The column <code>keycloak.offline_user_session.user_session_id</code>.
     */
    public final TableField<OfflineUserSessionRecord, String> USER_SESSION_ID = createField(DSL.name("user_session_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.offline_user_session.user_id</code>.
     */
    public final TableField<OfflineUserSessionRecord, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.offline_user_session.realm_id</code>.
     */
    public final TableField<OfflineUserSessionRecord, String> REALM_ID = createField(DSL.name("realm_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.offline_user_session.last_session_refresh</code>.
     */
    public final TableField<OfflineUserSessionRecord, Integer> LAST_SESSION_REFRESH = createField(DSL.name("last_session_refresh"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>keycloak.offline_user_session.offline_flag</code>.
     */
    public final TableField<OfflineUserSessionRecord, String> OFFLINE_FLAG = createField(DSL.name("offline_flag"), org.jooq.impl.SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>keycloak.offline_user_session.data</code>.
     */
    public final TableField<OfflineUserSessionRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>keycloak.offline_user_session</code> table reference
     */
    public OfflineUserSession() {
        this(DSL.name("offline_user_session"), null);
    }

    /**
     * Create an aliased <code>keycloak.offline_user_session</code> table reference
     */
    public OfflineUserSession(String alias) {
        this(DSL.name(alias), OFFLINE_USER_SESSION);
    }

    /**
     * Create an aliased <code>keycloak.offline_user_session</code> table reference
     */
    public OfflineUserSession(Name alias) {
        this(alias, OFFLINE_USER_SESSION);
    }

    private OfflineUserSession(Name alias, Table<OfflineUserSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private OfflineUserSession(Name alias, Table<OfflineUserSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OfflineUserSession(Table<O> child, ForeignKey<O, OfflineUserSessionRecord> key) {
        super(child, key, OFFLINE_USER_SESSION);
    }

    @Override
    public Schema getSchema() {
        return Keycloak.KEYCLOAK;
    }

    @Override
    public UniqueKey<OfflineUserSessionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_OFFL_US_SES_PK2;
    }

    @Override
    public List<UniqueKey<OfflineUserSessionRecord>> getKeys() {
        return Arrays.<UniqueKey<OfflineUserSessionRecord>>asList(Keys.CONSTRAINT_OFFL_US_SES_PK2);
    }

    @Override
    public OfflineUserSession as(String alias) {
        return new OfflineUserSession(DSL.name(alias), this);
    }

    @Override
    public OfflineUserSession as(Name alias) {
        return new OfflineUserSession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OfflineUserSession rename(String name) {
        return new OfflineUserSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OfflineUserSession rename(Name name) {
        return new OfflineUserSession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, Integer, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
