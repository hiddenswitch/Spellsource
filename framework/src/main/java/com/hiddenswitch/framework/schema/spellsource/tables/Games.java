/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.enums.GameStateEnum;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GamesRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Games extends TableImpl<GamesRecord> {

    private static final long serialVersionUID = -1264995925;

    /**
     * The reference instance of <code>spellsource.games</code>
     */
    public static final Games GAMES = new Games();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GamesRecord> getRecordType() {
        return GamesRecord.class;
    }

    /**
     * The column <code>spellsource.games.id</code>.
     */
    public final TableField<GamesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spellsource.games.status</code>.
     */
    public final TableField<GamesRecord, GameStateEnum> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("'AWAITING_CONNECTIONS'::spellsource.game_state_enum", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.hiddenswitch.framework.schema.spellsource.enums.GameStateEnum.class), this, "");

    /**
     * The column <code>spellsource.games.git_hash</code>.
     */
    public final TableField<GamesRecord, String> GIT_HASH = createField(DSL.name("git_hash"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.games.trace</code>.
     */
    public final TableField<GamesRecord, JSONB> TRACE = createField(DSL.name("trace"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>spellsource.games.created_at</code>.
     */
    public final TableField<GamesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>spellsource.games</code> table reference
     */
    public Games() {
        this(DSL.name("games"), null);
    }

    /**
     * Create an aliased <code>spellsource.games</code> table reference
     */
    public Games(String alias) {
        this(DSL.name(alias), GAMES);
    }

    /**
     * Create an aliased <code>spellsource.games</code> table reference
     */
    public Games(Name alias) {
        this(alias, GAMES);
    }

    private Games(Name alias, Table<GamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Games(Name alias, Table<GamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Games(Table<O> child, ForeignKey<O, GamesRecord> key) {
        super(child, key, GAMES);
    }

    @Override
    public Schema getSchema() {
        return Spellsource.SPELLSOURCE;
    }

    @Override
    public Identity<GamesRecord, Long> getIdentity() {
        return Keys.IDENTITY_GAMES;
    }

    @Override
    public UniqueKey<GamesRecord> getPrimaryKey() {
        return Keys.GAMES_PKEY;
    }

    @Override
    public List<UniqueKey<GamesRecord>> getKeys() {
        return Arrays.<UniqueKey<GamesRecord>>asList(Keys.GAMES_PKEY);
    }

    @Override
    public Games as(String alias) {
        return new Games(DSL.name(alias), this);
    }

    @Override
    public Games as(Name alias) {
        return new Games(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Games rename(String name) {
        return new Games(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Games rename(Name name) {
        return new Games(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, GameStateEnum, String, JSONB, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
