/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.UserConsentClientScope;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IUserConsentClientScope;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserConsentClientScopeRecord extends UpdatableRecordImpl<UserConsentClientScopeRecord> implements VertxPojo, Record2<String, String>, IUserConsentClientScope {

    private static final long serialVersionUID = -1621471844;

    /**
     * Setter for <code>keycloak.user_consent_client_scope.user_consent_id</code>.
     */
    @Override
    public UserConsentClientScopeRecord setUserConsentId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent_client_scope.user_consent_id</code>.
     */
    @Override
    public String getUserConsentId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.user_consent_client_scope.scope_id</code>.
     */
    @Override
    public UserConsentClientScopeRecord setScopeId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent_client_scope.scope_id</code>.
     */
    @Override
    public String getScopeId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UserConsentClientScope.USER_CONSENT_CLIENT_SCOPE.USER_CONSENT_ID;
    }

    @Override
    public Field<String> field2() {
        return UserConsentClientScope.USER_CONSENT_CLIENT_SCOPE.SCOPE_ID;
    }

    @Override
    public String component1() {
        return getUserConsentId();
    }

    @Override
    public String component2() {
        return getScopeId();
    }

    @Override
    public String value1() {
        return getUserConsentId();
    }

    @Override
    public String value2() {
        return getScopeId();
    }

    @Override
    public UserConsentClientScopeRecord value1(String value) {
        setUserConsentId(value);
        return this;
    }

    @Override
    public UserConsentClientScopeRecord value2(String value) {
        setScopeId(value);
        return this;
    }

    @Override
    public UserConsentClientScopeRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserConsentClientScope from) {
        setUserConsentId(from.getUserConsentId());
        setScopeId(from.getScopeId());
    }

    @Override
    public <E extends IUserConsentClientScope> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserConsentClientScopeRecord
     */
    public UserConsentClientScopeRecord() {
        super(UserConsentClientScope.USER_CONSENT_CLIENT_SCOPE);
    }

    /**
     * Create a detached, initialised UserConsentClientScopeRecord
     */
    public UserConsentClientScopeRecord(String userConsentId, String scopeId) {
        super(UserConsentClientScope.USER_CONSENT_CLIENT_SCOPE);

        set(0, userConsentId);
        set(1, scopeId);
    }

    public UserConsentClientScopeRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
