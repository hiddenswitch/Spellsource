/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * references a card at a particular point in time
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cards extends TableImpl<CardsRecord> {

    private static final long serialVersionUID = -288520324;

    /**
     * The reference instance of <code>spellsource.cards</code>
     */
    public static final Cards CARDS = new Cards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsRecord> getRecordType() {
        return CardsRecord.class;
    }

    /**
     * The column <code>spellsource.cards.id</code>.
     */
    public final TableField<CardsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spellsource.cards.card_id</code>.
     */
    public final TableField<CardsRecord, String> CARD_ID = createField(DSL.name("card_id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.cards.card_desc</code>. mutable reference to a card_desc allowing the author to dy
     */
    public final TableField<CardsRecord, Long> CARD_DESC = createField(DSL.name("card_desc"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "mutable reference to a card_desc allowing the author to dy");

    /**
     * Create a <code>spellsource.cards</code> table reference
     */
    public Cards() {
        this(DSL.name("cards"), null);
    }

    /**
     * Create an aliased <code>spellsource.cards</code> table reference
     */
    public Cards(String alias) {
        this(DSL.name(alias), CARDS);
    }

    /**
     * Create an aliased <code>spellsource.cards</code> table reference
     */
    public Cards(Name alias) {
        this(alias, CARDS);
    }

    private Cards(Name alias, Table<CardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cards(Name alias, Table<CardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("references a card at a particular point in time"), TableOptions.table());
    }

    public <O extends Record> Cards(Table<O> child, ForeignKey<O, CardsRecord> key) {
        super(child, key, CARDS);
    }

    @Override
    public Schema getSchema() {
        return Spellsource.SPELLSOURCE;
    }

    @Override
    public Identity<CardsRecord, Long> getIdentity() {
        return Keys.IDENTITY_CARDS;
    }

    @Override
    public UniqueKey<CardsRecord> getPrimaryKey() {
        return Keys.CARDS_PKEY;
    }

    @Override
    public List<UniqueKey<CardsRecord>> getKeys() {
        return Arrays.<UniqueKey<CardsRecord>>asList(Keys.CARDS_PKEY);
    }

    @Override
    public List<ForeignKey<CardsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardsRecord, ?>>asList(Keys.CARDS__CARDS_CARD_DESC_FKEY);
    }

    public CardDesc cardDesc() {
        return new CardDesc(this, Keys.CARDS__CARDS_CARD_DESC_FKEY);
    }

    @Override
    public Cards as(String alias) {
        return new Cards(DSL.name(alias), this);
    }

    @Override
    public Cards as(Name alias) {
        return new Cards(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(String name) {
        return new Cards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(Name name) {
        return new Cards(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
