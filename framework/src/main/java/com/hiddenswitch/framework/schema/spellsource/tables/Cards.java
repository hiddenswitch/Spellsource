/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cards extends TableImpl<CardsRecord> {

    private static final long serialVersionUID = -814297314;

    /**
     * The reference instance of <code>spellsource.cards</code>
     */
    public static final Cards CARDS = new Cards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsRecord> getRecordType() {
        return CardsRecord.class;
    }

    /**
     * The column <code>spellsource.cards.id</code>.
     */
    public final TableField<CardsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.cards.created_by</code>.
     */
    public final TableField<CardsRecord, String> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>spellsource.cards.uri</code>.
     */
    public final TableField<CardsRecord, String> URI = createField(DSL.name("uri"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<CardsRecord, Object> BLOCKLY_WORKSPACE = createField(DSL.name("blockly_workspace"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"xml\""), this, "");

    /**
     * The column <code>spellsource.cards.card_script</code>.
     */
    public final TableField<CardsRecord, JSONB> CARD_SCRIPT = createField(DSL.name("card_script"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>spellsource.cards.created_at</code>.
     */
    public final TableField<CardsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>spellsource.cards.last_modified</code>.
     */
    public final TableField<CardsRecord, OffsetDateTime> LAST_MODIFIED = createField(DSL.name("last_modified"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>spellsource.cards</code> table reference
     */
    public Cards() {
        this(DSL.name("cards"), null);
    }

    /**
     * Create an aliased <code>spellsource.cards</code> table reference
     */
    public Cards(String alias) {
        this(DSL.name(alias), CARDS);
    }

    /**
     * Create an aliased <code>spellsource.cards</code> table reference
     */
    public Cards(Name alias) {
        this(alias, CARDS);
    }

    private Cards(Name alias, Table<CardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cards(Name alias, Table<CardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Cards(Table<O> child, ForeignKey<O, CardsRecord> key) {
        super(child, key, CARDS);
    }

    @Override
    public Schema getSchema() {
        return Spellsource.SPELLSOURCE;
    }

    @Override
    public UniqueKey<CardsRecord> getPrimaryKey() {
        return Keys.CARDS_PKEY;
    }

    @Override
    public List<UniqueKey<CardsRecord>> getKeys() {
        return Arrays.<UniqueKey<CardsRecord>>asList(Keys.CARDS_PKEY);
    }

    @Override
    public List<ForeignKey<CardsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardsRecord, ?>>asList(Keys.CARDS__CARDS_CREATED_BY_FKEY);
    }

    public UserEntity userEntity() {
        return new UserEntity(this, Keys.CARDS__CARDS_CREATED_BY_FKEY);
    }

    @Override
    public Cards as(String alias) {
        return new Cards(DSL.name(alias), this);
    }

    @Override
    public Cards as(Name alias) {
        return new Cards(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(String name) {
        return new Cards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(Name name) {
        return new Cards(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Object, JSONB, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
