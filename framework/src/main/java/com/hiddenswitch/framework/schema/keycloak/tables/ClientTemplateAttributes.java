/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientTemplateAttributesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientTemplateAttributes extends TableImpl<ClientTemplateAttributesRecord> {

    private static final long serialVersionUID = -1108216170;

    /**
     * The reference instance of <code>keycloak.client_template_attributes</code>
     */
    public static final ClientTemplateAttributes CLIENT_TEMPLATE_ATTRIBUTES = new ClientTemplateAttributes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientTemplateAttributesRecord> getRecordType() {
        return ClientTemplateAttributesRecord.class;
    }

    /**
     * Create a <code>keycloak.client_template_attributes</code> table reference
     */
    public ClientTemplateAttributes() {
        this(DSL.name("client_template_attributes"), null);
    }

    /**
     * Create an aliased <code>keycloak.client_template_attributes</code> table reference
     */
    public ClientTemplateAttributes(String alias) {
        this(DSL.name(alias), CLIENT_TEMPLATE_ATTRIBUTES);
    }

    /**
     * Create an aliased <code>keycloak.client_template_attributes</code> table reference
     */
    public ClientTemplateAttributes(Name alias) {
        this(alias, CLIENT_TEMPLATE_ATTRIBUTES);
    }

    private ClientTemplateAttributes(Name alias, Table<ClientTemplateAttributesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientTemplateAttributes(Name alias, Table<ClientTemplateAttributesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ClientTemplateAttributes(Table<O> child, ForeignKey<O, ClientTemplateAttributesRecord> key) {
        super(child, key, CLIENT_TEMPLATE_ATTRIBUTES);
    }

    @Override
    public Schema getSchema() {
        return Keycloak.KEYCLOAK;
    }

    @Override
    public ClientTemplateAttributes as(String alias) {
        return new ClientTemplateAttributes(DSL.name(alias), this);
    }

    @Override
    public ClientTemplateAttributes as(Name alias) {
        return new ClientTemplateAttributes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientTemplateAttributes rename(String name) {
        return new ClientTemplateAttributes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientTemplateAttributes rename(Name name) {
        return new ClientTemplateAttributes(name, null);
    }
}
