/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IFedUserConsentClScope;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FedUserConsentClScope implements VertxPojo, IFedUserConsentClScope {

    private static final long serialVersionUID = -144381041;

    private String userConsentId;
    private String scopeId;

    public FedUserConsentClScope() {}

    public FedUserConsentClScope(IFedUserConsentClScope value) {
        this.userConsentId = value.getUserConsentId();
        this.scopeId = value.getScopeId();
    }

    public FedUserConsentClScope(
        String userConsentId,
        String scopeId
    ) {
        this.userConsentId = userConsentId;
        this.scopeId = scopeId;
    }

    public FedUserConsentClScope(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    @Override
    public String getUserConsentId() {
        return this.userConsentId;
    }

    @Override
    public FedUserConsentClScope setUserConsentId(String userConsentId) {
        this.userConsentId = userConsentId;
        return this;
    }

    @Override
    public String getScopeId() {
        return this.scopeId;
    }

    @Override
    public FedUserConsentClScope setScopeId(String scopeId) {
        this.scopeId = scopeId;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FedUserConsentClScope (");

        sb.append(userConsentId);
        sb.append(", ").append(scopeId);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IFedUserConsentClScope from) {
        setUserConsentId(from.getUserConsentId());
        setScopeId(from.getScopeId());
    }

    @Override
    public <E extends IFedUserConsentClScope> E into(E into) {
        into.from(this);
        return into;
    }
}
