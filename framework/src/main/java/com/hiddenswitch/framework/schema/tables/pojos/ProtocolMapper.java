/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.pojos;


import com.hiddenswitch.framework.schema.tables.interfaces.IProtocolMapper;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProtocolMapper implements VertxPojo, IProtocolMapper {

    private static final long serialVersionUID = -1906810086;

    private String id;
    private String name;
    private String protocol;
    private String protocolMapperName;
    private String clientId;
    private String clientScopeId;

    public ProtocolMapper() {}

    public ProtocolMapper(IProtocolMapper value) {
        this.id = value.getId();
        this.name = value.getName();
        this.protocol = value.getProtocol();
        this.protocolMapperName = value.getProtocolMapperName();
        this.clientId = value.getClientId();
        this.clientScopeId = value.getClientScopeId();
    }

    public ProtocolMapper(
        String id,
        String name,
        String protocol,
        String protocolMapperName,
        String clientId,
        String clientScopeId
    ) {
        this.id = id;
        this.name = name;
        this.protocol = protocol;
        this.protocolMapperName = protocolMapperName;
        this.clientId = clientId;
        this.clientScopeId = clientScopeId;
    }

    public ProtocolMapper(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    public ProtocolMapper setId(String id) {
        this.id = id;
        return this;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public ProtocolMapper setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public String getProtocol() {
        return this.protocol;
    }

    @Override
    public ProtocolMapper setProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    @Override
    public String getProtocolMapperName() {
        return this.protocolMapperName;
    }

    @Override
    public ProtocolMapper setProtocolMapperName(String protocolMapperName) {
        this.protocolMapperName = protocolMapperName;
        return this;
    }

    @Override
    public String getClientId() {
        return this.clientId;
    }

    @Override
    public ProtocolMapper setClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    @Override
    public String getClientScopeId() {
        return this.clientScopeId;
    }

    @Override
    public ProtocolMapper setClientScopeId(String clientScopeId) {
        this.clientScopeId = clientScopeId;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ProtocolMapper (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(protocol);
        sb.append(", ").append(protocolMapperName);
        sb.append(", ").append(clientId);
        sb.append(", ").append(clientScopeId);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IProtocolMapper from) {
        setId(from.getId());
        setName(from.getName());
        setProtocol(from.getProtocol());
        setProtocolMapperName(from.getProtocolMapperName());
        setClientId(from.getClientId());
        setClientScopeId(from.getClientScopeId());
    }

    @Override
    public <E extends IProtocolMapper> E into(E into) {
        into.from(this);
        return into;
    }
}
