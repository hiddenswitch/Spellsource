/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables;


import com.hiddenswitch.framework.schema.Indexes;
import com.hiddenswitch.framework.schema.Keys;
import com.hiddenswitch.framework.schema.Public;
import com.hiddenswitch.framework.schema.tables.records.RealmSupportedLocalesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RealmSupportedLocales extends TableImpl<RealmSupportedLocalesRecord> {

    private static final long serialVersionUID = -1235536012;

    /**
     * The reference instance of <code>public.realm_supported_locales</code>
     */
    public static final RealmSupportedLocales REALM_SUPPORTED_LOCALES = new RealmSupportedLocales();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RealmSupportedLocalesRecord> getRecordType() {
        return RealmSupportedLocalesRecord.class;
    }

    /**
     * The column <code>public.realm_supported_locales.realm_id</code>.
     */
    public final TableField<RealmSupportedLocalesRecord, String> REALM_ID = createField(DSL.name("realm_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.realm_supported_locales.value</code>.
     */
    public final TableField<RealmSupportedLocalesRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.realm_supported_locales</code> table reference
     */
    public RealmSupportedLocales() {
        this(DSL.name("realm_supported_locales"), null);
    }

    /**
     * Create an aliased <code>public.realm_supported_locales</code> table reference
     */
    public RealmSupportedLocales(String alias) {
        this(DSL.name(alias), REALM_SUPPORTED_LOCALES);
    }

    /**
     * Create an aliased <code>public.realm_supported_locales</code> table reference
     */
    public RealmSupportedLocales(Name alias) {
        this(alias, REALM_SUPPORTED_LOCALES);
    }

    private RealmSupportedLocales(Name alias, Table<RealmSupportedLocalesRecord> aliased) {
        this(alias, aliased, null);
    }

    private RealmSupportedLocales(Name alias, Table<RealmSupportedLocalesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RealmSupportedLocales(Table<O> child, ForeignKey<O, RealmSupportedLocalesRecord> key) {
        super(child, key, REALM_SUPPORTED_LOCALES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_REALM_SUPP_LOCAL_REALM);
    }

    @Override
    public UniqueKey<RealmSupportedLocalesRecord> getPrimaryKey() {
        return Keys.CONSTR_REALM_SUPPORTED_LOCALES;
    }

    @Override
    public List<UniqueKey<RealmSupportedLocalesRecord>> getKeys() {
        return Arrays.<UniqueKey<RealmSupportedLocalesRecord>>asList(Keys.CONSTR_REALM_SUPPORTED_LOCALES);
    }

    @Override
    public List<ForeignKey<RealmSupportedLocalesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RealmSupportedLocalesRecord, ?>>asList(Keys.REALM_SUPPORTED_LOCALES__FK_SUPPORTED_LOCALES_REALM);
    }

    public Realm realm() {
        return new Realm(this, Keys.REALM_SUPPORTED_LOCALES__FK_SUPPORTED_LOCALES_REALM);
    }

    @Override
    public RealmSupportedLocales as(String alias) {
        return new RealmSupportedLocales(DSL.name(alias), this);
    }

    @Override
    public RealmSupportedLocales as(Name alias) {
        return new RealmSupportedLocales(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RealmSupportedLocales rename(String name) {
        return new RealmSupportedLocales(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RealmSupportedLocales rename(Name name) {
        return new RealmSupportedLocales(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
