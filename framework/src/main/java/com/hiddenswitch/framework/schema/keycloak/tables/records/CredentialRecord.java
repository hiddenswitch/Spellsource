/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.Credential;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.ICredential;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CredentialRecord extends UpdatableRecordImpl<CredentialRecord> implements VertxPojo, Record12<String, String, Integer, byte[], String, String, String, Long, Integer, Integer, Integer, String>, ICredential {

    private static final long serialVersionUID = 1518329066;

    /**
     * Setter for <code>keycloak.credential.id</code>.
     */
    @Override
    public CredentialRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.credential.device</code>.
     */
    @Override
    public CredentialRecord setDevice(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.device</code>.
     */
    @Override
    public String getDevice() {
        return (String) get(1);
    }

    /**
     * Setter for <code>keycloak.credential.hash_iterations</code>.
     */
    @Override
    public CredentialRecord setHashIterations(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.hash_iterations</code>.
     */
    @Override
    public Integer getHashIterations() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>keycloak.credential.salt</code>.
     */
    @Override
    public CredentialRecord setSalt(byte[] value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.salt</code>.
     */
    @Override
    public byte[] getSalt() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>keycloak.credential.type</code>.
     */
    @Override
    public CredentialRecord setType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.type</code>.
     */
    @Override
    public String getType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>keycloak.credential.value</code>.
     */
    @Override
    public CredentialRecord setValue(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.value</code>.
     */
    @Override
    public String getValue() {
        return (String) get(5);
    }

    /**
     * Setter for <code>keycloak.credential.user_id</code>.
     */
    @Override
    public CredentialRecord setUserId(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.user_id</code>.
     */
    @Override
    public String getUserId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>keycloak.credential.created_date</code>.
     */
    @Override
    public CredentialRecord setCreatedDate(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.created_date</code>.
     */
    @Override
    public Long getCreatedDate() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>keycloak.credential.counter</code>.
     */
    @Override
    public CredentialRecord setCounter(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.counter</code>.
     */
    @Override
    public Integer getCounter() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>keycloak.credential.digits</code>.
     */
    @Override
    public CredentialRecord setDigits(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.digits</code>.
     */
    @Override
    public Integer getDigits() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>keycloak.credential.period</code>.
     */
    @Override
    public CredentialRecord setPeriod(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.period</code>.
     */
    @Override
    public Integer getPeriod() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>keycloak.credential.algorithm</code>.
     */
    @Override
    public CredentialRecord setAlgorithm(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.credential.algorithm</code>.
     */
    @Override
    public String getAlgorithm() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, Integer, byte[], String, String, String, Long, Integer, Integer, Integer, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<String, String, Integer, byte[], String, String, String, Long, Integer, Integer, Integer, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Credential.CREDENTIAL.ID;
    }

    @Override
    public Field<String> field2() {
        return Credential.CREDENTIAL.DEVICE;
    }

    @Override
    public Field<Integer> field3() {
        return Credential.CREDENTIAL.HASH_ITERATIONS;
    }

    @Override
    public Field<byte[]> field4() {
        return Credential.CREDENTIAL.SALT;
    }

    @Override
    public Field<String> field5() {
        return Credential.CREDENTIAL.TYPE;
    }

    @Override
    public Field<String> field6() {
        return Credential.CREDENTIAL.VALUE;
    }

    @Override
    public Field<String> field7() {
        return Credential.CREDENTIAL.USER_ID;
    }

    @Override
    public Field<Long> field8() {
        return Credential.CREDENTIAL.CREATED_DATE;
    }

    @Override
    public Field<Integer> field9() {
        return Credential.CREDENTIAL.COUNTER;
    }

    @Override
    public Field<Integer> field10() {
        return Credential.CREDENTIAL.DIGITS;
    }

    @Override
    public Field<Integer> field11() {
        return Credential.CREDENTIAL.PERIOD;
    }

    @Override
    public Field<String> field12() {
        return Credential.CREDENTIAL.ALGORITHM;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDevice();
    }

    @Override
    public Integer component3() {
        return getHashIterations();
    }

    @Override
    public byte[] component4() {
        return getSalt();
    }

    @Override
    public String component5() {
        return getType();
    }

    @Override
    public String component6() {
        return getValue();
    }

    @Override
    public String component7() {
        return getUserId();
    }

    @Override
    public Long component8() {
        return getCreatedDate();
    }

    @Override
    public Integer component9() {
        return getCounter();
    }

    @Override
    public Integer component10() {
        return getDigits();
    }

    @Override
    public Integer component11() {
        return getPeriod();
    }

    @Override
    public String component12() {
        return getAlgorithm();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDevice();
    }

    @Override
    public Integer value3() {
        return getHashIterations();
    }

    @Override
    public byte[] value4() {
        return getSalt();
    }

    @Override
    public String value5() {
        return getType();
    }

    @Override
    public String value6() {
        return getValue();
    }

    @Override
    public String value7() {
        return getUserId();
    }

    @Override
    public Long value8() {
        return getCreatedDate();
    }

    @Override
    public Integer value9() {
        return getCounter();
    }

    @Override
    public Integer value10() {
        return getDigits();
    }

    @Override
    public Integer value11() {
        return getPeriod();
    }

    @Override
    public String value12() {
        return getAlgorithm();
    }

    @Override
    public CredentialRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public CredentialRecord value2(String value) {
        setDevice(value);
        return this;
    }

    @Override
    public CredentialRecord value3(Integer value) {
        setHashIterations(value);
        return this;
    }

    @Override
    public CredentialRecord value4(byte[] value) {
        setSalt(value);
        return this;
    }

    @Override
    public CredentialRecord value5(String value) {
        setType(value);
        return this;
    }

    @Override
    public CredentialRecord value6(String value) {
        setValue(value);
        return this;
    }

    @Override
    public CredentialRecord value7(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public CredentialRecord value8(Long value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public CredentialRecord value9(Integer value) {
        setCounter(value);
        return this;
    }

    @Override
    public CredentialRecord value10(Integer value) {
        setDigits(value);
        return this;
    }

    @Override
    public CredentialRecord value11(Integer value) {
        setPeriod(value);
        return this;
    }

    @Override
    public CredentialRecord value12(String value) {
        setAlgorithm(value);
        return this;
    }

    @Override
    public CredentialRecord values(String value1, String value2, Integer value3, byte[] value4, String value5, String value6, String value7, Long value8, Integer value9, Integer value10, Integer value11, String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICredential from) {
        setId(from.getId());
        setDevice(from.getDevice());
        setHashIterations(from.getHashIterations());
        setSalt(from.getSalt());
        setType(from.getType());
        setValue(from.getValue());
        setUserId(from.getUserId());
        setCreatedDate(from.getCreatedDate());
        setCounter(from.getCounter());
        setDigits(from.getDigits());
        setPeriod(from.getPeriod());
        setAlgorithm(from.getAlgorithm());
    }

    @Override
    public <E extends ICredential> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CredentialRecord
     */
    public CredentialRecord() {
        super(Credential.CREDENTIAL);
    }

    /**
     * Create a detached, initialised CredentialRecord
     */
    public CredentialRecord(String id, String device, Integer hashIterations, byte[] salt, String type, String value, String userId, Long createdDate, Integer counter, Integer digits, Integer period, String algorithm) {
        super(Credential.CREDENTIAL);

        set(0, id);
        set(1, device);
        set(2, hashIterations);
        set(3, salt);
        set(4, type);
        set(5, value);
        set(6, userId);
        set(7, createdDate);
        set(8, counter);
        set(9, digits);
        set(10, period);
        set(11, algorithm);
    }

    public CredentialRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
