/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.daos;


import com.hiddenswitch.framework.schema.spellsource.tables.CardsInDeck;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardsInDeckRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsInDeckDao extends AbstractReactiveVertxDAO<CardsInDeckRecord, com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck, Long, Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck>>, Future<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<CardsInDeckRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public CardsInDeckDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(CardsInDeck.CARDS_IN_DECK, com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck.class, new ReactiveClassicQueryExecutor<CardsInDeckRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck,Long>(configuration,delegate,com.hiddenswitch.framework.schema.spellsource.tables.mappers.RowMappers.getCardsInDeckMapper()));
    }

    @Override
    protected Long getId(com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck object) {
        return object.getId();
    }

    /**
     * Find records that have <code>deck_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck>> findManyByDeckId(Collection<Long> values) {
        return findManyByCondition(CardsInDeck.CARDS_IN_DECK.DECK_ID.in(values));
    }

    /**
     * Find records that have <code>deck_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck>> findManyByDeckId(Collection<Long> values, int limit) {
        return findManyByCondition(CardsInDeck.CARDS_IN_DECK.DECK_ID.in(values),limit);
    }

    /**
     * Find records that have <code>card_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck>> findManyByCardId(Collection<String> values) {
        return findManyByCondition(CardsInDeck.CARDS_IN_DECK.CARD_ID.in(values));
    }

    /**
     * Find records that have <code>card_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck>> findManyByCardId(Collection<String> values, int limit) {
        return findManyByCondition(CardsInDeck.CARDS_IN_DECK.CARD_ID.in(values),limit);
    }

    /**
     * Find records that have <code>version IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck>> findManyByVersion(Collection<Long> values) {
        return findManyByCondition(CardsInDeck.CARDS_IN_DECK.VERSION.in(values));
    }

    /**
     * Find records that have <code>version IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck>> findManyByVersion(Collection<Long> values, int limit) {
        return findManyByCondition(CardsInDeck.CARDS_IN_DECK.VERSION.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<CardsInDeckRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck,Long> queryExecutor(){
        return (ReactiveClassicQueryExecutor<CardsInDeckRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.CardsInDeck,Long>) super.queryExecutor();
    }
}
