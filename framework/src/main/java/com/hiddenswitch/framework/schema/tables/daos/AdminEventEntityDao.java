/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.daos;


import com.hiddenswitch.framework.schema.tables.AdminEventEntity;
import com.hiddenswitch.framework.schema.tables.records.AdminEventEntityRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminEventEntityDao extends AbstractReactiveVertxDAO<AdminEventEntityRecord, com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity, String, Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>>, Future<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<AdminEventEntityRecord,com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity,String> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public AdminEventEntityDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(AdminEventEntity.ADMIN_EVENT_ENTITY, com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity.class, new ReactiveClassicQueryExecutor<AdminEventEntityRecord,com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity,String>(configuration,delegate,com.hiddenswitch.framework.schema.tables.mappers.RowMappers.getAdminEventEntityMapper()));
    }

    @Override
    protected String getId(com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity object) {
        return object.getId();
    }

    /**
     * Find records that have <code>admin_event_time IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByAdminEventTime(Collection<Long> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.ADMIN_EVENT_TIME.in(values));
    }

    /**
     * Find records that have <code>admin_event_time IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByAdminEventTime(Collection<Long> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.ADMIN_EVENT_TIME.in(values),limit);
    }

    /**
     * Find records that have <code>realm_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByRealmId(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.REALM_ID.in(values));
    }

    /**
     * Find records that have <code>realm_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByRealmId(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.REALM_ID.in(values),limit);
    }

    /**
     * Find records that have <code>operation_type IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByOperationType(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.OPERATION_TYPE.in(values));
    }

    /**
     * Find records that have <code>operation_type IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByOperationType(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.OPERATION_TYPE.in(values),limit);
    }

    /**
     * Find records that have <code>auth_realm_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByAuthRealmId(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.AUTH_REALM_ID.in(values));
    }

    /**
     * Find records that have <code>auth_realm_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByAuthRealmId(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.AUTH_REALM_ID.in(values),limit);
    }

    /**
     * Find records that have <code>auth_client_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByAuthClientId(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.AUTH_CLIENT_ID.in(values));
    }

    /**
     * Find records that have <code>auth_client_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByAuthClientId(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.AUTH_CLIENT_ID.in(values),limit);
    }

    /**
     * Find records that have <code>auth_user_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByAuthUserId(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.AUTH_USER_ID.in(values));
    }

    /**
     * Find records that have <code>auth_user_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByAuthUserId(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.AUTH_USER_ID.in(values),limit);
    }

    /**
     * Find records that have <code>ip_address IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByIpAddress(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.IP_ADDRESS.in(values));
    }

    /**
     * Find records that have <code>ip_address IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByIpAddress(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.IP_ADDRESS.in(values),limit);
    }

    /**
     * Find records that have <code>resource_path IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByResourcePath(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.RESOURCE_PATH.in(values));
    }

    /**
     * Find records that have <code>resource_path IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByResourcePath(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.RESOURCE_PATH.in(values),limit);
    }

    /**
     * Find records that have <code>representation IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByRepresentation(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.REPRESENTATION.in(values));
    }

    /**
     * Find records that have <code>representation IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByRepresentation(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.REPRESENTATION.in(values),limit);
    }

    /**
     * Find records that have <code>error IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByError(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.ERROR.in(values));
    }

    /**
     * Find records that have <code>error IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByError(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.ERROR.in(values),limit);
    }

    /**
     * Find records that have <code>resource_type IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByResourceType(Collection<String> values) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.RESOURCE_TYPE.in(values));
    }

    /**
     * Find records that have <code>resource_type IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity>> findManyByResourceType(Collection<String> values, int limit) {
        return findManyByCondition(AdminEventEntity.ADMIN_EVENT_ENTITY.RESOURCE_TYPE.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<AdminEventEntityRecord,com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity,String> queryExecutor(){
        return (ReactiveClassicQueryExecutor<AdminEventEntityRecord,com.hiddenswitch.framework.schema.tables.pojos.AdminEventEntity,String>) super.queryExecutor();
    }
}
