/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Indexes;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.DecksRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Decks extends TableImpl<DecksRecord> {

    private static final long serialVersionUID = -110008032;

    /**
     * The reference instance of <code>spellsource.decks</code>
     */
    public static final Decks DECKS = new Decks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DecksRecord> getRecordType() {
        return DecksRecord.class;
    }

    /**
     * The column <code>spellsource.decks.id</code>.
     */
    public final TableField<DecksRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.decks.created_by</code>. who created this deck originally
     */
    public final TableField<DecksRecord, String> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "who created this deck originally");

    /**
     * The column <code>spellsource.decks.last_edited_by</code>. who last edited this deck
     */
    public final TableField<DecksRecord, String> LAST_EDITED_BY = createField(DSL.name("last_edited_by"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "who last edited this deck");

    /**
     * The column <code>spellsource.decks.name</code>.
     */
    public final TableField<DecksRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>spellsource.decks.hero_class</code>.
     */
    public final TableField<DecksRecord, String> HERO_CLASS = createField(DSL.name("hero_class"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>spellsource.decks.trashed</code>.
     */
    public final TableField<DecksRecord, Boolean> TRASHED = createField(DSL.name("trashed"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>spellsource.decks.format</code>.
     */
    public final TableField<DecksRecord, String> FORMAT = createField(DSL.name("format"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.decks.deck_type</code>.
     */
    public final TableField<DecksRecord, Integer> DECK_TYPE = createField(DSL.name("deck_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>spellsource.decks.is_premade</code>.
     */
    public final TableField<DecksRecord, Boolean> IS_PREMADE = createField(DSL.name("is_premade"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>spellsource.decks.permitted_to_duplicate</code>.
     */
    public final TableField<DecksRecord, Boolean> PERMITTED_TO_DUPLICATE = createField(DSL.name("permitted_to_duplicate"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>spellsource.decks</code> table reference
     */
    public Decks() {
        this(DSL.name("decks"), null);
    }

    /**
     * Create an aliased <code>spellsource.decks</code> table reference
     */
    public Decks(String alias) {
        this(DSL.name(alias), DECKS);
    }

    /**
     * Create an aliased <code>spellsource.decks</code> table reference
     */
    public Decks(Name alias) {
        this(alias, DECKS);
    }

    private Decks(Name alias, Table<DecksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Decks(Name alias, Table<DecksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Decks(Table<O> child, ForeignKey<O, DecksRecord> key) {
        super(child, key, DECKS);
    }

    @Override
    public Schema getSchema() {
        return Spellsource.SPELLSOURCE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DECKS_CREATED_BY_IDX);
    }

    @Override
    public UniqueKey<DecksRecord> getPrimaryKey() {
        return Keys.DECKS_PKEY;
    }

    @Override
    public List<UniqueKey<DecksRecord>> getKeys() {
        return Arrays.<UniqueKey<DecksRecord>>asList(Keys.DECKS_PKEY);
    }

    @Override
    public List<ForeignKey<DecksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DecksRecord, ?>>asList(Keys.DECKS__DECKS_CREATED_BY_FKEY, Keys.DECKS__DECKS_LAST_EDITED_BY_FKEY);
    }

    public UserEntity decksCreatedByFkey() {
        return new UserEntity(this, Keys.DECKS__DECKS_CREATED_BY_FKEY);
    }

    public UserEntity decksLastEditedByFkey() {
        return new UserEntity(this, Keys.DECKS__DECKS_LAST_EDITED_BY_FKEY);
    }

    @Override
    public Decks as(String alias) {
        return new Decks(DSL.name(alias), this);
    }

    @Override
    public Decks as(Name alias) {
        return new Decks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Decks rename(String name) {
        return new Decks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Decks rename(Name name) {
        return new Decks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, Boolean, String, Integer, Boolean, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
