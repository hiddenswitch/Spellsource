/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardDescRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * a particular instance of a card desc, which may be referenced by a card
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardDesc extends TableImpl<CardDescRecord> {

    private static final long serialVersionUID = 2048676579;

    /**
     * The reference instance of <code>spellsource.card_desc</code>
     */
    public static final CardDesc CARD_DESC = new CardDesc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardDescRecord> getRecordType() {
        return CardDescRecord.class;
    }

    /**
     * The column <code>spellsource.card_desc.id</code>.
     */
    public final TableField<CardDescRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spellsource.card_desc.uri</code>.
     */
    public final TableField<CardDescRecord, String> URI = createField(DSL.name("uri"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<CardDescRecord, Object> BLOCKLY_WORKSPACE = createField(DSL.name("blockly_workspace"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"xml\""), this, "");

    /**
     * The column <code>spellsource.card_desc.card_script</code>.
     */
    public final TableField<CardDescRecord, JSONB> CARD_SCRIPT = createField(DSL.name("card_script"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * Create a <code>spellsource.card_desc</code> table reference
     */
    public CardDesc() {
        this(DSL.name("card_desc"), null);
    }

    /**
     * Create an aliased <code>spellsource.card_desc</code> table reference
     */
    public CardDesc(String alias) {
        this(DSL.name(alias), CARD_DESC);
    }

    /**
     * Create an aliased <code>spellsource.card_desc</code> table reference
     */
    public CardDesc(Name alias) {
        this(alias, CARD_DESC);
    }

    private CardDesc(Name alias, Table<CardDescRecord> aliased) {
        this(alias, aliased, null);
    }

    private CardDesc(Name alias, Table<CardDescRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("a particular instance of a card desc, which may be referenced by a card"), TableOptions.table());
    }

    public <O extends Record> CardDesc(Table<O> child, ForeignKey<O, CardDescRecord> key) {
        super(child, key, CARD_DESC);
    }

    @Override
    public Schema getSchema() {
        return Spellsource.SPELLSOURCE;
    }

    @Override
    public Identity<CardDescRecord, Long> getIdentity() {
        return Keys.IDENTITY_CARD_DESC;
    }

    @Override
    public UniqueKey<CardDescRecord> getPrimaryKey() {
        return Keys.CARD_DESC_PKEY;
    }

    @Override
    public List<UniqueKey<CardDescRecord>> getKeys() {
        return Arrays.<UniqueKey<CardDescRecord>>asList(Keys.CARD_DESC_PKEY);
    }

    @Override
    public CardDesc as(String alias) {
        return new CardDesc(DSL.name(alias), this);
    }

    @Override
    public CardDesc as(Name alias) {
        return new CardDesc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CardDesc rename(String name) {
        return new CardDesc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CardDesc rename(Name name) {
        return new CardDesc(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Object, JSONB> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
