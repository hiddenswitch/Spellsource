/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.daos;


import com.hiddenswitch.framework.schema.spellsource.tables.MatchmakingTickets;
import com.hiddenswitch.framework.schema.spellsource.tables.records.MatchmakingTicketsRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MatchmakingTicketsDao extends AbstractReactiveVertxDAO<MatchmakingTicketsRecord, com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets, Long, Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>>, Future<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<MatchmakingTicketsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets,Long> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public MatchmakingTicketsDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
        super(MatchmakingTickets.MATCHMAKING_TICKETS, com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets.class, new ReactiveClassicQueryExecutor<MatchmakingTicketsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets,Long>(configuration,delegate,com.hiddenswitch.framework.schema.spellsource.tables.mappers.RowMappers.getMatchmakingTicketsMapper()));
    }

    @Override
    protected Long getId(com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets object) {
        return object.getId();
    }

    /**
     * Find records that have <code>queue_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByQueueId(Collection<String> values) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.QUEUE_ID.in(values));
    }

    /**
     * Find records that have <code>queue_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByQueueId(Collection<String> values, int limit) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.QUEUE_ID.in(values),limit);
    }

    /**
     * Find records that have <code>user_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByUserId(Collection<String> values) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.USER_ID.in(values));
    }

    /**
     * Find records that have <code>user_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByUserId(Collection<String> values, int limit) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.USER_ID.in(values),limit);
    }

    /**
     * Find records that have <code>deck_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByDeckId(Collection<String> values) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.DECK_ID.in(values));
    }

    /**
     * Find records that have <code>deck_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByDeckId(Collection<String> values, int limit) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.DECK_ID.in(values),limit);
    }

    /**
     * Find records that have <code>bot_deck_id IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByBotDeckId(Collection<String> values) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.BOT_DECK_ID.in(values));
    }

    /**
     * Find records that have <code>bot_deck_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByBotDeckId(Collection<String> values, int limit) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.BOT_DECK_ID.in(values),limit);
    }

    /**
     * Find records that have <code>created_at IN (values)</code> asynchronously
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByCreatedAt(Collection<OffsetDateTime> values) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>created_at IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets>> findManyByCreatedAt(Collection<OffsetDateTime> values, int limit) {
        return findManyByCondition(MatchmakingTickets.MATCHMAKING_TICKETS.CREATED_AT.in(values),limit);
    }

    @Override
    public ReactiveClassicQueryExecutor<MatchmakingTicketsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets,Long> queryExecutor(){
        return (ReactiveClassicQueryExecutor<MatchmakingTicketsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.MatchmakingTickets,Long>) super.queryExecutor();
    }
}
