/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables;


import com.hiddenswitch.framework.schema.Keys;
import com.hiddenswitch.framework.schema.Public;
import com.hiddenswitch.framework.schema.tables.records.ClientSessionAuthStatusRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientSessionAuthStatus extends TableImpl<ClientSessionAuthStatusRecord> {

    private static final long serialVersionUID = 425976451;

    /**
     * The reference instance of <code>public.client_session_auth_status</code>
     */
    public static final ClientSessionAuthStatus CLIENT_SESSION_AUTH_STATUS = new ClientSessionAuthStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientSessionAuthStatusRecord> getRecordType() {
        return ClientSessionAuthStatusRecord.class;
    }

    /**
     * The column <code>public.client_session_auth_status.authenticator</code>.
     */
    public final TableField<ClientSessionAuthStatusRecord, String> AUTHENTICATOR = createField(DSL.name("authenticator"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.client_session_auth_status.status</code>.
     */
    public final TableField<ClientSessionAuthStatusRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.client_session_auth_status.client_session</code>.
     */
    public final TableField<ClientSessionAuthStatusRecord, String> CLIENT_SESSION = createField(DSL.name("client_session"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * Create a <code>public.client_session_auth_status</code> table reference
     */
    public ClientSessionAuthStatus() {
        this(DSL.name("client_session_auth_status"), null);
    }

    /**
     * Create an aliased <code>public.client_session_auth_status</code> table reference
     */
    public ClientSessionAuthStatus(String alias) {
        this(DSL.name(alias), CLIENT_SESSION_AUTH_STATUS);
    }

    /**
     * Create an aliased <code>public.client_session_auth_status</code> table reference
     */
    public ClientSessionAuthStatus(Name alias) {
        this(alias, CLIENT_SESSION_AUTH_STATUS);
    }

    private ClientSessionAuthStatus(Name alias, Table<ClientSessionAuthStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientSessionAuthStatus(Name alias, Table<ClientSessionAuthStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ClientSessionAuthStatus(Table<O> child, ForeignKey<O, ClientSessionAuthStatusRecord> key) {
        super(child, key, CLIENT_SESSION_AUTH_STATUS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClientSessionAuthStatusRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_AUTH_STATUS_PK;
    }

    @Override
    public List<UniqueKey<ClientSessionAuthStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientSessionAuthStatusRecord>>asList(Keys.CONSTRAINT_AUTH_STATUS_PK);
    }

    @Override
    public List<ForeignKey<ClientSessionAuthStatusRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClientSessionAuthStatusRecord, ?>>asList(Keys.CLIENT_SESSION_AUTH_STATUS__AUTH_STATUS_CONSTRAINT);
    }

    public ClientSession clientSession() {
        return new ClientSession(this, Keys.CLIENT_SESSION_AUTH_STATUS__AUTH_STATUS_CONSTRAINT);
    }

    @Override
    public ClientSessionAuthStatus as(String alias) {
        return new ClientSessionAuthStatus(DSL.name(alias), this);
    }

    @Override
    public ClientSessionAuthStatus as(Name alias) {
        return new ClientSessionAuthStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientSessionAuthStatus rename(String name) {
        return new ClientSessionAuthStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientSessionAuthStatus rename(Name name) {
        return new ClientSessionAuthStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
