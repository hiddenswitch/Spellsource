/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables;


import com.hiddenswitch.framework.schema.Indexes;
import com.hiddenswitch.framework.schema.Keys;
import com.hiddenswitch.framework.schema.Public;
import com.hiddenswitch.framework.schema.tables.records.GroupRoleMappingRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupRoleMapping extends TableImpl<GroupRoleMappingRecord> {

    private static final long serialVersionUID = -1858205089;

    /**
     * The reference instance of <code>public.group_role_mapping</code>
     */
    public static final GroupRoleMapping GROUP_ROLE_MAPPING = new GroupRoleMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupRoleMappingRecord> getRecordType() {
        return GroupRoleMappingRecord.class;
    }

    /**
     * The column <code>public.group_role_mapping.role_id</code>.
     */
    public final TableField<GroupRoleMappingRecord, String> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.group_role_mapping.group_id</code>.
     */
    public final TableField<GroupRoleMappingRecord, String> GROUP_ID = createField(DSL.name("group_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * Create a <code>public.group_role_mapping</code> table reference
     */
    public GroupRoleMapping() {
        this(DSL.name("group_role_mapping"), null);
    }

    /**
     * Create an aliased <code>public.group_role_mapping</code> table reference
     */
    public GroupRoleMapping(String alias) {
        this(DSL.name(alias), GROUP_ROLE_MAPPING);
    }

    /**
     * Create an aliased <code>public.group_role_mapping</code> table reference
     */
    public GroupRoleMapping(Name alias) {
        this(alias, GROUP_ROLE_MAPPING);
    }

    private GroupRoleMapping(Name alias, Table<GroupRoleMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private GroupRoleMapping(Name alias, Table<GroupRoleMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GroupRoleMapping(Table<O> child, ForeignKey<O, GroupRoleMappingRecord> key) {
        super(child, key, GROUP_ROLE_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_GROUP_ROLE_MAPP_GROUP);
    }

    @Override
    public UniqueKey<GroupRoleMappingRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_GROUP_ROLE;
    }

    @Override
    public List<UniqueKey<GroupRoleMappingRecord>> getKeys() {
        return Arrays.<UniqueKey<GroupRoleMappingRecord>>asList(Keys.CONSTRAINT_GROUP_ROLE);
    }

    @Override
    public List<ForeignKey<GroupRoleMappingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GroupRoleMappingRecord, ?>>asList(Keys.GROUP_ROLE_MAPPING__FK_GROUP_ROLE_ROLE, Keys.GROUP_ROLE_MAPPING__FK_GROUP_ROLE_GROUP);
    }

    public KeycloakRole keycloakRole() {
        return new KeycloakRole(this, Keys.GROUP_ROLE_MAPPING__FK_GROUP_ROLE_ROLE);
    }

    public KeycloakGroup keycloakGroup() {
        return new KeycloakGroup(this, Keys.GROUP_ROLE_MAPPING__FK_GROUP_ROLE_GROUP);
    }

    @Override
    public GroupRoleMapping as(String alias) {
        return new GroupRoleMapping(DSL.name(alias), this);
    }

    @Override
    public GroupRoleMapping as(Name alias) {
        return new GroupRoleMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupRoleMapping rename(String name) {
        return new GroupRoleMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupRoleMapping rename(Name name) {
        return new GroupRoleMapping(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
