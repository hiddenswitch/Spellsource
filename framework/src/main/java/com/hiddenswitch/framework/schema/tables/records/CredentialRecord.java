/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.tables.records;


import com.hiddenswitch.framework.schema.tables.Credential;
import com.hiddenswitch.framework.schema.tables.interfaces.ICredential;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CredentialRecord extends UpdatableRecordImpl<CredentialRecord> implements VertxPojo, Record9<String, byte[], String, String, Long, String, String, String, Integer>, ICredential {

    private static final long serialVersionUID = 2024675378;

    /**
     * Setter for <code>public.credential.id</code>.
     */
    @Override
    public CredentialRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.credential.salt</code>.
     */
    @Override
    public CredentialRecord setSalt(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.salt</code>.
     */
    @Override
    public byte[] getSalt() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>public.credential.type</code>.
     */
    @Override
    public CredentialRecord setType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.type</code>.
     */
    @Override
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.credential.user_id</code>.
     */
    @Override
    public CredentialRecord setUserId(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.user_id</code>.
     */
    @Override
    public String getUserId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.credential.created_date</code>.
     */
    @Override
    public CredentialRecord setCreatedDate(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.created_date</code>.
     */
    @Override
    public Long getCreatedDate() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.credential.user_label</code>.
     */
    @Override
    public CredentialRecord setUserLabel(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.user_label</code>.
     */
    @Override
    public String getUserLabel() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.credential.secret_data</code>.
     */
    @Override
    public CredentialRecord setSecretData(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.secret_data</code>.
     */
    @Override
    public String getSecretData() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.credential.credential_data</code>.
     */
    @Override
    public CredentialRecord setCredentialData(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.credential_data</code>.
     */
    @Override
    public String getCredentialData() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.credential.priority</code>.
     */
    @Override
    public CredentialRecord setPriority(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.credential.priority</code>.
     */
    @Override
    public Integer getPriority() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, byte[], String, String, Long, String, String, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<String, byte[], String, String, Long, String, String, String, Integer> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Credential.CREDENTIAL.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return Credential.CREDENTIAL.SALT;
    }

    @Override
    public Field<String> field3() {
        return Credential.CREDENTIAL.TYPE;
    }

    @Override
    public Field<String> field4() {
        return Credential.CREDENTIAL.USER_ID;
    }

    @Override
    public Field<Long> field5() {
        return Credential.CREDENTIAL.CREATED_DATE;
    }

    @Override
    public Field<String> field6() {
        return Credential.CREDENTIAL.USER_LABEL;
    }

    @Override
    public Field<String> field7() {
        return Credential.CREDENTIAL.SECRET_DATA;
    }

    @Override
    public Field<String> field8() {
        return Credential.CREDENTIAL.CREDENTIAL_DATA;
    }

    @Override
    public Field<Integer> field9() {
        return Credential.CREDENTIAL.PRIORITY;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getSalt();
    }

    @Override
    public String component3() {
        return getType();
    }

    @Override
    public String component4() {
        return getUserId();
    }

    @Override
    public Long component5() {
        return getCreatedDate();
    }

    @Override
    public String component6() {
        return getUserLabel();
    }

    @Override
    public String component7() {
        return getSecretData();
    }

    @Override
    public String component8() {
        return getCredentialData();
    }

    @Override
    public Integer component9() {
        return getPriority();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getSalt();
    }

    @Override
    public String value3() {
        return getType();
    }

    @Override
    public String value4() {
        return getUserId();
    }

    @Override
    public Long value5() {
        return getCreatedDate();
    }

    @Override
    public String value6() {
        return getUserLabel();
    }

    @Override
    public String value7() {
        return getSecretData();
    }

    @Override
    public String value8() {
        return getCredentialData();
    }

    @Override
    public Integer value9() {
        return getPriority();
    }

    @Override
    public CredentialRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public CredentialRecord value2(byte[] value) {
        setSalt(value);
        return this;
    }

    @Override
    public CredentialRecord value3(String value) {
        setType(value);
        return this;
    }

    @Override
    public CredentialRecord value4(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public CredentialRecord value5(Long value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public CredentialRecord value6(String value) {
        setUserLabel(value);
        return this;
    }

    @Override
    public CredentialRecord value7(String value) {
        setSecretData(value);
        return this;
    }

    @Override
    public CredentialRecord value8(String value) {
        setCredentialData(value);
        return this;
    }

    @Override
    public CredentialRecord value9(Integer value) {
        setPriority(value);
        return this;
    }

    @Override
    public CredentialRecord values(String value1, byte[] value2, String value3, String value4, Long value5, String value6, String value7, String value8, Integer value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICredential from) {
        setId(from.getId());
        setSalt(from.getSalt());
        setType(from.getType());
        setUserId(from.getUserId());
        setCreatedDate(from.getCreatedDate());
        setUserLabel(from.getUserLabel());
        setSecretData(from.getSecretData());
        setCredentialData(from.getCredentialData());
        setPriority(from.getPriority());
    }

    @Override
    public <E extends ICredential> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CredentialRecord
     */
    public CredentialRecord() {
        super(Credential.CREDENTIAL);
    }

    /**
     * Create a detached, initialised CredentialRecord
     */
    public CredentialRecord(String id, byte[] salt, String type, String userId, Long createdDate, String userLabel, String secretData, String credentialData, Integer priority) {
        super(Credential.CREDENTIAL);

        set(0, id);
        set(1, salt);
        set(2, type);
        set(3, userId);
        set(4, createdDate);
        set(5, userLabel);
        set(6, secretData);
        set(7, credentialData);
        set(8, priority);
    }

    public CredentialRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
