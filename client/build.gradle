buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'io.swagger:swagger-models:1.5.17'
        classpath 'io.swagger:swagger-codegen:2.3.0'
    }
}

plugins {
    id 'maven-publish'
    id 'idea'
}

import io.swagger.codegen.ClientOptInput
import io.swagger.codegen.ClientOpts
import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.models.Swagger
import io.swagger.parser.SwaggerParser

apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'

group = 'com.hiddenswitch'
version = '0.8.69'

repositories {
    jcenter()
}

ext {
    swagger_annotations_version = "1.5.15"
    jackson_version = "2.10.2"
    jersey_version = "1.19.4"
    jodatime_version = "2.10.2"
    junit_version = "4.12"
}

dependencies {
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    implementation "io.swagger:swagger-annotations:$swagger_annotations_version"
    implementation("com.sun.jersey:jersey-client:$jersey_version") {
        exclude group: 'javax.ws.rs', module: 'jsr311-api'
    }
    implementation("com.sun.jersey.contribs:jersey-multipart:$jersey_version") {
        exclude group: 'javax.ws.rs', module: 'jsr311-api'
    }
    implementation("com.fasterxml.jackson.core:jackson-core:$jackson_version") {
        exclude group: 'jakarta.xml.bind', module: '*'
        exclude group: 'jakarta.activation', module: '*'
    }
    implementation("com.fasterxml.jackson.core:jackson-annotations:$jackson_version") {
        exclude group: 'jakarta.xml.bind', module: '*'
        exclude group: 'jakarta.activation', module: '*'
    }
    implementation("com.fasterxml.jackson.core:jackson-databind:$jackson_version") {
        exclude group: 'jakarta.xml.bind', module: '*'
        exclude group: 'jakarta.activation', module: '*'
    }
    implementation "com.fasterxml.jackson.module:jackson-modules-java8:$jackson_version"
    implementation("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jackson_version") {
        exclude group: 'jakarta.xml.bind', module: '*'
        exclude group: 'jakarta.activation', module: '*'
    }
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
}

def generatedSourcesPath = "${project.projectDir.path}/src/swagger/java"

sourceSets {
    main {
        java {
            srcDir file(generatedSourcesPath)
        }
    }
}

task generateSwaggerJava {
    def inputPath = "./swagger-api.yaml"
    def absoluteInputPath = file(inputPath).absolutePath
    def templatePath = "./swagger-templates/java"
    def templateDir = file(templatePath)

    inputs.file(inputPath)
    inputs.dir(templatePath)
    outputs.dir(generatedSourcesPath)

    doLast {
        def config = new SpellsourceJavaCodegen();
        config.setInputSpec(absoluteInputPath)
        config.setOutputDir(project.projectDir.absolutePath)
        config.setTemplateDir(templateDir.absolutePath)
        config.additionalProperties().putAll([
                'invokerPackage'         : 'com.hiddenswitch.spellsource.client',
                'modelPackage'           : 'com.hiddenswitch.spellsource.client.models',
                'apiPackage'             : 'com.hiddenswitch.spellsource.client.api',
                'library'                : 'jersey1',
                'serializableModel'      : 'true',
                'dateLibrary'            : 'java8',
                'artifactId'             : 'client',
                'artifactVersion'        : project.version,
                'hideGenerationTimestamp': 'true'
        ])
        config.setGroupId('com.hiddenswitch')
        config.setArtifactId('spellsource-client')
        def optInput = new ClientOptInput();
        Swagger swagger = new SwaggerParser().read(absoluteInputPath, [], true);
        optInput.config(config)
                .opts(new ClientOpts())
                .swagger(swagger)
        new DefaultGenerator().opts(optInput).generate()
    }
}

compileJava {
    dependsOn generateSwaggerJava
}

ideaModule.dependsOn generateSwaggerJava
idea {
    module {
        sourceDirs += file(generatedSourcesPath)
        generatedSourceDirs += file(generatedSourcesPath)
    }
}