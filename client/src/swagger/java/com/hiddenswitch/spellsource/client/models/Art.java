/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hiddenswitch.spellsource.client.models.Color;
import com.hiddenswitch.spellsource.client.models.Font;
import com.hiddenswitch.spellsource.client.models.Sprite;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Contains information the client needs for an art asset. 
 */
@ApiModel(description = "Contains information the client needs for an art asset. ")
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class Art implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("token")
  private Sprite token = null;

  @JsonProperty("lit")
  private Color lit = null;

  @JsonProperty("shadow")
  private Color shadow = null;

  @JsonProperty("body")
  private Font body = null;

  public Art token(Sprite token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @ApiModelProperty(value = "")
  public Sprite getToken() {
    return token;
  }

  public void setToken(Sprite token) {
    this.token = token;
  }

  public Art lit(Color lit) {
    this.lit = lit;
    return this;
  }

   /**
   * Get lit
   * @return lit
  **/
  @ApiModelProperty(value = "")
  public Color getLit() {
    return lit;
  }

  public void setLit(Color lit) {
    this.lit = lit;
  }

  public Art shadow(Color shadow) {
    this.shadow = shadow;
    return this;
  }

   /**
   * Get shadow
   * @return shadow
  **/
  @ApiModelProperty(value = "")
  public Color getShadow() {
    return shadow;
  }

  public void setShadow(Color shadow) {
    this.shadow = shadow;
  }

  public Art body(Font body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @ApiModelProperty(value = "")
  public Font getBody() {
    return body;
  }

  public void setBody(Font body) {
    this.body = body;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Art art = (Art) o;
    return Objects.equals(this.token, art.token) &&
        Objects.equals(this.lit, art.lit) &&
        Objects.equals(this.shadow, art.shadow) &&
        Objects.equals(this.body, art.body);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, lit, shadow, body);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Art {\n");
    
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    lit: ").append(toIndentedString(lit)).append("\n");
    sb.append("    shadow: ").append(toIndentedString(shadow)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

