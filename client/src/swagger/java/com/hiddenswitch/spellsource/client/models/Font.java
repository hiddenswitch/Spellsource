/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hiddenswitch.spellsource.client.models.Color;
import com.hiddenswitch.spellsource.client.models.FontOutline;
import com.hiddenswitch.spellsource.client.models.FontUnderlay;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Contains a font (type, size, styling, etc.) specification 
 */
@ApiModel(description = "Contains a font (type, size, styling, etc.) specification ")
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class Font implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("size")
  private String size = null;

  @JsonProperty("face")
  private Color face = null;

  @JsonProperty("outline")
  private FontOutline outline = null;

  @JsonProperty("underlay")
  private FontUnderlay underlay = null;

  public Font name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A named font face to use for rendering 
   * @return name
  **/
  @ApiModelProperty(value = "A named font face to use for rendering ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Font size(String size) {
    this.size = size;
    return this;
  }

   /**
   * A size specification for the font.  Supported specifications:  - A single number specificaton, like 12. Specifies size in terms of Unity canvas units.  - A range number specification, like 9-32. Specifies the text object should auto-size between these values. 
   * @return size
  **/
  @ApiModelProperty(value = "A size specification for the font.  Supported specifications:  - A single number specificaton, like 12. Specifies size in terms of Unity canvas units.  - A range number specification, like 9-32. Specifies the text object should auto-size between these values. ")
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }

  public Font face(Color face) {
    this.face = face;
    return this;
  }

   /**
   * Get face
   * @return face
  **/
  @ApiModelProperty(value = "")
  public Color getFace() {
    return face;
  }

  public void setFace(Color face) {
    this.face = face;
  }

  public Font outline(FontOutline outline) {
    this.outline = outline;
    return this;
  }

   /**
   * Get outline
   * @return outline
  **/
  @ApiModelProperty(value = "")
  public FontOutline getOutline() {
    return outline;
  }

  public void setOutline(FontOutline outline) {
    this.outline = outline;
  }

  public Font underlay(FontUnderlay underlay) {
    this.underlay = underlay;
    return this;
  }

   /**
   * Get underlay
   * @return underlay
  **/
  @ApiModelProperty(value = "")
  public FontUnderlay getUnderlay() {
    return underlay;
  }

  public void setUnderlay(FontUnderlay underlay) {
    this.underlay = underlay;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Font font = (Font) o;
    return Objects.equals(this.name, font.name) &&
        Objects.equals(this.size, font.size) &&
        Objects.equals(this.face, font.face) &&
        Objects.equals(this.outline, font.outline) &&
        Objects.equals(this.underlay, font.underlay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, size, face, outline, underlay);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Font {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    face: ").append(toIndentedString(face)).append("\n");
    sb.append("    outline: ").append(toIndentedString(outline)).append("\n");
    sb.append("    underlay: ").append(toIndentedString(underlay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

