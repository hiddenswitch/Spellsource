/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Provides an explanation for an effect or keyword that will appear beside the card.  Only delivered in the Entities from the CardRecords. 
 */
@ApiModel(description = "Provides an explanation for an effect or keyword that will appear beside the card.  Only delivered in the Entities from the CardRecords. ")
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class Tooltip implements Serializable {

  @JsonProperty("keywords")
  private List<String> keywords = null;

  @JsonProperty("text")
  private String text = null;

  public Tooltip keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public Tooltip addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * When set, this tooltip will only show if cards that have the same class as the card this tooltip appears on has the specified keyword appearing in its description. Typically used on the class card to provide tooltips for its entire class. 
   * @return keywords
  **/
  @ApiModelProperty(value = "When set, this tooltip will only show if cards that have the same class as the card this tooltip appears on has the specified keyword appearing in its description. Typically used on the class card to provide tooltips for its entire class. ")
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }

  public Tooltip text(String text) {
    this.text = text;
    return this;
  }

   /**
   * The text that should appear on the tooltip. 
   * @return text
  **/
  @ApiModelProperty(value = "The text that should appear on the tooltip. ")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tooltip tooltip = (Tooltip) o;
    return Objects.equals(this.keywords, tooltip.keywords) &&
        Objects.equals(this.text, tooltip.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keywords, text);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tooltip {\n");
    
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

