/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * FontUnderlay
 */
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class FontUnderlay implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("offsetX")
  private Float offsetX = 0.0f;

  @JsonProperty("offsetY")
  private Float offsetY = 0.0f;

  @JsonProperty("dilate")
  private Float dilate = 0.0f;

  @JsonProperty("softness")
  private Float softness = 0.0f;

  public FontUnderlay offsetX(Float offsetX) {
    this.offsetX = offsetX;
    return this;
  }

   /**
   * Get offsetX
   * @return offsetX
  **/
  @ApiModelProperty(value = "")
  public Float getOffsetX() {
    return offsetX;
  }

  public void setOffsetX(Float offsetX) {
    this.offsetX = offsetX;
  }

  public FontUnderlay offsetY(Float offsetY) {
    this.offsetY = offsetY;
    return this;
  }

   /**
   * Get offsetY
   * @return offsetY
  **/
  @ApiModelProperty(value = "")
  public Float getOffsetY() {
    return offsetY;
  }

  public void setOffsetY(Float offsetY) {
    this.offsetY = offsetY;
  }

  public FontUnderlay dilate(Float dilate) {
    this.dilate = dilate;
    return this;
  }

   /**
   * Get dilate
   * @return dilate
  **/
  @ApiModelProperty(value = "")
  public Float getDilate() {
    return dilate;
  }

  public void setDilate(Float dilate) {
    this.dilate = dilate;
  }

  public FontUnderlay softness(Float softness) {
    this.softness = softness;
    return this;
  }

   /**
   * Get softness
   * @return softness
  **/
  @ApiModelProperty(value = "")
  public Float getSoftness() {
    return softness;
  }

  public void setSoftness(Float softness) {
    this.softness = softness;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FontUnderlay fontUnderlay = (FontUnderlay) o;
    return Objects.equals(this.offsetX, fontUnderlay.offsetX) &&
        Objects.equals(this.offsetY, fontUnderlay.offsetY) &&
        Objects.equals(this.dilate, fontUnderlay.dilate) &&
        Objects.equals(this.softness, fontUnderlay.softness);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offsetX, offsetY, dilate, softness);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FontUnderlay {\n");
    
    sb.append("    offsetX: ").append(toIndentedString(offsetX)).append("\n");
    sb.append("    offsetY: ").append(toIndentedString(offsetY)).append("\n");
    sb.append("    dilate: ").append(toIndentedString(dilate)).append("\n");
    sb.append("    softness: ").append(toIndentedString(softness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

