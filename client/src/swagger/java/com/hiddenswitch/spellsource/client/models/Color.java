/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hiddenswitch.spellsource.client.models.ColorHsv;
import com.hiddenswitch.spellsource.client.models.ColorRgb;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Describes a color or a command to set a specific color value. 
 */
@ApiModel(description = "Describes a color or a command to set a specific color value. ")
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class Color implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("named")
  private String named = null;

  @JsonProperty("rgb")
  private ColorRgb rgb = null;

  @JsonProperty("hsv")
  private ColorHsv hsv = null;

  @JsonProperty("a")
  private Float a = 1.0f;

  public Color named(String named) {
    this.named = named;
    return this;
  }

   /**
   * Lookup a color by name (context-sensitive). 
   * @return named
  **/
  @ApiModelProperty(value = "Lookup a color by name (context-sensitive). ")
  public String getNamed() {
    return named;
  }

  public void setNamed(String named) {
    this.named = named;
  }

  public Color rgb(ColorRgb rgb) {
    this.rgb = rgb;
    return this;
  }

   /**
   * Get rgb
   * @return rgb
  **/
  @ApiModelProperty(value = "")
  public ColorRgb getRgb() {
    return rgb;
  }

  public void setRgb(ColorRgb rgb) {
    this.rgb = rgb;
  }

  public Color hsv(ColorHsv hsv) {
    this.hsv = hsv;
    return this;
  }

   /**
   * Get hsv
   * @return hsv
  **/
  @ApiModelProperty(value = "")
  public ColorHsv getHsv() {
    return hsv;
  }

  public void setHsv(ColorHsv hsv) {
    this.hsv = hsv;
  }

  public Color a(Float a) {
    this.a = a;
    return this;
  }

   /**
   * Alpha in units of 0.0-1.0
   * @return a
  **/
  @ApiModelProperty(value = "Alpha in units of 0.0-1.0")
  public Float getA() {
    return a;
  }

  public void setA(Float a) {
    this.a = a;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Color color = (Color) o;
    return Objects.equals(this.named, color.named) &&
        Objects.equals(this.rgb, color.rgb) &&
        Objects.equals(this.hsv, color.hsv) &&
        Objects.equals(this.a, color.a);
  }

  @Override
  public int hashCode() {
    return Objects.hash(named, rgb, hsv, a);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Color {\n");
    
    sb.append("    named: ").append(toIndentedString(named)).append("\n");
    sb.append("    rgb: ").append(toIndentedString(rgb)).append("\n");
    sb.append("    hsv: ").append(toIndentedString(hsv)).append("\n");
    sb.append("    a: ").append(toIndentedString(a)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

