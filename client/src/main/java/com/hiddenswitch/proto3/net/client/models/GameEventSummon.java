/**
 * Hidden Switch Minionate API
 * The Minionate API for matchmaking, user accounts, collections management and more
 *
 * OpenAPI spec version: 1.0.1
 * Contact: benjamin.s.berman@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.hiddenswitch.proto3.net.client.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.hiddenswitch.proto3.net.client.models.CardLocation;
import com.hiddenswitch.proto3.net.client.models.Entity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.Serializable;
/**
 * GameEventSummon
 */

public class GameEventSummon  implements Serializable {
  @SerializedName("from")
  private CardLocation from = null;

  @SerializedName("to")
  private CardLocation to = null;

  @SerializedName("minion")
  private Entity minion = null;

  @SerializedName("source")
  private Entity source = null;

  public GameEventSummon from(CardLocation from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @ApiModelProperty(example = "null", value = "")
  public CardLocation getFrom() {
    return from;
  }

  public void setFrom(CardLocation from) {
    this.from = from;
  }

  public GameEventSummon to(CardLocation to) {
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @ApiModelProperty(example = "null", value = "")
  public CardLocation getTo() {
    return to;
  }

  public void setTo(CardLocation to) {
    this.to = to;
  }

  public GameEventSummon minion(Entity minion) {
    this.minion = minion;
    return this;
  }

   /**
   * Get minion
   * @return minion
  **/
  @ApiModelProperty(example = "null", value = "")
  public Entity getMinion() {
    return minion;
  }

  public void setMinion(Entity minion) {
    this.minion = minion;
  }

  public GameEventSummon source(Entity source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @ApiModelProperty(example = "null", value = "")
  public Entity getSource() {
    return source;
  }

  public void setSource(Entity source) {
    this.source = source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameEventSummon gameEventSummon = (GameEventSummon) o;
    return Objects.equals(this.from, gameEventSummon.from) &&
        Objects.equals(this.to, gameEventSummon.to) &&
        Objects.equals(this.minion, gameEventSummon.minion) &&
        Objects.equals(this.source, gameEventSummon.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, minion, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameEventSummon {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    minion: ").append(toIndentedString(minion)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

