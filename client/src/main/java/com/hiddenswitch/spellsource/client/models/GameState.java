/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 3.0.4
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hiddenswitch.spellsource.client.models.Entity;
import com.hiddenswitch.spellsource.client.models.GameEvent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * GameState
 */
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class GameState implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("powerHistory")
  private List<GameEvent> powerHistory = null;

  @JsonProperty("entities")
  private List<Entity> entities = null;

  @JsonProperty("isLocalPlayerTurn")
  private Boolean isLocalPlayerTurn = null;

  @JsonProperty("turnState")
  private String turnState = null;

  @JsonProperty("turnNumber")
  private Integer turnNumber = null;

  @JsonProperty("timestamp")
  private Long timestamp = null;

  public GameState powerHistory(List<GameEvent> powerHistory) {
    this.powerHistory = powerHistory;
    return this;
  }

  public GameState addPowerHistoryItem(GameEvent powerHistoryItem) {
    if (this.powerHistory == null) {
      this.powerHistory = new ArrayList<>();
    }
    this.powerHistory.add(powerHistoryItem);
    return this;
  }

   /**
   * The last ten game event objects with isPowerHistory &#x3D;&#x3D; true. 
   * @return powerHistory
  **/
  @ApiModelProperty(value = "The last ten game event objects with isPowerHistory == true. ")
  public List<GameEvent> getPowerHistory() {
    return powerHistory;
  }

  public void setPowerHistory(List<GameEvent> powerHistory) {
    this.powerHistory = powerHistory;
  }

  public GameState entities(List<Entity> entities) {
    this.entities = entities;
    return this;
  }

  public GameState addEntitiesItem(Entity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

   /**
   * Get entities
   * @return entities
  **/
  @ApiModelProperty(value = "")
  public List<Entity> getEntities() {
    return entities;
  }

  public void setEntities(List<Entity> entities) {
    this.entities = entities;
  }

  public GameState isLocalPlayerTurn(Boolean isLocalPlayerTurn) {
    this.isLocalPlayerTurn = isLocalPlayerTurn;
    return this;
  }

   /**
   * When true, it is the local player&#39;s turn.
   * @return isLocalPlayerTurn
  **/
  @ApiModelProperty(value = "When true, it is the local player's turn.")
  public Boolean isIsLocalPlayerTurn() {
    return isLocalPlayerTurn;
  }

  public void setIsLocalPlayerTurn(Boolean isLocalPlayerTurn) {
    this.isLocalPlayerTurn = isLocalPlayerTurn;
  }

  public GameState turnState(String turnState) {
    this.turnState = turnState;
    return this;
  }

   /**
   * Get turnState
   * @return turnState
  **/
  @ApiModelProperty(value = "")
  public String getTurnState() {
    return turnState;
  }

  public void setTurnState(String turnState) {
    this.turnState = turnState;
  }

  public GameState turnNumber(Integer turnNumber) {
    this.turnNumber = turnNumber;
    return this;
  }

   /**
   * Get turnNumber
   * @return turnNumber
  **/
  @ApiModelProperty(value = "")
  public Integer getTurnNumber() {
    return turnNumber;
  }

  public void setTurnNumber(Integer turnNumber) {
    this.turnNumber = turnNumber;
  }

  public GameState timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @ApiModelProperty(value = "")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameState gameState = (GameState) o;
    return Objects.equals(this.powerHistory, gameState.powerHistory) &&
        Objects.equals(this.entities, gameState.entities) &&
        Objects.equals(this.isLocalPlayerTurn, gameState.isLocalPlayerTurn) &&
        Objects.equals(this.turnState, gameState.turnState) &&
        Objects.equals(this.turnNumber, gameState.turnNumber) &&
        Objects.equals(this.timestamp, gameState.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(powerHistory, entities, isLocalPlayerTurn, turnState, turnNumber, timestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameState {\n");
    
    sb.append("    powerHistory: ").append(toIndentedString(powerHistory)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    isLocalPlayerTurn: ").append(toIndentedString(isLocalPlayerTurn)).append("\n");
    sb.append("    turnState: ").append(toIndentedString(turnState)).append("\n");
    sb.append("    turnNumber: ").append(toIndentedString(turnNumber)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

