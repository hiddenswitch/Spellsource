/**
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more
 *
 * OpenAPI spec version: 1.0.1
 * Contact: benjamin.s.berman@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.hiddenswitch.spellsource.client.models.DecksUpdateCommandPushCardIds;
import com.hiddenswitch.spellsource.client.models.DecksUpdateCommandPushInventoryIds;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;
/**
 * DecksUpdateCommand
 */

public class DecksUpdateCommand  implements Serializable {
  @SerializedName("setHeroClass")
  private String setHeroClass = null;

  @SerializedName("setName")
  private String setName = null;

  @SerializedName("setInventoryIds")
  private List<String> setInventoryIds = new ArrayList<String>();

  @SerializedName("pushInventoryIds")
  private DecksUpdateCommandPushInventoryIds pushInventoryIds = null;

  @SerializedName("pushCardIds")
  private DecksUpdateCommandPushCardIds pushCardIds = null;

  @SerializedName("pullAllInventoryIds")
  private List<String> pullAllInventoryIds = new ArrayList<String>();

  @SerializedName("pullAllCardIds")
  private List<String> pullAllCardIds = new ArrayList<String>();

  public DecksUpdateCommand setHeroClass(String setHeroClass) {
    this.setHeroClass = setHeroClass;
    return this;
  }

   /**
   * Sets the hero class of the deck in this command. If the deck now contains cards that no longer belong to this hero class, the deck becomes invalid under standard rules. 
   * @return setHeroClass
  **/
  @ApiModelProperty(example = "null", value = "Sets the hero class of the deck in this command. If the deck now contains cards that no longer belong to this hero class, the deck becomes invalid under standard rules. ")
  public String getSetHeroClass() {
    return setHeroClass;
  }

  public void setSetHeroClass(String setHeroClass) {
    this.setHeroClass = setHeroClass;
  }

  public DecksUpdateCommand setName(String setName) {
    this.setName = setName;
    return this;
  }

   /**
   * Sets the name of the deck in this command. If the name is null, the deck becomes invalid. 
   * @return setName
  **/
  @ApiModelProperty(example = "null", value = "Sets the name of the deck in this command. If the name is null, the deck becomes invalid. ")
  public String getSetName() {
    return setName;
  }

  public void setSetName(String setName) {
    this.setName = setName;
  }

  public DecksUpdateCommand setInventoryIds(List<String> setInventoryIds) {
    this.setInventoryIds = setInventoryIds;
    return this;
  }

  public DecksUpdateCommand addSetInventoryIdsItem(String setInventoryIdsItem) {
    this.setInventoryIds.add(setInventoryIdsItem);
    return this;
  }

   /**
   * Sets the entire deck's inventory IDs in this command. Duplicate inventory IDs will cause the update to be rejected. If the user does not own these inventory IDs, the deck becomes invalid. Under standard rules, duplicate card IDs also make the deck invalid. Finally, adding cards whose hero class isn't neutral or the same as the deck's hero class marks the deck as invalid. 
   * @return setInventoryIds
  **/
  @ApiModelProperty(example = "null", value = "Sets the entire deck's inventory IDs in this command. Duplicate inventory IDs will cause the update to be rejected. If the user does not own these inventory IDs, the deck becomes invalid. Under standard rules, duplicate card IDs also make the deck invalid. Finally, adding cards whose hero class isn't neutral or the same as the deck's hero class marks the deck as invalid. ")
  public List<String> getSetInventoryIds() {
    return setInventoryIds;
  }

  public void setSetInventoryIds(List<String> setInventoryIds) {
    this.setInventoryIds = setInventoryIds;
  }

  public DecksUpdateCommand pushInventoryIds(DecksUpdateCommandPushInventoryIds pushInventoryIds) {
    this.pushInventoryIds = pushInventoryIds;
    return this;
  }

   /**
   * Get pushInventoryIds
   * @return pushInventoryIds
  **/
  @ApiModelProperty(example = "null", value = "")
  public DecksUpdateCommandPushInventoryIds getPushInventoryIds() {
    return pushInventoryIds;
  }

  public void setPushInventoryIds(DecksUpdateCommandPushInventoryIds pushInventoryIds) {
    this.pushInventoryIds = pushInventoryIds;
  }

  public DecksUpdateCommand pushCardIds(DecksUpdateCommandPushCardIds pushCardIds) {
    this.pushCardIds = pushCardIds;
    return this;
  }

   /**
   * Get pushCardIds
   * @return pushCardIds
  **/
  @ApiModelProperty(example = "null", value = "")
  public DecksUpdateCommandPushCardIds getPushCardIds() {
    return pushCardIds;
  }

  public void setPushCardIds(DecksUpdateCommandPushCardIds pushCardIds) {
    this.pushCardIds = pushCardIds;
  }

  public DecksUpdateCommand pullAllInventoryIds(List<String> pullAllInventoryIds) {
    this.pullAllInventoryIds = pullAllInventoryIds;
    return this;
  }

  public DecksUpdateCommand addPullAllInventoryIdsItem(String pullAllInventoryIdsItem) {
    this.pullAllInventoryIds.add(pullAllInventoryIdsItem);
    return this;
  }

   /**
   * Removes all the specified inventory IDs from the user's deck. Does nothing if the deck does not contain any of the specified inventory IDs. This method will still succeed for inventory IDs that are found. 
   * @return pullAllInventoryIds
  **/
  @ApiModelProperty(example = "null", value = "Removes all the specified inventory IDs from the user's deck. Does nothing if the deck does not contain any of the specified inventory IDs. This method will still succeed for inventory IDs that are found. ")
  public List<String> getPullAllInventoryIds() {
    return pullAllInventoryIds;
  }

  public void setPullAllInventoryIds(List<String> pullAllInventoryIds) {
    this.pullAllInventoryIds = pullAllInventoryIds;
  }

  public DecksUpdateCommand pullAllCardIds(List<String> pullAllCardIds) {
    this.pullAllCardIds = pullAllCardIds;
    return this;
  }

  public DecksUpdateCommand addPullAllCardIdsItem(String pullAllCardIdsItem) {
    this.pullAllCardIds.add(pullAllCardIdsItem);
    return this;
  }

   /**
   * Removes all the specified card IDs from the user's deck. Does nothing if the deck does not contain any of the specified card IDs. This method will still succeed for deck IDs that are found. 
   * @return pullAllCardIds
  **/
  @ApiModelProperty(example = "null", value = "Removes all the specified card IDs from the user's deck. Does nothing if the deck does not contain any of the specified card IDs. This method will still succeed for deck IDs that are found. ")
  public List<String> getPullAllCardIds() {
    return pullAllCardIds;
  }

  public void setPullAllCardIds(List<String> pullAllCardIds) {
    this.pullAllCardIds = pullAllCardIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecksUpdateCommand decksUpdateCommand = (DecksUpdateCommand) o;
    return Objects.equals(this.setHeroClass, decksUpdateCommand.setHeroClass) &&
        Objects.equals(this.setName, decksUpdateCommand.setName) &&
        Objects.equals(this.setInventoryIds, decksUpdateCommand.setInventoryIds) &&
        Objects.equals(this.pushInventoryIds, decksUpdateCommand.pushInventoryIds) &&
        Objects.equals(this.pushCardIds, decksUpdateCommand.pushCardIds) &&
        Objects.equals(this.pullAllInventoryIds, decksUpdateCommand.pullAllInventoryIds) &&
        Objects.equals(this.pullAllCardIds, decksUpdateCommand.pullAllCardIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(setHeroClass, setName, setInventoryIds, pushInventoryIds, pushCardIds, pullAllInventoryIds, pullAllCardIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecksUpdateCommand {\n");
    
    sb.append("    setHeroClass: ").append(toIndentedString(setHeroClass)).append("\n");
    sb.append("    setName: ").append(toIndentedString(setName)).append("\n");
    sb.append("    setInventoryIds: ").append(toIndentedString(setInventoryIds)).append("\n");
    sb.append("    pushInventoryIds: ").append(toIndentedString(pushInventoryIds)).append("\n");
    sb.append("    pushCardIds: ").append(toIndentedString(pushCardIds)).append("\n");
    sb.append("    pullAllInventoryIds: ").append(toIndentedString(pullAllInventoryIds)).append("\n");
    sb.append("    pullAllCardIds: ").append(toIndentedString(pullAllCardIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

