/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import io.swagger.annotations.ApiModel;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Types of damage.   - PHYSICAL: Physical damage is caused by physical attacks by actors.  - FATIGUE: Fatigue damage is caused by drawing from an empty deck.  - MAGICAL: Magical damage is caused by spells and effects. It is typically rendered by missiles in the client.  - DECAY: Decay damage is specific to the DECAY keyword. It deals one damage to the entity at the end of every one    of its owner&#39;s turns  - DEFLECT: Damage dealt from the Deflect ability to the hero.  - DRAIN: Damage dealt by a Drain ability.  - IGNORES_ARMOR: Damage that ignores armor when it is dealt to the hero. 
 */
public enum DamageTypeEnum {
  
  PHYSICAL("PHYSICAL"),
  
  FATIGUE("FATIGUE"),
  
  MAGICAL("MAGICAL"),
  
  DECAY("DECAY"),
  
  DEFLECT("DEFLECT"),
  
  DRAIN("DRAIN"),
  
  IGNORES_ARMOR("IGNORES_ARMOR");

  private String value;

  DamageTypeEnum(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static DamageTypeEnum fromValue(String text) {
    for (DamageTypeEnum b : DamageTypeEnum.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }
}

