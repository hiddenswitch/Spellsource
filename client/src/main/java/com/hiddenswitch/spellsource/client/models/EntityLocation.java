/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 3.0.5
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * EntityLocation
 */
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class EntityLocation implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("player")
  private Integer player = null;

  @JsonProperty("index")
  private Integer index = null;

  /**
   * Gets or Sets zone
   */
  public enum ZoneEnum {
    NONE("NONE"),
    
    HAND("HAND"),
    
    DECK("DECK"),
    
    GRAVEYARD("GRAVEYARD"),
    
    BATTLEFIELD("BATTLEFIELD"),
    
    SECRET("SECRET"),
    
    QUEST("QUEST"),
    
    HERO_POWER("HERO_POWER"),
    
    HERO("HERO"),
    
    WEAPON("WEAPON"),
    
    SET_ASIDE_ZONE("SET_ASIDE_ZONE"),
    
    HIDDEN("HIDDEN"),
    
    DISCOVER("DISCOVER"),
    
    REMOVED_FROM_PLAY("REMOVED_FROM_PLAY"),
    
    PLAYER("PLAYER");

    private String value;

    ZoneEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ZoneEnum fromValue(String text) {
      for (ZoneEnum b : ZoneEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("zone")
  private ZoneEnum zone = null;

  public EntityLocation player(Integer player) {
    this.player = player;
    return this;
  }

   /**
   * Get player
   * @return player
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getPlayer() {
    return player;
  }

  public void setPlayer(Integer player) {
    this.player = player;
  }

  public EntityLocation index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public EntityLocation zone(ZoneEnum zone) {
    this.zone = zone;
    return this;
  }

   /**
   * Get zone
   * @return zone
  **/
  @ApiModelProperty(required = true, value = "")
  public ZoneEnum getZone() {
    return zone;
  }

  public void setZone(ZoneEnum zone) {
    this.zone = zone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityLocation entityLocation = (EntityLocation) o;
    return Objects.equals(this.player, entityLocation.player) &&
        Objects.equals(this.index, entityLocation.index) &&
        Objects.equals(this.zone, entityLocation.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(player, index, zone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityLocation {\n");
    
    sb.append("    player: ").append(toIndentedString(player)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

