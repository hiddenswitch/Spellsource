/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * EntityLocation
 */
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class EntityLocation implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("p")
  private Integer p = null;

  @JsonProperty("i")
  private Integer i = null;

  /**
   * Gets or Sets z
   */
  public enum ZEnum {
    N("N"),
    
    H("H"),
    
    D("D"),
    
    G("G"),
    
    B("B"),
    
    S("S"),
    
    Q("Q"),
    
    K("K"),
    
    E("E"),
    
    W("W"),
    
    A("A"),
    
    Z("Z"),
    
    V("V"),
    
    R("R"),
    
    P("P");

    private String value;

    ZEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ZEnum fromValue(String text) {
      for (ZEnum b : ZEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("z")
  private ZEnum z = null;

  public EntityLocation p(Integer p) {
    this.p = p;
    return this;
  }

   /**
   * Get p
   * @return p
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getP() {
    return p;
  }

  public void setP(Integer p) {
    this.p = p;
  }

  public EntityLocation i(Integer i) {
    this.i = i;
    return this;
  }

   /**
   * Get i
   * @return i
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getI() {
    return i;
  }

  public void setI(Integer i) {
    this.i = i;
  }

  public EntityLocation z(ZEnum z) {
    this.z = z;
    return this;
  }

   /**
   * Get z
   * @return z
  **/
  @ApiModelProperty(required = true, value = "")
  public ZEnum getZ() {
    return z;
  }

  public void setZ(ZEnum z) {
    this.z = z;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityLocation entityLocation = (EntityLocation) o;
    return Objects.equals(this.p, entityLocation.p) &&
        Objects.equals(this.i, entityLocation.i) &&
        Objects.equals(this.z, entityLocation.z);
  }

  @Override
  public int hashCode() {
    return Objects.hash(p, i, z);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityLocation {\n");
    
    sb.append("    p: ").append(toIndentedString(p)).append("\n");
    sb.append("    i: ").append(toIndentedString(i)).append("\n");
    sb.append("    z: ").append(toIndentedString(z)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

