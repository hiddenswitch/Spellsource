/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more.  To get started, create a user account and make sure to include the entirety of the returned login token as the X-Auth-Token header. You can reuse this token, or login for a new one.  ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket interface for actually playing a game. Envelope is used for the realtime API services.  For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server GitHub repository located in this definition file. 
 *
 * OpenAPI spec version: 4.0.1
 * Contact: ben@hiddenswitch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * GameEventTriggerFired
 */
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

public class GameEventTriggerFired implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("triggerSourceId")
  private Integer triggerSourceId = null;

  @JsonProperty("triggerTargetIds")
  private List<Integer> triggerTargetIds = null;

  public GameEventTriggerFired triggerSourceId(Integer triggerSourceId) {
    this.triggerSourceId = triggerSourceId;
    return this;
  }

   /**
   * The entity ID corresponding to the source of the trigger that got fired. 
   * @return triggerSourceId
  **/
  @ApiModelProperty(value = "The entity ID corresponding to the source of the trigger that got fired. ")
  public Integer getTriggerSourceId() {
    return triggerSourceId;
  }

  public void setTriggerSourceId(Integer triggerSourceId) {
    this.triggerSourceId = triggerSourceId;
  }

  public GameEventTriggerFired triggerTargetIds(List<Integer> triggerTargetIds) {
    this.triggerTargetIds = triggerTargetIds;
    return this;
  }

  public GameEventTriggerFired addTriggerTargetIdsItem(Integer triggerTargetIdsItem) {
    if (this.triggerTargetIds == null) {
      this.triggerTargetIds = new ArrayList<>();
    }
    this.triggerTargetIds.add(triggerTargetIdsItem);
    return this;
  }

   /**
   * The targets of the trigger&#39;s effect. 
   * @return triggerTargetIds
  **/
  @ApiModelProperty(value = "The targets of the trigger's effect. ")
  public List<Integer> getTriggerTargetIds() {
    return triggerTargetIds;
  }

  public void setTriggerTargetIds(List<Integer> triggerTargetIds) {
    this.triggerTargetIds = triggerTargetIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameEventTriggerFired gameEventTriggerFired = (GameEventTriggerFired) o;
    return Objects.equals(this.triggerSourceId, gameEventTriggerFired.triggerSourceId) &&
        Objects.equals(this.triggerTargetIds, gameEventTriggerFired.triggerTargetIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(triggerSourceId, triggerTargetIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameEventTriggerFired {\n");
    
    sb.append("    triggerSourceId: ").append(toIndentedString(triggerSourceId)).append("\n");
    sb.append("    triggerTargetIds: ").append(toIndentedString(triggerTargetIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

