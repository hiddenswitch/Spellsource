/**
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more
 *
 * OpenAPI spec version: 1.0.1
 * Contact: benjamin.s.berman@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.hiddenswitch.spellsource.client.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.hiddenswitch.spellsource.client.models.Emote;
import com.hiddenswitch.spellsource.client.models.Entity;
import com.hiddenswitch.spellsource.client.models.EntityChangeSet;
import com.hiddenswitch.spellsource.client.models.GameActions;
import com.hiddenswitch.spellsource.client.models.GameEvent;
import com.hiddenswitch.spellsource.client.models.GameOver;
import com.hiddenswitch.spellsource.client.models.GameState;
import com.hiddenswitch.spellsource.client.models.MessageType;
import com.hiddenswitch.spellsource.client.models.Timers;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

import java.io.Serializable;
/**
 * ServerToClientMessage
 */

public class ServerToClientMessage  implements Serializable {
  @SerializedName("id")
  private String id = null;

  @SerializedName("localPlayerId")
  private Integer localPlayerId = null;

  @SerializedName("timers")
  private Timers timers = null;

  @SerializedName("messageType")
  private MessageType messageType = null;

  @SerializedName("changes")
  private EntityChangeSet changes = null;

  @SerializedName("gameState")
  private GameState gameState = null;

  @SerializedName("actions")
  private GameActions actions = null;

  @SerializedName("emote")
  private Emote emote = null;

  @SerializedName("gameOver")
  private GameOver gameOver = null;

  @SerializedName("startingCards")
  private List<Entity> startingCards = new ArrayList<Entity>();

  @SerializedName("event")
  private GameEvent event = null;

  public ServerToClientMessage id(String id) {
    this.id = id;
    return this;
  }

   /**
   * An optional ID used to disambiguate multiple client replies. Include this ID in the repliesTo field of your ClientToServerMessage if this field is not null. 
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "An optional ID used to disambiguate multiple client replies. Include this ID in the repliesTo field of your ClientToServerMessage if this field is not null. ")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ServerToClientMessage localPlayerId(Integer localPlayerId) {
    this.localPlayerId = localPlayerId;
    return this;
  }

   /**
   * The ID of the player that corresponds to the local player (the recipient). 
   * @return localPlayerId
  **/
  @ApiModelProperty(example = "null", value = "The ID of the player that corresponds to the local player (the recipient). ")
  public Integer getLocalPlayerId() {
    return localPlayerId;
  }

  public void setLocalPlayerId(Integer localPlayerId) {
    this.localPlayerId = localPlayerId;
  }

  public ServerToClientMessage timers(Timers timers) {
    this.timers = timers;
    return this;
  }

   /**
   * Get timers
   * @return timers
  **/
  @ApiModelProperty(example = "null", value = "")
  public Timers getTimers() {
    return timers;
  }

  public void setTimers(Timers timers) {
    this.timers = timers;
  }

  public ServerToClientMessage messageType(MessageType messageType) {
    this.messageType = messageType;
    return this;
  }

   /**
   * Get messageType
   * @return messageType
  **/
  @ApiModelProperty(example = "null", value = "")
  public MessageType getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageType messageType) {
    this.messageType = messageType;
  }

  public ServerToClientMessage changes(EntityChangeSet changes) {
    this.changes = changes;
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/
  @ApiModelProperty(example = "null", value = "")
  public EntityChangeSet getChanges() {
    return changes;
  }

  public void setChanges(EntityChangeSet changes) {
    this.changes = changes;
  }

  public ServerToClientMessage gameState(GameState gameState) {
    this.gameState = gameState;
    return this;
  }

   /**
   * Get gameState
   * @return gameState
  **/
  @ApiModelProperty(example = "null", value = "")
  public GameState getGameState() {
    return gameState;
  }

  public void setGameState(GameState gameState) {
    this.gameState = gameState;
  }

  public ServerToClientMessage actions(GameActions actions) {
    this.actions = actions;
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @ApiModelProperty(example = "null", value = "")
  public GameActions getActions() {
    return actions;
  }

  public void setActions(GameActions actions) {
    this.actions = actions;
  }

  public ServerToClientMessage emote(Emote emote) {
    this.emote = emote;
    return this;
  }

   /**
   * Get emote
   * @return emote
  **/
  @ApiModelProperty(example = "null", value = "")
  public Emote getEmote() {
    return emote;
  }

  public void setEmote(Emote emote) {
    this.emote = emote;
  }

  public ServerToClientMessage gameOver(GameOver gameOver) {
    this.gameOver = gameOver;
    return this;
  }

   /**
   * Get gameOver
   * @return gameOver
  **/
  @ApiModelProperty(example = "null", value = "")
  public GameOver getGameOver() {
    return gameOver;
  }

  public void setGameOver(GameOver gameOver) {
    this.gameOver = gameOver;
  }

  public ServerToClientMessage startingCards(List<Entity> startingCards) {
    this.startingCards = startingCards;
    return this;
  }

  public ServerToClientMessage addStartingCardsItem(Entity startingCardsItem) {
    this.startingCards.add(startingCardsItem);
    return this;
  }

   /**
   * Used for a mulligan request. An array of entities representing the cards you may mulligan. 
   * @return startingCards
  **/
  @ApiModelProperty(example = "null", value = "Used for a mulligan request. An array of entities representing the cards you may mulligan. ")
  public List<Entity> getStartingCards() {
    return startingCards;
  }

  public void setStartingCards(List<Entity> startingCards) {
    this.startingCards = startingCards;
  }

  public ServerToClientMessage event(GameEvent event) {
    this.event = event;
    return this;
  }

   /**
   * Get event
   * @return event
  **/
  @ApiModelProperty(example = "null", value = "")
  public GameEvent getEvent() {
    return event;
  }

  public void setEvent(GameEvent event) {
    this.event = event;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerToClientMessage serverToClientMessage = (ServerToClientMessage) o;
    return Objects.equals(this.id, serverToClientMessage.id) &&
        Objects.equals(this.localPlayerId, serverToClientMessage.localPlayerId) &&
        Objects.equals(this.timers, serverToClientMessage.timers) &&
        Objects.equals(this.messageType, serverToClientMessage.messageType) &&
        Objects.equals(this.changes, serverToClientMessage.changes) &&
        Objects.equals(this.gameState, serverToClientMessage.gameState) &&
        Objects.equals(this.actions, serverToClientMessage.actions) &&
        Objects.equals(this.emote, serverToClientMessage.emote) &&
        Objects.equals(this.gameOver, serverToClientMessage.gameOver) &&
        Objects.equals(this.startingCards, serverToClientMessage.startingCards) &&
        Objects.equals(this.event, serverToClientMessage.event);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, localPlayerId, timers, messageType, changes, gameState, actions, emote, gameOver, startingCards, event);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerToClientMessage {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    localPlayerId: ").append(toIndentedString(localPlayerId)).append("\n");
    sb.append("    timers: ").append(toIndentedString(timers)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    gameState: ").append(toIndentedString(gameState)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    emote: ").append(toIndentedString(emote)).append("\n");
    sb.append("    gameOver: ").append(toIndentedString(gameOver)).append("\n");
    sb.append("    startingCards: ").append(toIndentedString(startingCards)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

