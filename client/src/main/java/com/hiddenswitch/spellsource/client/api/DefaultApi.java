/*
 * Hidden Switch Spellsource API
 * The Spellsource API for matchmaking, user accounts, collections management and more
 *
 * OpenAPI spec version: 1.0.1
 * Contact: benjamin.s.berman@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.hiddenswitch.spellsource.client.api;

import com.sun.jersey.api.client.GenericType;

import com.hiddenswitch.spellsource.client.ApiException;
import com.hiddenswitch.spellsource.client.ApiClient;
import com.hiddenswitch.spellsource.client.Configuration;
import com.hiddenswitch.spellsource.client.models.*;
import com.hiddenswitch.spellsource.client.Pair;

import com.hiddenswitch.spellsource.client.models.ChangePasswordRequest;
import com.hiddenswitch.spellsource.client.models.ChangePasswordResponse;
import com.hiddenswitch.spellsource.client.models.CreateAccountRequest;
import com.hiddenswitch.spellsource.client.models.CreateAccountResponse;
import com.hiddenswitch.spellsource.client.models.DecksGetAllResponse;
import com.hiddenswitch.spellsource.client.models.DecksGetResponse;
import com.hiddenswitch.spellsource.client.models.DecksPutRequest;
import com.hiddenswitch.spellsource.client.models.DecksPutResponse;
import com.hiddenswitch.spellsource.client.models.DecksUpdateCommand;
import com.hiddenswitch.spellsource.client.models.DraftState;
import com.hiddenswitch.spellsource.client.models.DraftsChooseCardRequest;
import com.hiddenswitch.spellsource.client.models.DraftsChooseHeroRequest;
import com.hiddenswitch.spellsource.client.models.DraftsPostRequest;
import com.hiddenswitch.spellsource.client.models.FriendPutRequest;
import com.hiddenswitch.spellsource.client.models.FriendPutResponse;
import com.hiddenswitch.spellsource.client.models.GameState;
import com.hiddenswitch.spellsource.client.models.GetAccountsRequest;
import com.hiddenswitch.spellsource.client.models.GetAccountsResponse;
import com.hiddenswitch.spellsource.client.models.GetCardsResponse;
import com.hiddenswitch.spellsource.client.models.GetConversationResponse;
import com.hiddenswitch.spellsource.client.models.LoginRequest;
import com.hiddenswitch.spellsource.client.models.LoginResponse;
import com.hiddenswitch.spellsource.client.models.MatchCancelResponse;
import com.hiddenswitch.spellsource.client.models.MatchConcedeResponse;
import com.hiddenswitch.spellsource.client.models.MatchmakingQueuePutRequest;
import com.hiddenswitch.spellsource.client.models.MatchmakingQueuePutResponse;
import com.hiddenswitch.spellsource.client.models.MatchmakingQueuesResponse;
import com.hiddenswitch.spellsource.client.models.SendMessageRequest;
import com.hiddenswitch.spellsource.client.models.SendMessageResponse;
import com.hiddenswitch.spellsource.client.models.SpellsourceException;
import com.hiddenswitch.spellsource.client.models.UnfriendResponse;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class DefaultApi {
  private ApiClient apiClient;

  public DefaultApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * Changes your password. Does not log you out after the password is changed. 
   * @param request  (required)
   * @return ChangePasswordResponse
   * @throws ApiException if fails to make API call
   */
  public ChangePasswordResponse changePassword(ChangePasswordRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling changePassword");
    }
    
    // create path and map variables
    String localVarPath = "/accounts-password";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<ChangePasswordResponse> localVarReturnType = new GenericType<ChangePasswordResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Create an account with Spellsource. 
   * @param request  (required)
   * @return CreateAccountResponse
   * @throws ApiException if fails to make API call
   */
  public CreateAccountResponse createAccount(CreateAccountRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling createAccount");
    }
    
    // create path and map variables
    String localVarPath = "/accounts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<CreateAccountResponse> localVarReturnType = new GenericType<CreateAccountResponse>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Deletes the specified deck by ID. 
   * @param deckId The Deck ID to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void decksDelete(String deckId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'deckId' is set
    if (deckId == null) {
      throw new ApiException(400, "Missing the required parameter 'deckId' when calling decksDelete");
    }
    
    // create path and map variables
    String localVarPath = "/decks/{deckId}"
      .replaceAll("\\{" + "deckId" + "\\}", apiClient.escapeString(deckId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * 
   * Gets a deck. Only viewable for the owner of the deck or players in the alliance. 
   * @param deckId The Deck ID to get. (required)
   * @return DecksGetResponse
   * @throws ApiException if fails to make API call
   */
  public DecksGetResponse decksGet(String deckId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'deckId' is set
    if (deckId == null) {
      throw new ApiException(400, "Missing the required parameter 'deckId' when calling decksGet");
    }
    
    // create path and map variables
    String localVarPath = "/decks/{deckId}"
      .replaceAll("\\{" + "deckId" + "\\}", apiClient.escapeString(deckId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<DecksGetResponse> localVarReturnType = new GenericType<DecksGetResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets all the user&#39;s decks. 
   * @return DecksGetAllResponse
   * @throws ApiException if fails to make API call
   */
  public DecksGetAllResponse decksGetAll() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/decks";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<DecksGetAllResponse> localVarReturnType = new GenericType<DecksGetAllResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Creates a new deck with optionally specified inventory IDs, a name and a hero class. 
   * @param request The deck creation request.  (required)
   * @return DecksPutResponse
   * @throws ApiException if fails to make API call
   */
  public DecksPutResponse decksPut(DecksPutRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling decksPut");
    }
    
    // create path and map variables
    String localVarPath = "/decks";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<DecksPutResponse> localVarReturnType = new GenericType<DecksPutResponse>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Updates the deck by adding or removing cards, changing the hero class, or renaming the deck. 
   * @param deckId The Deck ID to update. (required)
   * @param updateCommand An update command modifying specified properties of the deck.  (required)
   * @return DecksGetResponse
   * @throws ApiException if fails to make API call
   */
  public DecksGetResponse decksUpdate(String deckId, DecksUpdateCommand updateCommand) throws ApiException {
    Object localVarPostBody = updateCommand;
    
    // verify the required parameter 'deckId' is set
    if (deckId == null) {
      throw new ApiException(400, "Missing the required parameter 'deckId' when calling decksUpdate");
    }
    
    // verify the required parameter 'updateCommand' is set
    if (updateCommand == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCommand' when calling decksUpdate");
    }
    
    // create path and map variables
    String localVarPath = "/decks/{deckId}"
      .replaceAll("\\{" + "deckId" + "\\}", apiClient.escapeString(deckId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<DecksGetResponse> localVarReturnType = new GenericType<DecksGetResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Make a selection for the given draft index. 
   * @param request  (required)
   * @return DraftState
   * @throws ApiException if fails to make API call
   */
  public DraftState draftsChooseCard(DraftsChooseCardRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling draftsChooseCard");
    }
    
    // create path and map variables
    String localVarPath = "/drafts/cards";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<DraftState> localVarReturnType = new GenericType<DraftState>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Choose a hero from your hero selection. 
   * @param request  (required)
   * @return DraftState
   * @throws ApiException if fails to make API call
   */
  public DraftState draftsChooseHero(DraftsChooseHeroRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling draftsChooseHero");
    }
    
    // create path and map variables
    String localVarPath = "/drafts/hero";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<DraftState> localVarReturnType = new GenericType<DraftState>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets your latest state of the draft. 
   * @return DraftState
   * @throws ApiException if fails to make API call
   */
  public DraftState draftsGet() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/drafts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<DraftState> localVarReturnType = new GenericType<DraftState>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Starts a draft, or make a change to your draft, like retiring early. 
   * @param request  (required)
   * @return DraftState
   * @throws ApiException if fails to make API call
   */
  public DraftState draftsPost(DraftsPostRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling draftsPost");
    }
    
    // create path and map variables
    String localVarPath = "/drafts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<DraftState> localVarReturnType = new GenericType<DraftState>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * unfriend a user 
   * @param friendId id of friend to unfriend. (required)
   * @return UnfriendResponse
   * @throws ApiException if fails to make API call
   */
  public UnfriendResponse friendDelete(String friendId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'friendId' is set
    if (friendId == null) {
      throw new ApiException(400, "Missing the required parameter 'friendId' when calling friendDelete");
    }
    
    // create path and map variables
    String localVarPath = "/friends/{friendId}"
      .replaceAll("\\{" + "friendId" + "\\}", apiClient.escapeString(friendId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<UnfriendResponse> localVarReturnType = new GenericType<UnfriendResponse>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * connect with a friend 
   * @param request Friend put request  (required)
   * @return FriendPutResponse
   * @throws ApiException if fails to make API call
   */
  public FriendPutResponse friendPut(FriendPutRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling friendPut");
    }
    
    // create path and map variables
    String localVarPath = "/friends";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<FriendPutResponse> localVarReturnType = new GenericType<FriendPutResponse>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Get a specific account. Contains more information if the userId matches the requesting user. 
   * @param targetUserId  (required)
   * @return GetAccountsResponse
   * @throws ApiException if fails to make API call
   */
  public GetAccountsResponse getAccount(String targetUserId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'targetUserId' is set
    if (targetUserId == null) {
      throw new ApiException(400, "Missing the required parameter 'targetUserId' when calling getAccount");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{targetUserId}"
      .replaceAll("\\{" + "targetUserId" + "\\}", apiClient.escapeString(targetUserId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<GetAccountsResponse> localVarReturnType = new GenericType<GetAccountsResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Get a list of accounts including user profile information. 
   * @param request  (required)
   * @return GetAccountsResponse
   * @throws ApiException if fails to make API call
   */
  public GetAccountsResponse getAccounts(GetAccountsRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling getAccounts");
    }
    
    // create path and map variables
    String localVarPath = "/accounts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<GetAccountsResponse> localVarReturnType = new GenericType<GetAccountsResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets a complete catalogue of all the cards available in Spellsource as a list of CardRecords 
   * @param ifNoneMatch The value returned in the ETag header from the server when this was last called, or empty if this is the first call to this resource.  (optional)
   * @return GetCardsResponse
   * @throws ApiException if fails to make API call
   */
  public GetCardsResponse getCards(String ifNoneMatch) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/cards";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (ifNoneMatch != null)
      localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<GetCardsResponse> localVarReturnType = new GenericType<GetCardsResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * get conversation with friend 
   * @param friendId id of friend (required)
   * @return GetConversationResponse
   * @throws ApiException if fails to make API call
   */
  public GetConversationResponse getFriendConversation(String friendId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'friendId' is set
    if (friendId == null) {
      throw new ApiException(400, "Missing the required parameter 'friendId' when calling getFriendConversation");
    }
    
    // create path and map variables
    String localVarPath = "/friends/{friendId}/conversation"
      .replaceAll("\\{" + "friendId" + "\\}", apiClient.escapeString(friendId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<GetConversationResponse> localVarReturnType = new GenericType<GetConversationResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Returns an empty body if the server is available. 
   * @throws ApiException if fails to make API call
   */
  public void healthCheck() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * 
   * Login with a username and password, receiving an authentication token to use for future sessions. 
   * @param request  (required)
   * @return LoginResponse
   * @throws ApiException if fails to make API call
   */
  public LoginResponse login(LoginRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling login");
    }
    
    // create path and map variables
    String localVarPath = "/accounts";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<LoginResponse> localVarReturnType = new GenericType<LoginResponse>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Concedes the player&#39;s current game in this queue, or cancels their place in it. 
   * @param queueId The ID of the queue to enter. (required)
   * @return MatchConcedeResponse
   * @throws ApiException if fails to make API call
   */
  public MatchConcedeResponse matchmakingConstructedDelete(String queueId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'queueId' is set
    if (queueId == null) {
      throw new ApiException(400, "Missing the required parameter 'queueId' when calling matchmakingConstructedDelete");
    }
    
    // create path and map variables
    String localVarPath = "/matchmaking/{queueId}"
      .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<MatchConcedeResponse> localVarReturnType = new GenericType<MatchConcedeResponse>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets a renderable gamestate representing this player&#39;s current game in this queue. 
   * @param queueId The ID of the queue to enter. (required)
   * @return GameState
   * @throws ApiException if fails to make API call
   */
  public GameState matchmakingConstructedGet(String queueId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'queueId' is set
    if (queueId == null) {
      throw new ApiException(400, "Missing the required parameter 'queueId' when calling matchmakingConstructedGet");
    }
    
    // create path and map variables
    String localVarPath = "/matchmaking/{queueId}"
      .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<GameState> localVarReturnType = new GenericType<GameState>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Removes your client from the matchmaking queue, regardless of which queue it is in.
   * @return MatchCancelResponse
   * @throws ApiException if fails to make API call
   */
  public MatchCancelResponse matchmakingConstructedQueueDelete() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/matchmaking";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<MatchCancelResponse> localVarReturnType = new GenericType<MatchCancelResponse>() {};
    return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Enters your client into the specified matchmaking queue. Clients have to keep their matchmaking queue entry  alive by regularly retrying when they have not yet been matched. Retry within 5 seconds. 
   * @param queueId The ID of the queue to enter. (required)
   * @param request The matchmaking queue entry. Contains the deck.  (required)
   * @return MatchmakingQueuePutResponse
   * @throws ApiException if fails to make API call
   */
  public MatchmakingQueuePutResponse matchmakingConstructedQueuePut(String queueId, MatchmakingQueuePutRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'queueId' is set
    if (queueId == null) {
      throw new ApiException(400, "Missing the required parameter 'queueId' when calling matchmakingConstructedQueuePut");
    }
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling matchmakingConstructedQueuePut");
    }
    
    // create path and map variables
    String localVarPath = "/matchmaking/{queueId}"
      .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<MatchmakingQueuePutResponse> localVarReturnType = new GenericType<MatchmakingQueuePutResponse>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets a list of queues available for matchmaking. 
   * @return MatchmakingQueuesResponse
   * @throws ApiException if fails to make API call
   */
  public MatchmakingQueuesResponse matchmakingGet() throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/matchmaking";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<MatchmakingQueuesResponse> localVarReturnType = new GenericType<MatchmakingQueuesResponse>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * send message to friend 
   * @param friendId id of friend (required)
   * @param request Send message request (required)
   * @return SendMessageResponse
   * @throws ApiException if fails to make API call
   */
  public SendMessageResponse sendFriendMessage(String friendId, SendMessageRequest request) throws ApiException {
    Object localVarPostBody = request;
    
    // verify the required parameter 'friendId' is set
    if (friendId == null) {
      throw new ApiException(400, "Missing the required parameter 'friendId' when calling sendFriendMessage");
    }
    
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling sendFriendMessage");
    }
    
    // create path and map variables
    String localVarPath = "/friends/{friendId}/conversation"
      .replaceAll("\\{" + "friendId" + "\\}", apiClient.escapeString(friendId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "TokenSecurity" };

    GenericType<SendMessageResponse> localVarReturnType = new GenericType<SendMessageResponse>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
