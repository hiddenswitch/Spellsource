# Spellsource auto-generated client for Unity and Java specification using swagger
# Run ./client.sh after modifying this file
# Examine build.gradle for more about how swagger-codegen is invoked for C# and Java
# Note a typo in the java template in the exact version of swagger-codegen that is required causes the
# client/build.gradle file to have a syntax issue
swagger: "2.0"
info:
  version: 4.0.0
  title: Hidden Switch Spellsource API
  description: |
    The Spellsource API for matchmaking, user accounts, collections management and more.

    To get started, create a user account and make sure to include the entirety of the returned login token as the
    X-Auth-Token header. You can reuse this token, or login for a new one.

    ClientToServerMessage and ServerToClientMessage are used for the realtime game state and actions two-way websocket
    interface for actually playing a game. Envelope is used for the realtime API services.

    For the routes that correspond to the paths in this file, visit the Gateway.java file in the Spellsource-Server
    GitHub repository located in this definition file.
  contact:
    name: Benjamin Berman
    email: ben@hiddenswitch.com
    url: https://hiddenswitch.com
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: api.hiddenswitch.com
basePath: /api/v3
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  TokenSecurity:
    type: apiKey
    in: header
    name: X-Auth-Token
definitions:
  Envelope:
    description: |
      A container for data to and from the server. This envelope is the type of every message sent through the
      /realtime websocket endpoint.
    type: 'object'
    properties:
      added:
        description: |
          Indicates one of the records should be added to the client's ephemeral collections.
        type: 'object'
        properties:
          chatMessage:
            $ref: '#/definitions/ChatMessage'
          friend:
            $ref: '#/definitions/Friend'
          invite:
            $ref: '#/definitions/Invite'
          match:
            $ref: '#/definitions/Match'
          spanContext:
            $ref: '#/definitions/SpanContext'
      changed:
        description: |
          Indicates that a record's fields have changed.
        type: 'object'
        properties:
          friend:
            $ref: '#/definitions/Friend'
          invite:
            $ref: '#/definitions/Invite'
      removed:
        description: |
          Indicates that a record has been removed from the client's ephemeral collections.
        type: 'object'
        properties:
          inviteId:
            description: |
              The unique ID of the invitation that should be removed.
            type: 'string'
          matchId:
            description: |
              The unique ID of the match that should be removed.
            type: 'string'
          friendId:
            description: |
              The unique ID of the friend that should be removed,
            type: 'string'
      sub:
        description: |
          When populated by the client and sent to the server, subscribes to data of the specified kind.
        type: 'object'
        properties:
          conversation:
            description: |
              Subscribe to messages in a specific conversation. Receives all past messages, followed by any new ones.
            type: 'object'
            properties:
              conversationId:
                type: 'string'
      request:
        description: |
          When populated by the server and sent to the client, represents a request from the server for information in
          the client.
        type: 'object'
        properties:
          isAlive:
            description: |
              The server is inquiring if the client is still in matchmaking/is alive with a low timeout.
            type: 'object'
      response:
        description: |
          When populated by the client and sent to the server, indicates a response to a request from the server.
        type: 'object'
        properties:
          isAlive:
            $ref: '#/definitions/DefaultMethodResponse'
      method:
        description: |
          When populated by the client and sent to the server, indicates a method should be called. The side effects of
          methods may include new data updates and a response.
        type: 'object'
        properties:
          methodId:
            description: |
              The client-specified ID that will be used to mark the reply (the result) of this method call.
            type: 'string'
          enqueue:
            $ref: '#/definitions/MatchmakingQueuePutRequest'
          dequeue:
            description: |
              Leave the specified queue
            type: 'object'
            properties:
              queueId:
                type: 'string'
                description: |
                  The queue to which the server should direct this request.
          sendMessage:
            description: |
              Send a change message to the indicated conversationId.
            type: 'object'
            properties:
              conversationId:
                description: |
                  A conversation ID looks like userId1,userId2 where the first user ID is the one that comes first
                  lexicographically.
                type: 'string'
              message:
                description: |
                  The contents of the message to send to the conversation.
                type: 'string'
      result:
        description: |
          When populated on the server and sent to the client, indicates that a method call had a specific result.
        type: 'object'
        properties:
          methodId:
            description: |
              The ID of the method this is a result for.
            type: 'string'
          sendMessage:
            description: |
              The result of sending a message.
            type: 'object'
            properties:
              messageId:
                description: |
                  The new message ID.
                type: 'string'
          enqueue:
            $ref: '#/definitions/MatchmakingQueuePutResponse'
          dequeue:
            $ref: '#/definitions/DefaultMethodResponse'
      game:
        description: |
          Stores a ClientToServerMessage or a ServerToClientMessage. Allows envelopes to carry game messages.
        type: 'object'
        properties:
          serverToClient:
            $ref: '#/definitions/ServerToClientMessage'
          clientToServer:
            $ref: '#/definitions/ClientToServerMessage'
  Enchantment:
    type: 'object'
    description: |
      An enchantment
  ChatMessage:
    description: |
      A chat message.
    type: 'object'
    properties:
      messageId:
        description: |
          The ID of the message.
        type: 'string'
      conversationId:
        description: |
          A conversation ID looks like userId1,userId2 where the first user ID is the one that comes first
          lexicographically.
        type: 'string'
      senderName:
        description: |
          The text to render in the sender name field.
        type: 'string'
      senderUserId:
        description: |
          The user ID of the sender. Useful for looking up against the presence notifications.
        type: 'string'
      timestamp:
        description: |
          The timestamp of the message.
        type: 'integer'
        format: 'int64'
      dateLabel:
        description: |
          The text that should be used to render when this message was sent.
        type: 'string'
      message:
        description: |
          The contents of this message.
        type: 'string'
  Invite:
    description: |
      An object that indicates the player has a pending invitation to a game.
    type: 'object'
    properties:
      _id:
        description: |
          The ID of the invite.
        type: 'string'
      fromUserId:
        description: |
          The user ID from whom the invite originates
        type: 'string'
      toUserId:
        description: |
          The user ID to whom the invite is addressed
        type: 'string'
      toName:
        description: |
          The name of the user to whom the invite is addressed
        type: 'string'
      fromName:
        description: |
          The user from whom the invite originates
        type: 'string'
      message:
        description: |
          The description of this invite. Typically includes the queue contents and possibly a note from the user.
        type: 'string'
      queueId:
        description: |
          When set, indicates this is an invitation to play a game. The queue ID to put into the matchmaking request to
          fulfill this invite.
        type: 'string'
      friendId:
        description: |
          When set, indicates this is an invitation to become friends.
        type: 'string'
      expiresAt:
        description: |
          An expiration timestamp.
        type: 'integer'
        format: 'int64'
      status:
        description: |
          Indicates the status of the invite.
           * UNDELIVERED: The invitation was created and is awaiting delivery, either due to ordinary networking delay
             or because the recipient is not yet online.
           * PENDING: The invitation is delivered and awaiting a response.
           * TIMEOUT: The recipient did not respond by the expiration time and the invitation expired.
           * ACCEPTED: The recipient accepted the invitation. The sender should enter the queue if they haven't already
             done so.
           * REJECTED: The recipient rejected the invitation.
           * CANCELLED: The sender cancelled the invitation.
        type: 'string'
        enum:
          - 'UNDELIVERED'
          - 'PENDING'
          - 'TIMEOUT'
          - 'ACCEPTED'
          - 'REJECTED'
          - 'CANCELLED'
  PresenceEnum:
    description: |
      Indicates the current status of a friend.
    type: 'string'
    enum:
      - 'UNKNOWN'
      - 'OFFLINE'
      - 'IN_GAME'
      - 'ONLINE'
  Friend:
    type: 'object'
    properties:
      presence:
        $ref: '#/definitions/PresenceEnum'
      friendId:
        type: 'string'
      since:
        type: 'integer'
        format: 'int64'
      friendName:
        type: 'string'
  Account:
    type: 'object'
    properties:
      _id:
        description: The user ID
        type: 'string'
      name:
        description: The username that is displayed to toher players
        type: 'string'
      privacyToken:
        description: |
          The token that is appended to the end of the user's name to allow friending without sharing an e-mail address.
        type: 'string'
      email:
        description: The user's email address
        type: 'string'
      friends:
        description: |
          The user's friends at the moment of receiving this account document. This may be out of date as the latest
          friends information will come from receiving friend documents.
        type: 'array'
        items:
          $ref: '#/definitions/Friend'
      decks:
        description: A list of decks belonging to the player
        type: 'array'
        items:
          $ref: '#/definitions/InventoryCollection'
      inMatch:
        type: 'boolean'
        description: |
          True if the client should attempt to connect to a match with its token.
      personalCollection:
        $ref: '#/definitions/InventoryCollection'
  GetAccountsRequest:
    type: 'object'
    required:
      - userIds
    properties:
      userIds:
        description: |
          An array of user IDs to fetch.
        type: 'array'
        items:
          type: 'string'
  GetAccountsResponse:
    type: 'object'
    properties:
      accounts:
        type: 'array'
        items:
          $ref: '#/definitions/Account'
  CreateAccountRequest:
    type: 'object'
    required:
      - name
      - email
      - password
    properties:
      name:
        description: |
          A display name for the user.
        type: 'string'
      email:
        description: |
          An email account for password resets.
        type: 'string'
        format: 'email'
      password:
        description: |
          A password used to login to Spellsource.
        type: 'string'
        format: 'password'
  CreateAccountResponse:
    type: 'object'
    properties:
      loginToken:
        description: |
          A string containing the token to login with via the standard Spellsource authentication method.
        type: 'string'
      account:
        $ref: '#/definitions/Account'
  LoginRequest:
    type: 'object'
    required:
      - email
      - password
    properties:
      email:
        type: 'string'
      password:
        type: 'string'
        format: 'password'
  LoginResponse:
    properties:
      account:
        $ref: '#/definitions/Account'
      loginToken:
        type: 'string'
  DecksPutRequest:
    type: 'object'
    description: |
      This request allows a user to specify a decklist or deck properies for creating a new deck. Whenever a deck list
      is specified (non-null and not equal to the empty string), the deck list will be preferred. Decks created without
      a deck list may have no properties specified, and the deck will still be successfully created.
    properties:
      heroClass:
        description: |
          A valid hero class for creating the deck. The appropriate hero card will be chosen for this deck unless
          otherwise specified.
        type: 'string'
      name:
        description: |
          The name of the deck as it will appear in the collections view. Typically, your opponent will not be able to
          see this name.

          Some custom cards interact with specific named decks in your collection. For those purposes, the deck names
          are case sensitive. When multiple decks share a name, one will be chosen arbitrarily (not at random).
        type: 'string'
      inventoryIds:
        type: 'array'
        items:
          type: 'string'
      format:
        description: |
          The format of this deck. Format specifies which cards are allowable in this deck for validation. It also
          specifies which cards will appear in discovers during matchmaking.

          Currenly, matchmaking occurs between decks of all formats, regardless of your choice of format. The smallest
          possible format encompassing both decks in a match is selected when the formats of the decks do not match.

          Certain queues only support certain formats. Typically, when requesting the listing of queues with
          matchmakingGet, the queues will specify which current decks can be chosen.
        type: 'string'
      deckList:
        type: 'string'
        description: |
          A community-standard decklist.
  DecksPutResponse:
    description: |
      The deck that was created by a deck put request.
    type: 'object'
    properties:
      deckId:
        type: 'string'
      collection:
        $ref: '#/definitions/InventoryCollection'
  DecksUpdateCommand:
    type: 'object'
    description: |
      This command contains a variable number of changes to apply to a deck. Whenever multiple fields are set, the
      server will try to resolve their effects in the least surprising way possible.

      Specifically, if setInventoryIds is set, it will override all other changes to the inventory. Otherwise, removals
      will be evaluated first, preferring inventory ID removals over card ID removals, followed by adds.
    properties:
      setHeroClass:
        description: |
          Sets the hero class of the deck in this command. If the deck now contains cards that no longer belong to this
          hero class, the deck becomes invalid under standard rules.
        type: 'string'
      setName:
        description: |
          Sets the name of the deck in this command. If the name is null, the deck becomes invalid.
        type: 'string'
      setInventoryIds:
        description: |
          Sets the entire deck's inventory IDs in this command. Duplicate inventory IDs will cause the update to
          be rejected. If the user does not own these inventory IDs, the deck becomes invalid. Under standard rules,
          duplicate card IDs also make the deck invalid. Finally, adding cards whose hero class isn't neutral or the
          same as the deck's hero class marks the deck as invalid.
        type: 'array'
        items:
          type: 'string'
      pushInventoryIds:
        description: |
          Adds the specified inventory IDs to the deck in this command. Duplicate inventory IDs will cause the update to
          be rejected. If the user does not own these inventory IDs, the deck becomes invalid. Under standard rules,
          duplicate card IDs also make the deck invalid. Finally, adding cards whose hero class isn't neutral or the
          same as the deck's hero class marks the deck as invalid.
        type: 'object'
        required:
          - $each
        properties:
          $each:
            description: |
              The items in this array specify which inventory IDs should be added.
            type: 'array'
            items:
              type: 'string'
      pushCardIds:
        description: |
          Adds the specified card IDs to the deck with this command. If the player doesn't own the card IDs, the current
          Spellsource inventory rules will grant the cards to the user. Duplicates are allowed. Under standard rules,
          the deck becomes invalid if the number of duplicates exceeds 2; or, if the hero class isn't neutral or the
          same as the deck's hero class.
        type: 'object'
        required:
          - $each
        properties:
          $each:
            description: |
              The items in this array specify which card IDs should be added.
            type: 'array'
            items:
              type: 'string'
      pullAllInventoryIds:
        description: |
          Removes all the specified inventory IDs from the user's deck. Does nothing if the deck does not contain any of
          the specified inventory IDs. This method will still succeed for inventory IDs that are found.
        type: 'array'
        items:
          type: 'string'
      pullAllCardIds:
        description: |
          Removes all the specified card IDs from the user's deck. Does nothing if the deck does not contain any of the
          specified card IDs. This method will still succeed for deck IDs that are found.
        type: 'array'
        items:
          type: 'string'
  DecksGetResponse:
    type: 'object'
    properties:
      collection:
        $ref: '#/definitions/InventoryCollection'
      inventoryIdsSize:
        description: |
          The current number of cards in this deck.
        type: 'integer'
  DecksGetAllResponse:
    type: 'object'
    properties:
      decks:
        type: 'array'
        items:
          $ref: '#/definitions/DecksGetResponse'
  ChangePasswordRequest:
    type: 'object'
    required:
      - password
    properties:
      password:
        type: 'string'
        description: |
          The new password
  ChangePasswordResponse:
    type: 'object'
    description: |
      An empty response signifying your password was correctly changed
  InventoryCollection:
    description: |
      A collection of cards.
    type: 'object'
    properties:
      _id:
        description: |
          The identifier of this collection. Corresponds to a deckId when this is a deck collection.
        type: 'string'
      userId:
        description: |
          The owner of this collection.
        type: 'string'
      name:
        description: |
          The name of this collection. Corresponds to the deck name when this is a deck collection.
        type: 'string'
      heroClass:
        description: |
          The hero class when this is a deck collection.
        type: 'string'
      format:
        description: |
          The format when this is a deck collection.
        type: 'string'
      type:
        description: |
          The type of collection this object is. A user's personal collection is of type USER. A deck is of type DECK.
        type: 'string'
        enum:
          - 'USER'
          - 'ALLIANCE'
          - 'DECK'
      deckType:
        description: |
          Indicates whether this is a deck meant for draft or constructed play.
        type: 'string'
        enum:
          - 'DRAFT'
          - 'CONSTRUCTED'
      isStandardDeck:
        description: |
          When true, indicates this is a standard deck provided by the server.
        type: 'boolean'
      inventory:
        type: 'array'
        items:
          $ref: '#/definitions/CardRecord'
  CardRecord:
    type: 'object'
    properties:
      _id:
        type: 'string'
      entity:
        $ref: '#/definitions/Entity'
      userId:
        type: 'string'
      collectionIds:
        type: 'array'
        items:
          type: 'string'
      borrowedByUserId:
        type: 'string'
      allianceId:
        type: 'string'
      donorUserId:
        type: 'string'
  MessageType:
    type: 'string'
    enum:
      - 'REGISTER_PLAYER'
      - 'UPDATE_ACTION'
      - 'ON_GAME_EVENT'
      - 'ON_GAME_END'
      - 'SET_PLAYERS'
      - 'ON_ACTIVE_PLAYER'
      - 'ON_UPDATE'
      - 'ON_TURN_END'
      - 'ON_REQUEST_ACTION'
      - 'FIRST_MESSAGE'
      - 'ON_MULLIGAN'
      - 'UPDATE_MULLIGAN'
      - 'EMOTE'
      - 'TOUCH'
      - 'CONCEDE'
      - 'PINGPONG'
  Emote:
    description: |
      An emote that should play from the specified entity.
    type: 'object'
    properties:
      entityId:
        type: 'integer'
      message:
        type: 'string'
        enum:
          - 'HELLO'
          - 'AMAZING'
          - 'WHOOPS'
          - 'GOOD_GAME'
          - 'FACE_MY_WRATH'
          - 'WELL_PLAYED'
  Timers:
    description: |
      Information about timers. This helps the client render the countdown clock.
    type: 'object'
    properties:
      millisRemaining:
        description: |
          The number of milliseconds remaining before the server will end the mulligan or turn.
          When null or less than zero, no timer is set. This property will be valid with respect to the
          last timestamped message from the server. Since typically emotes and touches are not timestamped,
          while other game state messages are, this property will be updated with actions and data. It is
          the responsibility of the client to lerp the millis-remaining values with the actual animated
          timer to prevent choppy animation.
        type: 'integer'
        format: 'int64'
  GameOver:
    description: |
      An object that describes the winner and loser of a game
    type: 'object'
    properties:
      localPlayerWon:
        type: 'boolean'
        description: |
          True when the local player has won.
      winningPlayerId:
        type: 'integer'
        description: |
          The ID of the player who has won. Null if no player has won.
  ServerToClientMessage:
    type: 'object'
    required:
      - messageType
    properties:
      id:
        type: 'string'
        description: |
          An optional ID used to disambiguate multiple client replies. Include this ID in the repliesTo field of your
          ClientToServerMessage if this field is not null.
      localPlayerId:
        type: 'integer'
        description: |
          The ID of the player that corresponds to the local player (the recipient).
      timers:
        $ref: '#/definitions/Timers'
      messageType:
        $ref: '#/definitions/MessageType'
      changes:
        $ref: '#/definitions/EntityChangeSet'
      gameState:
        $ref: '#/definitions/GameState'
      actions:
        $ref: '#/definitions/GameActions'
      emote:
        $ref: '#/definitions/Emote'
      gameOver:
        $ref: '#/definitions/GameOver'
      isReplayMessage:
        description: |
          True iff this message is a part of a replay.
        type: 'boolean'
        default: False
      startingCards:
        description: |
          Used for a mulligan request. An array of entities representing the cards you may mulligan.
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      event:
        $ref: '#/definitions/GameEvent'
  ClientToServerMessage:
    type: 'object'
    properties:
      messageType:
        $ref: '#/definitions/MessageType'
      repliesTo:
        type: 'string'
        description: |
          The ID of the server message this client message is replying to.
      firstMessage:
        type: 'object'
        properties:
          playerKey:
            type: 'string'
            description: |
              A key authenticating this connection. Used only for the first message.
          playerSecret:
            type: 'string'
            description: |
              A server-signed secret that authenticates this player for this match. Used only for the first message.
      actionIndex:
        type: 'integer'
        description: |
          The index of the available actions to use.
      discardedCardIndices:
        type: 'array'
        items:
          type: 'integer'
        description:
          The indices of cards to discard in a mulligan.
      emote:
        $ref: '#/definitions/Emote'
      entityTouch:
        description: |
          When specified with an entity ID, indicates the client is "touching" this entity.
        type: 'integer'
      entityUntouch:
        description: |
          When specified with an entity ID, indicates the client is no longer touching the specified entity.
        type: 'integer'
  PhysicalAttackEvent:
    type: 'object'
    properties:
      attacker:
        $ref: '#/definitions/Entity'
      defender:
        $ref: '#/definitions/Entity'
      damageDealt:
        type: 'integer'
  EntityLocation:
    type: 'object'
    required:
      - z
      - i
      - p
    properties:
      p:
        type: 'integer'
      i:
        type: 'integer'
      z:
        type: 'string'
        enum:
          - 'N' # 'NONE'
          - 'H' # 'HAND'
          - 'D' # 'DECK'
          - 'G' # 'GRAVEYARD'
          - 'B' # 'BATTLEFIELD'
          - 'S' # 'SECRET'
          - 'Q' # 'QUEST'
          - 'K' # 'HERO_POWER'
          - 'E' # 'HERO'
          - 'W' # 'WEAPON'
          - 'A' # 'SET_ASIDE_ZONE'
          - 'Z' # 'HIDDEN'
          - 'V' # 'DISCOVER'
          - 'R' # 'REMOVED_FROM_PLAY'
          - 'P' # 'PLAYER'
  EntityChangeSet:
    description: |
      An abbreviated description of changes since the last change set this client received.
    type: 'array'
    items:
      type: 'object'
      properties:
        op:
          description: |
            Describes a change to an entity. 'A' corresponds to added/inserted, 'C' corresponds to changed, 'R' corresponds to
            removed. p0 is the previous value, if it exists. p1 is the current value. Only the entity's locatino is currently
            populated in this changeset.
          type: 'string'
          enum:
            - 'A'
            - 'C'
            - 'R'
        id:
          description: |
            The ID of the entity in this change set.
          type: 'integer'
        p0:
          $ref: '#/definitions/EntityState'
        p1:
          $ref: '#/definitions/EntityState'
  CardEvent:
    type: 'object'
    properties:
      showLocal:
        type: 'boolean'
        description: |
          Forces this card event to be shown locally
      card:
        $ref: '#/definitions/Entity'
  DamageTypeEnum:
    type: 'string'
    enum:
      - 'PHYSICAL'
      - 'MAGICAL'
  GameEvent:
    type: 'object'
    properties:
      id:
        description: |
          An integer ID corresponding to the order of this event from the client's point of view.
        type: 'integer'
      description:
        description: |
          A plaintext description of this event.
        type: 'string'
      isPowerHistory:
        description: |
          Should this event be rendered in the power history?
        type: 'boolean'
      eventType:
        type: 'string'
        description: |
          The game event type corresponding to this game event.
        enum:
          - 'ALL'
          - 'AFTER_PHYSICAL_ATTACK'
          - 'AFTER_PLAY_CARD'
          - 'AFTER_SPELL_CASTED'
          - 'AFTER_SUMMON'
          - 'ATTRIBUTE_APPLIED'
          - 'ARMOR_GAINED'
          - 'BEFORE_SUMMON'
          - 'BOARD_CHANGED'
          - 'CARD_ADDED_TO_DECK'
          - 'CARD_SHUFFLED'
          - 'DAMAGE'
          - 'DECAY'
          - 'DID_END_SEQUENCE'
          - 'DISCARD'
          - 'DISCOVER'
          - 'DRAIN'
          - 'DRAW_CARD'
          - 'ENRAGE_CHANGED'
          - 'ENTITY_TOUCHED'
          - 'ENTITY_UNTOUCHED'
          - 'FATIGUE'
          - 'GAME_START'
          - 'HEAL'
          - 'HERO_POWER_USED'
          - 'INVOKED'
          - 'JOUST'
          - 'KILL'
          - 'LOSE_DIVINE_SHIELD'
          - 'LOSE_DEFLECT'
          - 'LOSE_STEALTH'
          - 'MAX_HP_INCREASED'
          - 'MAX_MANA'
          - 'MANA_MODIFIED'
          - 'OVERLOAD'
          - 'PERFORMED_GAME_ACTION'
          - 'PHYSICAL_ATTACK'
          - 'PLAY_CARD'
          - 'PRE_DAMAGE'
          - 'PRE_GAME_START'
          - 'QUEST_PLAYED'
          - 'QUEST_SUCCESSFUL'
          - 'RETURNED_TO_HAND'
          - 'ROASTED'
          - 'REVEAL_CARD'
          - 'SECRET_PLAYED'
          - 'SECRET_REVEALED'
          - 'SPELL_CASTED'
          - 'SUMMON'
          - 'TARGET_ACQUISITION'
          - 'TRIGGER_FIRED'
          - 'TURN_END'
          - 'TURN_START'
          - 'SILENCE'
          - 'WEAPON_DESTROYED'
          - 'WEAPON_EQUIPPED'
          - 'WILL_END_SEQUENCE'
      afterPhysicalAttack:
        $ref: '#/definitions/PhysicalAttackEvent'
      drawCard:
        $ref: '#/definitions/CardEvent'
      entityTouched:
        type: 'integer'
      entityUntouched:
        type: 'integer'
      preDamage:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      silence:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
      secretPlayed:
        type: 'object'
        properties:
          secretCard:
            $ref: '#/definitions/Entity'
      beforeSummon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      cardPlayed:
        $ref: '#/definitions/CardEvent'
      armorGained:
        type: 'object'
        properties:
          hero:
            $ref: '#/definitions/Entity'
      afterSummon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      spellCasted:
        $ref: '#/definitions/CardEvent'
      joust:
        type: 'object'
        properties:
          won:
            type: 'boolean'
          ownCard:
            $ref: '#/definitions/Entity'
          opponentCard:
            $ref: '#/definitions/Entity'
      weaponDestroyed:
        type: 'object'
        properties:
          weapon:
            $ref: '#/definitions/Entity'
      heroPowerUsed:
        type: 'object'
        properties:
          heroPower:
            $ref: '#/definitions/Entity'
      enrageChanged:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
      targetAcquisition:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      damage:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
          damage:
            type: 'integer'
          source:
            $ref: '#/definitions/Entity'
          damageType:
            $ref: '#/definitions/DamageTypeEnum'
      weaponEquipped:
        type: 'object'
        properties:
          weapon:
            $ref: '#/definitions/Entity'
      performedGameAction:
        type: 'object'
        properties:
          source:
            $ref: '#/definitions/Entity'
          target:
            $ref: '#/definitions/Entity'
          description:
            description: |
              A plain-text description of the game action that should be rendered on the client.
            type: 'string'
      physicalAttack:
        $ref: '#/definitions/PhysicalAttackEvent'
      overload:
        type: 'object'
        properties:
          card:
            $ref: '#/definitions/Entity'
      heal:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
          healing:
            type: 'integer'
      secretRevealed:
        type: 'object'
        properties:
          secret:
            $ref: '#/definitions/Entity'
      questSuccessful:
        type: 'object'
        properties:
          quest:
            $ref: '#/definitions/Entity'
      questPlayed:
        type: 'object'
        properties:
          quest:
            $ref: '#/definitions/Entity'
      summon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      afterSpellCasted:
        type: 'object'
        properties:
          sourceCard:
            $ref: '#/definitions/Entity'
          spellTarget:
            $ref: '#/definitions/Entity'
      discard:
        $ref: '#/definitions/CardEvent'
      roasted:
        $ref: '#/definitions/CardEvent'
      kill:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
      fatigue:
        type: 'object'
        properties:
          playerId:
            type: 'integer'
          damage:
            type: 'integer'
      triggerFired:
        type: 'object'
        properties:
          description:
            description: |
              A plain text description of an explanation of this trigger firing.
            type: 'string'
          triggerSourceId:
            description: |
              The entity ID corresponding to the source of the trigger that got fired.
            type: 'integer'
          triggerSource:
            $ref: '#/definitions/Entity'
  MatchmakingQueuePutRequest:
    type: 'object'
    properties:
      queueId:
        type: 'string'
        description: |
          Indicates which queue this request is for.
      deckId:
        type: 'string'
        description: |
          When set, specifies the deck for this queue. Some queues do not accept deck IDs.
      botDeckId:
        type: 'string'
        description: |
          When set, specifies that the bot should play the provided deck.
  MatchmakingQueuePutResponseUnityConnection:
    type: 'object'
    properties:
      url:
        type: 'string'
        description: |
          The websocket URL to connect to.
      firstMessage:
        $ref: '#/definitions/ClientToServerMessage'
  MatchmakingQueuePutResponse:
    type: 'object'
    properties:
      unityConnection:
        $ref: '#/definitions/MatchmakingQueuePutResponseUnityConnection'
      retry:
        $ref: '#/definitions/MatchmakingQueuePutRequest'
  MatchCancelResponse:
    type: 'object'
    properties:
      isCanceled:
        type: 'boolean'
  MatchConcedeResponse:
    type: 'object'
    properties:
      isConceded:
        type: 'boolean'
  DraftState:
    type: 'object'
    description: |
      Describes the current state of a draft, including the deck in progress, the new choices,
      and the hero choices.
    properties:
      heroClassChoices:
        description: |
          When not null, contains three choices you should reply with to choose the hero of your draft.
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      currentCardChoices:
        description: |
          When not null, contains the cards that correspond to your choices for the next draft selection.
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      heroClass:
        $ref: '#/definitions/Entity'
      status:
        description: |
          Gets the status of the draft.
        type: 'string'
        enum:
          - 'IN_PROGRESS'
          - 'SELECT_HERO'
          - 'COMPLETE'
          - 'RETIRED'
      selectedCardIds:
        type: 'array'
        items:
          type: 'string'
      cardsRemaining:
        description: |
          Gets the number of card choices remaining to make.
        type: 'integer'
      draftIndex:
        description: |
          Gets the current draft index.
        type: 'integer'
      wins:
        description: |
          The number of wins you have achieved with your current draft deck.
        type: 'integer'
      losses:
        description: |
          The number of losses you have suffered with your current draft deck.
        type: 'integer'
      deckId:
        description: |
          The deck that corresponds to your finished draft deck.
        type: 'string'
  FriendPutRequest:
    type: 'object'
    description: |
      Adds two users to each other's friends list.
    properties:
      usernameWithToken:
        type: 'string'
        description: |
          The username with the privacy token, like "username#1234".
      friendId:
        type: 'string'
        description: |
          Not supported. Throws an error if this is specified on the client.
    required:
      - friendId
  FriendPutResponse:
    type: 'object'
    properties:
      friend:
        $ref: '#/definitions/Friend'
  UnfriendResponse:
    type: 'object'
    properties:
      deletedFriend:
        $ref: '#/definitions/Friend'
  GameState:
    type: 'object'
    properties:
      powerHistory:
        description: |
          The last ten game event objects with isPowerHistory == true.
        type: 'array'
        items:
          $ref: '#/definitions/GameEvent'
      entities:
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      isLocalPlayerTurn:
        type: 'boolean'
        description: When true, it is the local player's turn.
      turnState:
        type: 'string'
      turnNumber:
        type: 'integer'
      timestamp:
        type: 'integer'
        format: 'int64'
  TargetActionPair:
    description: |
      A pair combining a target (entity ID) and the correponding action for that target.
    type: 'object'
    properties:
      target:
        type: 'integer'
      action:
        type: 'integer'
  SpellAction:
    type: 'object'
    description: |
      A spell action or battlecry.
    properties:
      sourceId:
        description: |
          The ID of the source card in your hand or the minion that originates this spell or battlecry.
        type: 'integer'
      action:
        description: |
          The action for this spell. Defined when this spell is not targetable.
        type: 'integer'
      targetKeyToActions:
        description: |
          An array of entity ID-action pairs that let you convert a valid target to an action index to respond with.
          Defined if this spell is targetable.
        type: 'array'
        items:
          $ref: '#/definitions/TargetActionPair'
  SummonAction:
    description: |
      A summon action that originates from a specific card.
    type: 'object'
    properties:
      sourceId:
        description: |
          The ID of the source card in your hand.
        type: 'integer'
      indexToActions:
        description: |
          An array of index-action pairs that let you convert a battlefield location to an action index to
          respond with.
        type: 'array'
        items:
          description: |
            A single index-action pair.
          type: 'object'
          properties:
            index:
              description: |
                The position in the battlefield that corresponds to this summon action.
              type: 'integer'
            action:
              description: |
                The action index of this particular summon index position for this card.
              type: 'integer'
  ChooseOneOptions:
    description: |
      A prompt to choose from specified options.
    type: 'object'
    properties:
      cardInHandId:
        type: 'integer'
        description: |
          The card in the hand that corresponds to these two options.
      entities:
        type: 'array'
        description: |
          The virtual cards used to render the options.
        items:
          $ref: '#/definitions/Entity'
      spells:
        type: 'array'
        description: |
          The spells that correspond to the virtual entities. Their sourceId is set to the
          corresponding virtual entity.
        items:
          $ref: '#/definitions/SpellAction'
      summons:
        type: 'array'
        description: |
          The summons that correspond to the virtual entities. Their sourceId is set to the
          corresponding virtual entity.
        items:
          $ref: '#/definitions/SummonAction'
      heroPowers:
        type: 'array'
        description: |
          The spells that correspond to virtual hero power entities.
        items:
          $ref: '#/definitions/SpellAction'
      heroes:
        type: 'array'
        description: |
          Choose one hero cards corresponding to their virtual entities.
        items:
          $ref: '#/definitions/SpellAction'
  GameActions:
    description: |
      An object representing all valid game actions in this action request.
    type: 'object'
    properties:
      compatibility:
        description: |
          An array of game action indices. Choose one at random for compatibility purposes until the client can support
          all actions
        type: 'array'
        items:
          type: 'integer'
      endTurn:
        description: |
          The end turn action. Not necessarily always available, because you cannot end your turn in the middle of
          a discover or a battlecry. The value corresponds to which integer index to reply with.
        type: 'integer'
      physicalAttacks:
        description: |
          An array of entity ID - target IDs pairs that represent valid physical attacks.
        type: 'array'
        items:
          type: 'object'
          properties:
            sourceId:
              description: |
                The entity (minion or hero) that corresponds to the source of this physical attack.
              type: 'integer'
            defenders:
              description: |
                Valid defenders for this attacker.
              type: 'array'
              items:
                $ref: '#/definitions/TargetActionPair'
      summons:
        description: |
          The cards in your hand that can be summoned. These are typically only minions.
        type: 'array'
        items:
          $ref: '#/definitions/SummonAction'
      heroPower:
        $ref: '#/definitions/SpellAction'
      heroes:
        description:
          The cards in your hand that are heroes
        type: 'array'
        items:
          $ref: '#/definitions/SpellAction'
      spells:
        description: |
          The cards in your hand that are spells that take targets.
        type: 'array'
        items:
          $ref: '#/definitions/SpellAction'
      battlecries:
        description: |
          A set of possible targetable battlecry actions.
        type: 'array'
        items:
          $ref: '#/definitions/SpellAction'
      discoveries:
        description: |
          Card discovers.
        type: 'array'
        items:
          description: |
            Card IDs and their corresponding action indices.
          type: 'object'
          properties:
            cardId:
              type: 'integer'
            action:
              type: 'integer'
      weapons:
        description: |
          The weapons in your hand that can be equipped. These are the equivalent of summons that only have a single
          index, but do not require targeting on the battlefield.
        type: 'array'
        items:
          $ref: '#/definitions/SummonAction'
      chooseOnes:
        description: |
          An array of choose one spells or summons. Each spell/summon is represented by a different card. An entity
          that can be used to render a card for the option is provided. Use the spell action's card ID to figure out
          which options correspond to which cards in the hand.
        type: 'array'
        items:
          $ref: '#/definitions/ChooseOneOptions'
  Entity:
    type: 'object'
    properties:
      id:
        description: The entity's ID in the game.
        type: 'integer'
        format: 'int32'
        default: -1
      cardId:
        description: The entity's Card ID. When null, it typically should not be rendered.
        type: 'string'
      entityType:
        description: |
          Broad categories describing this entity and how it should be rendered.
        type: 'string'
        enum: ['PLAYER', 'HERO', 'CARD', 'MINION', 'WEAPON', 'SECRET', 'QUEST', 'ENCHANTMENT']
      name:
        description: |
          The text that would go into the entity's name field.
        type: 'string'
      description:
        description: |
          The text that would go into the entity's description field.
        type: 'string'
      state:
        $ref: '#/definitions/EntityState'
  EntityState:
    type: 'object'
    description: |
      The entity state contains all the mutable values of an entity. In the future, the server will provide a list of
      exact changes to this state.
    properties:
      l:
        $ref: '#/definitions/EntityLocation'
      background:
        description: |
          When not null, override the default background for this entity's card ID with this key corresponding to
          backgrounds from the server.
        type: 'string'
      portrait:
        description: |
          When not null, override the default portrait for this entity's card ID with this key corresponding to
          portraits from the server.
        type: 'string'
      gold:
        description: Render this entity with a "gold" effect.
        type: 'boolean'
        default: false
      boardPosition:
        description: The index of the entity in its zone.
        type: 'integer'
        format: 'int32'
      owner:
        description: An integer corresponding to the entity's owner.
        type: 'integer'
        format: 'int32'
        default: -1
      heroClass:
        description: The string enum value that corresponds to this entity's hero class.
        type: 'string'
      baseHp:
        description: The base hitpoints of the entity.
        type: 'integer'
        format: 'int32'
      hp:
        description: |
          The current hitpoints of the entity. Conventionally, this value should be rendered on the hitpoints token.
        type: 'integer'
        format: 'int32'
      durability:
        description: The durability (number of uses) that the weapon still has.
        type: 'integer'
        format: 'int32'
      maxHp:
        description: The maximum number of hitpoints this entity can have.
        type: 'integer'
        format: 'int32'
      baseAttack:
        description: The entity's base attack value.
        type: 'integer'
        format: 'int32'
      attack:
        description: |
          The entity's current attack value. Conventionally, this value should be rendered on the attack token.
        type: 'integer'
        format: 'int32'
      baseManaCost:
        description: |
          The entity's base mana cost.
        type: 'integer'
        format: 'int32'
      manaCost:
        description: |
          The entity's current mana cost. Conventionally, this value should be rendered on the mana token.
        type: 'integer'
        format: 'int32'
      armor:
        description: |
          The entity's armor. Conventionally, this value should be rendered on a hero entity's armor token.
        type: 'integer'
        format: 'int32'
      destroyed:
        description: |
          When true, indicates that this entity is destroyed. During event evaluation, an entity can be destroyed but
          still in a zone other than the graveyard; render a death icon over the entity when it is so marked.
        type: 'boolean'
        default: false
      summoningSickness:
        description: |
          When true, the entity cannot attack this turn because it has "summoning sickness," or a disability related
          to the first turn the entity came into play. Typically rendered with snooze icons.
        type: 'boolean'
        default: false
      frozen:
        description: |
          When true, the entity cannot attack because a spell casted on it prevents it so, until the next turn when
          it would normally be able to attack.
        type: 'boolean'
        default: false
      uncensored:
        description: |
          When true, indicates that this entity that is ordinarily censored to this user is not. It can be "flipped" and
          shown to the opponent.
        type: 'boolean'
        default: false
      deflect:
        description: |
          When true, the entity's first incoming hit will hit its owner rather than itself.
        type: 'boolean'
        default: false
      silenced:
        description: |
          Indicates that the entity was silenced.
        type: 'boolean'
        default: false
      windfury:
        description: |
          Indicates the entity can attack twice a turn.
        type: 'boolean'
        default: false
      permanent:
        description: |
          Indicates the entity is an on-battlefield permanent.
        type: 'boolean'
        default: false
      collectible:
        description: |
          Indicates the card is collectible - valid for putting into decks.
        type: 'boolean'
        default: false
      taunt:
        description: |
          Indicates the entity and other taunt entities must be targeted by enemy actors first during an opponent's
          physical attack action targeting.
        type: 'boolean'
        default: false
      spellDamage:
        description: |
          Indicates the amount of additional spell damage this entity gives its owning player.
        type: 'integer'
        format: 'int32'
      charge:
        description: |
          When true, the entity can attack the same turn it is summoned.
        type: 'boolean'
        default: false
      rush:
        description: |
          When true, the entity can attack a minion the same turn it is summoned.
        type: 'boolean'
        default: false
      lifesteal:
        description: |
          When true, the entity heals its owner when it deals damage.
        type: 'boolean'
        default: false
      poisonous:
        description: |
          When true, the entity will destroy any target it damages.
        type: 'boolean'
        default: false
      enraged:
        description: |
          When true, this entity is under the influence of "enrage," or a bonus when it takes damage the first time.
        type: 'boolean'
        default: false
      battlecry:
        description: |
          When true, this entity has an effect that gets triggered when it is played from the hand.
        type: 'boolean'
        default: false
      deathrattles:
        description: |
          When true, this entity has an effect that gets triggered when it is destroyed.
        type: 'boolean'
        default: false
      immune:
        description: |
          Indicates the entity does not take damage.
        type: 'boolean'
        default: false
      divineShield:
        description: |
          When true, the entity will take no loss in hitpoints the first time it would ordinarily take damage.
        type: 'boolean'
        default: false
      stealth:
        description: |
          When true, the minion cannot be targeted by the opponent until the entity attacks for the first time.
        type: 'boolean'
        default: false
      combo:
        description: |
          Indicates this minion has a combo effect.
        type: 'boolean'
        default: false
      overload:
        description: |
          Indicates the amount of mana that would be locked if this card were played.
        type: 'integer'
        format: 'int32'
      chooseOne:
        description: |
          Indicates this card has a choose-one effect.
        type: 'boolean'
        default: false
      untargetableBySpells:
        description: |
          Indicates this entity cannot be targeted by spells.
        type: 'boolean'
        default: false
      cannotAttack:
        description: When true, indicates this minion cannot attack, even though it normally can.
        type: 'boolean'
        default: false
      underAura:
        description: When true, indicates this minion is benefiting from the aura of another effect.
        type: 'boolean'
        default: false
      customRenderer:
        type: 'string'
      customData:
        type: 'string'
      playable:
        description: When true, indicates the card can be played, or the hero / minion can initiate a physical attack.
        type: 'boolean'
        default: false
      conditionMet:
        description: When true, indicates that a condition written on the card is met and the player should be informed.
        type: 'boolean'
        default: false
      mana:
        description: The player's current mana.
        type: 'integer'
        format: 'int32'
      maxMana:
        description: The player's maximum amount of mana.
        type: 'integer'
        format: 'int32'
      lockedMana:
        description: The amount of mana that was locked due to overload.
        type: 'integer'
        format: 'int32'
      hostsTrigger:
        description: When true, indicates this entity has an effect that triggers on game events.
        type: 'boolean'
        default: false
      note:
        description: A renderable note attached to this entity.
        type: 'string'
      cardType:
        description: When not null, indicates this card entity has a specified type.
        type: 'string'
        enum:
          - 'HERO'
          - 'MINION'
          - 'SPELL'
          - 'WEAPON'
          - 'HERO_POWER'
          - 'CHOOSE_ONE'
          - 'CLASS'
          - 'FORMAT'
      tribe:
        description: When not null, indicates the card's tribe/race. Typically only minions have this field set.
        type: 'string'
      fires:
        description: The number of times this enchantment (secret, quest or trigger on card) has fired.
        type: 'integer'
        format: 'int32'
        default: 0
      countUntilCast:
        description: |
          The number of times this enchantment (secret, quest or trigger on card) must fire before its spell effect is
          triggered.
        type: 'integer'
        format: 'int32'
        default: 0
      cardSet:
        description: |
          The card expansion set this entity belongs to.
        type: 'string'
      rarity:
        description: |
          The rarity of the card
        type: 'string'
        enum:
          - 'FREE'
          - 'COMMON'
          - 'RARE'
          - 'EPIC'
          - 'LEGENDARY'
          - 'ALLIANCE'
      gameStarted:
        description: |
          For player entities, indicates whether or not the player has finished the mulligan phase and is awaiting the
          other player to finish mulligan or, if both players have this field as true, indicates the game has begun on
          turn 0.
        type: 'boolean'
        default: false
      color:
        description: |
          The color for the class
        type: 'array'
        items:
          type: 'number'
          format: 'float'
      blackText:
        description: |
          Whether the class should use black text instead of the default white
        type: 'boolean'
        default: false
      cardSets:
        description: |
          The card sets listed by the card
        type: 'array'
        items:
          type: 'string'
  DraftsChooseCardRequest:
    type: 'object'
    required:
      - cardIndex
    properties:
      cardIndex:
        type: 'integer'
  DraftsChooseHeroRequest:
    type: 'object'
    required:
      - heroIndex
    properties:
      heroIndex:
        type: 'integer'
  DraftsPostRequest:
    type: 'object'
    properties:
      startDraft:
        description: |
          Starts a new draft.
        type: 'boolean'
      retireEarly:
        description: |
          Retires a draft early. Typically this costs some number of lives.
        type: 'boolean'
  MatchmakingQueuesResponse:
    type: 'object'
    description: |
      Represents a list of queues.
    properties:
      queues:
        description: |
          The available queues.
        type: 'array'
        items:
          $ref: '#/definitions/MatchmakingQueueItem'
  MatchmakingQueueItem:
    type: 'object'
    description: |
      A queue the user can enter to play a match in.
    properties:
      name:
        type: 'string'
        description: |
          The renderable name of the queue
      description:
        type: 'string'
        description: |
          A detailed description for this queue.
      tooltip:
        type: 'string'
        description: |
          A tooltip for this queue.
      queueId:
        type: 'string'
        description: |
          The ID of the queue the user should put a MatchmakingQueuePutRequest into.
      requires:
        type: 'object'
        description: |
          The arguments required for the matchmaking request.
        properties:
          deck:
            type: 'boolean'
            description: |
              Indicates that a deck choice is required.
          heroClass:
            type: 'boolean'
            description: |
              Indicates that a hero class choice is required. When a deck choice is not required, the user only
              picks a hero.
          deckChoices:
            type: 'array'
            items:
              $ref: '#/definitions/InventoryCollection'
            description: |
              Indicates that the player must choose from the specified decks.
          deckIdChoices:
            type: 'array'
            items:
              type: 'string'
            description: |
              Indicates that the player must choose from the specified deck IDs in the player's account.
  GetCardsResponse:
    type: 'object'
    description: |
      A cacheable copy of the entire card catalogue.
    properties:
      version:
        description: |
          A token used in the If-None-Match argument when checking for new card catalogue content.
        type: 'string'
      cards:
        description: |
          The actual array of cards representing the complete Spellsource catalogue.
        type: 'array'
        items:
          $ref: '#/definitions/CardRecord'
  SpellsourceException:
    type: 'object'
    description: |
      A server-side exception with content renderable to the client.
    properties:
      message:
        description: |
          A user-renderable message explaining the source of the error.
        type: 'string'
    required:
      - message
  InvitePostRequest:
    type: 'object'
    description: |
      Requests to send an invite to play a 1v1 match, to friend a player, or both.
    properties:
      friend:
        description: |
          When true, indicates that this request is a friend invitation.
        default: false
        type: 'boolean'
      queueId:
        description: |
          The queue that the player would like to 1v1 inside of. These may differ from the competitive queues.
        type: 'string'
      deckId:
        description: |
          The deck the user is creating this invite with. Used for 1v1 queues. If this is specified, the user is
          automatically enqueued.
        type: 'string'
      toUserId:
        description: |
          The user who should receive the invite
        type: 'string'
      toUserNameWithToken:
        description: |
          The username and privacy token (#1234 part) to send the request to
        type: 'string'
      message:
        description: |
          An optional message to add to the invite request
        type: 'string'
  InviteResponse:
    type: 'object'
    description: |
      The invitation that was sent, or the updated invite
    properties:
      invite:
        $ref: '#/definitions/Invite'
  InviteGetResponse:
    type: 'object'
    description: |
      The invites where this user is either the sender or recipient.
    properties:
      invites:
        type: 'array'
        items:
          $ref: '#/definitions/Invite'
  AcceptInviteRequest:
    type: 'object'
    description: |
      Accepts an invite to a match or a friend invite.
    properties:
      awaitGameStart:
        type: 'boolean'
        description: |
          When true, specifies that the method call should only return when the game is actually ready to join
      match:
        $ref: '#/definitions/MatchmakingQueuePutRequest'
  AcceptInviteResponse:
    type: 'object'
    properties:
      friend:
        $ref: '#/definitions/FriendPutResponse'
      match:
        $ref: '#/definitions/MatchmakingQueuePutResponse'
      invite:
        $ref: '#/definitions/Invite'
  DefaultMethodResponse:
    type: 'object'
    description: |
      Indicates a default, successful response.
  Match:
    description: |
      A document that describes an awaiting match.
    type: 'object'
    properties:
      _id:
        type: 'string'
        description: |
          The ID of the match.
      createdAt:
        type: 'integer'
        format: 'int64'
        description: |
          A timestamp for when this game was created (approximate).
  Replay:
    description: |
      Description of a (possibly partially complete) match. Useful for viewing said match in retrospect.
      Note: If there are `n` elements in `gameStates` then there should be `n-1` elements in `deltas`.
    type: 'object'
    properties:
      gameStates:
        type: 'array'
        items:
          $ref: '#/definitions/ReplayGameStates'
      deltas:
        type: 'array'
        items:
          $ref: '#/definitions/ReplayDeltas'
  ReplayDeltas:
    description: |
      The forward and backword deltas (change sets) required (along with player `GameState`s) to transition the client battlefield.
    type: 'object'
    properties:
      backward:
        description: |
          Backward delta.
        $ref: '#/definitions/EntityChangeSet'
      forward:
        description: |
          Forward delta.
        $ref: '#/definitions/EntityChangeSet'
  ReplayGameStates:
    description: |
      A pair of game states. Used to capture a game from each player's point of view (useful for example in replays).
    type: 'object'
    properties:
      first:
        $ref: '#/definitions/GameState'
      second:
        $ref: '#/definitions/GameState'
  GetGameRecordIdsResponse:
    description: |
      Retrieves an array of game IDs played by this player. Eventually will require paging.
    type: 'object'
    properties:
      gameIds:
        description: |
          All the game IDs ever played by this player
        type: 'array'
        items:
          type: 'string'
  GetGameRecordResponse:
    description: |
      Information about a game.

      Statistics about the game will be stored at a later point in time.
    type: 'object'
    properties:
      replay:
        $ref: '#/definitions/Replay'
      isBotGame:
        type: 'boolean'
        description: |
          True if this game was played against a bot (or was played entirely by bots)
      completedAtLocalized:
        type: 'string'
        description: |
          The date and time when this game was finished in the client's local time.
      completedAt:
        type: 'integer'
        format: 'int64'
        description: |
          A timestamp for when this game was finished (approximate).
      playerNames:
        description: |
          The names of the players in this game, without their privacy tokens
        type: 'array'
        items:
          type: 'string'
  SpanContext:
    type: 'object'
    description: |
      A piece of data that assists in OpenTracing from the client.
    properties:
      data:
        type: 'string'
        format: 'binary'
        description: Binary carried opentracing span context
responses:
  InternalServerError:
    description: The request raised an exception on the server and produced a user-renderable message.
    schema:
      $ref: '#/definitions/SpellsourceException'
paths:
  /:
    get:
      description: |
        Returns an empty body if the server is available.
      operationId: healthCheck
      responses:
        "200":
          description: |
            The server is okay!
  /accounts/{targetUserId}:
    get:
      description: |
        Get a specific account. Contains more information if the userId matches the requesting user.
      operationId: getAccount
      security:
        - TokenSecurity: []
      parameters:
        - name: targetUserId
          in: path
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            A specific user account.
          schema:
            $ref: '#/definitions/GetAccountsResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /accounts:
    get:
      description: |
        Get a list of accounts including user profile information.
      operationId: getAccounts
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetAccountsRequest'
      responses:
        "200":
          description: |
            Gets a list of user profile accounts
          schema:
            $ref: '#/definitions/GetAccountsResponse'
        default:
          $ref: '#/responses/InternalServerError'
    put:
      description: |
        Create an account with Spellsource.
      operationId: createAccount
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateAccountRequest'
      responses:
        "200":
          description: |
            An account has been successfully created.
          schema:
            $ref: '#/definitions/CreateAccountResponse'
        default:
          $ref: '#/responses/InternalServerError'
    post:
      description: |
        Login with a username and password, receiving an authentication token to use for future sessions.
      operationId: login
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        "200":
          description: |
            A response containing the token to put into future request headers.
          schema:
            $ref: '#/definitions/LoginResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /accounts-password:
    post:
      description: |
        Changes your password. Does not log you out after the password is changed.
      operationId: changePassword
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangePasswordRequest'
      responses:
        "200":
          description: |
            The password was successfully changed.
          schema:
            $ref: '#/definitions/ChangePasswordResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /cards:
    get:
      description: |
        Gets a complete catalogue of all the cards available in Spellsource as a list of CardRecords
      operationId: getCards
      parameters:
        - name: If-None-Match
          in: header
          description: |
            The value returned in the ETag header from the server when this was last called, or empty if this is the
            first call to this resource.
          type: string
      responses:
        "304":
          description: |
            Not modified. Reuse the existing cards database.
          headers:
            ETag:
              type: string
              description: |
                The token to provide as the In-None-Match argument next time you check for new cards.
        "200":
          description: |
            The cards database is new/updated and should replace your existing copy.
          schema:
            $ref: '#/definitions/GetCardsResponse'
          headers:
            ETag:
              type: string
              description: |
                The token to provide as the In-None-Match argument next time you check for new cards.
            Cache-Control:
              type: string
              description: |
                A standard-compliant cache control that indicates this resource should be retained indefinitely
                (public, max-age=31536000)
            Last-Modified:
              type: string
              format: date-time
              description: |
                The RFC1123 date indicating when these cards were last modified (typically when the first host
                in the cluser comes online).
            Date:
              type: string
              format: date-time
              description: |
                The RFC1123 date when this request was made.
  /decks:
    get:
      description: |
        Gets all the user's decks.
      operationId: decksGetAll
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The server returns an array of DeckGetResponses for each deck
          schema:
            $ref: '#/definitions/DecksGetAllResponse'
        default:
          $ref: '#/responses/InternalServerError'
    put:
      description: |
        Creates a new deck with optionally specified inventory IDs, a name and a hero class.
      operationId: decksPut
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          description: |
            The deck creation request.
          required: true
          schema:
            $ref: '#/definitions/DecksPutRequest'
      responses:
        "200":
          description: |
            The server has created a deck with the optionally specified cards and provides the ID of the deck for later use.
          schema:
            $ref: '#/definitions/DecksPutResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /decks/{deckId}:
    get:
      description: |
        Gets a deck. Only viewable for the owner of the deck or players in the alliance.
      operationId: decksGet
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          required: true
          description: The Deck ID to get.
          type: 'string'
      responses:
        "200":
          description: |
            The deck has been successfully retrieved.
          schema:
            $ref: '#/definitions/DecksGetResponse'
        default:
          $ref: '#/responses/InternalServerError'
    post:
      description: |
        Updates the deck by adding or removing cards, changing the hero class, or renaming the deck.
      operationId: decksUpdate
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          description: The Deck ID to update.
          required: true
          type: 'string'
        - name: updateCommand
          in: body
          description: |
            An update command modifying specified properties of the deck.
          required: true
          schema:
            $ref: '#/definitions/DecksUpdateCommand'
      responses:
        "200":
          description: |
            The update has been successfully applied.
          schema:
            $ref: '#/definitions/DecksGetResponse'
        default:
          $ref: '#/responses/InternalServerError'
    delete:
      description: |
        Deletes the specified deck by ID.
      operationId: decksDelete
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          description: The Deck ID to delete.
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            The deck has been deleted.
        default:
          $ref: '#/responses/InternalServerError'
  /matchmaking:
    get:
      description: |
        Gets a list of queues available for matchmaking.
      operationId: matchmakingGet
      security:
        - TokenSecurity: []
      responses:
        "404":
          description: |
            No queues are available to play at the moment.
        "200":
          description: |
            A list of queues is available for the user.
          schema:
            $ref: '#/definitions/MatchmakingQueuesResponse'
        default:
          $ref: '#/responses/InternalServerError'
    delete:
      description: Removes your client from the matchmaking queue, regardless of which queue it is in.
      operationId: matchmakingDelete
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The client's cancel request has been processed. The result can be found in the body's MatchCancelResponse.
          schema:
            $ref: '#/definitions/MatchCancelResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /friends:
    put:
      description: |
        Adds a specified user to your friend list.
      operationId: friendPut
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/FriendPutRequest'
      responses:
        "200":
          description: |
            Users were friended.
          schema:
            $ref: '#/definitions/FriendPutResponse'
        "404":
          description: |
            An invalid username and token were provided.
        "409":
          description: |
            Either you are already friends, or you attempted to set a friend ID directly.
        default:
          $ref: '#/responses/InternalServerError'
  /friends/{friendId}:
    delete:
      description: |
        Removes the friend relationship between two users.
      operationId: friendDelete
      security:
        - TokenSecurity: []
      parameters:
        - name: friendId
          in: path
          required: true
          description: id of friend to unfriend.
          type: 'string'
      responses:
        "200":
          description: |
            Succefully unfriended
          schema:
            $ref: '#/definitions/UnfriendResponse'
        "404":
          description: |
            Not a friend
        "418":
          description: |
            Another action has put this friend relationship into an invalid state (e.g., a ban or a user account change).
        default:
          $ref: '#/responses/InternalServerError'
  /drafts:
    get:
      description: |
        Gets your latest state of the draft.
      operationId: draftsGet
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            A valid draft state was found. Contains possible actions you can take.
          schema:
            $ref: '#/definitions/DraftState'
        "404":
          description: |
            You have not started a draft. Start one first.
        default:
          $ref: '#/responses/InternalServerError'
    post:
      description: |
        Starts a draft, or make a change to your draft, like retiring early.
      operationId: draftsPost
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/DraftsPostRequest'
      responses:
        "200":
          description: |
            You successfully started a draft and it now has the following state. Or, the
          schema:
            $ref: '#/definitions/DraftState'
        "400":
          description: |
            You sent an invalid draft request, like starting a draft when you already have
            a draft started.
        default:
          $ref: '#/responses/InternalServerError'
  /drafts/hero:
    put:
      description: |
        Choose a hero from your hero selection.
      operationId: draftsChooseHero
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/DraftsChooseHeroRequest'
      responses:
        "200":
          description: |
            The new draft state, containing the new card choices.
          schema:
            $ref: '#/definitions/DraftState'
        "400":
          description: |
            An invalid option was chosen, or it's not time to choose a hero.
        default:
          $ref: '#/responses/InternalServerError'
  /drafts/cards:
    put:
      description: |
        Make a selection for the given draft index.
      operationId: draftsChooseCard
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/DraftsChooseCardRequest'
      responses:
        "200":
          description: |
            The new draft state. When deckId in draft state is not null, you are ready to enter matchmaking.
          schema:
            $ref: '#/definitions/DraftState'
        "400":
          description: |
            An invalid option was chosen, or it's not time to choose a card (usually your draft is finished).
        default:
          $ref: '#/responses/InternalServerError'
  /invites:
    get:
      description: |
        Retrieve all invites where this user is either the sender or recipient.
      operationId: getInvites
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The invites where this user is either the sender or recipient.
          schema:
            $ref: '#/definitions/InviteGetResponse'
        default:
          $ref: '#/responses/InternalServerError'
    post:
      description: |
        Send an invite.
      operationId: postInvite
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/InvitePostRequest'
      responses:
        "200":
          description: |
            The invite that was sent.
          schema:
            $ref: '#/definitions/InviteResponse'
        "403":
          description: |
            You did not have access to change this invite.
        "404":
          description: |
            The specified user was not found. You can send invites to people other than your friends currently.
        default:
          $ref: '#/responses/InternalServerError'
  /invites/{inviteId}:
    post:
      description: |
        Accepts the invite. If this is an invite to friend the user, this method will perform the friending path for
        you. If this is an invite to play a match and a matchmaking queue put is specified (with the deck ID), this
        method will enter you into the special invite matchmaking queue.
      operationId: acceptInvite
      security:
        - TokenSecurity: []
      parameters:
        - name: inviteId
          in: path
          required: true
          type: 'string'
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/AcceptInviteRequest'
      responses:
        "200":
          description: |
            An updated invite and the result of accepting the invitation. This may include a (currently empty) object
            specifying that you can now connect to a game, or a friend record.
          schema:
            $ref: '#/definitions/AcceptInviteResponse'
        "403":
          description: |
            You did not have access to change this invite.
        "404":
          description: |
            The invite was not found.
        "418":
          description: |
            The invite is already in an expired state.
        default:
          $ref: '#/responses/InternalServerError'
    get:
      description: |
        Retrieves information about a specific invite, as long as this user is either the sender or recipient.
      operationId: getInvite
      security:
        - TokenSecurity: []
      parameters:
        - name: inviteId
          in: path
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            The invite.
          schema:
            $ref: '#/definitions/InviteResponse'
        "404":
          description: |
            The invite as not found.
    delete:
      description: |
        When this user is the sender, cancels the invite. When this user is the recipient, rejects the specified invite.
      operationId: deleteInvite
      security:
        - TokenSecurity: []
      parameters:
        - name: inviteId
          in: path
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            The changed invite.
          schema:
            $ref: '#/definitions/InviteResponse'
        "403":
          description: |
            You did not have access to change this invite.
        "404":
          description: |
            The invite was not found.
        "418":
          description: |
            The invite is already in an expired state.
  /games:
    get:
      description: |
        Retrieves a list of game IDs corresponding to all the games this player played.
      operationId: getGameRecordIds
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            A list of game IDs
          schema:
            $ref: '#/definitions/GetGameRecordIdsResponse'
  /games/{gameId}:
    get:
      description: |
        Retrieves a record of a game this player played. Games against bots retrieve a complete game record, while games
        against other players only receive this player's point of view.
      operationId: getGameRecord
      security:
        - TokenSecurity: []
      parameters:
        - name: gameId
          in: path
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            A game record.
          schema:
            $ref: '#/definitions/GetGameRecordResponse'
        "404":
          description: |
            The game with the specified ID was not found
        "403":
          description: |
            You are not permitted to view this game
  /version:
    get:
      description: |
        Retrieves the semver server version
      operationId: getVersion
      responses:
        "200":
          description: |
            The semver version
          schema:
            type: 'string'
