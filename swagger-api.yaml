swagger: "2.0"
info:
  version: 1.0.1
  title: Hidden Switch Spellsource API
  description: The Spellsource API for matchmaking, user accounts, collections management and more
  contact:
    name: Benjamin Berman
    email: benjamin.s.berman@gmail.com
    url: http://hiddenswitch.com
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: metastone-dev.us-west-2.elasticbeanstalk.com
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  TokenSecurity:
    type: apiKey
    in: header
    name: X-Auth-Token
definitions:
  Message:
    type: 'object'
    properties:
      authorId:
        type: 'string'
      authorDisplayName:
        type: 'string'
      text:
        type: 'string'
      timestamp:
        type: 'integer'
        format: 'int64'
  Conversation:
    type: 'object'
    properties:
      _id:
        type: 'string'
      messages:
        type: 'array'
        items:
          $ref: '#/definitions/Message'
  Friend:
    type: 'object'
    properties:
      friendid:
        type: 'string'
      since:
        type: 'integer'
        format: 'int64'
      friendName:
        type: 'string'
  Account:
    type: 'object'
    properties:
      _id:
        type: 'string'
      name:
        type: 'string'
      email:
        type: 'string'
      friends:
        type: 'array'
        items:
          $ref: '#/definitions/Friend'
      decks:
        type: 'array'
        items:
          $ref: '#/definitions/InventoryCollection'
      inMatch:
        type: 'boolean'
        description: |
          True if the client should attempt to connect to a match with its token.
      personalCollection:
        $ref: '#/definitions/InventoryCollection'
  SendMessageRequest:
    type: 'object'
    required:
      - text
    properties:
      text:
        type: 'string'
  SendMessageResponse:
    type: 'object'
    properties:
      message:
        $ref: '#/definitions/Message'
  GetConversationResponse:
    type: 'object'
    properties:
      conversation:
        $ref: '#/definitions/Conversation'
  GetAccountsRequest:
    type: 'object'
    required:
      - userIds
    properties:
      userIds:
        description: |
          An array of user IDs to fetch.
        type: 'array'
        items:
          type: 'string'
  GetAccountsResponse:
    type: 'object'
    properties:
      accounts:
        type: 'array'
        items:
          $ref: '#/definitions/Account'
  CreateAccountRequest:
    type: 'object'
    required:
      - name
      - email
      - password
    properties:
      name:
        description: |
          A display name for the user.
        type: 'string'
      email:
        description: |
          An email account for password resets.
        type: 'string'
        format: 'email'
      password:
        description: |
          A password used to login to Spellsource.
        type: 'string'
        format: 'password'
  CreateAccountResponse:
    type: 'object'
    properties:
      loginToken:
        description: |
          A string containing the token to login with via the standard Spellsource authentication method.
        type: 'string'
      account:
        $ref: '#/definitions/Account'
  LoginRequest:
    type: 'object'
    required:
      - email
      - password
    properties:
      email:
        type: 'string'
      password:
        type: 'string'
        format: 'password'
  LoginResponse:
    properties:
      account:
        $ref: '#/definitions/Account'
      loginToken:
        type: 'string'
  DecksPutRequest:
    type: 'object'
    properties:
      heroClass:
        type: 'string'
      name:
        type: 'string'
      inventoryIds:
        type: 'array'
        items:
          type: 'string'
      deckList:
        type: 'string'
        description: |
          A community-standard decklist.
  DecksPutResponse:
    type: 'object'
    properties:
      deckId:
        type: 'string'
      collection:
        $ref: '#/definitions/InventoryCollection'
  DecksUpdateCommand:
    type: 'object'
    properties:
      setHeroClass:
        type: 'string'
      setName:
        type: 'string'
      setInventoryIds:
        type: 'array'
        items:
          type: 'string'
      pushInventoryIds:
        type: 'object'
        properties:
          $each:
            type: 'array'
            items:
              type: 'string'
      pullAllInventoryIds:
        type: 'array'
        items:
          type: 'string'
  DecksGetResponse:
    type: 'object'
    properties:
      collection:
        $ref: '#/definitions/InventoryCollection'
      inventoryIdsSize:
        description: |
          The current number of cards in this deck.
        type: 'integer'
  DecksGetAllResponse:
    type: 'object'
    properties:
      decks:
        type: 'array'
        items:
          $ref: '#/definitions/DecksGetResponse'
  ChangePasswordRequest:
    type: 'object'
    required:
      - properties
    properties:
      password:
        type: 'string'
        description: |
          The new password
  ChangePasswordResponse:
    type: 'object'
    description: |
      An empty response signifying your password was correctly changed
  InventoryCollection:
    type: 'object'
    properties:
      _id:
        type: 'string'
      userId:
        type: 'string'
      name:
        type: 'string'
      heroClass:
        type: 'string'
      type:
        type: 'string'
        enum:
          - 'USER'
          - 'ALLIANCE'
          - 'DECK'
      deckType:
        type: 'string'
        enum:
          - 'DRAFT'
          - 'CONSTRUCTED'
      inventory:
        type: 'array'
        items:
          $ref: '#/definitions/CardRecord'
  CardRecord:
    type: 'object'
    properties:
      _id:
        type: 'string'
      entity:
        $ref: '#/definitions/Entity'
      userId:
        type: 'string'
      collectionIds:
        type: 'array'
        items:
          type: 'string'
      borrowedByUserId:
        type: 'string'
      allianceId:
        type: 'string'
      donorUserId:
        type: 'string'
  MessageType:
    type: 'string'
    enum:
      - 'REGISTER_PLAYER'
      - 'UPDATE_ACTION'
      - 'ON_GAME_EVENT'
      - 'ON_GAME_END'
      - 'SET_PLAYERS'
      - 'ON_ACTIVE_PLAYER'
      - 'ON_UPDATE'
      - 'ON_TURN_END'
      - 'ON_REQUEST_ACTION'
      - 'FIRST_MESSAGE'
      - 'ON_MULLIGAN'
      - 'UPDATE_MULLIGAN'
      - 'EMOTE'
      - 'TOUCH'
      - 'CONCEDE'
  Emote:
    description: |
      An emote that should play from the specified entity.
    type: 'object'
    properties:
      entityId:
        type: 'integer'
      message:
        type: 'string'
        enum:
          - 'HELLO'
          - 'AMAZING'
          - 'WHOOPS'
          - 'GOOD_GAME'
          - 'FACE_MY_WRATH'
          - 'WELL_PLAYED'
  Timers:
    description: |
      Information about timers. This helps the client render the countdown clock.
    type: 'object'
    properties:
      millisRemaining:
        description: |
          The number of milliseconds remaining before the server will end the mulligan or turn.
          When null or less than zero, no timer is set. This property will be valid with respect to the
          last timestamped message from the server. Since typically emotes and touches are not timestamped,
          while other game state messages are, this property will be updated with actions and data. It is
          the responsibility of the client to lerp the millis-remaining values with the actual animated
          timer to prevent choppy animation.
        type: 'integer'
        format: 'int64'
  GameOver:
    description: |
      An object that describes the winner and loser of a game
    type: 'object'
    properties:
      localPlayerWon:
        type: 'boolean'
        description: |
          True when the local player has won.
      winningPlayerId:
        type: 'integer'
        description: |
          The ID of the player who has won. Null if no player has won.
  ServerToClientMessage:
    type: 'object'
    properties:
      id:
        type: 'string'
        description: |
          An optional ID used to disambiguate multiple client replies. Include this ID in the repliesTo field of your
          ClientToServerMessage if this field is not null.
      localPlayerId:
        type: 'integer'
        description: |
          The ID of the player that corresponds to the local player (the recipient).
      timers:
        $ref: '#/definitions/Timers'
      messageType:
        $ref: '#/definitions/MessageType'
      changes:
        $ref: '#/definitions/EntityChangeSet'
      gameState:
        $ref: '#/definitions/GameState'
      actions:
        $ref: '#/definitions/GameActions'
      emote:
        $ref: '#/definitions/Emote'
      gameOver:
        $ref: '#/definitions/GameOver'
      startingCards:
        description: |
          Used for a mulligan request. An array of entities representing the cards you may mulligan.
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      event:
        $ref: '#/definitions/GameEvent'
  ClientToServerMessage:
    type: 'object'
    properties:
      messageType:
        $ref: '#/definitions/MessageType'
      repliesTo:
        type: 'string'
        description: |
          The ID of the server message this client message is replying to.
      firstMessage:
        type: 'object'
        properties:
          playerKey:
            type: 'string'
            description: |
              A key authenticating this connection. Used only for the first message.
          playerSecret:
            type: 'string'
            description: |
              A server-signed secret that authenticates this player for this match. Used only for the first message.
      actionIndex:
        type: 'integer'
        description: |
          The index of the available actions to use.
      discardedCardIndices:
        type: 'array'
        items:
          type: 'integer'
        description:
          The indices of cards to discard in a mulligan.
      emote:
        $ref: '#/definitions/Emote'
      entityTouch:
        description: |
          When specified with an entity ID, indicates the client is "touching" this entity.
        type: 'integer'
      entityUntouch:
        description: |
          When specified with an entity ID, indicates the client is no longer touching the specified entity.
        type: 'integer'
  PhysicalAttackEvent:
    type: 'object'
    properties:
      attacker:
        $ref: '#/definitions/Entity'
      defender:
        $ref: '#/definitions/Entity'
      damageDealt:
        type: 'integer'
  EntityLocation:
    type: 'object'
    required:
     - zone
     - index
     - player
    properties:
      player:
        type: 'integer'
        enum:
          - -1
          - 0
          - 1
      index:
        type: 'integer'
      zone:
        type: 'string'
        enum:
          - 'NONE'
          - 'HAND'
          - 'DECK'
          - 'GRAVEYARD'
          - 'BATTLEFIELD'
          - 'SECRET'
          - 'QUEST'
          - 'HERO_POWER'
          - 'HERO'
          - 'WEAPON'
          - 'SET_ASIDE_ZONE'
          - 'HIDDEN'
          - 'DISCOVER'
          - 'REMOVED_FROM_PLAY'
          - 'PLAYER'
  EntityChangeSet:
    description: |
      An abbreviated description of changes since the last change set this client received.
    type: 'array'
    items:
      type: 'object'
      properties:
        op:
          description: |
            Describes a change to an entity. 'A' corresponds to added/inserted, 'C' corresponds to changed, 'R' corresponds to
            removed. p0 is the previous value, if it exists. p1 is the current value. Only the entity's locatino is currently
            populated in this changeset.
          type: 'string'
          enum:
            - 'A'
            - 'C'
            - 'R'
        id:
          description: |
            The ID of the entity in this change set.
          type: 'integer'
        p0:
          $ref: '#/definitions/EntityState'
        p1:
          $ref: '#/definitions/EntityState'
  CardEvent:
    type: 'object'
    properties:
      showLocal:
        type: 'boolean'
        description: |
          Forces this card event to be shown locally
      card:
        $ref: '#/definitions/Entity'
  GameEvent:
    type: 'object'
    properties:
      id:
        description: |
          An integer ID corresponding to the order of this event from the client's point of view.
        type: 'integer'
      description:
        description: |
          A plaintext description of this event.
        type: 'string'
      isPowerHistory:
        description: |
          Should this event be rendered in the power history?
        type: 'boolean'
      eventType:
        type: 'string'
        description: |
          The game event type corresponding to this game event.
        enum:
          - 'ALL'
          - 'AFTER_PHYSICAL_ATTACK'
          - 'AFTER_SPELL_CASTED'
          - 'AFTER_SUMMON'
          - 'ATTRIBUTE_APPLIED'
          - 'ARMOR_GAINED'
          - 'BEFORE_SUMMON'
          - 'BOARD_CHANGED'
          - 'DAMAGE'
          - 'DISCARD'
          - 'DRAW_CARD'
          - 'ENRAGE_CHANGED'
          - 'ENTITY_TOUCHED'
          - 'ENTITY_UNTOUCHED'
          - 'GAME_START'
          - 'HEAL'
          - 'HERO_POWER_USED'
          - 'JOUST'
          - 'KILL'
          - 'LOSE_DIVINE_SHIELD'
          - 'MILL'
          - 'MAX_MANA'
          - 'OVERLOAD'
          - 'PERFORMED_GAME_ACTION'
          - 'PHYSICAL_ATTACK'
          - 'PLAY_CARD'
          - 'PRE_DAMAGE'
          - 'QUEST_PLAYED'
          - 'QUEST_SUCCESSFUL'
          - 'REVEAL_CARD'
          - 'SECRET_PLAYED'
          - 'SECRET_REVEALED'
          - 'SPELL_CASTED'
          - 'SUMMON'
          - 'TARGET_ACQUISITION'
          - 'TRIGGER_FIRED'
          - 'TURN_END'
          - 'TURN_START'
          - 'SILENCE'
          - 'WEAPON_DESTROYED'
          - 'WEAPON_EQUIPPED'
          - 'WILL_END_SEQUENCE'
      afterPhysicalAttack:
        $ref: '#/definitions/PhysicalAttackEvent'
      drawCard:
        $ref: '#/definitions/CardEvent'
      entityTouched:
        type: 'integer'
      entityUntouched:
        type: 'integer'
      preDamage:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      silence:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
      secretPlayed:
        type: 'object'
        properties:
          secretCard:
            $ref: '#/definitions/Entity'
      beforeSummon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      cardPlayed:
        $ref: '#/definitions/CardEvent'
      armorGained:
        type: 'object'
        properties:
          hero:
            $ref: '#/definitions/Entity'
      afterSummon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      spellCasted:
        $ref: '#/definitions/CardEvent'
      joust:
        type: 'object'
        properties:
          won:
            type: 'boolean'
          ownCard:
            $ref: '#/definitions/Entity'
          opponentCard:
            $ref: '#/definitions/Entity'
      weaponDestroyed:
        type: 'object'
        properties:
          weapon:
            $ref: '#/definitions/Entity'
      heroPowerUsed:
        type: 'object'
        properties:
          heroPower:
            $ref: '#/definitions/Entity'
      enrageChanged:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
      targetAcquisition:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      damage:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
          damage:
            type: 'integer'
          source:
            $ref: '#/definitions/Entity'
      weaponEquipped:
        type: 'object'
        properties:
          weapon:
            $ref: '#/definitions/Entity'
      performedGameAction:
        type: 'object'
        properties:
          source:
            $ref: '#/definitions/Entity'
          target:
            $ref: '#/definitions/Entity'
          description:
            description: |
              A plain-text description of the game action that should be rendered on the client.
            type: 'string'
      physicalAttack:
        $ref: '#/definitions/PhysicalAttackEvent'
      overload:
        type: 'object'
        properties:
          card:
            $ref: '#/definitions/Entity'
      heal:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
          healing:
            type: 'integer'
      secretRevealed:
        type: 'object'
        properties:
          secret:
            $ref: '#/definitions/Entity'
      questSuccessful:
        type: 'object'
        properties:
          quest:
            $ref: '#/definitions/Entity'
      questPlayed:
        type: 'object'
        properties:
          quest:
            $ref: '#/definitions/Entity'
      summon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      afterSpellCasted:
        type: 'object'
        properties:
          sourceCard:
            $ref: '#/definitions/Entity'
          spellTarget:
            $ref: '#/definitions/Entity'
      discard:
        $ref: '#/definitions/CardEvent'
      mill:
        $ref: '#/definitions/CardEvent'
      kill:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
      triggerFired:
        type: 'object'
        properties:
          description:
            description: |
              A plain text description of an explanation of this trigger firing.
            type: 'string'
          triggerSourceId:
            description: |
              The entity ID corresponding to the source of the trigger that got fired.
            type: 'integer'
  JavaSerializationObject:
    type: 'object'
    required:
      - 'javaSerialized'
    properties:
      javaSerialized:
        type: 'string'
  MatchmakingDeck:
    type: 'object'
    required:
      - 'cards'
    properties:
      heroClass:
        type: 'string'
      cards:
        type: 'array'
        items:
          type: 'string'
  MatchmakingQueuePutRequest:
    type: 'object'
    properties:
      casual:
        type: 'boolean'
      deckId:
        type: 'string'
      deck:
        $ref: '#/definitions/MatchmakingDeck'
  MatchmakingQueuePutResponseUnityConnection:
    type: 'object'
    properties:
      url:
        type: 'string'
        description: |
          The websocket URL to connect to.
      firstMessage:
        $ref: '#/definitions/ClientToServerMessage'
  MatchmakingQueuePutResponse:
    type: 'object'
    properties:
      connection:
        $ref: '#/definitions/JavaSerializationObject'
      unityConnection:
        $ref: '#/definitions/MatchmakingQueuePutResponseUnityConnection'
      retry:
        $ref: '#/definitions/MatchmakingQueuePutRequest'
  MatchCancelResponse:
    type: 'object'
    properties:
      isCanceled:
        type: 'boolean'
  MatchConcedeResponse:
    type: 'object'
    properties:
      isConceded:
        type: 'boolean'
  DraftState:
    type: 'object'
    description: |
      Describes the current state of a draft, including the deck in progress, the new choices,
      and the hero choices.
    properties:
      heroClassChoices:
        description: |
          When not null, contains three choices you should reply with to choose the hero of your draft.
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      currentCardChoices:
        description: |
          When not null, contains the cards that correspond to your choices for the next draft selection.
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      heroClass:
        $ref: '#/definitions/Entity'
      status:
        description: |
          Gets the status of the draft.
        type: 'string'
        enum:
          - 'IN_PROGRESS'
          - 'SELECT_HERO'
          - 'COMPLETE'
          - 'RETIRED'
      selectedCards:
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      cardsRemaining:
        description: |
          Gets the number of card choices remaining to make.
        type: 'integer'
      draftIndex:
        description: |
          Gets the current draft index.
        type: 'integer'
      wins:
        description: |
          The number of wins you have achieved with your current draft deck.
        type: 'integer'
      losses:
        description: |
          The number of losses you have suffered with your current draft deck.
        type: 'integer'
      deckId:
        description: |
          The deck that corresponds to your finished draft deck.
        type: 'string'
  FriendPutRequest:
    type: 'object'
    properties:
      friendId:
        type: 'string'
    required:
      - friendId
  FriendPutResponse:
    type: 'object'
    properties:
      friend:
        $ref: '#/definitions/Friend'
  UnfriendResponse:
    type: 'object'
    properties:
      deletedFriend:
        $ref: '#/definitions/Friend'
  GameState:
    type: 'object'
    properties:
      powerHistory:
        description: |
          The last ten game event objects with isPowerHistory == true.
        type: 'array'
        items:
          $ref: '#/definitions/GameEvent'
      entities:
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      isLocalPlayerTurn:
        type: 'boolean'
        description: When true, it is the local player's turn.
      turnState:
        type: 'string'
      turnNumber:
        type: 'integer'
      timestamp:
        type: 'integer'
        format: 'int64'
  TargetActionPair:
    description: |
      A pair combining a target (entity ID) and the correponding action for that target.
    type: 'object'
    properties:
      target:
        type: 'integer'
      action:
        type: 'integer'
  SpellAction:
    type: 'object'
    description: |
      A spell action or battlecry.
    properties:
      sourceId:
        description: |
          The ID of the source card in your hand or the minion that originates this spell or battlecry.
        type: 'integer'
      action:
        description: |
          The action for this spell. Defined when this spell is not targetable.
        type: 'integer'
      targetKeyToActions:
        description: |
          An array of entity ID-action pairs that let you convert a valid target to an action index to respond with.
          Defined if this spell is targetable.
        type: 'array'
        items:
          $ref: '#/definitions/TargetActionPair'
  SummonAction:
    description: |
      A summon action that originates from a specific card.
    type: 'object'
    properties:
      sourceId:
        description: |
          The ID of the source card in your hand.
        type: 'integer'
      indexToActions:
        description: |
          An array of index-action pairs that let you convert a battlefield location to an action index to
          respond with.
        type: 'array'
        items:
          description: |
            A single index-action pair.
          type: 'object'
          properties:
            index:
              description: |
                The position in the battlefield that corresponds to this summon action.
              type: 'integer'
            action:
              description: |
                The action index of this particular summon index position for this card.
              type: 'integer'
  ChooseOneOptions:
    description: |
      A prompt to choose from specified options.
    type: 'object'
    properties:
      cardInHandId:
        type: 'integer'
        description: |
          The card in the hand that corresponds to these two options.
      entities:
        type: 'array'
        description: |
          The virtual cards used to render the options.
        items:
          $ref: '#/definitions/Entity'
      spells:
        type: 'array'
        description: |
          The spells that correspond to the virtual entities. Their sourceId is set to the
          corresponding virtual entity.
        items:
          $ref: '#/definitions/SpellAction'
      summons:
        type: 'array'
        description: |
          The summons that correspond to the virtual entities. Their sourceId is set to the
          corresponding virtual entity.
        items:
          $ref: '#/definitions/SummonAction'
      heroPowers:
        type: 'array'
        description: |
          The spells that correspond to virtual hero power entities.
        items:
          $ref: '#/definitions/SpellAction'
      heroes:
        type: 'array'
        description: |
          Choose one hero cards corresponding to their virtual entities.
        items:
          $ref: '#/definitions/SpellAction'
  GameActions:
    description: |
      An object representing all valid game actions in this action request.
    type: 'object'
    properties:
      compatibility:
        description: |
          An array of game action indices. Choose one at random for compatibility purposes until the client can support
          all actions
        type: 'array'
        items:
          type: 'integer'
      endTurn:
        description: |
          The end turn action. Not necessarily always available, because you cannot end your turn in the middle of
          a discover or a battlecry. The value corresponds to which integer index to reply with.
        type: 'integer'
      physicalAttacks:
        description: |
          An array of entity ID - target IDs pairs that represent valid physical attacks.
        type: 'array'
        items:
          type: 'object'
          properties:
            sourceId:
              description: |
                The entity (minion or hero) that corresponds to the source of this physical attack.
              type: 'integer'
            defenders:
              description: |
                Valid defenders for this attacker.
              type: 'array'
              items:
                $ref: '#/definitions/TargetActionPair'
      summons:
        description: |
          The cards in your hand that can be summoned. These are typically only minions.
        type: 'array'
        items:
          $ref: '#/definitions/SummonAction'
      heroPower:
        $ref: '#/definitions/SpellAction'
      heroes:
        description:
          The cards in your hand that are heroes
        type: 'array'
        items:
          $ref: '#/definitions/SpellAction'
      spells:
        description: |
          The cards in your hand that are spells that take targets.
        type: 'array'
        items:
          $ref: '#/definitions/SpellAction'
      battlecries:
        description: |
          A set of possible targetable battlecry actions.
        type: 'array'
        items:
          $ref: '#/definitions/SpellAction'
      discoveries:
        description: |
          Card discovers.
        type: 'array'
        items:
          description: |
            Card IDs and their corresponding action indices.
          type: 'object'
          properties:
            cardId:
              type: 'integer'
            action:
              type: 'integer'
      weapons:
        description: |
          The weapons in your hand that can be equipped. These are the equivalent of summons that only have a single
          index, but do not require targeting on the battlefield.
        type: 'array'
        items:
          $ref: '#/definitions/SummonAction'
      chooseOnes:
        description: |
          An array of choose one spells or summons. Each spell/summon is represented by a different card. An entity
          that can be used to render a card for the option is provided. Use the spell action's card ID to figure out
          which options correspond to which cards in the hand.
        type: 'array'
        items:
          $ref: '#/definitions/ChooseOneOptions'
  Entity:
    type: 'object'
    required:
      - 'id'
    properties:
      id:
        description: The entity's ID in the game.
        type: 'integer'
        default: -1
      cardId:
        description: The entity's Card ID. When null, it typically should not be rendered.
        type: 'string'
      entityType:
        description: |
          Broad categories describing this entity and how it should be rendered.
        type: 'string'
        enum: ['PLAYER', 'HERO', 'CARD', 'MINION', 'WEAPON', 'SECRET', 'QUEST', 'ENCHANTMENT']
      name:
        description: |
          The text that would go into the entity's name field.
        type: 'string'
      description:
        description: |
          The text that would go into the entity's description field.
        type: 'string'
      state:
        $ref: '#/definitions/EntityState'
  EntityState:
    type: 'object'
    description: |
      The entity state contains all the mutable values of an entity. In the future, the server will provide a list of
      exact changes to this state.
    properties:
      location:
        $ref: '#/definitions/EntityLocation'
      background:
        description: |
          When not null, override the default background for this entity's card ID with this key corresponding to
          backgrounds from the server.
        type: 'string'
      portrait:
        description: |
          When not null, override the default portrait for this entity's card ID with this key corresponding to
          portraits from the server.
        type: 'string'
      gold:
        description: Render this entity with a "gold" effect.
        type: 'boolean'
      boardPosition:
        description: The index of the entity in its zone.
        type: 'integer'
      owner:
        description: An integer corresponding to the entity's owner.
        type: 'integer'
      heroClass:
        description: The string enum value that corresponds to this entity's hero class.
        type: 'string'
      baseHp:
        description: The base hitpoints of the entity.
        type: 'integer'
      hp:
        description: |
          The current hitpoints of the entity. Conventionally, this value should be rendered on the hitpoints token.
        type: 'integer'
      durability:
        description: The durability (number of uses) that the weapon still has.
        type: 'integer'
      maxHp:
        description: The maximum number of hitpoints this entity can have.
        type: 'integer'
      baseAttack:
        description: The entity's base attack value.
        type: 'integer'
      attack:
        description: |
          The entity's current attack value. Conventionally, this value should be rendered on the attack token.
        type: 'integer'
      baseManaCost:
        description: |
          The entity's base mana cost.
        type: 'integer'
      manaCost:
        description: |
          The entity's current mana cost. Conventionally, this value should be rendered on the mana token.
        type: 'integer'
      armor:
        description: |
          The entity's armor. Conventionally, this value should be rendered on a hero entity's armor token.
        type: 'integer'
      destroyed:
        description: |
          When true, indicates that this entity is destroyed. During event evaluation, an entity can be destroyed but
          still in a zone other than the graveyard; render a death icon over the entity when it is so marked.
        type: 'boolean'
      summoningSickness:
        description: |
          When true, the entity cannot attack this turn because it has "summoning sickness," or a disability related
          to the first turn the entity came into play. Typically rendered with snooze icons.
        type: 'boolean'
      frozen:
        description: |
          When true, the entity cannot attack because a spell casted on it prevents it so, until the next turn when
          it would normally be able to attack.
        type: 'boolean'
      silenced:
        description: |
          Indicates that the entity was silenced.
        type: 'boolean'
      windfury:
        description: |
          Indicates the entity can attack twice a turn.
        type: 'boolean'
      permanent:
        description: |
          Indicates the entity is an on-battlefield permanent.
        type: 'boolean'
      taunt:
        description: |
          Indicates the entity and other taunt entities must be targeted by enemy actors first during an opponent's
          physical attack action targeting.
        type: 'boolean'
      spellDamage:
        description: |
          Indicates the amount of additional spell damage this entity gives its owning player.
        type: 'integer'
      charge:
        description: |
          When true, the entity can attack the same turn it is summoned.
        type: 'boolean'
      enraged:
        description: |
          When true, this entity is under the influence of "enrage," or a bonus when it takes damage the first time.
        type: 'boolean'
      battlecry:
        description: |
          When true, this entity has an effect that gets triggered when it is played from the hand.
        type: 'boolean'
      deathrattles:
        description: |
          When true, this entity has an effect that gets triggered when it is destroyed.
        type: 'boolean'
      immune:
        description: |
          Indicates the entity does not take damage.
        type: 'boolean'
      divineShield:
        description: |
          When true, the entity will take no loss in hitpoints the first time it would ordinarily take damage.
        type: 'boolean'
      stealth:
        description: |
          When true, the minion cannot be targeted by the opponent until the entity attacks for the first time.
        type: 'boolean'
      combo:
        description: |
          Indicates this minion has a combo effect.
        type: 'boolean'
      overload:
        description: |
          Indicates the amount of mana that would be locked if this card were played.
        type: 'integer'
      chooseOne:
        description: |
          Indicates this card has a choose-one effect.
        type: 'boolean'
      untargetableBySpells:
        description: |
          Indicates this entity cannot be targeted by spells.
        type: 'boolean'
      cannotAttack:
        description: When true, indicates this minion cannot attack, even though it normally can.
        type: 'boolean'
      underAura:
        description: When true, indicates this minion is benefiting from the aura of another effect.
        type: 'boolean'
      customRenderer:
        type: 'string'
      customData:
        type: 'string'
      playable:
        description: When true, indicates the card can be played, or the hero / minion can initiate a physical attack.
        type: 'boolean'
      mana:
        description: The player's current mana.
        type: 'integer'
      maxMana:
        description: The player's maximum amount of mana.
        type: 'integer'
      lockedMana:
        description: The amount of mana that was locked due to overload.
        type: 'integer'
      hostsTrigger:
        description: When true, indicates this entity has an effect that triggers on game events.
        type: 'boolean'
      note:
        description: A renderable note attached to this entity.
        type: 'string'
      cardType:
        description: When not null, indicates this card entity has a specified type.
        type: 'string'
        enum:
          - 'HERO'
          - 'MINION'
          - 'SPELL'
          - 'WEAPON'
          - 'HERO_POWER'
          - 'CHOOSE_ONE'
      tribe:
        description: When not null, indicates the card's tribe/race. Typically only minions have this field set.
        type: 'string'
      fires:
        description: The number of times this enchantment (secret, quest or trigger on card) has fired.
        type: 'integer'
      countUntilCast:
        description: |
          The number of times this enchantment (secret, quest or trigger on card) must fire before its spell effect is
          triggered.
        type: 'integer'
      cardSet:
        description: |
          The card expansion set this entity belongs to.
        type: 'string'
      rarity:
        description: |
          The rarity of the card
        type: 'string'
        enum:
          - 'FREE'
          - 'COMMON'
          - 'RARE'
          - 'EPIC'
          - 'LEGENDARY'
          - 'ALLIANCE'
  DraftsChooseCardRequest:
    type: 'object'
    required:
      - cardIndex
    properties:
      cardIndex:
        type: 'integer'
  DraftsChooseHeroRequest:
    type: 'object'
    required:
      - heroIndex
    properties:
      heroIndex:
        type: 'integer'
  DraftsPostRequest:
    type: 'object'
    properties:
      startDraft:
        description: |
          Starts a new draft.
        type: 'boolean'
      retireEarly:
        description: |
          Retires a draft early. Typically this costs some number of lives.
        type: 'boolean'
  MatchmakingQueuesResponse:
    type: 'object'
    description: |
      Represents a list of queues.
    properties:
      queues:
        description: |
          The available queues.
        type: 'array'
        items:
          $ref: '#/definitions/MatchmakingQueueItem'
  MatchmakingQueueItem:
    type: 'object'
    description: |
      A queue the user can enter to play a match in.
    properties:
      name:
        type: 'string'
        description: |
          The renderable name of the queue
      description:
        type: 'string'
        description: |
          A detailed description for this queue.
      tooltip:
        type: 'string'
        description: |
          A tooltip for this queue.
      queueId:
        type: 'string'
        description: |
          The ID of the queue the user should put a MatchmakingQueuePutRequest into.
      requires:
        type: 'object'
        description: |
          The arguments required for the matchmaking request.
        properties:
          deck:
            type: 'boolean'
            description: |
              Indicates that a deck choice is required.
          heroClass:
            type: 'boolean'
            description: |
              Indicates that a hero class choice is required. When a deck choice is not required, the user only
              picks a hero.
          deckChoices:
            type: 'array'
            items:
              $ref: '#/definitions/InventoryCollection'
            description: |
              Indicates that the player must choose from the specified decks.
          deckIdChoices:
            type: 'array'
            items:
              type: 'string'
            description: |
              Indicates that the player must choose from the specified deck IDs in the player's account.
  GetCardsResponse:
    type: object
    description: |
      A cacheable copy of the entire card catalogue.
    properties:
      version:
        description: |
          A token used in the If-None-Match argument when checking for new card catalogue content.
        type: string
      cards:
        description: |
          The actual array of cards representing the complete Spellsource catalogue.
        type: 'array'
        items:
          $ref: '#/definitions/CardRecord'
  SpellsourceException:
    type: object
    description: |
      A server-side exception with content renderable to the client.
    properties:
      message:
        description: |
          A user-renderable message explaining the source of the error.
        type: string
    required:
      - message
responses:
  InternalServerError:
    description: The request raised an exception on the server and produced a user-renderable message.
    schema:
      $ref: '#/definitions/SpellsourceException'
paths:
  /:
    get:
      description: |
        Returns an empty body if the server is available.
      operationId: healthCheck
      responses:
        "200":
          description: |
            The server is okay!
  /accounts/{targetUserId}:
    get:
      description: |
        Get a specific account. Contains more information if the userId matches the requesting user.
      operationId: getAccount
      security:
        - TokenSecurity: []
      parameters:
        - name: targetUserId
          in: path
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            A specific user account.
          schema:
            $ref: '#/definitions/GetAccountsResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /accounts:
    get:
      description: |
        Get a list of accounts including user profile information.
      operationId: getAccounts
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetAccountsRequest'
      responses:
        "200":
          description: |
            Gets a list of user profile accounts
          schema:
            $ref: '#/definitions/GetAccountsResponse'
        default:
          $ref: '#/responses/InternalServerError'
    put:
      description: |
        Create an account with Spellsource.
      operationId: createAccount
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateAccountRequest'
      responses:
        "200":
          description: |
            An account has been successfully created.
          schema:
            $ref: '#/definitions/CreateAccountResponse'
        default:
          $ref: '#/responses/InternalServerError'
    post:
      description: |
        Login with a username and password, receiving an authentication token to use for future sessions.
      operationId: login
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        "200":
          description: |
            A response containing the token to put into future request headers.
          schema:
            $ref: '#/definitions/LoginResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /accounts-password:
    post:
      description: |
        Changes your password. Does not log you out after the password is changed.
      operationId: changePassword
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangePasswordRequest'
      responses:
        "200":
          description: |
            The password was successfully changed.
          schema:
            $ref: '#/definitions/ChangePasswordResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /cards:
    get:
      description: |
        Gets a complete catalogue of all the cards available in Spellsource as a list of CardRecords
      operationId: getCards
      parameters:
        - name: If-None-Match
          in: header
          description: |
            The value returned in the ETag header from the server when this was last called, or empty if this is the
            first call to this resource.
          type: string
      responses:
        "304":
          description: |
            Not modified. Reuse the existing cards database.
          headers:
            ETag:
              type: string
              description: |
                The token to provide as the In-None-Match argument next time you check for new cards.
        "200":
          description: |
            The cards database is new/updated and should replace your existing copy.
          schema:
            $ref: '#/definitions/GetCardsResponse'
          headers:
            ETag:
              type: string
              description: |
                The token to provide as the In-None-Match argument next time you check for new cards.
            Cache-Control:
              type: string
              description: |
                A standard-compliant cache control that indicates this resource should be retained indefinitely
                (public, max-age=31536000)
            Last-Modified:
              type: string
              format: date-time
              description: |
                The RFC1123 date indicating when these cards were last modified (typically when the first host
                in the cluser comes online).
            Date:
              type: string
              format: date-time
              description: |
                 The RFC1123 date when this request was made.
  /decks:
    get:
      description: |
        Gets all the user's decks.
      operationId: decksGetAll
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The server returns an array of DeckGetResponses for each deck
          schema:
            $ref: '#/definitions/DecksGetAllResponse'
        default:
          $ref: '#/responses/InternalServerError'
    put:
      description: |
        Creates a new deck with optionally specified inventory IDs, a name and a hero class.
      operationId: decksPut
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          description: |
            The deck creation request.
          required: true
          schema:
            $ref: '#/definitions/DecksPutRequest'
      responses:
        "200":
          description: |
            The server has created a deck with the optionally specified cards and provides the ID of the deck for later use.
          schema:
            $ref: '#/definitions/DecksPutResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /decks/{deckId}:
    get:
      description: |
        Gets a deck. Only viewable for the owner of the deck or players in the alliance.
      operationId: decksGet
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          required: true
          description: The Deck ID to get.
          type: 'string'
      responses:
        "200":
          description: |
            The deck has been successfully retrieved.
          schema:
            $ref: '#/definitions/DecksGetResponse'
        default:
          $ref: '#/responses/InternalServerError'
    post:
      description: |
        Updates the deck by adding or removing cards, changing the hero class, or renaming the deck.
      operationId: decksUpdate
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          description: The Deck ID to update.
          required: true
          type: 'string'
        - name: updateCommand
          in: body
          description: |
            An update command modifying specified properties of the deck.
          required: true
          schema:
            $ref: '#/definitions/DecksUpdateCommand'
      responses:
        "200":
          description: |
            The update has been successfully applied.
          schema:
            $ref: '#/definitions/DecksGetResponse'
        default:
          $ref: '#/responses/InternalServerError'
    delete:
      description: |
        Deletes the specified deck by ID.
      operationId: decksDelete
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          description: The Deck ID to delete.
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            The deck has been deleted.
        default:
          $ref: '#/responses/InternalServerError'
  /matchmaking:
    get:
      description: |
        Gets a list of queues available for matchmaking.
      operationId: matchmakingGet
      security:
        - TokenSecurity: []
      responses:
        "404":
          description: |
            No queues are available to play at the moment.
        "200":
          description: |
            A list of queues is available for the user.
          schema:
            $ref: '#/definitions/MatchmakingQueuesResponse'
        default:
          $ref: '#/responses/InternalServerError'
    delete:
      description: Removes your client from the matchmaking queue, regardless of which queue it is in.
      operationId: matchmakingConstructedQueueDelete
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The client's cancel request has been processed. The result can be found in the body's MatchCancelResponse.
          schema:
            $ref: '#/definitions/MatchCancelResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /matchmaking/{queueId}:
    get:
      description: |
        Gets a renderable gamestate representing this player's current game in this queue.
      operationId: matchmakingConstructedGet
      parameters:
        - name: queueId
          in: path
          required: true
          description: The ID of the queue to enter.
          type: 'string'
      security:
        - TokenSecurity: []
      responses:
        "404":
          description: |
            There is no game currently available.
        "200":
          description: |
            The client has a game and its state was delivered.
          schema:
            $ref: '#/definitions/GameState'
        default:
          $ref: '#/responses/InternalServerError'
    delete:
      description: |
        Concedes the player's current game in this queue, or cancels their place in it.
      operationId: matchmakingConstructedDelete
      parameters:
        - name: queueId
          in: path
          required: true
          description: The ID of the queue to enter.
          type: 'string'
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The client's game was successfully conceded.
          schema:
            $ref: '#/definitions/MatchConcedeResponse'
        default:
          $ref: '#/responses/InternalServerError'
    put:
      description: |
        Enters your client into the specified matchmaking queue. Clients have to keep their matchmaking queue entry
         alive by regularly retrying when they have not yet been matched. Retry within 5 seconds.
      operationId: matchmakingConstructedQueuePut
      security:
        - TokenSecurity: []
      parameters:
        - name: queueId
          in: path
          required: true
          description: The ID of the queue to enter.
          type: 'string'
        - name: request
          in: body
          description: |
            The matchmaking queue entry. Contains the deck.
          required: true
          schema:
            $ref: '#/definitions/MatchmakingQueuePutRequest'
      responses:
        "200":
          description: |
            The client has been matched with a client and is ready to connect. Use the "connection" field for connection
            information (client specific).
          schema:
            $ref: '#/definitions/MatchmakingQueuePutResponse'
        "202":
          description: |
            The client is waiting in the matchmaking queue and has been given a MatchmakingRequest object to retry with
            in the "retry" field of the MatchmakingResponse. Retry with this request within 5 seconds.
          schema:
            $ref: '#/definitions/MatchmakingQueuePutResponse'
        default:
          $ref: '#/responses/InternalServerError'
  /friends:
    put:
      description: |
        connect with a friend
      operationId: friendPut
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          description: |
            Friend put request
          required: true
          schema:
            $ref: '#/definitions/FriendPutRequest'
      responses:
        "200":
          description: |
            Connection has been made
          schema:
            $ref: '#/definitions/FriendPutResponse'
        "404":
          description: |
            friendId does not belong to a user
        "409":
          description: |
            already friends
        default:
          $ref: '#/responses/InternalServerError'

  /friends/{friendId}:
    delete:
      description: |
        unfriend a user
      operationId: friendDelete
      security:
        - TokenSecurity: []
      parameters:
        - name: friendId
          in: path
          required: true
          description: id of friend to unfriend.
          type: 'string'
      responses:
        "200":
          description: |
            Succefully unfriended
          schema:
            $ref: '#/definitions/UnfriendResponse'
        "404":
          description: |
            Not a friend
        default:
          $ref: '#/responses/InternalServerError'
  /drafts:
    get:
      description: |
        Gets your latest state of the draft.
      operationId: draftsGet
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            A valid draft state was found. Contains possible actions you can take.
          schema:
            $ref: '#/definitions/DraftState'
        "404":
          description: |
            You have not started a draft. Start one first.
        default:
          $ref: '#/responses/InternalServerError'
    post:
      description: |
        Starts a draft, or make a change to your draft, like retiring early.
      operationId: draftsPost
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/DraftsPostRequest'
      responses:
        "200":
          description: |
            You successfully started a draft and it now has the following state. Or, the
          schema:
            $ref: '#/definitions/DraftState'
        "400":
          description: |
            You sent an invalid draft request, like starting a draft when you already have
            a draft started.
        default:
          $ref: '#/responses/InternalServerError'
  /drafts/hero:
    put:
      description: |
        Choose a hero from your hero selection.
      operationId: draftsChooseHero
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/DraftsChooseHeroRequest'
      responses:
        "200":
          description: |
            The new draft state, containing the new card choices.
          schema:
            $ref: '#/definitions/DraftState'
        "400":
          description: |
            An invalid option was chosen, or it's not time to choose a hero.
        default:
          $ref: '#/responses/InternalServerError'
  /drafts/cards:
    put:
      description: |
        Make a selection for the given draft index.
      operationId: draftsChooseCard
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/DraftsChooseCardRequest'
      responses:
        "200":
          description: |
            The new draft state. When deckId in draft state is not null, you are ready to enter matchmaking.
          schema:
            $ref: '#/definitions/DraftState'
        "400":
          description: |
            An invalid option was chosen, or it's not time to choose a card (usually your draft is finished).
        default:
          $ref: '#/responses/InternalServerError'

  /friends/{friendId}/conversation:
    get:
      description: |
        get conversation with friend
      operationId: getFriendConversation
      security:
        - TokenSecurity: []
      parameters:
        - name: friendId
          in: path
          required: true
          description: id of friend
          type: 'string'
      responses:
        "200":
          description: |
            Succefully fetched conversation
          schema:
            $ref: '#/definitions/GetConversationResponse'
        "404":
          description: |
            Friend not found
        default:
          $ref: '#/responses/InternalServerError'
    put:
      description: |
        send message to friend
      operationId: sendFriendMessage
      security:
        - TokenSecurity: []
      parameters:
        - name: friendId
          in: path
          required: true
          description: id of friend
          type: 'string'
        - name: request
          in: body
          description: Send message request
          required: true
          schema:
            $ref: '#/definitions/SendMessageRequest'
      responses:
        "200":
          description: |
            Message sent
          schema:
            $ref: '#/definitions/SendMessageResponse'
        "404":
          description: |
            Friend not found
        default:
          $ref: '#/responses/InternalServerError'
