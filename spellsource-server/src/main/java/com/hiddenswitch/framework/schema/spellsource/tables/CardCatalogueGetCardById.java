/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardCatalogueGetCardByIdRecord;

import io.github.jklingsporn.vertx.jooq.shared.postgres.JSONBToJsonObjectConverter;
import io.vertx.core.json.JsonObject;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.XML;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardCatalogueGetCardById extends TableImpl<CardCatalogueGetCardByIdRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>spellsource.card_catalogue_get_card_by_id</code>
     */
    public static final CardCatalogueGetCardById CARD_CATALOGUE_GET_CARD_BY_ID = new CardCatalogueGetCardById();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardCatalogueGetCardByIdRecord> getRecordType() {
        return CardCatalogueGetCardByIdRecord.class;
    }

    /**
     * The column <code>spellsource.card_catalogue_get_card_by_id.id</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>spellsource.card_catalogue_get_card_by_id.created_by</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>spellsource.card_catalogue_get_card_by_id.uri</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, String> URI = createField(DSL.name("uri"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>spellsource.card_catalogue_get_card_by_id.blockly_workspace</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, XML> BLOCKLY_WORKSPACE = createField(DSL.name("blockly_workspace"), SQLDataType.XML, this, "");

    /**
     * The column
     * <code>spellsource.card_catalogue_get_card_by_id.card_script</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, JsonObject> CARD_SCRIPT = createField(DSL.name("card_script"), SQLDataType.JSONB, this, "", new JSONBToJsonObjectConverter());

    /**
     * The column
     * <code>spellsource.card_catalogue_get_card_by_id.created_at</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>spellsource.card_catalogue_get_card_by_id.last_modified</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, OffsetDateTime> LAST_MODIFIED = createField(DSL.name("last_modified"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>spellsource.card_catalogue_get_card_by_id.is_archived</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, Boolean> IS_ARCHIVED = createField(DSL.name("is_archived"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>spellsource.card_catalogue_get_card_by_id.is_published</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, Boolean> IS_PUBLISHED = createField(DSL.name("is_published"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>spellsource.card_catalogue_get_card_by_id.succession</code>.
     */
    public final TableField<CardCatalogueGetCardByIdRecord, Long> SUCCESSION = createField(DSL.name("succession"), SQLDataType.BIGINT.nullable(false), this, "");

    private CardCatalogueGetCardById(Name alias, Table<CardCatalogueGetCardByIdRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private CardCatalogueGetCardById(Name alias, Table<CardCatalogueGetCardByIdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>spellsource.card_catalogue_get_card_by_id</code>
     * table reference
     */
    public CardCatalogueGetCardById(String alias) {
        this(DSL.name(alias), CARD_CATALOGUE_GET_CARD_BY_ID);
    }

    /**
     * Create an aliased <code>spellsource.card_catalogue_get_card_by_id</code>
     * table reference
     */
    public CardCatalogueGetCardById(Name alias) {
        this(alias, CARD_CATALOGUE_GET_CARD_BY_ID);
    }

    /**
     * Create a <code>spellsource.card_catalogue_get_card_by_id</code> table
     * reference
     */
    public CardCatalogueGetCardById() {
        this(DSL.name("card_catalogue_get_card_by_id"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public CardCatalogueGetCardById as(String alias) {
        return new CardCatalogueGetCardById(DSL.name(alias), this, parameters);
    }

    @Override
    public CardCatalogueGetCardById as(Name alias) {
        return new CardCatalogueGetCardById(alias, this, parameters);
    }

    @Override
    public CardCatalogueGetCardById as(Table<?> alias) {
        return new CardCatalogueGetCardById(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public CardCatalogueGetCardById rename(String name) {
        return new CardCatalogueGetCardById(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public CardCatalogueGetCardById rename(Name name) {
        return new CardCatalogueGetCardById(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public CardCatalogueGetCardById rename(Table<?> name) {
        return new CardCatalogueGetCardById(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, XML, JsonObject, OffsetDateTime, OffsetDateTime, Boolean, Boolean, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public CardCatalogueGetCardById call(
          String cardId
    ) {
        CardCatalogueGetCardById result = new CardCatalogueGetCardById(DSL.name("card_catalogue_get_card_by_id"), null, new Field[] {
            DSL.val(cardId, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public CardCatalogueGetCardById call(
          Field<String> cardId
    ) {
        CardCatalogueGetCardById result = new CardCatalogueGetCardById(DSL.name("card_catalogue_get_card_by_id"), null, new Field[] {
            cardId
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super String, ? super String, ? super XML, ? super JsonObject, ? super OffsetDateTime, ? super OffsetDateTime, ? super Boolean, ? super Boolean, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super String, ? super String, ? super XML, ? super JsonObject, ? super OffsetDateTime, ? super OffsetDateTime, ? super Boolean, ? super Boolean, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
