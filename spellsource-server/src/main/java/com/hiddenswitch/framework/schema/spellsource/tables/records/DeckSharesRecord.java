/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.records;


import com.hiddenswitch.framework.schema.spellsource.tables.DeckShares;
import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.IDeckShares;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * indicates a deck shared to a player
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeckSharesRecord extends UpdatableRecordImpl<DeckSharesRecord> implements VertxPojo, Record3<String, String, Boolean>, IDeckShares {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>spellsource.deck_shares.deck_id</code>.
     */
    @Override
    public DeckSharesRecord setDeckId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.deck_shares.deck_id</code>.
     */
    @Override
    public String getDeckId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>spellsource.deck_shares.share_recipient_id</code>.
     */
    @Override
    public DeckSharesRecord setShareRecipientId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.deck_shares.share_recipient_id</code>.
     */
    @Override
    public String getShareRecipientId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>spellsource.deck_shares.trashed_by_recipient</code>.
     */
    @Override
    public DeckSharesRecord setTrashedByRecipient(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.deck_shares.trashed_by_recipient</code>.
     */
    @Override
    public Boolean getTrashedByRecipient() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return DeckShares.DECK_SHARES.DECK_ID;
    }

    @Override
    public Field<String> field2() {
        return DeckShares.DECK_SHARES.SHARE_RECIPIENT_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return DeckShares.DECK_SHARES.TRASHED_BY_RECIPIENT;
    }

    @Override
    public String component1() {
        return getDeckId();
    }

    @Override
    public String component2() {
        return getShareRecipientId();
    }

    @Override
    public Boolean component3() {
        return getTrashedByRecipient();
    }

    @Override
    public String value1() {
        return getDeckId();
    }

    @Override
    public String value2() {
        return getShareRecipientId();
    }

    @Override
    public Boolean value3() {
        return getTrashedByRecipient();
    }

    @Override
    public DeckSharesRecord value1(String value) {
        setDeckId(value);
        return this;
    }

    @Override
    public DeckSharesRecord value2(String value) {
        setShareRecipientId(value);
        return this;
    }

    @Override
    public DeckSharesRecord value3(Boolean value) {
        setTrashedByRecipient(value);
        return this;
    }

    @Override
    public DeckSharesRecord values(String value1, String value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDeckShares from) {
        setDeckId(from.getDeckId());
        setShareRecipientId(from.getShareRecipientId());
        setTrashedByRecipient(from.getTrashedByRecipient());
    }

    @Override
    public <E extends IDeckShares> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DeckSharesRecord
     */
    public DeckSharesRecord() {
        super(DeckShares.DECK_SHARES);
    }

    /**
     * Create a detached, initialised DeckSharesRecord
     */
    public DeckSharesRecord(String deckId, String shareRecipientId, Boolean trashedByRecipient) {
        super(DeckShares.DECK_SHARES);

        setDeckId(deckId);
        setShareRecipientId(shareRecipientId);
        setTrashedByRecipient(trashedByRecipient);
    }

    /**
     * Create a detached, initialised DeckSharesRecord
     */
    public DeckSharesRecord(com.hiddenswitch.framework.schema.spellsource.tables.pojos.DeckShares value) {
        super(DeckShares.DECK_SHARES);

        if (value != null) {
            setDeckId(value.getDeckId());
            setShareRecipientId(value.getShareRecipientId());
            setTrashedByRecipient(value.getTrashedByRecipient());
        }
    }

        public DeckSharesRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
