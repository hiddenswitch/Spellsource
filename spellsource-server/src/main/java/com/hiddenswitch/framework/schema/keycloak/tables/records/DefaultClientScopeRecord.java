/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.DefaultClientScope;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IDefaultClientScope;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultClientScopeRecord extends UpdatableRecordImpl<DefaultClientScopeRecord> implements VertxPojo, Record3<String, String, Boolean>, IDefaultClientScope {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>keycloak.default_client_scope.realm_id</code>.
     */
    @Override
    public DefaultClientScopeRecord setRealmId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.default_client_scope.realm_id</code>.
     */
    @Override
    public String getRealmId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.default_client_scope.scope_id</code>.
     */
    @Override
    public DefaultClientScopeRecord setScopeId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.default_client_scope.scope_id</code>.
     */
    @Override
    public String getScopeId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>keycloak.default_client_scope.default_scope</code>.
     */
    @Override
    public DefaultClientScopeRecord setDefaultScope(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.default_client_scope.default_scope</code>.
     */
    @Override
    public Boolean getDefaultScope() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return DefaultClientScope.DEFAULT_CLIENT_SCOPE.REALM_ID;
    }

    @Override
    public Field<String> field2() {
        return DefaultClientScope.DEFAULT_CLIENT_SCOPE.SCOPE_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return DefaultClientScope.DEFAULT_CLIENT_SCOPE.DEFAULT_SCOPE;
    }

    @Override
    public String component1() {
        return getRealmId();
    }

    @Override
    public String component2() {
        return getScopeId();
    }

    @Override
    public Boolean component3() {
        return getDefaultScope();
    }

    @Override
    public String value1() {
        return getRealmId();
    }

    @Override
    public String value2() {
        return getScopeId();
    }

    @Override
    public Boolean value3() {
        return getDefaultScope();
    }

    @Override
    public DefaultClientScopeRecord value1(String value) {
        setRealmId(value);
        return this;
    }

    @Override
    public DefaultClientScopeRecord value2(String value) {
        setScopeId(value);
        return this;
    }

    @Override
    public DefaultClientScopeRecord value3(Boolean value) {
        setDefaultScope(value);
        return this;
    }

    @Override
    public DefaultClientScopeRecord values(String value1, String value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDefaultClientScope from) {
        setRealmId(from.getRealmId());
        setScopeId(from.getScopeId());
        setDefaultScope(from.getDefaultScope());
    }

    @Override
    public <E extends IDefaultClientScope> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DefaultClientScopeRecord
     */
    public DefaultClientScopeRecord() {
        super(DefaultClientScope.DEFAULT_CLIENT_SCOPE);
    }

    /**
     * Create a detached, initialised DefaultClientScopeRecord
     */
    public DefaultClientScopeRecord(String realmId, String scopeId, Boolean defaultScope) {
        super(DefaultClientScope.DEFAULT_CLIENT_SCOPE);

        setRealmId(realmId);
        setScopeId(scopeId);
        setDefaultScope(defaultScope);
    }

    /**
     * Create a detached, initialised DefaultClientScopeRecord
     */
    public DefaultClientScopeRecord(com.hiddenswitch.framework.schema.keycloak.tables.pojos.DefaultClientScope value) {
        super(DefaultClientScope.DEFAULT_CLIENT_SCOPE);

        if (value != null) {
            setRealmId(value.getRealmId());
            setScopeId(value.getScopeId());
            setDefaultScope(value.getDefaultScope());
        }
    }

        public DefaultClientScopeRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
