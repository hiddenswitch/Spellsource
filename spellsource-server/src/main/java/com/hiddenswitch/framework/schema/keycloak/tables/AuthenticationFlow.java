/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.AuthenticationFlowRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthenticationFlow extends TableImpl<AuthenticationFlowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.authentication_flow</code>
     */
    public static final AuthenticationFlow AUTHENTICATION_FLOW = new AuthenticationFlow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthenticationFlowRecord> getRecordType() {
        return AuthenticationFlowRecord.class;
    }

    /**
     * The column <code>keycloak.authentication_flow.id</code>.
     */
    public final TableField<AuthenticationFlowRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.authentication_flow.alias</code>.
     */
    public final TableField<AuthenticationFlowRecord, String> ALIAS = createField(DSL.name("alias"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.authentication_flow.description</code>.
     */
    public final TableField<AuthenticationFlowRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.authentication_flow.realm_id</code>.
     */
    public final TableField<AuthenticationFlowRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.authentication_flow.provider_id</code>.
     */
    public final TableField<AuthenticationFlowRecord, String> PROVIDER_ID = createField(DSL.name("provider_id"), SQLDataType.VARCHAR(36).nullable(false).defaultValue(DSL.field("'basic-flow'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>keycloak.authentication_flow.top_level</code>.
     */
    public final TableField<AuthenticationFlowRecord, Boolean> TOP_LEVEL = createField(DSL.name("top_level"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.authentication_flow.built_in</code>.
     */
    public final TableField<AuthenticationFlowRecord, Boolean> BUILT_IN = createField(DSL.name("built_in"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private AuthenticationFlow(Name alias, Table<AuthenticationFlowRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthenticationFlow(Name alias, Table<AuthenticationFlowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.authentication_flow</code> table
     * reference
     */
    public AuthenticationFlow(String alias) {
        this(DSL.name(alias), AUTHENTICATION_FLOW);
    }

    /**
     * Create an aliased <code>keycloak.authentication_flow</code> table
     * reference
     */
    public AuthenticationFlow(Name alias) {
        this(alias, AUTHENTICATION_FLOW);
    }

    /**
     * Create a <code>keycloak.authentication_flow</code> table reference
     */
    public AuthenticationFlow() {
        this(DSL.name("authentication_flow"), null);
    }

    public <O extends Record> AuthenticationFlow(Table<O> child, ForeignKey<O, AuthenticationFlowRecord> key) {
        super(child, key, AUTHENTICATION_FLOW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_AUTH_FLOW_REALM);
    }

    @Override
    public UniqueKey<AuthenticationFlowRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_AUTH_FLOW_PK;
    }

    @Override
    public List<ForeignKey<AuthenticationFlowRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AUTHENTICATION_FLOW__FK_AUTH_FLOW_REALM);
    }

    private transient Realm _realm;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.AUTHENTICATION_FLOW__FK_AUTH_FLOW_REALM);

        return _realm;
    }

    @Override
    public AuthenticationFlow as(String alias) {
        return new AuthenticationFlow(DSL.name(alias), this);
    }

    @Override
    public AuthenticationFlow as(Name alias) {
        return new AuthenticationFlow(alias, this);
    }

    @Override
    public AuthenticationFlow as(Table<?> alias) {
        return new AuthenticationFlow(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationFlow rename(String name) {
        return new AuthenticationFlow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationFlow rename(Name name) {
        return new AuthenticationFlow(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationFlow rename(Table<?> name) {
        return new AuthenticationFlow(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, Boolean, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
