/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmAttributeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RealmAttribute extends TableImpl<RealmAttributeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.realm_attribute</code>
     */
    public static final RealmAttribute REALM_ATTRIBUTE = new RealmAttribute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RealmAttributeRecord> getRecordType() {
        return RealmAttributeRecord.class;
    }

    /**
     * The column <code>keycloak.realm_attribute.name</code>.
     */
    public final TableField<RealmAttributeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.realm_attribute.value</code>.
     */
    public final TableField<RealmAttributeRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.realm_attribute.realm_id</code>.
     */
    public final TableField<RealmAttributeRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private RealmAttribute(Name alias, Table<RealmAttributeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RealmAttribute(Name alias, Table<RealmAttributeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.realm_attribute</code> table reference
     */
    public RealmAttribute(String alias) {
        this(DSL.name(alias), REALM_ATTRIBUTE);
    }

    /**
     * Create an aliased <code>keycloak.realm_attribute</code> table reference
     */
    public RealmAttribute(Name alias) {
        this(alias, REALM_ATTRIBUTE);
    }

    /**
     * Create a <code>keycloak.realm_attribute</code> table reference
     */
    public RealmAttribute() {
        this(DSL.name("realm_attribute"), null);
    }

    public <O extends Record> RealmAttribute(Table<O> child, ForeignKey<O, RealmAttributeRecord> key) {
        super(child, key, REALM_ATTRIBUTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_REALM_ATTR_REALM);
    }

    @Override
    public UniqueKey<RealmAttributeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public List<ForeignKey<RealmAttributeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REALM_ATTRIBUTE__FK_8SHXD6L3E9ATQUKACXGPFFPTW);
    }

    private transient Realm _realm;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.REALM_ATTRIBUTE__FK_8SHXD6L3E9ATQUKACXGPFFPTW);

        return _realm;
    }

    @Override
    public RealmAttribute as(String alias) {
        return new RealmAttribute(DSL.name(alias), this);
    }

    @Override
    public RealmAttribute as(Name alias) {
        return new RealmAttribute(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RealmAttribute rename(String name) {
        return new RealmAttribute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RealmAttribute rename(Name name) {
        return new RealmAttribute(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
