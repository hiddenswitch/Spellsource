/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserFederationProviderRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFederationProvider extends TableImpl<UserFederationProviderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.user_federation_provider</code>
     */
    public static final UserFederationProvider USER_FEDERATION_PROVIDER = new UserFederationProvider();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFederationProviderRecord> getRecordType() {
        return UserFederationProviderRecord.class;
    }

    /**
     * The column <code>keycloak.user_federation_provider.id</code>.
     */
    public final TableField<UserFederationProviderRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.user_federation_provider.changed_sync_period</code>.
     */
    public final TableField<UserFederationProviderRecord, Integer> CHANGED_SYNC_PERIOD = createField(DSL.name("changed_sync_period"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>keycloak.user_federation_provider.display_name</code>.
     */
    public final TableField<UserFederationProviderRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>keycloak.user_federation_provider.full_sync_period</code>.
     */
    public final TableField<UserFederationProviderRecord, Integer> FULL_SYNC_PERIOD = createField(DSL.name("full_sync_period"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>keycloak.user_federation_provider.last_sync</code>.
     */
    public final TableField<UserFederationProviderRecord, Integer> LAST_SYNC = createField(DSL.name("last_sync"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>keycloak.user_federation_provider.priority</code>.
     */
    public final TableField<UserFederationProviderRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>keycloak.user_federation_provider.provider_name</code>.
     */
    public final TableField<UserFederationProviderRecord, String> PROVIDER_NAME = createField(DSL.name("provider_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.user_federation_provider.realm_id</code>.
     */
    public final TableField<UserFederationProviderRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36), this, "");

    private UserFederationProvider(Name alias, Table<UserFederationProviderRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFederationProvider(Name alias, Table<UserFederationProviderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.user_federation_provider</code> table
     * reference
     */
    public UserFederationProvider(String alias) {
        this(DSL.name(alias), USER_FEDERATION_PROVIDER);
    }

    /**
     * Create an aliased <code>keycloak.user_federation_provider</code> table
     * reference
     */
    public UserFederationProvider(Name alias) {
        this(alias, USER_FEDERATION_PROVIDER);
    }

    /**
     * Create a <code>keycloak.user_federation_provider</code> table reference
     */
    public UserFederationProvider() {
        this(DSL.name("user_federation_provider"), null);
    }

    public <O extends Record> UserFederationProvider(Table<O> child, ForeignKey<O, UserFederationProviderRecord> key) {
        super(child, key, USER_FEDERATION_PROVIDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USR_FED_PRV_REALM);
    }

    @Override
    public UniqueKey<UserFederationProviderRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5C;
    }

    @Override
    public List<ForeignKey<UserFederationProviderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_FEDERATION_PROVIDER__FK_1FJ32F6PTOLW2QY60CD8N01E8);
    }

    private transient Realm _realm;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.USER_FEDERATION_PROVIDER__FK_1FJ32F6PTOLW2QY60CD8N01E8);

        return _realm;
    }

    @Override
    public UserFederationProvider as(String alias) {
        return new UserFederationProvider(DSL.name(alias), this);
    }

    @Override
    public UserFederationProvider as(Name alias) {
        return new UserFederationProvider(alias, this);
    }

    @Override
    public UserFederationProvider as(Table<?> alias) {
        return new UserFederationProvider(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationProvider rename(String name) {
        return new UserFederationProvider(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationProvider rename(Name name) {
        return new UserFederationProvider(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationProvider rename(Table<?> name) {
        return new UserFederationProvider(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Integer, String, Integer, Integer, Integer, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
