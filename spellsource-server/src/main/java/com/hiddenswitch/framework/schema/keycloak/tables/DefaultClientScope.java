/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.DefaultClientScopeRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultClientScope extends TableImpl<DefaultClientScopeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.default_client_scope</code>
     */
    public static final DefaultClientScope DEFAULT_CLIENT_SCOPE = new DefaultClientScope();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefaultClientScopeRecord> getRecordType() {
        return DefaultClientScopeRecord.class;
    }

    /**
     * The column <code>keycloak.default_client_scope.realm_id</code>.
     */
    public final TableField<DefaultClientScopeRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.default_client_scope.scope_id</code>.
     */
    public final TableField<DefaultClientScopeRecord, String> SCOPE_ID = createField(DSL.name("scope_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.default_client_scope.default_scope</code>.
     */
    public final TableField<DefaultClientScopeRecord, Boolean> DEFAULT_SCOPE = createField(DSL.name("default_scope"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private DefaultClientScope(Name alias, Table<DefaultClientScopeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DefaultClientScope(Name alias, Table<DefaultClientScopeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.default_client_scope</code> table
     * reference
     */
    public DefaultClientScope(String alias) {
        this(DSL.name(alias), DEFAULT_CLIENT_SCOPE);
    }

    /**
     * Create an aliased <code>keycloak.default_client_scope</code> table
     * reference
     */
    public DefaultClientScope(Name alias) {
        this(alias, DEFAULT_CLIENT_SCOPE);
    }

    /**
     * Create a <code>keycloak.default_client_scope</code> table reference
     */
    public DefaultClientScope() {
        this(DSL.name("default_client_scope"), null);
    }

    public <O extends Record> DefaultClientScope(Table<O> child, ForeignKey<O, DefaultClientScopeRecord> key) {
        super(child, key, DEFAULT_CLIENT_SCOPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_DEFCLS_REALM, Indexes.IDX_DEFCLS_SCOPE);
    }

    @Override
    public UniqueKey<DefaultClientScopeRecord> getPrimaryKey() {
        return Keys.R_DEF_CLI_SCOPE_BIND;
    }

    @Override
    public List<ForeignKey<DefaultClientScopeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEFAULT_CLIENT_SCOPE__FK_R_DEF_CLI_SCOPE_REALM);
    }

    private transient Realm _realm;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.DEFAULT_CLIENT_SCOPE__FK_R_DEF_CLI_SCOPE_REALM);

        return _realm;
    }

    @Override
    public DefaultClientScope as(String alias) {
        return new DefaultClientScope(DSL.name(alias), this);
    }

    @Override
    public DefaultClientScope as(Name alias) {
        return new DefaultClientScope(alias, this);
    }

    @Override
    public DefaultClientScope as(Table<?> alias) {
        return new DefaultClientScope(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DefaultClientScope rename(String name) {
        return new DefaultClientScope(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DefaultClientScope rename(Name name) {
        return new DefaultClientScope(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DefaultClientScope rename(Table<?> name) {
        return new DefaultClientScope(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
