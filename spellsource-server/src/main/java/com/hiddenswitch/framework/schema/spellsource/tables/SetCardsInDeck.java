/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.SetCardsInDeckRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SetCardsInDeck extends TableImpl<SetCardsInDeckRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.set_cards_in_deck</code>
     */
    public static final SetCardsInDeck SET_CARDS_IN_DECK = new SetCardsInDeck();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SetCardsInDeckRecord> getRecordType() {
        return SetCardsInDeckRecord.class;
    }

    /**
     * The column <code>spellsource.set_cards_in_deck.id</code>.
     */
    public final TableField<SetCardsInDeckRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>spellsource.set_cards_in_deck.deck_id</code>.
     */
    public final TableField<SetCardsInDeckRecord, String> DECK_ID = createField(DSL.name("deck_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.set_cards_in_deck.card_id</code>.
     */
    public final TableField<SetCardsInDeckRecord, String> CARD_ID = createField(DSL.name("card_id"), SQLDataType.CLOB.nullable(false), this, "");

    private SetCardsInDeck(Name alias, Table<SetCardsInDeckRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB),
            DSL.val(null, SQLDataType.CLOB.getArrayDataType())
        });
    }

    private SetCardsInDeck(Name alias, Table<SetCardsInDeckRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>spellsource.set_cards_in_deck</code> table
     * reference
     */
    public SetCardsInDeck(String alias) {
        this(DSL.name(alias), SET_CARDS_IN_DECK);
    }

    /**
     * Create an aliased <code>spellsource.set_cards_in_deck</code> table
     * reference
     */
    public SetCardsInDeck(Name alias) {
        this(alias, SET_CARDS_IN_DECK);
    }

    /**
     * Create a <code>spellsource.set_cards_in_deck</code> table reference
     */
    public SetCardsInDeck() {
        this(DSL.name("set_cards_in_deck"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public SetCardsInDeck as(String alias) {
        return new SetCardsInDeck(DSL.name(alias), this, parameters);
    }

    @Override
    public SetCardsInDeck as(Name alias) {
        return new SetCardsInDeck(alias, this, parameters);
    }

    @Override
    public SetCardsInDeck as(Table<?> alias) {
        return new SetCardsInDeck(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public SetCardsInDeck rename(String name) {
        return new SetCardsInDeck(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public SetCardsInDeck rename(Name name) {
        return new SetCardsInDeck(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public SetCardsInDeck rename(Table<?> name) {
        return new SetCardsInDeck(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public SetCardsInDeck call(
          String deck
        , String[] cardIds
    ) {
        SetCardsInDeck result = new SetCardsInDeck(DSL.name("set_cards_in_deck"), null, new Field[] {
            DSL.val(deck, SQLDataType.CLOB),
            DSL.val(cardIds, SQLDataType.CLOB.getArrayDataType())
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public SetCardsInDeck call(
          Field<String> deck
        , Field<String[]> cardIds
    ) {
        SetCardsInDeck result = new SetCardsInDeck(DSL.name("set_cards_in_deck"), null, new Field[] {
            deck,
            cardIds
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
