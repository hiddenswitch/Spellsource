/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.pojos;


import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.IDeckShares;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * indicates a deck shared to a player
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeckShares implements VertxPojo, IDeckShares {

    private static final long serialVersionUID = 1L;

    private String deckId;
    private String shareRecipientId;
    private Boolean trashedByRecipient;

    public DeckShares() {}

    public DeckShares(IDeckShares value) {
        this.deckId = value.getDeckId();
        this.shareRecipientId = value.getShareRecipientId();
        this.trashedByRecipient = value.getTrashedByRecipient();
    }

    public DeckShares(
        String deckId,
        String shareRecipientId,
        Boolean trashedByRecipient
    ) {
        this.deckId = deckId;
        this.shareRecipientId = shareRecipientId;
        this.trashedByRecipient = trashedByRecipient;
    }

        public DeckShares(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>spellsource.deck_shares.deck_id</code>.
     */
    @Override
    public String getDeckId() {
        return this.deckId;
    }

    /**
     * Setter for <code>spellsource.deck_shares.deck_id</code>.
     */
    @Override
    public DeckShares setDeckId(String deckId) {
        this.deckId = deckId;
        return this;
    }

    /**
     * Getter for <code>spellsource.deck_shares.share_recipient_id</code>.
     */
    @Override
    public String getShareRecipientId() {
        return this.shareRecipientId;
    }

    /**
     * Setter for <code>spellsource.deck_shares.share_recipient_id</code>.
     */
    @Override
    public DeckShares setShareRecipientId(String shareRecipientId) {
        this.shareRecipientId = shareRecipientId;
        return this;
    }

    /**
     * Getter for <code>spellsource.deck_shares.trashed_by_recipient</code>.
     */
    @Override
    public Boolean getTrashedByRecipient() {
        return this.trashedByRecipient;
    }

    /**
     * Setter for <code>spellsource.deck_shares.trashed_by_recipient</code>.
     */
    @Override
    public DeckShares setTrashedByRecipient(Boolean trashedByRecipient) {
        this.trashedByRecipient = trashedByRecipient;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DeckShares other = (DeckShares) obj;
        if (this.deckId == null) {
            if (other.deckId != null)
                return false;
        }
        else if (!this.deckId.equals(other.deckId))
            return false;
        if (this.shareRecipientId == null) {
            if (other.shareRecipientId != null)
                return false;
        }
        else if (!this.shareRecipientId.equals(other.shareRecipientId))
            return false;
        if (this.trashedByRecipient == null) {
            if (other.trashedByRecipient != null)
                return false;
        }
        else if (!this.trashedByRecipient.equals(other.trashedByRecipient))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.deckId == null) ? 0 : this.deckId.hashCode());
        result = prime * result + ((this.shareRecipientId == null) ? 0 : this.shareRecipientId.hashCode());
        result = prime * result + ((this.trashedByRecipient == null) ? 0 : this.trashedByRecipient.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DeckShares (");

        sb.append(deckId);
        sb.append(", ").append(shareRecipientId);
        sb.append(", ").append(trashedByRecipient);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDeckShares from) {
        setDeckId(from.getDeckId());
        setShareRecipientId(from.getShareRecipientId());
        setTrashedByRecipient(from.getTrashedByRecipient());
    }

    @Override
    public <E extends IDeckShares> E into(E into) {
        into.from(this);
        return into;
    }
}
