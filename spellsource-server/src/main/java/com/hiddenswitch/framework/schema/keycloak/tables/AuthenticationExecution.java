/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.AuthenticationExecutionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthenticationExecution extends TableImpl<AuthenticationExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.authentication_execution</code>
     */
    public static final AuthenticationExecution AUTHENTICATION_EXECUTION = new AuthenticationExecution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthenticationExecutionRecord> getRecordType() {
        return AuthenticationExecutionRecord.class;
    }

    /**
     * The column <code>keycloak.authentication_execution.id</code>.
     */
    public final TableField<AuthenticationExecutionRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.authentication_execution.alias</code>.
     */
    public final TableField<AuthenticationExecutionRecord, String> ALIAS = createField(DSL.name("alias"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.authentication_execution.authenticator</code>.
     */
    public final TableField<AuthenticationExecutionRecord, String> AUTHENTICATOR = createField(DSL.name("authenticator"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.authentication_execution.realm_id</code>.
     */
    public final TableField<AuthenticationExecutionRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.authentication_execution.flow_id</code>.
     */
    public final TableField<AuthenticationExecutionRecord, String> FLOW_ID = createField(DSL.name("flow_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.authentication_execution.requirement</code>.
     */
    public final TableField<AuthenticationExecutionRecord, Integer> REQUIREMENT = createField(DSL.name("requirement"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>keycloak.authentication_execution.priority</code>.
     */
    public final TableField<AuthenticationExecutionRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>keycloak.authentication_execution.authenticator_flow</code>.
     */
    public final TableField<AuthenticationExecutionRecord, Boolean> AUTHENTICATOR_FLOW = createField(DSL.name("authenticator_flow"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.authentication_execution.auth_flow_id</code>.
     */
    public final TableField<AuthenticationExecutionRecord, String> AUTH_FLOW_ID = createField(DSL.name("auth_flow_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.authentication_execution.auth_config</code>.
     */
    public final TableField<AuthenticationExecutionRecord, String> AUTH_CONFIG = createField(DSL.name("auth_config"), SQLDataType.VARCHAR(36), this, "");

    private AuthenticationExecution(Name alias, Table<AuthenticationExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthenticationExecution(Name alias, Table<AuthenticationExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.authentication_execution</code> table
     * reference
     */
    public AuthenticationExecution(String alias) {
        this(DSL.name(alias), AUTHENTICATION_EXECUTION);
    }

    /**
     * Create an aliased <code>keycloak.authentication_execution</code> table
     * reference
     */
    public AuthenticationExecution(Name alias) {
        this(alias, AUTHENTICATION_EXECUTION);
    }

    /**
     * Create a <code>keycloak.authentication_execution</code> table reference
     */
    public AuthenticationExecution() {
        this(DSL.name("authentication_execution"), null);
    }

    public <O extends Record> AuthenticationExecution(Table<O> child, ForeignKey<O, AuthenticationExecutionRecord> key) {
        super(child, key, AUTHENTICATION_EXECUTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_AUTH_EXEC_FLOW, Indexes.IDX_AUTH_EXEC_REALM_FLOW);
    }

    @Override
    public UniqueKey<AuthenticationExecutionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_AUTH_EXEC_PK;
    }

    @Override
    public List<ForeignKey<AuthenticationExecutionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AUTHENTICATION_EXECUTION__FK_AUTH_EXEC_REALM, Keys.AUTHENTICATION_EXECUTION__FK_AUTH_EXEC_FLOW);
    }

    private transient Realm _realm;
    private transient AuthenticationFlow _authenticationFlow;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.AUTHENTICATION_EXECUTION__FK_AUTH_EXEC_REALM);

        return _realm;
    }

    /**
     * Get the implicit join path to the
     * <code>keycloak.authentication_flow</code> table.
     */
    public AuthenticationFlow authenticationFlow() {
        if (_authenticationFlow == null)
            _authenticationFlow = new AuthenticationFlow(this, Keys.AUTHENTICATION_EXECUTION__FK_AUTH_EXEC_FLOW);

        return _authenticationFlow;
    }

    @Override
    public AuthenticationExecution as(String alias) {
        return new AuthenticationExecution(DSL.name(alias), this);
    }

    @Override
    public AuthenticationExecution as(Name alias) {
        return new AuthenticationExecution(alias, this);
    }

    @Override
    public AuthenticationExecution as(Table<?> alias) {
        return new AuthenticationExecution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationExecution rename(String name) {
        return new AuthenticationExecution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationExecution rename(Name name) {
        return new AuthenticationExecution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationExecution rename(Table<?> name) {
        return new AuthenticationExecution(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, Integer, Integer, Boolean, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
