/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.records;


import com.hiddenswitch.framework.schema.spellsource.tables.Guests;
import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.IGuests;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GuestsRecord extends UpdatableRecordImpl<GuestsRecord> implements VertxPojo, Record2<Long, String>, IGuests {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>spellsource.guests.id</code>.
     */
    @Override
    public GuestsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.guests.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>spellsource.guests.user_id</code>.
     */
    @Override
    public GuestsRecord setUserId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.guests.user_id</code>.
     */
    @Override
    public String getUserId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Guests.GUESTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Guests.GUESTS.USER_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUserId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUserId();
    }

    @Override
    public GuestsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public GuestsRecord value2(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public GuestsRecord values(Long value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IGuests from) {
        setId(from.getId());
        setUserId(from.getUserId());
    }

    @Override
    public <E extends IGuests> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GuestsRecord
     */
    public GuestsRecord() {
        super(Guests.GUESTS);
    }

    /**
     * Create a detached, initialised GuestsRecord
     */
    public GuestsRecord(Long id, String userId) {
        super(Guests.GUESTS);

        setId(id);
        setUserId(userId);
    }

    /**
     * Create a detached, initialised GuestsRecord
     */
    public GuestsRecord(com.hiddenswitch.framework.schema.spellsource.tables.pojos.Guests value) {
        super(Guests.GUESTS);

        if (value != null) {
            setId(value.getId());
            setUserId(value.getUserId());
        }
    }

        public GuestsRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
