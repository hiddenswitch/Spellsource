/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ScopePolicyRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScopePolicy extends TableImpl<ScopePolicyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.scope_policy</code>
     */
    public static final ScopePolicy SCOPE_POLICY = new ScopePolicy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScopePolicyRecord> getRecordType() {
        return ScopePolicyRecord.class;
    }

    /**
     * The column <code>keycloak.scope_policy.scope_id</code>.
     */
    public final TableField<ScopePolicyRecord, String> SCOPE_ID = createField(DSL.name("scope_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.scope_policy.policy_id</code>.
     */
    public final TableField<ScopePolicyRecord, String> POLICY_ID = createField(DSL.name("policy_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private ScopePolicy(Name alias, Table<ScopePolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScopePolicy(Name alias, Table<ScopePolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.scope_policy</code> table reference
     */
    public ScopePolicy(String alias) {
        this(DSL.name(alias), SCOPE_POLICY);
    }

    /**
     * Create an aliased <code>keycloak.scope_policy</code> table reference
     */
    public ScopePolicy(Name alias) {
        this(alias, SCOPE_POLICY);
    }

    /**
     * Create a <code>keycloak.scope_policy</code> table reference
     */
    public ScopePolicy() {
        this(DSL.name("scope_policy"), null);
    }

    public <O extends Record> ScopePolicy(Table<O> child, ForeignKey<O, ScopePolicyRecord> key) {
        super(child, key, SCOPE_POLICY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SCOPE_POLICY_POLICY);
    }

    @Override
    public UniqueKey<ScopePolicyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FARSRSPS;
    }

    @Override
    public List<ForeignKey<ScopePolicyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SCOPE_POLICY__FK_FRSRPASS3XCX4WNKOG82SSRFY, Keys.SCOPE_POLICY__FK_FRSRASP13XCX4WNKOG82SSRFY);
    }

    private transient ResourceServerScope _resourceServerScope;
    private transient ResourceServerPolicy _resourceServerPolicy;

    /**
     * Get the implicit join path to the
     * <code>keycloak.resource_server_scope</code> table.
     */
    public ResourceServerScope resourceServerScope() {
        if (_resourceServerScope == null)
            _resourceServerScope = new ResourceServerScope(this, Keys.SCOPE_POLICY__FK_FRSRPASS3XCX4WNKOG82SSRFY);

        return _resourceServerScope;
    }

    /**
     * Get the implicit join path to the
     * <code>keycloak.resource_server_policy</code> table.
     */
    public ResourceServerPolicy resourceServerPolicy() {
        if (_resourceServerPolicy == null)
            _resourceServerPolicy = new ResourceServerPolicy(this, Keys.SCOPE_POLICY__FK_FRSRASP13XCX4WNKOG82SSRFY);

        return _resourceServerPolicy;
    }

    @Override
    public ScopePolicy as(String alias) {
        return new ScopePolicy(DSL.name(alias), this);
    }

    @Override
    public ScopePolicy as(Name alias) {
        return new ScopePolicy(alias, this);
    }

    @Override
    public ScopePolicy as(Table<?> alias) {
        return new ScopePolicy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopePolicy rename(String name) {
        return new ScopePolicy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopePolicy rename(Name name) {
        return new ScopePolicy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopePolicy rename(Table<?> name) {
        return new ScopePolicy(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
