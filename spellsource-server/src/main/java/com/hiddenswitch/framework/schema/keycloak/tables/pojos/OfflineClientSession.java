/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IOfflineClientSession;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfflineClientSession implements VertxPojo, IOfflineClientSession {

    private static final long serialVersionUID = 1L;

    private String  userSessionId;
    private String  clientId;
    private String  offlineFlag;
    private Integer timestamp;
    private String  data;

    public OfflineClientSession() {}

    public OfflineClientSession(IOfflineClientSession value) {
        this.userSessionId = value.getUserSessionId();
        this.clientId = value.getClientId();
        this.offlineFlag = value.getOfflineFlag();
        this.timestamp = value.getTimestamp();
        this.data = value.getData();
    }

    public OfflineClientSession(
        String  userSessionId,
        String  clientId,
        String  offlineFlag,
        Integer timestamp,
        String  data
    ) {
        this.userSessionId = userSessionId;
        this.clientId = clientId;
        this.offlineFlag = offlineFlag;
        this.timestamp = timestamp;
        this.data = data;
    }

        public OfflineClientSession(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>keycloak.offline_client_session.user_session_id</code>.
     */
    @Override
    public String getUserSessionId() {
        return this.userSessionId;
    }

    /**
     * Setter for <code>keycloak.offline_client_session.user_session_id</code>.
     */
    @Override
    public OfflineClientSession setUserSessionId(String userSessionId) {
        this.userSessionId = userSessionId;
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.client_id</code>.
     */
    @Override
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Setter for <code>keycloak.offline_client_session.client_id</code>.
     */
    @Override
    public OfflineClientSession setClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.offline_flag</code>.
     */
    @Override
    public String getOfflineFlag() {
        return this.offlineFlag;
    }

    /**
     * Setter for <code>keycloak.offline_client_session.offline_flag</code>.
     */
    @Override
    public OfflineClientSession setOfflineFlag(String offlineFlag) {
        this.offlineFlag = offlineFlag;
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.timestamp</code>.
     */
    @Override
    public Integer getTimestamp() {
        return this.timestamp;
    }

    /**
     * Setter for <code>keycloak.offline_client_session.timestamp</code>.
     */
    @Override
    public OfflineClientSession setTimestamp(Integer timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.data</code>.
     */
    @Override
    public String getData() {
        return this.data;
    }

    /**
     * Setter for <code>keycloak.offline_client_session.data</code>.
     */
    @Override
    public OfflineClientSession setData(String data) {
        this.data = data;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OfflineClientSession (");

        sb.append(userSessionId);
        sb.append(", ").append(clientId);
        sb.append(", ").append(offlineFlag);
        sb.append(", ").append(timestamp);
        sb.append(", ").append(data);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOfflineClientSession from) {
        setUserSessionId(from.getUserSessionId());
        setClientId(from.getClientId());
        setOfflineFlag(from.getOfflineFlag());
        setTimestamp(from.getTimestamp());
        setData(from.getData());
    }

    @Override
    public <E extends IOfflineClientSession> E into(E into) {
        into.from(this);
        return into;
    }
}
