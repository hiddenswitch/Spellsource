/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourceServerPermTicketRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceServerPermTicket extends TableImpl<ResourceServerPermTicketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>keycloak.resource_server_perm_ticket</code>
     */
    public static final ResourceServerPermTicket RESOURCE_SERVER_PERM_TICKET = new ResourceServerPermTicket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceServerPermTicketRecord> getRecordType() {
        return ResourceServerPermTicketRecord.class;
    }

    /**
     * The column <code>keycloak.resource_server_perm_ticket.id</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.resource_server_perm_ticket.owner</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.resource_server_perm_ticket.requester</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, String> REQUESTER = createField(DSL.name("requester"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.resource_server_perm_ticket.created_timestamp</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, Long> CREATED_TIMESTAMP = createField(DSL.name("created_timestamp"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.resource_server_perm_ticket.granted_timestamp</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, Long> GRANTED_TIMESTAMP = createField(DSL.name("granted_timestamp"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>keycloak.resource_server_perm_ticket.resource_id</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, String> RESOURCE_ID = createField(DSL.name("resource_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.resource_server_perm_ticket.scope_id</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, String> SCOPE_ID = createField(DSL.name("scope_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column
     * <code>keycloak.resource_server_perm_ticket.resource_server_id</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, String> RESOURCE_SERVER_ID = createField(DSL.name("resource_server_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.resource_server_perm_ticket.policy_id</code>.
     */
    public final TableField<ResourceServerPermTicketRecord, String> POLICY_ID = createField(DSL.name("policy_id"), SQLDataType.VARCHAR(36), this, "");

    private ResourceServerPermTicket(Name alias, Table<ResourceServerPermTicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResourceServerPermTicket(Name alias, Table<ResourceServerPermTicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.resource_server_perm_ticket</code> table
     * reference
     */
    public ResourceServerPermTicket(String alias) {
        this(DSL.name(alias), RESOURCE_SERVER_PERM_TICKET);
    }

    /**
     * Create an aliased <code>keycloak.resource_server_perm_ticket</code> table
     * reference
     */
    public ResourceServerPermTicket(Name alias) {
        this(alias, RESOURCE_SERVER_PERM_TICKET);
    }

    /**
     * Create a <code>keycloak.resource_server_perm_ticket</code> table
     * reference
     */
    public ResourceServerPermTicket() {
        this(DSL.name("resource_server_perm_ticket"), null);
    }

    public <O extends Record> ResourceServerPermTicket(Table<O> child, ForeignKey<O, ResourceServerPermTicketRecord> key) {
        super(child, key, RESOURCE_SERVER_PERM_TICKET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public UniqueKey<ResourceServerPermTicketRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FAPMT;
    }

    @Override
    public List<UniqueKey<ResourceServerPermTicketRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_FRSR6T700S9V50BU18WS5PMT);
    }

    @Override
    public List<ForeignKey<ResourceServerPermTicketRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RESOURCE_SERVER_PERM_TICKET__FK_FRSRHO213XCX4WNKOG83SSPMT, Keys.RESOURCE_SERVER_PERM_TICKET__FK_FRSRHO213XCX4WNKOG84SSPMT, Keys.RESOURCE_SERVER_PERM_TICKET__FK_FRSRHO213XCX4WNKOG82SSPMT, Keys.RESOURCE_SERVER_PERM_TICKET__FK_FRSRPO2128CX4WNKOG82SSRFY);
    }

    private transient ResourceServerResource _resourceServerResource;
    private transient ResourceServerScope _resourceServerScope;
    private transient ResourceServer _resourceServer;
    private transient ResourceServerPolicy _resourceServerPolicy;

    /**
     * Get the implicit join path to the
     * <code>keycloak.resource_server_resource</code> table.
     */
    public ResourceServerResource resourceServerResource() {
        if (_resourceServerResource == null)
            _resourceServerResource = new ResourceServerResource(this, Keys.RESOURCE_SERVER_PERM_TICKET__FK_FRSRHO213XCX4WNKOG83SSPMT);

        return _resourceServerResource;
    }

    /**
     * Get the implicit join path to the
     * <code>keycloak.resource_server_scope</code> table.
     */
    public ResourceServerScope resourceServerScope() {
        if (_resourceServerScope == null)
            _resourceServerScope = new ResourceServerScope(this, Keys.RESOURCE_SERVER_PERM_TICKET__FK_FRSRHO213XCX4WNKOG84SSPMT);

        return _resourceServerScope;
    }

    /**
     * Get the implicit join path to the <code>keycloak.resource_server</code>
     * table.
     */
    public ResourceServer resourceServer() {
        if (_resourceServer == null)
            _resourceServer = new ResourceServer(this, Keys.RESOURCE_SERVER_PERM_TICKET__FK_FRSRHO213XCX4WNKOG82SSPMT);

        return _resourceServer;
    }

    /**
     * Get the implicit join path to the
     * <code>keycloak.resource_server_policy</code> table.
     */
    public ResourceServerPolicy resourceServerPolicy() {
        if (_resourceServerPolicy == null)
            _resourceServerPolicy = new ResourceServerPolicy(this, Keys.RESOURCE_SERVER_PERM_TICKET__FK_FRSRPO2128CX4WNKOG82SSRFY);

        return _resourceServerPolicy;
    }

    @Override
    public ResourceServerPermTicket as(String alias) {
        return new ResourceServerPermTicket(DSL.name(alias), this);
    }

    @Override
    public ResourceServerPermTicket as(Name alias) {
        return new ResourceServerPermTicket(alias, this);
    }

    @Override
    public ResourceServerPermTicket as(Table<?> alias) {
        return new ResourceServerPermTicket(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceServerPermTicket rename(String name) {
        return new ResourceServerPermTicket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceServerPermTicket rename(Name name) {
        return new ResourceServerPermTicket(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceServerPermTicket rename(Table<?> name) {
        return new ResourceServerPermTicket(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, Long, Long, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
