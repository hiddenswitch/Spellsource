/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserConsentRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserConsent extends TableImpl<UserConsentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.user_consent</code>
     */
    public static final UserConsent USER_CONSENT = new UserConsent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserConsentRecord> getRecordType() {
        return UserConsentRecord.class;
    }

    /**
     * The column <code>keycloak.user_consent.id</code>.
     */
    public final TableField<UserConsentRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.user_consent.client_id</code>.
     */
    public final TableField<UserConsentRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.user_consent.user_id</code>.
     */
    public final TableField<UserConsentRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.user_consent.created_date</code>.
     */
    public final TableField<UserConsentRecord, Long> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>keycloak.user_consent.last_updated_date</code>.
     */
    public final TableField<UserConsentRecord, Long> LAST_UPDATED_DATE = createField(DSL.name("last_updated_date"), SQLDataType.BIGINT, this, "");

    private UserConsent(Name alias, Table<UserConsentRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserConsent(Name alias, Table<UserConsentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.user_consent</code> table reference
     */
    public UserConsent(String alias) {
        this(DSL.name(alias), USER_CONSENT);
    }

    /**
     * Create an aliased <code>keycloak.user_consent</code> table reference
     */
    public UserConsent(Name alias) {
        this(alias, USER_CONSENT);
    }

    /**
     * Create a <code>keycloak.user_consent</code> table reference
     */
    public UserConsent() {
        this(DSL.name("user_consent"), null);
    }

    public <O extends Record> UserConsent(Table<O> child, ForeignKey<O, UserConsentRecord> key) {
        super(child, key, USER_CONSENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USER_CONSENT);
    }

    @Override
    public UniqueKey<UserConsentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_GRNTCSNT_PM;
    }

    @Override
    public List<UniqueKey<UserConsentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_JKUWUVD56ONTGSUHOGM8UEWRT);
    }

    @Override
    public List<ForeignKey<UserConsentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_CONSENT__FK_GRNTCSNT_USER);
    }

    private transient UserEntity _userEntity;

    /**
     * Get the implicit join path to the <code>keycloak.user_entity</code>
     * table.
     */
    public UserEntity userEntity() {
        if (_userEntity == null)
            _userEntity = new UserEntity(this, Keys.USER_CONSENT__FK_GRNTCSNT_USER);

        return _userEntity;
    }

    @Override
    public UserConsent as(String alias) {
        return new UserConsent(DSL.name(alias), this);
    }

    @Override
    public UserConsent as(Name alias) {
        return new UserConsent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserConsent rename(String name) {
        return new UserConsent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserConsent rename(Name name) {
        return new UserConsent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
