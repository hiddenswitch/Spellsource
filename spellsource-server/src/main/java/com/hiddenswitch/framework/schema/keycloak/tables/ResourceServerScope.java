/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourceServerScopeRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceServerScope extends TableImpl<ResourceServerScopeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.resource_server_scope</code>
     */
    public static final ResourceServerScope RESOURCE_SERVER_SCOPE = new ResourceServerScope();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceServerScopeRecord> getRecordType() {
        return ResourceServerScopeRecord.class;
    }

    /**
     * The column <code>keycloak.resource_server_scope.id</code>.
     */
    public final TableField<ResourceServerScopeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.resource_server_scope.name</code>.
     */
    public final TableField<ResourceServerScopeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.resource_server_scope.icon_uri</code>.
     */
    public final TableField<ResourceServerScopeRecord, String> ICON_URI = createField(DSL.name("icon_uri"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>keycloak.resource_server_scope.resource_server_id</code>.
     */
    public final TableField<ResourceServerScopeRecord, String> RESOURCE_SERVER_ID = createField(DSL.name("resource_server_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.resource_server_scope.display_name</code>.
     */
    public final TableField<ResourceServerScopeRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.VARCHAR(255), this, "");

    private ResourceServerScope(Name alias, Table<ResourceServerScopeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResourceServerScope(Name alias, Table<ResourceServerScopeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.resource_server_scope</code> table
     * reference
     */
    public ResourceServerScope(String alias) {
        this(DSL.name(alias), RESOURCE_SERVER_SCOPE);
    }

    /**
     * Create an aliased <code>keycloak.resource_server_scope</code> table
     * reference
     */
    public ResourceServerScope(Name alias) {
        this(alias, RESOURCE_SERVER_SCOPE);
    }

    /**
     * Create a <code>keycloak.resource_server_scope</code> table reference
     */
    public ResourceServerScope() {
        this(DSL.name("resource_server_scope"), null);
    }

    public <O extends Record> ResourceServerScope(Table<O> child, ForeignKey<O, ResourceServerScopeRecord> key) {
        super(child, key, RESOURCE_SERVER_SCOPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_RES_SRV_SCOPE_RES_SRV);
    }

    @Override
    public UniqueKey<ResourceServerScopeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FARSRS;
    }

    @Override
    public List<UniqueKey<ResourceServerScopeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_FRSRST700S9V50BU18WS5HA6);
    }

    @Override
    public List<ForeignKey<ResourceServerScopeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RESOURCE_SERVER_SCOPE__FK_FRSRSO213XCX4WNKOG82SSRFY);
    }

    private transient ResourceServer _resourceServer;

    /**
     * Get the implicit join path to the <code>keycloak.resource_server</code>
     * table.
     */
    public ResourceServer resourceServer() {
        if (_resourceServer == null)
            _resourceServer = new ResourceServer(this, Keys.RESOURCE_SERVER_SCOPE__FK_FRSRSO213XCX4WNKOG82SSRFY);

        return _resourceServer;
    }

    @Override
    public ResourceServerScope as(String alias) {
        return new ResourceServerScope(DSL.name(alias), this);
    }

    @Override
    public ResourceServerScope as(Name alias) {
        return new ResourceServerScope(alias, this);
    }

    @Override
    public ResourceServerScope as(Table<?> alias) {
        return new ResourceServerScope(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceServerScope rename(String name) {
        return new ResourceServerScope(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceServerScope rename(Name name) {
        return new ResourceServerScope(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResourceServerScope rename(Table<?> name) {
        return new ResourceServerScope(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
