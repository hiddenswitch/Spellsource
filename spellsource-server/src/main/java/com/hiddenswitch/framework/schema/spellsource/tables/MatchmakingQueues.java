/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.MatchmakingQueuesRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MatchmakingQueues extends TableImpl<MatchmakingQueuesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.matchmaking_queues</code>
     */
    public static final MatchmakingQueues MATCHMAKING_QUEUES = new MatchmakingQueues();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchmakingQueuesRecord> getRecordType() {
        return MatchmakingQueuesRecord.class;
    }

    /**
     * The column <code>spellsource.matchmaking_queues.id</code>.
     */
    public final TableField<MatchmakingQueuesRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.matchmaking_queues.name</code>.
     */
    public final TableField<MatchmakingQueuesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.matchmaking_queues.bot_opponent</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Boolean> BOT_OPPONENT = createField(DSL.name("bot_opponent"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>spellsource.matchmaking_queues.private_lobby</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Boolean> PRIVATE_LOBBY = createField(DSL.name("private_lobby"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>spellsource.matchmaking_queues.starts_automatically</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Boolean> STARTS_AUTOMATICALLY = createField(DSL.name("starts_automatically"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>spellsource.matchmaking_queues.still_connected_timeout</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Long> STILL_CONNECTED_TIMEOUT = createField(DSL.name("still_connected_timeout"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("2000", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>spellsource.matchmaking_queues.empty_lobby_timeout</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Long> EMPTY_LOBBY_TIMEOUT = createField(DSL.name("empty_lobby_timeout"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>spellsource.matchmaking_queues.awaiting_lobby_timeout</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Long> AWAITING_LOBBY_TIMEOUT = createField(DSL.name("awaiting_lobby_timeout"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>spellsource.matchmaking_queues.once</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Boolean> ONCE = createField(DSL.name("once"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>spellsource.matchmaking_queues.automatically_close</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Boolean> AUTOMATICALLY_CLOSE = createField(DSL.name("automatically_close"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>spellsource.matchmaking_queues.lobby_size</code>.
     */
    public final TableField<MatchmakingQueuesRecord, Integer> LOBBY_SIZE = createField(DSL.name("lobby_size"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("2", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>spellsource.matchmaking_queues.queue_created_at</code>.
     */
    public final TableField<MatchmakingQueuesRecord, OffsetDateTime> QUEUE_CREATED_AT = createField(DSL.name("queue_created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private MatchmakingQueues(Name alias, Table<MatchmakingQueuesRecord> aliased) {
        this(alias, aliased, null);
    }

    private MatchmakingQueues(Name alias, Table<MatchmakingQueuesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.matchmaking_queues</code> table
     * reference
     */
    public MatchmakingQueues(String alias) {
        this(DSL.name(alias), MATCHMAKING_QUEUES);
    }

    /**
     * Create an aliased <code>spellsource.matchmaking_queues</code> table
     * reference
     */
    public MatchmakingQueues(Name alias) {
        this(alias, MATCHMAKING_QUEUES);
    }

    /**
     * Create a <code>spellsource.matchmaking_queues</code> table reference
     */
    public MatchmakingQueues() {
        this(DSL.name("matchmaking_queues"), null);
    }

    public <O extends Record> MatchmakingQueues(Table<O> child, ForeignKey<O, MatchmakingQueuesRecord> key) {
        super(child, key, MATCHMAKING_QUEUES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public UniqueKey<MatchmakingQueuesRecord> getPrimaryKey() {
        return Keys.MATCHMAKING_QUEUES_PKEY;
    }

    @Override
    public List<Check<MatchmakingQueuesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("matchmaking_queues_lobby_size_check"), "(((lobby_size <= 2) AND (lobby_size >= 0)))", true)
        );
    }

    @Override
    public MatchmakingQueues as(String alias) {
        return new MatchmakingQueues(DSL.name(alias), this);
    }

    @Override
    public MatchmakingQueues as(Name alias) {
        return new MatchmakingQueues(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchmakingQueues rename(String name) {
        return new MatchmakingQueues(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchmakingQueues rename(Name name) {
        return new MatchmakingQueues(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, Boolean, Boolean, Boolean, Long, Long, Long, Boolean, Boolean, Integer, OffsetDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
