/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.BotUsersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BotUsers extends TableImpl<BotUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.bot_users</code>
     */
    public static final BotUsers BOT_USERS = new BotUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BotUsersRecord> getRecordType() {
        return BotUsersRecord.class;
    }

    /**
     * The column <code>spellsource.bot_users.id</code>.
     */
    public final TableField<BotUsersRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    private BotUsers(Name alias, Table<BotUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private BotUsers(Name alias, Table<BotUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.bot_users</code> table reference
     */
    public BotUsers(String alias) {
        this(DSL.name(alias), BOT_USERS);
    }

    /**
     * Create an aliased <code>spellsource.bot_users</code> table reference
     */
    public BotUsers(Name alias) {
        this(alias, BOT_USERS);
    }

    /**
     * Create a <code>spellsource.bot_users</code> table reference
     */
    public BotUsers() {
        this(DSL.name("bot_users"), null);
    }

    public <O extends Record> BotUsers(Table<O> child, ForeignKey<O, BotUsersRecord> key) {
        super(child, key, BOT_USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public UniqueKey<BotUsersRecord> getPrimaryKey() {
        return Keys.BOT_USERS_PKEY;
    }

    @Override
    public List<ForeignKey<BotUsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOT_USERS__BOT_USERS_ID_FKEY);
    }

    private transient UserEntity _userEntity;

    /**
     * Get the implicit join path to the <code>keycloak.user_entity</code>
     * table.
     */
    public UserEntity userEntity() {
        if (_userEntity == null)
            _userEntity = new UserEntity(this, Keys.BOT_USERS__BOT_USERS_ID_FKEY);

        return _userEntity;
    }

    @Override
    public BotUsers as(String alias) {
        return new BotUsers(DSL.name(alias), this);
    }

    @Override
    public BotUsers as(Name alias) {
        return new BotUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BotUsers rename(String name) {
        return new BotUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BotUsers rename(Name name) {
        return new BotUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
