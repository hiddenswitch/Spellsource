/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.pojos;


import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.IUserEntityAddons;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEntityAddons implements VertxPojo, IUserEntityAddons {

    private static final long serialVersionUID = 1L;

    private String id;
    private String privacyToken;
    private Boolean migrated;
    private Boolean showPremadeDecks;

    public UserEntityAddons() {}

    public UserEntityAddons(IUserEntityAddons value) {
        this.id = value.getId();
        this.privacyToken = value.getPrivacyToken();
        this.migrated = value.getMigrated();
        this.showPremadeDecks = value.getShowPremadeDecks();
    }

    public UserEntityAddons(
        String id,
        String privacyToken,
        Boolean migrated,
        Boolean showPremadeDecks
    ) {
        this.id = id;
        this.privacyToken = privacyToken;
        this.migrated = migrated;
        this.showPremadeDecks = showPremadeDecks;
    }

        public UserEntityAddons(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>spellsource.user_entity_addons.id</code>.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>spellsource.user_entity_addons.id</code>.
     */
    @Override
    public UserEntityAddons setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>spellsource.user_entity_addons.privacy_token</code>.
     */
    @Override
    public String getPrivacyToken() {
        return this.privacyToken;
    }

    /**
     * Setter for <code>spellsource.user_entity_addons.privacy_token</code>.
     */
    @Override
    public UserEntityAddons setPrivacyToken(String privacyToken) {
        this.privacyToken = privacyToken;
        return this;
    }

    /**
     * Getter for <code>spellsource.user_entity_addons.migrated</code>.
     */
    @Override
    public Boolean getMigrated() {
        return this.migrated;
    }

    /**
     * Setter for <code>spellsource.user_entity_addons.migrated</code>.
     */
    @Override
    public UserEntityAddons setMigrated(Boolean migrated) {
        this.migrated = migrated;
        return this;
    }

    /**
     * Getter for
     * <code>spellsource.user_entity_addons.show_premade_decks</code>.
     */
    @Override
    public Boolean getShowPremadeDecks() {
        return this.showPremadeDecks;
    }

    /**
     * Setter for
     * <code>spellsource.user_entity_addons.show_premade_decks</code>.
     */
    @Override
    public UserEntityAddons setShowPremadeDecks(Boolean showPremadeDecks) {
        this.showPremadeDecks = showPremadeDecks;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserEntityAddons other = (UserEntityAddons) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.privacyToken == null) {
            if (other.privacyToken != null)
                return false;
        }
        else if (!this.privacyToken.equals(other.privacyToken))
            return false;
        if (this.migrated == null) {
            if (other.migrated != null)
                return false;
        }
        else if (!this.migrated.equals(other.migrated))
            return false;
        if (this.showPremadeDecks == null) {
            if (other.showPremadeDecks != null)
                return false;
        }
        else if (!this.showPremadeDecks.equals(other.showPremadeDecks))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.privacyToken == null) ? 0 : this.privacyToken.hashCode());
        result = prime * result + ((this.migrated == null) ? 0 : this.migrated.hashCode());
        result = prime * result + ((this.showPremadeDecks == null) ? 0 : this.showPremadeDecks.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserEntityAddons (");

        sb.append(id);
        sb.append(", ").append(privacyToken);
        sb.append(", ").append(migrated);
        sb.append(", ").append(showPremadeDecks);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserEntityAddons from) {
        setId(from.getId());
        setPrivacyToken(from.getPrivacyToken());
        setMigrated(from.getMigrated());
        setShowPremadeDecks(from.getShowPremadeDecks());
    }

    @Override
    public <E extends IUserEntityAddons> E into(E into) {
        into.from(this);
        return into;
    }
}
