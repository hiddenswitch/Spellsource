/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmRequiredCredentialRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RealmRequiredCredential extends TableImpl<RealmRequiredCredentialRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.realm_required_credential</code>
     */
    public static final RealmRequiredCredential REALM_REQUIRED_CREDENTIAL = new RealmRequiredCredential();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RealmRequiredCredentialRecord> getRecordType() {
        return RealmRequiredCredentialRecord.class;
    }

    /**
     * The column <code>keycloak.realm_required_credential.type</code>.
     */
    public final TableField<RealmRequiredCredentialRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.realm_required_credential.form_label</code>.
     */
    public final TableField<RealmRequiredCredentialRecord, String> FORM_LABEL = createField(DSL.name("form_label"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.realm_required_credential.input</code>.
     */
    public final TableField<RealmRequiredCredentialRecord, Boolean> INPUT = createField(DSL.name("input"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.realm_required_credential.secret</code>.
     */
    public final TableField<RealmRequiredCredentialRecord, Boolean> SECRET = createField(DSL.name("secret"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.realm_required_credential.realm_id</code>.
     */
    public final TableField<RealmRequiredCredentialRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private RealmRequiredCredential(Name alias, Table<RealmRequiredCredentialRecord> aliased) {
        this(alias, aliased, null);
    }

    private RealmRequiredCredential(Name alias, Table<RealmRequiredCredentialRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.realm_required_credential</code> table
     * reference
     */
    public RealmRequiredCredential(String alias) {
        this(DSL.name(alias), REALM_REQUIRED_CREDENTIAL);
    }

    /**
     * Create an aliased <code>keycloak.realm_required_credential</code> table
     * reference
     */
    public RealmRequiredCredential(Name alias) {
        this(alias, REALM_REQUIRED_CREDENTIAL);
    }

    /**
     * Create a <code>keycloak.realm_required_credential</code> table reference
     */
    public RealmRequiredCredential() {
        this(DSL.name("realm_required_credential"), null);
    }

    public <O extends Record> RealmRequiredCredential(Table<O> child, ForeignKey<O, RealmRequiredCredentialRecord> key) {
        super(child, key, REALM_REQUIRED_CREDENTIAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public UniqueKey<RealmRequiredCredentialRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_92;
    }

    @Override
    public List<ForeignKey<RealmRequiredCredentialRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REALM_REQUIRED_CREDENTIAL__FK_5HG65LYBEVAVKQFKI3KPONH9V);
    }

    private transient Realm _realm;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.REALM_REQUIRED_CREDENTIAL__FK_5HG65LYBEVAVKQFKI3KPONH9V);

        return _realm;
    }

    @Override
    public RealmRequiredCredential as(String alias) {
        return new RealmRequiredCredential(DSL.name(alias), this);
    }

    @Override
    public RealmRequiredCredential as(Name alias) {
        return new RealmRequiredCredential(alias, this);
    }

    @Override
    public RealmRequiredCredential as(Table<?> alias) {
        return new RealmRequiredCredential(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RealmRequiredCredential rename(String name) {
        return new RealmRequiredCredential(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RealmRequiredCredential rename(Name name) {
        return new RealmRequiredCredential(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RealmRequiredCredential rename(Table<?> name) {
        return new RealmRequiredCredential(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, Boolean, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
