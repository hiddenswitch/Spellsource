/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientSessionProtMapperRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientSessionProtMapper extends TableImpl<ClientSessionProtMapperRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>keycloak.client_session_prot_mapper</code>
     */
    public static final ClientSessionProtMapper CLIENT_SESSION_PROT_MAPPER = new ClientSessionProtMapper();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientSessionProtMapperRecord> getRecordType() {
        return ClientSessionProtMapperRecord.class;
    }

    /**
     * The column
     * <code>keycloak.client_session_prot_mapper.protocol_mapper_id</code>.
     */
    public final TableField<ClientSessionProtMapperRecord, String> PROTOCOL_MAPPER_ID = createField(DSL.name("protocol_mapper_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.client_session_prot_mapper.client_session</code>.
     */
    public final TableField<ClientSessionProtMapperRecord, String> CLIENT_SESSION = createField(DSL.name("client_session"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private ClientSessionProtMapper(Name alias, Table<ClientSessionProtMapperRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientSessionProtMapper(Name alias, Table<ClientSessionProtMapperRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.client_session_prot_mapper</code> table
     * reference
     */
    public ClientSessionProtMapper(String alias) {
        this(DSL.name(alias), CLIENT_SESSION_PROT_MAPPER);
    }

    /**
     * Create an aliased <code>keycloak.client_session_prot_mapper</code> table
     * reference
     */
    public ClientSessionProtMapper(Name alias) {
        this(alias, CLIENT_SESSION_PROT_MAPPER);
    }

    /**
     * Create a <code>keycloak.client_session_prot_mapper</code> table reference
     */
    public ClientSessionProtMapper() {
        this(DSL.name("client_session_prot_mapper"), null);
    }

    public <O extends Record> ClientSessionProtMapper(Table<O> child, ForeignKey<O, ClientSessionProtMapperRecord> key) {
        super(child, key, CLIENT_SESSION_PROT_MAPPER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public UniqueKey<ClientSessionProtMapperRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_CS_PMP_PK;
    }

    @Override
    public List<ForeignKey<ClientSessionProtMapperRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLIENT_SESSION_PROT_MAPPER__FK_33A8SGQW18I532811V7O2DK89);
    }

    private transient ClientSession _clientSession;

    /**
     * Get the implicit join path to the <code>keycloak.client_session</code>
     * table.
     */
    public ClientSession clientSession() {
        if (_clientSession == null)
            _clientSession = new ClientSession(this, Keys.CLIENT_SESSION_PROT_MAPPER__FK_33A8SGQW18I532811V7O2DK89);

        return _clientSession;
    }

    @Override
    public ClientSessionProtMapper as(String alias) {
        return new ClientSessionProtMapper(DSL.name(alias), this);
    }

    @Override
    public ClientSessionProtMapper as(Name alias) {
        return new ClientSessionProtMapper(alias, this);
    }

    @Override
    public ClientSessionProtMapper as(Table<?> alias) {
        return new ClientSessionProtMapper(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientSessionProtMapper rename(String name) {
        return new ClientSessionProtMapper(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientSessionProtMapper rename(Name name) {
        return new ClientSessionProtMapper(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientSessionProtMapper rename(Table<?> name) {
        return new ClientSessionProtMapper(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
