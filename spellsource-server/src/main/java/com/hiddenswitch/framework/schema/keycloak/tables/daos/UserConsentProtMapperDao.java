/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.daos;


import com.hiddenswitch.framework.schema.keycloak.tables.UserConsentProtMapper;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserConsentProtMapperRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record2;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserConsentProtMapperDao extends AbstractReactiveVertxDAO<UserConsentProtMapperRecord, com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper, Record2<String, String>, Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper>>, Future<com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper>, Future<Integer>, Future<Record2<String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<UserConsentProtMapperRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper,Record2<String, String>> {

        /**
     * @param configuration Used for rendering, so only SQLDialect must be set
     * and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query
     * execution
     */
        public UserConsentProtMapperDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
                super(UserConsentProtMapper.USER_CONSENT_PROT_MAPPER, com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper.class, new ReactiveClassicQueryExecutor<UserConsentProtMapperRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper,Record2<String, String>>(configuration,delegate,com.hiddenswitch.framework.schema.keycloak.tables.mappers.RowMappers.getUserConsentProtMapperMapper()));
        }

        @Override
        protected Record2<String, String> getId(com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper object) {
                return compositeKeyRecord(object.getUserConsentId(), object.getProtocolMapperId());
        }

        /**
     * Find records that have <code>protocol_mapper_id IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper>> findManyByProtocolMapperId(Collection<String> values) {
                return findManyByCondition(UserConsentProtMapper.USER_CONSENT_PROT_MAPPER.PROTOCOL_MAPPER_ID.in(values));
        }

        /**
     * Find records that have <code>protocol_mapper_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper>> findManyByProtocolMapperId(Collection<String> values, int limit) {
                return findManyByCondition(UserConsentProtMapper.USER_CONSENT_PROT_MAPPER.PROTOCOL_MAPPER_ID.in(values),limit);
        }

        @Override
        public ReactiveClassicQueryExecutor<UserConsentProtMapperRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper,Record2<String, String>> queryExecutor(){
                return (ReactiveClassicQueryExecutor<UserConsentProtMapperRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsentProtMapper,Record2<String, String>>) super.queryExecutor();
        }
}
