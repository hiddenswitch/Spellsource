/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.records;


import com.hiddenswitch.framework.schema.spellsource.tables.Cards;
import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.ICards;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.vertx.core.json.JsonObject;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.XML;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsRecord extends UpdatableRecordImpl<CardsRecord> implements VertxPojo, Record7<String, String, String, XML, JsonObject, OffsetDateTime, OffsetDateTime>, ICards {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>spellsource.cards.id</code>.
     */
    @Override
    public CardsRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>spellsource.cards.created_by</code>.
     */
    @Override
    public CardsRecord setCreatedBy(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards.created_by</code>.
     */
    @Override
    public String getCreatedBy() {
        return (String) get(1);
    }

    /**
     * Setter for <code>spellsource.cards.uri</code>.
     */
    @Override
    public CardsRecord setUri(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards.uri</code>.
     */
    @Override
    public String getUri() {
        return (String) get(2);
    }

    /**
     * Setter for <code>spellsource.cards.blockly_workspace</code>.
     */
    @Override
    public CardsRecord setBlocklyWorkspace(XML value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards.blockly_workspace</code>.
     */
    @Override
    public XML getBlocklyWorkspace() {
        return (XML) get(3);
    }

    /**
     * Setter for <code>spellsource.cards.card_script</code>.
     */
    @Override
    public CardsRecord setCardScript(JsonObject value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards.card_script</code>.
     */
    @Override
    public JsonObject getCardScript() {
        return (JsonObject) get(4);
    }

    /**
     * Setter for <code>spellsource.cards.created_at</code>.
     */
    @Override
    public CardsRecord setCreatedAt(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards.created_at</code>.
     */
    @Override
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>spellsource.cards.last_modified</code>.
     */
    @Override
    public CardsRecord setLastModified(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>spellsource.cards.last_modified</code>.
     */
    @Override
    public OffsetDateTime getLastModified() {
        return (OffsetDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, XML, JsonObject, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, String, XML, JsonObject, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Cards.CARDS.ID;
    }

    @Override
    public Field<String> field2() {
        return Cards.CARDS.CREATED_BY;
    }

    @Override
    public Field<String> field3() {
        return Cards.CARDS.URI;
    }

    @Override
    public Field<XML> field4() {
        return Cards.CARDS.BLOCKLY_WORKSPACE;
    }

    @Override
    public Field<JsonObject> field5() {
        return Cards.CARDS.CARD_SCRIPT;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return Cards.CARDS.CREATED_AT;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return Cards.CARDS.LAST_MODIFIED;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCreatedBy();
    }

    @Override
    public String component3() {
        return getUri();
    }

    @Override
    public XML component4() {
        return getBlocklyWorkspace();
    }

    @Override
    public JsonObject component5() {
        return getCardScript();
    }

    @Override
    public OffsetDateTime component6() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime component7() {
        return getLastModified();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCreatedBy();
    }

    @Override
    public String value3() {
        return getUri();
    }

    @Override
    public XML value4() {
        return getBlocklyWorkspace();
    }

    @Override
    public JsonObject value5() {
        return getCardScript();
    }

    @Override
    public OffsetDateTime value6() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime value7() {
        return getLastModified();
    }

    @Override
    public CardsRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public CardsRecord value2(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public CardsRecord value3(String value) {
        setUri(value);
        return this;
    }

    @Override
    public CardsRecord value4(XML value) {
        setBlocklyWorkspace(value);
        return this;
    }

    @Override
    public CardsRecord value5(JsonObject value) {
        setCardScript(value);
        return this;
    }

    @Override
    public CardsRecord value6(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public CardsRecord value7(OffsetDateTime value) {
        setLastModified(value);
        return this;
    }

    @Override
    public CardsRecord values(String value1, String value2, String value3, XML value4, JsonObject value5, OffsetDateTime value6, OffsetDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICards from) {
        setId(from.getId());
        setCreatedBy(from.getCreatedBy());
        setUri(from.getUri());
        setBlocklyWorkspace(from.getBlocklyWorkspace());
        setCardScript(from.getCardScript());
        setCreatedAt(from.getCreatedAt());
        setLastModified(from.getLastModified());
    }

    @Override
    public <E extends ICards> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CardsRecord
     */
    public CardsRecord() {
        super(Cards.CARDS);
    }

    /**
     * Create a detached, initialised CardsRecord
     */
    public CardsRecord(String id, String createdBy, String uri, XML blocklyWorkspace, JsonObject cardScript, OffsetDateTime createdAt, OffsetDateTime lastModified) {
        super(Cards.CARDS);

        setId(id);
        setCreatedBy(createdBy);
        setUri(uri);
        setBlocklyWorkspace(blocklyWorkspace);
        setCardScript(cardScript);
        setCreatedAt(createdAt);
        setLastModified(lastModified);
    }

    /**
     * Create a detached, initialised CardsRecord
     */
    public CardsRecord(com.hiddenswitch.framework.schema.spellsource.tables.pojos.Cards value) {
        super(Cards.CARDS);

        if (value != null) {
            setId(value.getId());
            setCreatedBy(value.getCreatedBy());
            setUri(value.getUri());
            setBlocklyWorkspace(value.getBlocklyWorkspace());
            setCardScript(value.getCardScript());
            setCreatedAt(value.getCreatedAt());
            setLastModified(value.getLastModified());
        }
    }

        public CardsRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
