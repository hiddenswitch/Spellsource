/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GetClassesRecord;

import io.github.jklingsporn.vertx.jooq.shared.postgres.JSONBToJsonObjectConverter;
import io.vertx.core.json.JsonObject;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetClasses extends TableImpl<GetClassesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.get_classes</code>
     */
    public static final GetClasses GET_CLASSES = new GetClasses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetClassesRecord> getRecordType() {
        return GetClassesRecord.class;
    }

    /**
     * The column <code>spellsource.get_classes.created_by</code>.
     */
    public final TableField<GetClassesRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>spellsource.get_classes.class</code>.
     */
    public final TableField<GetClassesRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.get_classes.is_private</code>.
     */
    public final TableField<GetClassesRecord, Boolean> IS_PRIVATE = createField(DSL.name("is_private"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>spellsource.get_classes.collectible</code>.
     */
    public final TableField<GetClassesRecord, Boolean> COLLECTIBLE = createField(DSL.name("collectible"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>spellsource.get_classes.card_script</code>.
     */
    public final TableField<GetClassesRecord, JsonObject> CARD_SCRIPT = createField(DSL.name("card_script"), SQLDataType.JSONB, this, "", new JSONBToJsonObjectConverter());

    /**
     * The column <code>spellsource.get_classes.id</code>.
     */
    public final TableField<GetClassesRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.get_classes.name</code>.
     */
    public final TableField<GetClassesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private GetClasses(Name alias, Table<GetClassesRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private GetClasses(Name alias, Table<GetClassesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>spellsource.get_classes</code> table reference
     */
    public GetClasses(String alias) {
        this(DSL.name(alias), GET_CLASSES);
    }

    /**
     * Create an aliased <code>spellsource.get_classes</code> table reference
     */
    public GetClasses(Name alias) {
        this(alias, GET_CLASSES);
    }

    /**
     * Create a <code>spellsource.get_classes</code> table reference
     */
    public GetClasses() {
        this(DSL.name("get_classes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public GetClasses as(String alias) {
        return new GetClasses(DSL.name(alias), this, parameters);
    }

    @Override
    public GetClasses as(Name alias) {
        return new GetClasses(alias, this, parameters);
    }

    @Override
    public GetClasses as(Table<?> alias) {
        return new GetClasses(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetClasses rename(String name) {
        return new GetClasses(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetClasses rename(Name name) {
        return new GetClasses(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetClasses rename(Table<?> name) {
        return new GetClasses(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Boolean, Boolean, JsonObject, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetClasses call() {
        GetClasses result = new GetClasses(DSL.name("get_classes"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super Boolean, ? super Boolean, ? super JsonObject, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super Boolean, ? super Boolean, ? super JsonObject, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
