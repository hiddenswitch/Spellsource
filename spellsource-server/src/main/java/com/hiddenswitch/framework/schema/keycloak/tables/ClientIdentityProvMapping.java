/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientIdentityProvMappingRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientIdentityProvMapping extends TableImpl<ClientIdentityProvMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>keycloak.client_identity_prov_mapping</code>
     */
    public static final ClientIdentityProvMapping CLIENT_IDENTITY_PROV_MAPPING = new ClientIdentityProvMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientIdentityProvMappingRecord> getRecordType() {
        return ClientIdentityProvMappingRecord.class;
    }

    /**
     * The column <code>keycloak.client_identity_prov_mapping.client_id</code>.
     */
    public final TableField<ClientIdentityProvMappingRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.client_identity_prov_mapping.identity_provider_id</code>.
     */
    public final TableField<ClientIdentityProvMappingRecord, String> IDENTITY_PROVIDER_ID = createField(DSL.name("identity_provider_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.client_identity_prov_mapping.retrieve_token</code>.
     */
    public final TableField<ClientIdentityProvMappingRecord, Boolean> RETRIEVE_TOKEN = createField(DSL.name("retrieve_token"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private ClientIdentityProvMapping(Name alias, Table<ClientIdentityProvMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientIdentityProvMapping(Name alias, Table<ClientIdentityProvMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.client_identity_prov_mapping</code>
     * table reference
     */
    public ClientIdentityProvMapping(String alias) {
        this(DSL.name(alias), CLIENT_IDENTITY_PROV_MAPPING);
    }

    /**
     * Create an aliased <code>keycloak.client_identity_prov_mapping</code>
     * table reference
     */
    public ClientIdentityProvMapping(Name alias) {
        this(alias, CLIENT_IDENTITY_PROV_MAPPING);
    }

    /**
     * Create a <code>keycloak.client_identity_prov_mapping</code> table
     * reference
     */
    public ClientIdentityProvMapping() {
        this(DSL.name("client_identity_prov_mapping"), null);
    }

    public <O extends Record> ClientIdentityProvMapping(Table<O> child, ForeignKey<O, ClientIdentityProvMappingRecord> key) {
        super(child, key, CLIENT_IDENTITY_PROV_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CLIENT_ID_PROV_MAP_CLIENT);
    }

    @Override
    public List<UniqueKey<ClientIdentityProvMappingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_7CAELWNIBJI49AVXSRTUF6XJ12);
    }

    @Override
    public List<ForeignKey<ClientIdentityProvMappingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLIENT_IDENTITY_PROV_MAPPING__FK_56ELWNIBJI49AVXSRTUF6XJ23, Keys.CLIENT_IDENTITY_PROV_MAPPING__FK_7CELWNIBJI49AVXSRTUF6XJ12);
    }

    private transient Client _client;
    private transient IdentityProvider _identityProvider;

    /**
     * Get the implicit join path to the <code>keycloak.client</code> table.
     */
    public Client client() {
        if (_client == null)
            _client = new Client(this, Keys.CLIENT_IDENTITY_PROV_MAPPING__FK_56ELWNIBJI49AVXSRTUF6XJ23);

        return _client;
    }

    /**
     * Get the implicit join path to the <code>keycloak.identity_provider</code>
     * table.
     */
    public IdentityProvider identityProvider() {
        if (_identityProvider == null)
            _identityProvider = new IdentityProvider(this, Keys.CLIENT_IDENTITY_PROV_MAPPING__FK_7CELWNIBJI49AVXSRTUF6XJ12);

        return _identityProvider;
    }

    @Override
    public ClientIdentityProvMapping as(String alias) {
        return new ClientIdentityProvMapping(DSL.name(alias), this);
    }

    @Override
    public ClientIdentityProvMapping as(Name alias) {
        return new ClientIdentityProvMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientIdentityProvMapping rename(String name) {
        return new ClientIdentityProvMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientIdentityProvMapping rename(Name name) {
        return new ClientIdentityProvMapping(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
