/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Indexes;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.MatchmakingTicketsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MatchmakingTickets extends TableImpl<MatchmakingTicketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.matchmaking_tickets</code>
     */
    public static final MatchmakingTickets MATCHMAKING_TICKETS = new MatchmakingTickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchmakingTicketsRecord> getRecordType() {
        return MatchmakingTicketsRecord.class;
    }

    /**
     * The column <code>spellsource.matchmaking_tickets.ticket_id</code>.
     */
    public final TableField<MatchmakingTicketsRecord, Long> TICKET_ID = createField(DSL.name("ticket_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spellsource.matchmaking_tickets.queue_id</code>.
     */
    public final TableField<MatchmakingTicketsRecord, String> QUEUE_ID = createField(DSL.name("queue_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.matchmaking_tickets.user_id</code>.
     */
    public final TableField<MatchmakingTicketsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.matchmaking_tickets.deck_id</code>.
     */
    public final TableField<MatchmakingTicketsRecord, String> DECK_ID = createField(DSL.name("deck_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.matchmaking_tickets.bot_deck_id</code>.
     */
    public final TableField<MatchmakingTicketsRecord, String> BOT_DECK_ID = createField(DSL.name("bot_deck_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.matchmaking_tickets.created_at</code>.
     */
    public final TableField<MatchmakingTicketsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private MatchmakingTickets(Name alias, Table<MatchmakingTicketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MatchmakingTickets(Name alias, Table<MatchmakingTicketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.matchmaking_tickets</code> table
     * reference
     */
    public MatchmakingTickets(String alias) {
        this(DSL.name(alias), MATCHMAKING_TICKETS);
    }

    /**
     * Create an aliased <code>spellsource.matchmaking_tickets</code> table
     * reference
     */
    public MatchmakingTickets(Name alias) {
        this(alias, MATCHMAKING_TICKETS);
    }

    /**
     * Create a <code>spellsource.matchmaking_tickets</code> table reference
     */
    public MatchmakingTickets() {
        this(DSL.name("matchmaking_tickets"), null);
    }

    public <O extends Record> MatchmakingTickets(Table<O> child, ForeignKey<O, MatchmakingTicketsRecord> key) {
        super(child, key, MATCHMAKING_TICKETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MATCHMAKING_TICKETS_QUEUE_ID_IDX);
    }

    @Override
    public Identity<MatchmakingTicketsRecord, Long> getIdentity() {
        return (Identity<MatchmakingTicketsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MatchmakingTicketsRecord> getPrimaryKey() {
        return Keys.MATCHMAKING_TICKETS_PKEY;
    }

    @Override
    public List<ForeignKey<MatchmakingTicketsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_QUEUE_ID_FKEY, Keys.MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_USER_ID_FKEY, Keys.MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_DECK_ID_FKEY, Keys.MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_BOT_DECK_ID_FKEY);
    }

    private transient MatchmakingQueues _matchmakingQueues;
    private transient UserEntity _userEntity;
    private transient Decks _matchmakingTicketsDeckIdFkey;
    private transient Decks _matchmakingTicketsBotDeckIdFkey;

    /**
     * Get the implicit join path to the
     * <code>spellsource.matchmaking_queues</code> table.
     */
    public MatchmakingQueues matchmakingQueues() {
        if (_matchmakingQueues == null)
            _matchmakingQueues = new MatchmakingQueues(this, Keys.MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_QUEUE_ID_FKEY);

        return _matchmakingQueues;
    }

    /**
     * Get the implicit join path to the <code>keycloak.user_entity</code>
     * table.
     */
    public UserEntity userEntity() {
        if (_userEntity == null)
            _userEntity = new UserEntity(this, Keys.MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_USER_ID_FKEY);

        return _userEntity;
    }

    /**
     * Get the implicit join path to the <code>spellsource.decks</code> table,
     * via the <code>matchmaking_tickets_deck_id_fkey</code> key.
     */
    public Decks matchmakingTicketsDeckIdFkey() {
        if (_matchmakingTicketsDeckIdFkey == null)
            _matchmakingTicketsDeckIdFkey = new Decks(this, Keys.MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_DECK_ID_FKEY);

        return _matchmakingTicketsDeckIdFkey;
    }

    /**
     * Get the implicit join path to the <code>spellsource.decks</code> table,
     * via the <code>matchmaking_tickets_bot_deck_id_fkey</code> key.
     */
    public Decks matchmakingTicketsBotDeckIdFkey() {
        if (_matchmakingTicketsBotDeckIdFkey == null)
            _matchmakingTicketsBotDeckIdFkey = new Decks(this, Keys.MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_BOT_DECK_ID_FKEY);

        return _matchmakingTicketsBotDeckIdFkey;
    }

    @Override
    public MatchmakingTickets as(String alias) {
        return new MatchmakingTickets(DSL.name(alias), this);
    }

    @Override
    public MatchmakingTickets as(Name alias) {
        return new MatchmakingTickets(alias, this);
    }

    @Override
    public MatchmakingTickets as(Table<?> alias) {
        return new MatchmakingTickets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchmakingTickets rename(String name) {
        return new MatchmakingTickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchmakingTickets rename(Name name) {
        return new MatchmakingTickets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchmakingTickets rename(Table<?> name) {
        return new MatchmakingTickets(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
