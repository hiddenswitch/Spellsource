/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IUserConsentProtMapper;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserConsentProtMapper implements VertxPojo, IUserConsentProtMapper {

    private static final long serialVersionUID = 1L;

    private String userConsentId;
    private String protocolMapperId;

    public UserConsentProtMapper() {}

    public UserConsentProtMapper(IUserConsentProtMapper value) {
        this.userConsentId = value.getUserConsentId();
        this.protocolMapperId = value.getProtocolMapperId();
    }

    public UserConsentProtMapper(
        String userConsentId,
        String protocolMapperId
    ) {
        this.userConsentId = userConsentId;
        this.protocolMapperId = protocolMapperId;
    }

        public UserConsentProtMapper(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for
     * <code>keycloak.user_consent_prot_mapper.user_consent_id</code>.
     */
    @Override
    public String getUserConsentId() {
        return this.userConsentId;
    }

    /**
     * Setter for
     * <code>keycloak.user_consent_prot_mapper.user_consent_id</code>.
     */
    @Override
    public UserConsentProtMapper setUserConsentId(String userConsentId) {
        this.userConsentId = userConsentId;
        return this;
    }

    /**
     * Getter for
     * <code>keycloak.user_consent_prot_mapper.protocol_mapper_id</code>.
     */
    @Override
    public String getProtocolMapperId() {
        return this.protocolMapperId;
    }

    /**
     * Setter for
     * <code>keycloak.user_consent_prot_mapper.protocol_mapper_id</code>.
     */
    @Override
    public UserConsentProtMapper setProtocolMapperId(String protocolMapperId) {
        this.protocolMapperId = protocolMapperId;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserConsentProtMapper (");

        sb.append(userConsentId);
        sb.append(", ").append(protocolMapperId);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserConsentProtMapper from) {
        setUserConsentId(from.getUserConsentId());
        setProtocolMapperId(from.getProtocolMapperId());
    }

    @Override
    public <E extends IUserConsentProtMapper> E into(E into) {
        into.from(this);
        return into;
    }
}
