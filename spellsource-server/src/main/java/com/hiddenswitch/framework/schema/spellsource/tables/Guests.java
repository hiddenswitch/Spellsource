/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GuestsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Guests extends TableImpl<GuestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.guests</code>
     */
    public static final Guests GUESTS = new Guests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GuestsRecord> getRecordType() {
        return GuestsRecord.class;
    }

    /**
     * The column <code>spellsource.guests.id</code>.
     */
    public final TableField<GuestsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spellsource.guests.user_id</code>.
     */
    public final TableField<GuestsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CLOB, this, "");

    private Guests(Name alias, Table<GuestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Guests(Name alias, Table<GuestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.guests</code> table reference
     */
    public Guests(String alias) {
        this(DSL.name(alias), GUESTS);
    }

    /**
     * Create an aliased <code>spellsource.guests</code> table reference
     */
    public Guests(Name alias) {
        this(alias, GUESTS);
    }

    /**
     * Create a <code>spellsource.guests</code> table reference
     */
    public Guests() {
        this(DSL.name("guests"), null);
    }

    public <O extends Record> Guests(Table<O> child, ForeignKey<O, GuestsRecord> key) {
        super(child, key, GUESTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public Identity<GuestsRecord, Long> getIdentity() {
        return (Identity<GuestsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<GuestsRecord> getPrimaryKey() {
        return Keys.GUESTS_PKEY;
    }

    @Override
    public List<ForeignKey<GuestsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GUESTS__GUESTS_USER_ID_FKEY);
    }

    private transient UserEntity _userEntity;

    /**
     * Get the implicit join path to the <code>keycloak.user_entity</code>
     * table.
     */
    public UserEntity userEntity() {
        if (_userEntity == null)
            _userEntity = new UserEntity(this, Keys.GUESTS__GUESTS_USER_ID_FKEY);

        return _userEntity;
    }

    @Override
    public Guests as(String alias) {
        return new Guests(DSL.name(alias), this);
    }

    @Override
    public Guests as(Name alias) {
        return new Guests(alias, this);
    }

    @Override
    public Guests as(Table<?> alias) {
        return new Guests(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Guests rename(String name) {
        return new Guests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Guests rename(Name name) {
        return new Guests(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Guests rename(Table<?> name) {
        return new Guests(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
