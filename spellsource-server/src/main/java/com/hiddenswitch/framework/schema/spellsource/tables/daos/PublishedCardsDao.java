/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.daos;


import com.hiddenswitch.framework.schema.spellsource.tables.PublishedCards;
import com.hiddenswitch.framework.schema.spellsource.tables.records.PublishedCardsRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublishedCardsDao extends AbstractReactiveVertxDAO<PublishedCardsRecord, com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards, String, Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards>>, Future<com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<PublishedCardsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards,String> {

        /**
     * @param configuration Used for rendering, so only SQLDialect must be set
     * and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query
     * execution
     */
        public PublishedCardsDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
                super(PublishedCards.PUBLISHED_CARDS, com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards.class, new ReactiveClassicQueryExecutor<PublishedCardsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards,String>(configuration,delegate,com.hiddenswitch.framework.schema.spellsource.tables.mappers.RowMappers.getPublishedCardsMapper()));
        }

        @Override
        protected String getId(com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards object) {
                return object.getId();
        }

        /**
     * Find records that have <code>succession IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards>> findManyBySuccession(Collection<Long> values) {
                return findManyByCondition(PublishedCards.PUBLISHED_CARDS.SUCCESSION.in(values));
        }

        /**
     * Find records that have <code>succession IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards>> findManyBySuccession(Collection<Long> values, int limit) {
                return findManyByCondition(PublishedCards.PUBLISHED_CARDS.SUCCESSION.in(values),limit);
        }

        @Override
        public ReactiveClassicQueryExecutor<PublishedCardsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards,String> queryExecutor(){
                return (ReactiveClassicQueryExecutor<PublishedCardsRecord,com.hiddenswitch.framework.schema.spellsource.tables.pojos.PublishedCards,String>) super.queryExecutor();
        }
}
