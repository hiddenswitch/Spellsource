/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.UserEntityAddonsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEntityAddons extends TableImpl<UserEntityAddonsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.user_entity_addons</code>
     */
    public static final UserEntityAddons USER_ENTITY_ADDONS = new UserEntityAddons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserEntityAddonsRecord> getRecordType() {
        return UserEntityAddonsRecord.class;
    }

    /**
     * The column <code>spellsource.user_entity_addons.id</code>.
     */
    public final TableField<UserEntityAddonsRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.user_entity_addons.privacy_token</code>.
     */
    public final TableField<UserEntityAddonsRecord, String> PRIVACY_TOKEN = createField(DSL.name("privacy_token"), SQLDataType.CLOB.defaultValue(DSL.field("floor(((1000)::double precision + (random() * (8999)::double precision)))", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>spellsource.user_entity_addons.migrated</code>.
     */
    public final TableField<UserEntityAddonsRecord, Boolean> MIGRATED = createField(DSL.name("migrated"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>spellsource.user_entity_addons.show_premade_decks</code>.
     */
    public final TableField<UserEntityAddonsRecord, Boolean> SHOW_PREMADE_DECKS = createField(DSL.name("show_premade_decks"), SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    private UserEntityAddons(Name alias, Table<UserEntityAddonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserEntityAddons(Name alias, Table<UserEntityAddonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.user_entity_addons</code> table
     * reference
     */
    public UserEntityAddons(String alias) {
        this(DSL.name(alias), USER_ENTITY_ADDONS);
    }

    /**
     * Create an aliased <code>spellsource.user_entity_addons</code> table
     * reference
     */
    public UserEntityAddons(Name alias) {
        this(alias, USER_ENTITY_ADDONS);
    }

    /**
     * Create a <code>spellsource.user_entity_addons</code> table reference
     */
    public UserEntityAddons() {
        this(DSL.name("user_entity_addons"), null);
    }

    public <O extends Record> UserEntityAddons(Table<O> child, ForeignKey<O, UserEntityAddonsRecord> key) {
        super(child, key, USER_ENTITY_ADDONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public UniqueKey<UserEntityAddonsRecord> getPrimaryKey() {
        return Keys.USER_ENTITY_ADDONS_PKEY;
    }

    @Override
    public List<ForeignKey<UserEntityAddonsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ENTITY_ADDONS__USER_ENTITY_ADDONS_ID_FKEY);
    }

    private transient UserEntity _userEntity;

    /**
     * Get the implicit join path to the <code>keycloak.user_entity</code>
     * table.
     */
    public UserEntity userEntity() {
        if (_userEntity == null)
            _userEntity = new UserEntity(this, Keys.USER_ENTITY_ADDONS__USER_ENTITY_ADDONS_ID_FKEY);

        return _userEntity;
    }

    @Override
    public UserEntityAddons as(String alias) {
        return new UserEntityAddons(DSL.name(alias), this);
    }

    @Override
    public UserEntityAddons as(Name alias) {
        return new UserEntityAddons(alias, this);
    }

    @Override
    public UserEntityAddons as(Table<?> alias) {
        return new UserEntityAddons(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntityAddons rename(String name) {
        return new UserEntityAddons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntityAddons rename(Name name) {
        return new UserEntityAddons(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntityAddons rename(Table<?> name) {
        return new UserEntityAddons(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Boolean, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
