/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.UserConsent;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IUserConsent;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserConsentRecord extends UpdatableRecordImpl<UserConsentRecord> implements VertxPojo, Record7<String, String, String, Long, Long, String, String>, IUserConsent {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>keycloak.user_consent.id</code>.
     */
    @Override
    public UserConsentRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.user_consent.client_id</code>.
     */
    @Override
    public UserConsentRecord setClientId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent.client_id</code>.
     */
    @Override
    public String getClientId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>keycloak.user_consent.user_id</code>.
     */
    @Override
    public UserConsentRecord setUserId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent.user_id</code>.
     */
    @Override
    public String getUserId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>keycloak.user_consent.created_date</code>.
     */
    @Override
    public UserConsentRecord setCreatedDate(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent.created_date</code>.
     */
    @Override
    public Long getCreatedDate() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>keycloak.user_consent.last_updated_date</code>.
     */
    @Override
    public UserConsentRecord setLastUpdatedDate(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent.last_updated_date</code>.
     */
    @Override
    public Long getLastUpdatedDate() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>keycloak.user_consent.client_storage_provider</code>.
     */
    @Override
    public UserConsentRecord setClientStorageProvider(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent.client_storage_provider</code>.
     */
    @Override
    public String getClientStorageProvider() {
        return (String) get(5);
    }

    /**
     * Setter for <code>keycloak.user_consent.external_client_id</code>.
     */
    @Override
    public UserConsentRecord setExternalClientId(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.user_consent.external_client_id</code>.
     */
    @Override
    public String getExternalClientId() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Long, Long, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, String, Long, Long, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UserConsent.USER_CONSENT.ID;
    }

    @Override
    public Field<String> field2() {
        return UserConsent.USER_CONSENT.CLIENT_ID;
    }

    @Override
    public Field<String> field3() {
        return UserConsent.USER_CONSENT.USER_ID;
    }

    @Override
    public Field<Long> field4() {
        return UserConsent.USER_CONSENT.CREATED_DATE;
    }

    @Override
    public Field<Long> field5() {
        return UserConsent.USER_CONSENT.LAST_UPDATED_DATE;
    }

    @Override
    public Field<String> field6() {
        return UserConsent.USER_CONSENT.CLIENT_STORAGE_PROVIDER;
    }

    @Override
    public Field<String> field7() {
        return UserConsent.USER_CONSENT.EXTERNAL_CLIENT_ID;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getClientId();
    }

    @Override
    public String component3() {
        return getUserId();
    }

    @Override
    public Long component4() {
        return getCreatedDate();
    }

    @Override
    public Long component5() {
        return getLastUpdatedDate();
    }

    @Override
    public String component6() {
        return getClientStorageProvider();
    }

    @Override
    public String component7() {
        return getExternalClientId();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getClientId();
    }

    @Override
    public String value3() {
        return getUserId();
    }

    @Override
    public Long value4() {
        return getCreatedDate();
    }

    @Override
    public Long value5() {
        return getLastUpdatedDate();
    }

    @Override
    public String value6() {
        return getClientStorageProvider();
    }

    @Override
    public String value7() {
        return getExternalClientId();
    }

    @Override
    public UserConsentRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public UserConsentRecord value2(String value) {
        setClientId(value);
        return this;
    }

    @Override
    public UserConsentRecord value3(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserConsentRecord value4(Long value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public UserConsentRecord value5(Long value) {
        setLastUpdatedDate(value);
        return this;
    }

    @Override
    public UserConsentRecord value6(String value) {
        setClientStorageProvider(value);
        return this;
    }

    @Override
    public UserConsentRecord value7(String value) {
        setExternalClientId(value);
        return this;
    }

    @Override
    public UserConsentRecord values(String value1, String value2, String value3, Long value4, Long value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserConsent from) {
        setId(from.getId());
        setClientId(from.getClientId());
        setUserId(from.getUserId());
        setCreatedDate(from.getCreatedDate());
        setLastUpdatedDate(from.getLastUpdatedDate());
        setClientStorageProvider(from.getClientStorageProvider());
        setExternalClientId(from.getExternalClientId());
    }

    @Override
    public <E extends IUserConsent> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserConsentRecord
     */
    public UserConsentRecord() {
        super(UserConsent.USER_CONSENT);
    }

    /**
     * Create a detached, initialised UserConsentRecord
     */
    public UserConsentRecord(String id, String clientId, String userId, Long createdDate, Long lastUpdatedDate, String clientStorageProvider, String externalClientId) {
        super(UserConsent.USER_CONSENT);

        setId(id);
        setClientId(clientId);
        setUserId(userId);
        setCreatedDate(createdDate);
        setLastUpdatedDate(lastUpdatedDate);
        setClientStorageProvider(clientStorageProvider);
        setExternalClientId(externalClientId);
    }

    /**
     * Create a detached, initialised UserConsentRecord
     */
    public UserConsentRecord(com.hiddenswitch.framework.schema.keycloak.tables.pojos.UserConsent value) {
        super(UserConsent.USER_CONSENT);

        if (value != null) {
            setId(value.getId());
            setClientId(value.getClientId());
            setUserId(value.getUserId());
            setCreatedDate(value.getCreatedDate());
            setLastUpdatedDate(value.getLastUpdatedDate());
            setClientStorageProvider(value.getClientStorageProvider());
            setExternalClientId(value.getExternalClientId());
        }
    }

        public UserConsentRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
