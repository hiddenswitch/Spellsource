/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.daos;


import com.hiddenswitch.framework.schema.keycloak.tables.ResourceServerPermTicket;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourceServerPermTicketRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceServerPermTicketDao extends AbstractReactiveVertxDAO<ResourceServerPermTicketRecord, com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket, String, Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>>, Future<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<ResourceServerPermTicketRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket,String> {

        /**
     * @param configuration Used for rendering, so only SQLDialect must be set
     * and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query
     * execution
     */
        public ResourceServerPermTicketDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
                super(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET, com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket.class, new ReactiveClassicQueryExecutor<ResourceServerPermTicketRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket,String>(configuration,delegate,com.hiddenswitch.framework.schema.keycloak.tables.mappers.RowMappers.getResourceServerPermTicketMapper()));
        }

        @Override
        protected String getId(com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket object) {
                return object.getId();
        }

        /**
     * Find records that have <code>owner IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByOwner(Collection<String> values) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.OWNER.in(values));
        }

        /**
     * Find records that have <code>owner IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByOwner(Collection<String> values, int limit) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.OWNER.in(values),limit);
        }

        /**
     * Find records that have <code>requester IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByRequester(Collection<String> values) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.REQUESTER.in(values));
        }

        /**
     * Find records that have <code>requester IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByRequester(Collection<String> values, int limit) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.REQUESTER.in(values),limit);
        }

        /**
     * Find records that have <code>created_timestamp IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByCreatedTimestamp(Collection<Long> values) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.CREATED_TIMESTAMP.in(values));
        }

        /**
     * Find records that have <code>created_timestamp IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByCreatedTimestamp(Collection<Long> values, int limit) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.CREATED_TIMESTAMP.in(values),limit);
        }

        /**
     * Find records that have <code>granted_timestamp IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByGrantedTimestamp(Collection<Long> values) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.GRANTED_TIMESTAMP.in(values));
        }

        /**
     * Find records that have <code>granted_timestamp IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByGrantedTimestamp(Collection<Long> values, int limit) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.GRANTED_TIMESTAMP.in(values),limit);
        }

        /**
     * Find records that have <code>resource_id IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByResourceId(Collection<String> values) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.RESOURCE_ID.in(values));
        }

        /**
     * Find records that have <code>resource_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByResourceId(Collection<String> values, int limit) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.RESOURCE_ID.in(values),limit);
        }

        /**
     * Find records that have <code>scope_id IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByScopeId(Collection<String> values) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.SCOPE_ID.in(values));
        }

        /**
     * Find records that have <code>scope_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByScopeId(Collection<String> values, int limit) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.SCOPE_ID.in(values),limit);
        }

        /**
     * Find records that have <code>resource_server_id IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByResourceServerId(Collection<String> values) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.RESOURCE_SERVER_ID.in(values));
        }

        /**
     * Find records that have <code>resource_server_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByResourceServerId(Collection<String> values, int limit) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.RESOURCE_SERVER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>policy_id IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByPolicyId(Collection<String> values) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.POLICY_ID.in(values));
        }

        /**
     * Find records that have <code>policy_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket>> findManyByPolicyId(Collection<String> values, int limit) {
                return findManyByCondition(ResourceServerPermTicket.RESOURCE_SERVER_PERM_TICKET.POLICY_ID.in(values),limit);
        }

        @Override
        public ReactiveClassicQueryExecutor<ResourceServerPermTicketRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket,String> queryExecutor(){
                return (ReactiveClassicQueryExecutor<ResourceServerPermTicketRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServerPermTicket,String>) super.queryExecutor();
        }
}
