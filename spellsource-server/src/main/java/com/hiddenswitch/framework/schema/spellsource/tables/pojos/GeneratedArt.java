/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.pojos;


import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.IGeneratedArt;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.vertx.core.json.JsonObject;

import java.util.Arrays;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeneratedArt implements VertxPojo, IGeneratedArt {

    private static final long serialVersionUID = 1L;

    private String hash;
    private String owner;
    private String[] urls;
    private JsonObject info;
    private Boolean isArchived;

    public GeneratedArt() {}

    public GeneratedArt(IGeneratedArt value) {
        this.hash = value.getHash();
        this.owner = value.getOwner();
        this.urls = value.getUrls();
        this.info = value.getInfo();
        this.isArchived = value.getIsArchived();
    }

    public GeneratedArt(
        String hash,
        String owner,
        String[] urls,
        JsonObject info,
        Boolean isArchived
    ) {
        this.hash = hash;
        this.owner = owner;
        this.urls = urls;
        this.info = info;
        this.isArchived = isArchived;
    }

        public GeneratedArt(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>spellsource.generated_art.hash</code>.
     */
    @Override
    public String getHash() {
        return this.hash;
    }

    /**
     * Setter for <code>spellsource.generated_art.hash</code>.
     */
    @Override
    public GeneratedArt setHash(String hash) {
        this.hash = hash;
        return this;
    }

    /**
     * Getter for <code>spellsource.generated_art.owner</code>.
     */
    @Override
    public String getOwner() {
        return this.owner;
    }

    /**
     * Setter for <code>spellsource.generated_art.owner</code>.
     */
    @Override
    public GeneratedArt setOwner(String owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Getter for <code>spellsource.generated_art.urls</code>.
     */
    @Override
    public String[] getUrls() {
        return this.urls;
    }

    /**
     * Setter for <code>spellsource.generated_art.urls</code>.
     */
    @Override
    public GeneratedArt setUrls(String[] urls) {
        this.urls = urls;
        return this;
    }

    /**
     * Getter for <code>spellsource.generated_art.info</code>.
     */
    @Override
    public JsonObject getInfo() {
        return this.info;
    }

    /**
     * Setter for <code>spellsource.generated_art.info</code>.
     */
    @Override
    public GeneratedArt setInfo(JsonObject info) {
        this.info = info;
        return this;
    }

    /**
     * Getter for <code>spellsource.generated_art.is_archived</code>.
     */
    @Override
    public Boolean getIsArchived() {
        return this.isArchived;
    }

    /**
     * Setter for <code>spellsource.generated_art.is_archived</code>.
     */
    @Override
    public GeneratedArt setIsArchived(Boolean isArchived) {
        this.isArchived = isArchived;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final GeneratedArt other = (GeneratedArt) obj;
        if (this.hash == null) {
            if (other.hash != null)
                return false;
        }
        else if (!this.hash.equals(other.hash))
            return false;
        if (this.owner == null) {
            if (other.owner != null)
                return false;
        }
        else if (!this.owner.equals(other.owner))
            return false;
        if (this.urls == null) {
            if (other.urls != null)
                return false;
        }
        else if (!Arrays.equals(this.urls, other.urls))
            return false;
        if (this.info == null) {
            if (other.info != null)
                return false;
        }
        else if (!this.info.equals(other.info))
            return false;
        if (this.isArchived == null) {
            if (other.isArchived != null)
                return false;
        }
        else if (!this.isArchived.equals(other.isArchived))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.hash == null) ? 0 : this.hash.hashCode());
        result = prime * result + ((this.owner == null) ? 0 : this.owner.hashCode());
        result = prime * result + ((this.urls == null) ? 0 : Arrays.hashCode(this.urls));
        result = prime * result + ((this.info == null) ? 0 : this.info.hashCode());
        result = prime * result + ((this.isArchived == null) ? 0 : this.isArchived.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("GeneratedArt (");

        sb.append(hash);
        sb.append(", ").append(owner);
        sb.append(", ").append(Arrays.toString(urls));
        sb.append(", ").append(info);
        sb.append(", ").append(isArchived);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IGeneratedArt from) {
        setHash(from.getHash());
        setOwner(from.getOwner());
        setUrls(from.getUrls());
        setInfo(from.getInfo());
        setIsArchived(from.getIsArchived());
    }

    @Override
    public <E extends IGeneratedArt> E into(E into) {
        into.from(this);
        return into;
    }
}
