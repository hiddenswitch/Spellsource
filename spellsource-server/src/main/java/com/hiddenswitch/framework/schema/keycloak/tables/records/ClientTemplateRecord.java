/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.ClientTemplate;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IClientTemplate;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientTemplateRecord extends UpdatableRecordImpl<ClientTemplateRecord> implements VertxPojo, Record14<String, String, String, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean>, IClientTemplate {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>keycloak.client_template.id</code>.
     */
    @Override
    public ClientTemplateRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.client_template.name</code>.
     */
    @Override
    public ClientTemplateRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>keycloak.client_template.realm_id</code>.
     */
    @Override
    public ClientTemplateRecord setRealmId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.realm_id</code>.
     */
    @Override
    public String getRealmId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>keycloak.client_template.description</code>.
     */
    @Override
    public ClientTemplateRecord setDescription(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.description</code>.
     */
    @Override
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>keycloak.client_template.protocol</code>.
     */
    @Override
    public ClientTemplateRecord setProtocol(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.protocol</code>.
     */
    @Override
    public String getProtocol() {
        return (String) get(4);
    }

    /**
     * Setter for <code>keycloak.client_template.full_scope_allowed</code>.
     */
    @Override
    public ClientTemplateRecord setFullScopeAllowed(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.full_scope_allowed</code>.
     */
    @Override
    public Boolean getFullScopeAllowed() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>keycloak.client_template.consent_required</code>.
     */
    @Override
    public ClientTemplateRecord setConsentRequired(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.consent_required</code>.
     */
    @Override
    public Boolean getConsentRequired() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>keycloak.client_template.standard_flow_enabled</code>.
     */
    @Override
    public ClientTemplateRecord setStandardFlowEnabled(Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.standard_flow_enabled</code>.
     */
    @Override
    public Boolean getStandardFlowEnabled() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>keycloak.client_template.implicit_flow_enabled</code>.
     */
    @Override
    public ClientTemplateRecord setImplicitFlowEnabled(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.implicit_flow_enabled</code>.
     */
    @Override
    public Boolean getImplicitFlowEnabled() {
        return (Boolean) get(8);
    }

    /**
     * Setter for
     * <code>keycloak.client_template.direct_access_grants_enabled</code>.
     */
    @Override
    public ClientTemplateRecord setDirectAccessGrantsEnabled(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>keycloak.client_template.direct_access_grants_enabled</code>.
     */
    @Override
    public Boolean getDirectAccessGrantsEnabled() {
        return (Boolean) get(9);
    }

    /**
     * Setter for
     * <code>keycloak.client_template.service_accounts_enabled</code>.
     */
    @Override
    public ClientTemplateRecord setServiceAccountsEnabled(Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>keycloak.client_template.service_accounts_enabled</code>.
     */
    @Override
    public Boolean getServiceAccountsEnabled() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>keycloak.client_template.frontchannel_logout</code>.
     */
    @Override
    public ClientTemplateRecord setFrontchannelLogout(Boolean value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.frontchannel_logout</code>.
     */
    @Override
    public Boolean getFrontchannelLogout() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>keycloak.client_template.bearer_only</code>.
     */
    @Override
    public ClientTemplateRecord setBearerOnly(Boolean value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.bearer_only</code>.
     */
    @Override
    public Boolean getBearerOnly() {
        return (Boolean) get(12);
    }

    /**
     * Setter for <code>keycloak.client_template.public_client</code>.
     */
    @Override
    public ClientTemplateRecord setPublicClient(Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.public_client</code>.
     */
    @Override
    public Boolean getPublicClient() {
        return (Boolean) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<String, String, String, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ClientTemplate.CLIENT_TEMPLATE.ID;
    }

    @Override
    public Field<String> field2() {
        return ClientTemplate.CLIENT_TEMPLATE.NAME;
    }

    @Override
    public Field<String> field3() {
        return ClientTemplate.CLIENT_TEMPLATE.REALM_ID;
    }

    @Override
    public Field<String> field4() {
        return ClientTemplate.CLIENT_TEMPLATE.DESCRIPTION;
    }

    @Override
    public Field<String> field5() {
        return ClientTemplate.CLIENT_TEMPLATE.PROTOCOL;
    }

    @Override
    public Field<Boolean> field6() {
        return ClientTemplate.CLIENT_TEMPLATE.FULL_SCOPE_ALLOWED;
    }

    @Override
    public Field<Boolean> field7() {
        return ClientTemplate.CLIENT_TEMPLATE.CONSENT_REQUIRED;
    }

    @Override
    public Field<Boolean> field8() {
        return ClientTemplate.CLIENT_TEMPLATE.STANDARD_FLOW_ENABLED;
    }

    @Override
    public Field<Boolean> field9() {
        return ClientTemplate.CLIENT_TEMPLATE.IMPLICIT_FLOW_ENABLED;
    }

    @Override
    public Field<Boolean> field10() {
        return ClientTemplate.CLIENT_TEMPLATE.DIRECT_ACCESS_GRANTS_ENABLED;
    }

    @Override
    public Field<Boolean> field11() {
        return ClientTemplate.CLIENT_TEMPLATE.SERVICE_ACCOUNTS_ENABLED;
    }

    @Override
    public Field<Boolean> field12() {
        return ClientTemplate.CLIENT_TEMPLATE.FRONTCHANNEL_LOGOUT;
    }

    @Override
    public Field<Boolean> field13() {
        return ClientTemplate.CLIENT_TEMPLATE.BEARER_ONLY;
    }

    @Override
    public Field<Boolean> field14() {
        return ClientTemplate.CLIENT_TEMPLATE.PUBLIC_CLIENT;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getRealmId();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public String component5() {
        return getProtocol();
    }

    @Override
    public Boolean component6() {
        return getFullScopeAllowed();
    }

    @Override
    public Boolean component7() {
        return getConsentRequired();
    }

    @Override
    public Boolean component8() {
        return getStandardFlowEnabled();
    }

    @Override
    public Boolean component9() {
        return getImplicitFlowEnabled();
    }

    @Override
    public Boolean component10() {
        return getDirectAccessGrantsEnabled();
    }

    @Override
    public Boolean component11() {
        return getServiceAccountsEnabled();
    }

    @Override
    public Boolean component12() {
        return getFrontchannelLogout();
    }

    @Override
    public Boolean component13() {
        return getBearerOnly();
    }

    @Override
    public Boolean component14() {
        return getPublicClient();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getRealmId();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public String value5() {
        return getProtocol();
    }

    @Override
    public Boolean value6() {
        return getFullScopeAllowed();
    }

    @Override
    public Boolean value7() {
        return getConsentRequired();
    }

    @Override
    public Boolean value8() {
        return getStandardFlowEnabled();
    }

    @Override
    public Boolean value9() {
        return getImplicitFlowEnabled();
    }

    @Override
    public Boolean value10() {
        return getDirectAccessGrantsEnabled();
    }

    @Override
    public Boolean value11() {
        return getServiceAccountsEnabled();
    }

    @Override
    public Boolean value12() {
        return getFrontchannelLogout();
    }

    @Override
    public Boolean value13() {
        return getBearerOnly();
    }

    @Override
    public Boolean value14() {
        return getPublicClient();
    }

    @Override
    public ClientTemplateRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value3(String value) {
        setRealmId(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value5(String value) {
        setProtocol(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value6(Boolean value) {
        setFullScopeAllowed(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value7(Boolean value) {
        setConsentRequired(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value8(Boolean value) {
        setStandardFlowEnabled(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value9(Boolean value) {
        setImplicitFlowEnabled(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value10(Boolean value) {
        setDirectAccessGrantsEnabled(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value11(Boolean value) {
        setServiceAccountsEnabled(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value12(Boolean value) {
        setFrontchannelLogout(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value13(Boolean value) {
        setBearerOnly(value);
        return this;
    }

    @Override
    public ClientTemplateRecord value14(Boolean value) {
        setPublicClient(value);
        return this;
    }

    @Override
    public ClientTemplateRecord values(String value1, String value2, String value3, String value4, String value5, Boolean value6, Boolean value7, Boolean value8, Boolean value9, Boolean value10, Boolean value11, Boolean value12, Boolean value13, Boolean value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IClientTemplate from) {
        setId(from.getId());
        setName(from.getName());
        setRealmId(from.getRealmId());
        setDescription(from.getDescription());
        setProtocol(from.getProtocol());
        setFullScopeAllowed(from.getFullScopeAllowed());
        setConsentRequired(from.getConsentRequired());
        setStandardFlowEnabled(from.getStandardFlowEnabled());
        setImplicitFlowEnabled(from.getImplicitFlowEnabled());
        setDirectAccessGrantsEnabled(from.getDirectAccessGrantsEnabled());
        setServiceAccountsEnabled(from.getServiceAccountsEnabled());
        setFrontchannelLogout(from.getFrontchannelLogout());
        setBearerOnly(from.getBearerOnly());
        setPublicClient(from.getPublicClient());
    }

    @Override
    public <E extends IClientTemplate> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClientTemplateRecord
     */
    public ClientTemplateRecord() {
        super(ClientTemplate.CLIENT_TEMPLATE);
    }

    /**
     * Create a detached, initialised ClientTemplateRecord
     */
    public ClientTemplateRecord(String id, String name, String realmId, String description, String protocol, Boolean fullScopeAllowed, Boolean consentRequired, Boolean standardFlowEnabled, Boolean implicitFlowEnabled, Boolean directAccessGrantsEnabled, Boolean serviceAccountsEnabled, Boolean frontchannelLogout, Boolean bearerOnly, Boolean publicClient) {
        super(ClientTemplate.CLIENT_TEMPLATE);

        setId(id);
        setName(name);
        setRealmId(realmId);
        setDescription(description);
        setProtocol(protocol);
        setFullScopeAllowed(fullScopeAllowed);
        setConsentRequired(consentRequired);
        setStandardFlowEnabled(standardFlowEnabled);
        setImplicitFlowEnabled(implicitFlowEnabled);
        setDirectAccessGrantsEnabled(directAccessGrantsEnabled);
        setServiceAccountsEnabled(serviceAccountsEnabled);
        setFrontchannelLogout(frontchannelLogout);
        setBearerOnly(bearerOnly);
        setPublicClient(publicClient);
    }

    /**
     * Create a detached, initialised ClientTemplateRecord
     */
    public ClientTemplateRecord(com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate value) {
        super(ClientTemplate.CLIENT_TEMPLATE);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setRealmId(value.getRealmId());
            setDescription(value.getDescription());
            setProtocol(value.getProtocol());
            setFullScopeAllowed(value.getFullScopeAllowed());
            setConsentRequired(value.getConsentRequired());
            setStandardFlowEnabled(value.getStandardFlowEnabled());
            setImplicitFlowEnabled(value.getImplicitFlowEnabled());
            setDirectAccessGrantsEnabled(value.getDirectAccessGrantsEnabled());
            setServiceAccountsEnabled(value.getServiceAccountsEnabled());
            setFrontchannelLogout(value.getFrontchannelLogout());
            setBearerOnly(value.getBearerOnly());
            setPublicClient(value.getPublicClient());
        }
    }

        public ClientTemplateRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
