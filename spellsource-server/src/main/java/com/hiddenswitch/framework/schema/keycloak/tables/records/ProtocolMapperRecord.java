/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.ProtocolMapper;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IProtocolMapper;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProtocolMapperRecord extends UpdatableRecordImpl<ProtocolMapperRecord> implements VertxPojo, Record8<String, String, String, String, Boolean, String, String, String>, IProtocolMapper {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>keycloak.protocol_mapper.id</code>.
     */
    @Override
    public ProtocolMapperRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.protocol_mapper.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.protocol_mapper.name</code>.
     */
    @Override
    public ProtocolMapperRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.protocol_mapper.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>keycloak.protocol_mapper.protocol</code>.
     */
    @Override
    public ProtocolMapperRecord setProtocol(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.protocol_mapper.protocol</code>.
     */
    @Override
    public String getProtocol() {
        return (String) get(2);
    }

    /**
     * Setter for <code>keycloak.protocol_mapper.protocol_mapper_name</code>.
     */
    @Override
    public ProtocolMapperRecord setProtocolMapperName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.protocol_mapper.protocol_mapper_name</code>.
     */
    @Override
    public String getProtocolMapperName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>keycloak.protocol_mapper.consent_required</code>.
     */
    @Override
    public ProtocolMapperRecord setConsentRequired(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.protocol_mapper.consent_required</code>.
     */
    @Override
    public Boolean getConsentRequired() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>keycloak.protocol_mapper.consent_text</code>.
     */
    @Override
    public ProtocolMapperRecord setConsentText(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.protocol_mapper.consent_text</code>.
     */
    @Override
    public String getConsentText() {
        return (String) get(5);
    }

    /**
     * Setter for <code>keycloak.protocol_mapper.client_id</code>.
     */
    @Override
    public ProtocolMapperRecord setClientId(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.protocol_mapper.client_id</code>.
     */
    @Override
    public String getClientId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>keycloak.protocol_mapper.client_template_id</code>.
     */
    @Override
    public ProtocolMapperRecord setClientTemplateId(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.protocol_mapper.client_template_id</code>.
     */
    @Override
    public String getClientTemplateId() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, Boolean, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<String, String, String, String, Boolean, String, String, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ProtocolMapper.PROTOCOL_MAPPER.ID;
    }

    @Override
    public Field<String> field2() {
        return ProtocolMapper.PROTOCOL_MAPPER.NAME;
    }

    @Override
    public Field<String> field3() {
        return ProtocolMapper.PROTOCOL_MAPPER.PROTOCOL;
    }

    @Override
    public Field<String> field4() {
        return ProtocolMapper.PROTOCOL_MAPPER.PROTOCOL_MAPPER_NAME;
    }

    @Override
    public Field<Boolean> field5() {
        return ProtocolMapper.PROTOCOL_MAPPER.CONSENT_REQUIRED;
    }

    @Override
    public Field<String> field6() {
        return ProtocolMapper.PROTOCOL_MAPPER.CONSENT_TEXT;
    }

    @Override
    public Field<String> field7() {
        return ProtocolMapper.PROTOCOL_MAPPER.CLIENT_ID;
    }

    @Override
    public Field<String> field8() {
        return ProtocolMapper.PROTOCOL_MAPPER.CLIENT_TEMPLATE_ID;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getProtocol();
    }

    @Override
    public String component4() {
        return getProtocolMapperName();
    }

    @Override
    public Boolean component5() {
        return getConsentRequired();
    }

    @Override
    public String component6() {
        return getConsentText();
    }

    @Override
    public String component7() {
        return getClientId();
    }

    @Override
    public String component8() {
        return getClientTemplateId();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getProtocol();
    }

    @Override
    public String value4() {
        return getProtocolMapperName();
    }

    @Override
    public Boolean value5() {
        return getConsentRequired();
    }

    @Override
    public String value6() {
        return getConsentText();
    }

    @Override
    public String value7() {
        return getClientId();
    }

    @Override
    public String value8() {
        return getClientTemplateId();
    }

    @Override
    public ProtocolMapperRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ProtocolMapperRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ProtocolMapperRecord value3(String value) {
        setProtocol(value);
        return this;
    }

    @Override
    public ProtocolMapperRecord value4(String value) {
        setProtocolMapperName(value);
        return this;
    }

    @Override
    public ProtocolMapperRecord value5(Boolean value) {
        setConsentRequired(value);
        return this;
    }

    @Override
    public ProtocolMapperRecord value6(String value) {
        setConsentText(value);
        return this;
    }

    @Override
    public ProtocolMapperRecord value7(String value) {
        setClientId(value);
        return this;
    }

    @Override
    public ProtocolMapperRecord value8(String value) {
        setClientTemplateId(value);
        return this;
    }

    @Override
    public ProtocolMapperRecord values(String value1, String value2, String value3, String value4, Boolean value5, String value6, String value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IProtocolMapper from) {
        setId(from.getId());
        setName(from.getName());
        setProtocol(from.getProtocol());
        setProtocolMapperName(from.getProtocolMapperName());
        setConsentRequired(from.getConsentRequired());
        setConsentText(from.getConsentText());
        setClientId(from.getClientId());
        setClientTemplateId(from.getClientTemplateId());
    }

    @Override
    public <E extends IProtocolMapper> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProtocolMapperRecord
     */
    public ProtocolMapperRecord() {
        super(ProtocolMapper.PROTOCOL_MAPPER);
    }

    /**
     * Create a detached, initialised ProtocolMapperRecord
     */
    public ProtocolMapperRecord(String id, String name, String protocol, String protocolMapperName, Boolean consentRequired, String consentText, String clientId, String clientTemplateId) {
        super(ProtocolMapper.PROTOCOL_MAPPER);

        setId(id);
        setName(name);
        setProtocol(protocol);
        setProtocolMapperName(protocolMapperName);
        setConsentRequired(consentRequired);
        setConsentText(consentText);
        setClientId(clientId);
        setClientTemplateId(clientTemplateId);
    }

    /**
     * Create a detached, initialised ProtocolMapperRecord
     */
    public ProtocolMapperRecord(com.hiddenswitch.framework.schema.keycloak.tables.pojos.ProtocolMapper value) {
        super(ProtocolMapper.PROTOCOL_MAPPER);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setProtocol(value.getProtocol());
            setProtocolMapperName(value.getProtocolMapperName());
            setConsentRequired(value.getConsentRequired());
            setConsentText(value.getConsentText());
            setClientId(value.getClientId());
            setClientTemplateId(value.getClientTemplateId());
        }
    }

        public ProtocolMapperRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
