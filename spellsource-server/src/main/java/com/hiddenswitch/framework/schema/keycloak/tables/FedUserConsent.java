/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserConsentRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FedUserConsent extends TableImpl<FedUserConsentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.fed_user_consent</code>
     */
    public static final FedUserConsent FED_USER_CONSENT = new FedUserConsent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FedUserConsentRecord> getRecordType() {
        return FedUserConsentRecord.class;
    }

    /**
     * The column <code>keycloak.fed_user_consent.id</code>.
     */
    public final TableField<FedUserConsentRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.fed_user_consent.client_id</code>.
     */
    public final TableField<FedUserConsentRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.fed_user_consent.user_id</code>.
     */
    public final TableField<FedUserConsentRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.fed_user_consent.realm_id</code>.
     */
    public final TableField<FedUserConsentRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.fed_user_consent.storage_provider_id</code>.
     */
    public final TableField<FedUserConsentRecord, String> STORAGE_PROVIDER_ID = createField(DSL.name("storage_provider_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.fed_user_consent.created_date</code>.
     */
    public final TableField<FedUserConsentRecord, Long> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>keycloak.fed_user_consent.last_updated_date</code>.
     */
    public final TableField<FedUserConsentRecord, Long> LAST_UPDATED_DATE = createField(DSL.name("last_updated_date"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>keycloak.fed_user_consent.client_storage_provider</code>.
     */
    public final TableField<FedUserConsentRecord, String> CLIENT_STORAGE_PROVIDER = createField(DSL.name("client_storage_provider"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.fed_user_consent.external_client_id</code>.
     */
    public final TableField<FedUserConsentRecord, String> EXTERNAL_CLIENT_ID = createField(DSL.name("external_client_id"), SQLDataType.VARCHAR(255), this, "");

    private FedUserConsent(Name alias, Table<FedUserConsentRecord> aliased) {
        this(alias, aliased, null);
    }

    private FedUserConsent(Name alias, Table<FedUserConsentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.fed_user_consent</code> table reference
     */
    public FedUserConsent(String alias) {
        this(DSL.name(alias), FED_USER_CONSENT);
    }

    /**
     * Create an aliased <code>keycloak.fed_user_consent</code> table reference
     */
    public FedUserConsent(Name alias) {
        this(alias, FED_USER_CONSENT);
    }

    /**
     * Create a <code>keycloak.fed_user_consent</code> table reference
     */
    public FedUserConsent() {
        this(DSL.name("fed_user_consent"), null);
    }

    public <O extends Record> FedUserConsent(Table<O> child, ForeignKey<O, FedUserConsentRecord> key) {
        super(child, key, FED_USER_CONSENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FU_CNSNT_EXT, Indexes.IDX_FU_CONSENT, Indexes.IDX_FU_CONSENT_RU);
    }

    @Override
    public UniqueKey<FedUserConsentRecord> getPrimaryKey() {
        return Keys.CONSTR_FED_USER_CONSENT_PK;
    }

    @Override
    public FedUserConsent as(String alias) {
        return new FedUserConsent(DSL.name(alias), this);
    }

    @Override
    public FedUserConsent as(Name alias) {
        return new FedUserConsent(alias, this);
    }

    @Override
    public FedUserConsent as(Table<?> alias) {
        return new FedUserConsent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FedUserConsent rename(String name) {
        return new FedUserConsent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FedUserConsent rename(Name name) {
        return new FedUserConsent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FedUserConsent rename(Table<?> name) {
        return new FedUserConsent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, Long, Long, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
