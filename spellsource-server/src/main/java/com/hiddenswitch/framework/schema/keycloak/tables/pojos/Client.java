/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IClient;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Client implements VertxPojo, IClient {

    private static final long serialVersionUID = 1L;

    private String id;
    private Boolean enabled;
    private Boolean fullScopeAllowed;
    private String clientId;
    private Integer notBefore;
    private Boolean publicClient;
    private String secret;
    private String baseUrl;
    private Boolean bearerOnly;
    private String managementUrl;
    private Boolean surrogateAuthRequired;
    private String realmId;
    private String protocol;
    private Integer nodeReregTimeout;
    private Boolean frontchannelLogout;
    private Boolean consentRequired;
    private String name;
    private Boolean serviceAccountsEnabled;
    private String clientAuthenticatorType;
    private String rootUrl;
    private String description;
    private String registrationToken;
    private Boolean standardFlowEnabled;
    private Boolean implicitFlowEnabled;
    private Boolean directAccessGrantsEnabled;
    private Boolean alwaysDisplayInConsole;

    public Client() {}

    public Client(IClient value) {
        this.id = value.getId();
        this.enabled = value.getEnabled();
        this.fullScopeAllowed = value.getFullScopeAllowed();
        this.clientId = value.getClientId();
        this.notBefore = value.getNotBefore();
        this.publicClient = value.getPublicClient();
        this.secret = value.getSecret();
        this.baseUrl = value.getBaseUrl();
        this.bearerOnly = value.getBearerOnly();
        this.managementUrl = value.getManagementUrl();
        this.surrogateAuthRequired = value.getSurrogateAuthRequired();
        this.realmId = value.getRealmId();
        this.protocol = value.getProtocol();
        this.nodeReregTimeout = value.getNodeReregTimeout();
        this.frontchannelLogout = value.getFrontchannelLogout();
        this.consentRequired = value.getConsentRequired();
        this.name = value.getName();
        this.serviceAccountsEnabled = value.getServiceAccountsEnabled();
        this.clientAuthenticatorType = value.getClientAuthenticatorType();
        this.rootUrl = value.getRootUrl();
        this.description = value.getDescription();
        this.registrationToken = value.getRegistrationToken();
        this.standardFlowEnabled = value.getStandardFlowEnabled();
        this.implicitFlowEnabled = value.getImplicitFlowEnabled();
        this.directAccessGrantsEnabled = value.getDirectAccessGrantsEnabled();
        this.alwaysDisplayInConsole = value.getAlwaysDisplayInConsole();
    }

    public Client(
        String id,
        Boolean enabled,
        Boolean fullScopeAllowed,
        String clientId,
        Integer notBefore,
        Boolean publicClient,
        String secret,
        String baseUrl,
        Boolean bearerOnly,
        String managementUrl,
        Boolean surrogateAuthRequired,
        String realmId,
        String protocol,
        Integer nodeReregTimeout,
        Boolean frontchannelLogout,
        Boolean consentRequired,
        String name,
        Boolean serviceAccountsEnabled,
        String clientAuthenticatorType,
        String rootUrl,
        String description,
        String registrationToken,
        Boolean standardFlowEnabled,
        Boolean implicitFlowEnabled,
        Boolean directAccessGrantsEnabled,
        Boolean alwaysDisplayInConsole
    ) {
        this.id = id;
        this.enabled = enabled;
        this.fullScopeAllowed = fullScopeAllowed;
        this.clientId = clientId;
        this.notBefore = notBefore;
        this.publicClient = publicClient;
        this.secret = secret;
        this.baseUrl = baseUrl;
        this.bearerOnly = bearerOnly;
        this.managementUrl = managementUrl;
        this.surrogateAuthRequired = surrogateAuthRequired;
        this.realmId = realmId;
        this.protocol = protocol;
        this.nodeReregTimeout = nodeReregTimeout;
        this.frontchannelLogout = frontchannelLogout;
        this.consentRequired = consentRequired;
        this.name = name;
        this.serviceAccountsEnabled = serviceAccountsEnabled;
        this.clientAuthenticatorType = clientAuthenticatorType;
        this.rootUrl = rootUrl;
        this.description = description;
        this.registrationToken = registrationToken;
        this.standardFlowEnabled = standardFlowEnabled;
        this.implicitFlowEnabled = implicitFlowEnabled;
        this.directAccessGrantsEnabled = directAccessGrantsEnabled;
        this.alwaysDisplayInConsole = alwaysDisplayInConsole;
    }

        public Client(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>keycloak.client.id</code>.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>keycloak.client.id</code>.
     */
    @Override
    public Client setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.enabled</code>.
     */
    @Override
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Setter for <code>keycloak.client.enabled</code>.
     */
    @Override
    public Client setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.full_scope_allowed</code>.
     */
    @Override
    public Boolean getFullScopeAllowed() {
        return this.fullScopeAllowed;
    }

    /**
     * Setter for <code>keycloak.client.full_scope_allowed</code>.
     */
    @Override
    public Client setFullScopeAllowed(Boolean fullScopeAllowed) {
        this.fullScopeAllowed = fullScopeAllowed;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.client_id</code>.
     */
    @Override
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Setter for <code>keycloak.client.client_id</code>.
     */
    @Override
    public Client setClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.not_before</code>.
     */
    @Override
    public Integer getNotBefore() {
        return this.notBefore;
    }

    /**
     * Setter for <code>keycloak.client.not_before</code>.
     */
    @Override
    public Client setNotBefore(Integer notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.public_client</code>.
     */
    @Override
    public Boolean getPublicClient() {
        return this.publicClient;
    }

    /**
     * Setter for <code>keycloak.client.public_client</code>.
     */
    @Override
    public Client setPublicClient(Boolean publicClient) {
        this.publicClient = publicClient;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.secret</code>.
     */
    @Override
    public String getSecret() {
        return this.secret;
    }

    /**
     * Setter for <code>keycloak.client.secret</code>.
     */
    @Override
    public Client setSecret(String secret) {
        this.secret = secret;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.base_url</code>.
     */
    @Override
    public String getBaseUrl() {
        return this.baseUrl;
    }

    /**
     * Setter for <code>keycloak.client.base_url</code>.
     */
    @Override
    public Client setBaseUrl(String baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.bearer_only</code>.
     */
    @Override
    public Boolean getBearerOnly() {
        return this.bearerOnly;
    }

    /**
     * Setter for <code>keycloak.client.bearer_only</code>.
     */
    @Override
    public Client setBearerOnly(Boolean bearerOnly) {
        this.bearerOnly = bearerOnly;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.management_url</code>.
     */
    @Override
    public String getManagementUrl() {
        return this.managementUrl;
    }

    /**
     * Setter for <code>keycloak.client.management_url</code>.
     */
    @Override
    public Client setManagementUrl(String managementUrl) {
        this.managementUrl = managementUrl;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.surrogate_auth_required</code>.
     */
    @Override
    public Boolean getSurrogateAuthRequired() {
        return this.surrogateAuthRequired;
    }

    /**
     * Setter for <code>keycloak.client.surrogate_auth_required</code>.
     */
    @Override
    public Client setSurrogateAuthRequired(Boolean surrogateAuthRequired) {
        this.surrogateAuthRequired = surrogateAuthRequired;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.realm_id</code>.
     */
    @Override
    public String getRealmId() {
        return this.realmId;
    }

    /**
     * Setter for <code>keycloak.client.realm_id</code>.
     */
    @Override
    public Client setRealmId(String realmId) {
        this.realmId = realmId;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.protocol</code>.
     */
    @Override
    public String getProtocol() {
        return this.protocol;
    }

    /**
     * Setter for <code>keycloak.client.protocol</code>.
     */
    @Override
    public Client setProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.node_rereg_timeout</code>.
     */
    @Override
    public Integer getNodeReregTimeout() {
        return this.nodeReregTimeout;
    }

    /**
     * Setter for <code>keycloak.client.node_rereg_timeout</code>.
     */
    @Override
    public Client setNodeReregTimeout(Integer nodeReregTimeout) {
        this.nodeReregTimeout = nodeReregTimeout;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.frontchannel_logout</code>.
     */
    @Override
    public Boolean getFrontchannelLogout() {
        return this.frontchannelLogout;
    }

    /**
     * Setter for <code>keycloak.client.frontchannel_logout</code>.
     */
    @Override
    public Client setFrontchannelLogout(Boolean frontchannelLogout) {
        this.frontchannelLogout = frontchannelLogout;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.consent_required</code>.
     */
    @Override
    public Boolean getConsentRequired() {
        return this.consentRequired;
    }

    /**
     * Setter for <code>keycloak.client.consent_required</code>.
     */
    @Override
    public Client setConsentRequired(Boolean consentRequired) {
        this.consentRequired = consentRequired;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.name</code>.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>keycloak.client.name</code>.
     */
    @Override
    public Client setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.service_accounts_enabled</code>.
     */
    @Override
    public Boolean getServiceAccountsEnabled() {
        return this.serviceAccountsEnabled;
    }

    /**
     * Setter for <code>keycloak.client.service_accounts_enabled</code>.
     */
    @Override
    public Client setServiceAccountsEnabled(Boolean serviceAccountsEnabled) {
        this.serviceAccountsEnabled = serviceAccountsEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.client_authenticator_type</code>.
     */
    @Override
    public String getClientAuthenticatorType() {
        return this.clientAuthenticatorType;
    }

    /**
     * Setter for <code>keycloak.client.client_authenticator_type</code>.
     */
    @Override
    public Client setClientAuthenticatorType(String clientAuthenticatorType) {
        this.clientAuthenticatorType = clientAuthenticatorType;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.root_url</code>.
     */
    @Override
    public String getRootUrl() {
        return this.rootUrl;
    }

    /**
     * Setter for <code>keycloak.client.root_url</code>.
     */
    @Override
    public Client setRootUrl(String rootUrl) {
        this.rootUrl = rootUrl;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.description</code>.
     */
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>keycloak.client.description</code>.
     */
    @Override
    public Client setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.registration_token</code>.
     */
    @Override
    public String getRegistrationToken() {
        return this.registrationToken;
    }

    /**
     * Setter for <code>keycloak.client.registration_token</code>.
     */
    @Override
    public Client setRegistrationToken(String registrationToken) {
        this.registrationToken = registrationToken;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.standard_flow_enabled</code>.
     */
    @Override
    public Boolean getStandardFlowEnabled() {
        return this.standardFlowEnabled;
    }

    /**
     * Setter for <code>keycloak.client.standard_flow_enabled</code>.
     */
    @Override
    public Client setStandardFlowEnabled(Boolean standardFlowEnabled) {
        this.standardFlowEnabled = standardFlowEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.implicit_flow_enabled</code>.
     */
    @Override
    public Boolean getImplicitFlowEnabled() {
        return this.implicitFlowEnabled;
    }

    /**
     * Setter for <code>keycloak.client.implicit_flow_enabled</code>.
     */
    @Override
    public Client setImplicitFlowEnabled(Boolean implicitFlowEnabled) {
        this.implicitFlowEnabled = implicitFlowEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.direct_access_grants_enabled</code>.
     */
    @Override
    public Boolean getDirectAccessGrantsEnabled() {
        return this.directAccessGrantsEnabled;
    }

    /**
     * Setter for <code>keycloak.client.direct_access_grants_enabled</code>.
     */
    @Override
    public Client setDirectAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
        this.directAccessGrantsEnabled = directAccessGrantsEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.client.always_display_in_console</code>.
     */
    @Override
    public Boolean getAlwaysDisplayInConsole() {
        return this.alwaysDisplayInConsole;
    }

    /**
     * Setter for <code>keycloak.client.always_display_in_console</code>.
     */
    @Override
    public Client setAlwaysDisplayInConsole(Boolean alwaysDisplayInConsole) {
        this.alwaysDisplayInConsole = alwaysDisplayInConsole;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Client other = (Client) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.fullScopeAllowed == null) {
            if (other.fullScopeAllowed != null)
                return false;
        }
        else if (!this.fullScopeAllowed.equals(other.fullScopeAllowed))
            return false;
        if (this.clientId == null) {
            if (other.clientId != null)
                return false;
        }
        else if (!this.clientId.equals(other.clientId))
            return false;
        if (this.notBefore == null) {
            if (other.notBefore != null)
                return false;
        }
        else if (!this.notBefore.equals(other.notBefore))
            return false;
        if (this.publicClient == null) {
            if (other.publicClient != null)
                return false;
        }
        else if (!this.publicClient.equals(other.publicClient))
            return false;
        if (this.secret == null) {
            if (other.secret != null)
                return false;
        }
        else if (!this.secret.equals(other.secret))
            return false;
        if (this.baseUrl == null) {
            if (other.baseUrl != null)
                return false;
        }
        else if (!this.baseUrl.equals(other.baseUrl))
            return false;
        if (this.bearerOnly == null) {
            if (other.bearerOnly != null)
                return false;
        }
        else if (!this.bearerOnly.equals(other.bearerOnly))
            return false;
        if (this.managementUrl == null) {
            if (other.managementUrl != null)
                return false;
        }
        else if (!this.managementUrl.equals(other.managementUrl))
            return false;
        if (this.surrogateAuthRequired == null) {
            if (other.surrogateAuthRequired != null)
                return false;
        }
        else if (!this.surrogateAuthRequired.equals(other.surrogateAuthRequired))
            return false;
        if (this.realmId == null) {
            if (other.realmId != null)
                return false;
        }
        else if (!this.realmId.equals(other.realmId))
            return false;
        if (this.protocol == null) {
            if (other.protocol != null)
                return false;
        }
        else if (!this.protocol.equals(other.protocol))
            return false;
        if (this.nodeReregTimeout == null) {
            if (other.nodeReregTimeout != null)
                return false;
        }
        else if (!this.nodeReregTimeout.equals(other.nodeReregTimeout))
            return false;
        if (this.frontchannelLogout == null) {
            if (other.frontchannelLogout != null)
                return false;
        }
        else if (!this.frontchannelLogout.equals(other.frontchannelLogout))
            return false;
        if (this.consentRequired == null) {
            if (other.consentRequired != null)
                return false;
        }
        else if (!this.consentRequired.equals(other.consentRequired))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.serviceAccountsEnabled == null) {
            if (other.serviceAccountsEnabled != null)
                return false;
        }
        else if (!this.serviceAccountsEnabled.equals(other.serviceAccountsEnabled))
            return false;
        if (this.clientAuthenticatorType == null) {
            if (other.clientAuthenticatorType != null)
                return false;
        }
        else if (!this.clientAuthenticatorType.equals(other.clientAuthenticatorType))
            return false;
        if (this.rootUrl == null) {
            if (other.rootUrl != null)
                return false;
        }
        else if (!this.rootUrl.equals(other.rootUrl))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.registrationToken == null) {
            if (other.registrationToken != null)
                return false;
        }
        else if (!this.registrationToken.equals(other.registrationToken))
            return false;
        if (this.standardFlowEnabled == null) {
            if (other.standardFlowEnabled != null)
                return false;
        }
        else if (!this.standardFlowEnabled.equals(other.standardFlowEnabled))
            return false;
        if (this.implicitFlowEnabled == null) {
            if (other.implicitFlowEnabled != null)
                return false;
        }
        else if (!this.implicitFlowEnabled.equals(other.implicitFlowEnabled))
            return false;
        if (this.directAccessGrantsEnabled == null) {
            if (other.directAccessGrantsEnabled != null)
                return false;
        }
        else if (!this.directAccessGrantsEnabled.equals(other.directAccessGrantsEnabled))
            return false;
        if (this.alwaysDisplayInConsole == null) {
            if (other.alwaysDisplayInConsole != null)
                return false;
        }
        else if (!this.alwaysDisplayInConsole.equals(other.alwaysDisplayInConsole))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.fullScopeAllowed == null) ? 0 : this.fullScopeAllowed.hashCode());
        result = prime * result + ((this.clientId == null) ? 0 : this.clientId.hashCode());
        result = prime * result + ((this.notBefore == null) ? 0 : this.notBefore.hashCode());
        result = prime * result + ((this.publicClient == null) ? 0 : this.publicClient.hashCode());
        result = prime * result + ((this.secret == null) ? 0 : this.secret.hashCode());
        result = prime * result + ((this.baseUrl == null) ? 0 : this.baseUrl.hashCode());
        result = prime * result + ((this.bearerOnly == null) ? 0 : this.bearerOnly.hashCode());
        result = prime * result + ((this.managementUrl == null) ? 0 : this.managementUrl.hashCode());
        result = prime * result + ((this.surrogateAuthRequired == null) ? 0 : this.surrogateAuthRequired.hashCode());
        result = prime * result + ((this.realmId == null) ? 0 : this.realmId.hashCode());
        result = prime * result + ((this.protocol == null) ? 0 : this.protocol.hashCode());
        result = prime * result + ((this.nodeReregTimeout == null) ? 0 : this.nodeReregTimeout.hashCode());
        result = prime * result + ((this.frontchannelLogout == null) ? 0 : this.frontchannelLogout.hashCode());
        result = prime * result + ((this.consentRequired == null) ? 0 : this.consentRequired.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.serviceAccountsEnabled == null) ? 0 : this.serviceAccountsEnabled.hashCode());
        result = prime * result + ((this.clientAuthenticatorType == null) ? 0 : this.clientAuthenticatorType.hashCode());
        result = prime * result + ((this.rootUrl == null) ? 0 : this.rootUrl.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.registrationToken == null) ? 0 : this.registrationToken.hashCode());
        result = prime * result + ((this.standardFlowEnabled == null) ? 0 : this.standardFlowEnabled.hashCode());
        result = prime * result + ((this.implicitFlowEnabled == null) ? 0 : this.implicitFlowEnabled.hashCode());
        result = prime * result + ((this.directAccessGrantsEnabled == null) ? 0 : this.directAccessGrantsEnabled.hashCode());
        result = prime * result + ((this.alwaysDisplayInConsole == null) ? 0 : this.alwaysDisplayInConsole.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Client (");

        sb.append(id);
        sb.append(", ").append(enabled);
        sb.append(", ").append(fullScopeAllowed);
        sb.append(", ").append(clientId);
        sb.append(", ").append(notBefore);
        sb.append(", ").append(publicClient);
        sb.append(", ").append(secret);
        sb.append(", ").append(baseUrl);
        sb.append(", ").append(bearerOnly);
        sb.append(", ").append(managementUrl);
        sb.append(", ").append(surrogateAuthRequired);
        sb.append(", ").append(realmId);
        sb.append(", ").append(protocol);
        sb.append(", ").append(nodeReregTimeout);
        sb.append(", ").append(frontchannelLogout);
        sb.append(", ").append(consentRequired);
        sb.append(", ").append(name);
        sb.append(", ").append(serviceAccountsEnabled);
        sb.append(", ").append(clientAuthenticatorType);
        sb.append(", ").append(rootUrl);
        sb.append(", ").append(description);
        sb.append(", ").append(registrationToken);
        sb.append(", ").append(standardFlowEnabled);
        sb.append(", ").append(implicitFlowEnabled);
        sb.append(", ").append(directAccessGrantsEnabled);
        sb.append(", ").append(alwaysDisplayInConsole);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IClient from) {
        setId(from.getId());
        setEnabled(from.getEnabled());
        setFullScopeAllowed(from.getFullScopeAllowed());
        setClientId(from.getClientId());
        setNotBefore(from.getNotBefore());
        setPublicClient(from.getPublicClient());
        setSecret(from.getSecret());
        setBaseUrl(from.getBaseUrl());
        setBearerOnly(from.getBearerOnly());
        setManagementUrl(from.getManagementUrl());
        setSurrogateAuthRequired(from.getSurrogateAuthRequired());
        setRealmId(from.getRealmId());
        setProtocol(from.getProtocol());
        setNodeReregTimeout(from.getNodeReregTimeout());
        setFrontchannelLogout(from.getFrontchannelLogout());
        setConsentRequired(from.getConsentRequired());
        setName(from.getName());
        setServiceAccountsEnabled(from.getServiceAccountsEnabled());
        setClientAuthenticatorType(from.getClientAuthenticatorType());
        setRootUrl(from.getRootUrl());
        setDescription(from.getDescription());
        setRegistrationToken(from.getRegistrationToken());
        setStandardFlowEnabled(from.getStandardFlowEnabled());
        setImplicitFlowEnabled(from.getImplicitFlowEnabled());
        setDirectAccessGrantsEnabled(from.getDirectAccessGrantsEnabled());
        setAlwaysDisplayInConsole(from.getAlwaysDisplayInConsole());
    }

    @Override
    public <E extends IClient> E into(E into) {
        into.from(this);
        return into;
    }
}
