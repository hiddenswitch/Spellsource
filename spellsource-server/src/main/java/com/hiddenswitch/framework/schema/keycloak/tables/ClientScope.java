/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientScopeRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientScope extends TableImpl<ClientScopeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.client_scope</code>
     */
    public static final ClientScope CLIENT_SCOPE = new ClientScope();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientScopeRecord> getRecordType() {
        return ClientScopeRecord.class;
    }

    /**
     * The column <code>keycloak.client_scope.id</code>.
     */
    public final TableField<ClientScopeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.client_scope.name</code>.
     */
    public final TableField<ClientScopeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.client_scope.realm_id</code>.
     */
    public final TableField<ClientScopeRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.client_scope.description</code>.
     */
    public final TableField<ClientScopeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.client_scope.protocol</code>.
     */
    public final TableField<ClientScopeRecord, String> PROTOCOL = createField(DSL.name("protocol"), SQLDataType.VARCHAR(255), this, "");

    private ClientScope(Name alias, Table<ClientScopeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientScope(Name alias, Table<ClientScopeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.client_scope</code> table reference
     */
    public ClientScope(String alias) {
        this(DSL.name(alias), CLIENT_SCOPE);
    }

    /**
     * Create an aliased <code>keycloak.client_scope</code> table reference
     */
    public ClientScope(Name alias) {
        this(alias, CLIENT_SCOPE);
    }

    /**
     * Create a <code>keycloak.client_scope</code> table reference
     */
    public ClientScope() {
        this(DSL.name("client_scope"), null);
    }

    public <O extends Record> ClientScope(Table<O> child, ForeignKey<O, ClientScopeRecord> key) {
        super(child, key, CLIENT_SCOPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_REALM_CLSCOPE);
    }

    @Override
    public UniqueKey<ClientScopeRecord> getPrimaryKey() {
        return Keys.PK_CLI_TEMPLATE;
    }

    @Override
    public List<UniqueKey<ClientScopeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_CLI_SCOPE);
    }

    @Override
    public ClientScope as(String alias) {
        return new ClientScope(DSL.name(alias), this);
    }

    @Override
    public ClientScope as(Name alias) {
        return new ClientScope(alias, this);
    }

    @Override
    public ClientScope as(Table<?> alias) {
        return new ClientScope(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientScope rename(String name) {
        return new ClientScope(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientScope rename(Name name) {
        return new ClientScope(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientScope rename(Table<?> name) {
        return new ClientScope(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
