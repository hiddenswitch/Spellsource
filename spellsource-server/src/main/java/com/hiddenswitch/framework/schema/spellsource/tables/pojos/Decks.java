/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.pojos;


import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.IDecks;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Decks implements VertxPojo, IDecks {

    private static final long serialVersionUID = 1L;

    private String id;
    private String createdBy;
    private String lastEditedBy;
    private String name;
    private String heroClass;
    private Boolean trashed;
    private String format;
    private Integer deckType;
    private Boolean isPremade;
    private Boolean permittedToDuplicate;

    public Decks() {}

    public Decks(IDecks value) {
        this.id = value.getId();
        this.createdBy = value.getCreatedBy();
        this.lastEditedBy = value.getLastEditedBy();
        this.name = value.getName();
        this.heroClass = value.getHeroClass();
        this.trashed = value.getTrashed();
        this.format = value.getFormat();
        this.deckType = value.getDeckType();
        this.isPremade = value.getIsPremade();
        this.permittedToDuplicate = value.getPermittedToDuplicate();
    }

    public Decks(
        String id,
        String createdBy,
        String lastEditedBy,
        String name,
        String heroClass,
        Boolean trashed,
        String format,
        Integer deckType,
        Boolean isPremade,
        Boolean permittedToDuplicate
    ) {
        this.id = id;
        this.createdBy = createdBy;
        this.lastEditedBy = lastEditedBy;
        this.name = name;
        this.heroClass = heroClass;
        this.trashed = trashed;
        this.format = format;
        this.deckType = deckType;
        this.isPremade = isPremade;
        this.permittedToDuplicate = permittedToDuplicate;
    }

        public Decks(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>spellsource.decks.id</code>.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>spellsource.decks.id</code>.
     */
    @Override
    public Decks setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.created_by</code>. who created this
     * deck originally
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>spellsource.decks.created_by</code>. who created this
     * deck originally
     */
    @Override
    public Decks setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.last_edited_by</code>. who last edited
     * this deck
     */
    @Override
    public String getLastEditedBy() {
        return this.lastEditedBy;
    }

    /**
     * Setter for <code>spellsource.decks.last_edited_by</code>. who last edited
     * this deck
     */
    @Override
    public Decks setLastEditedBy(String lastEditedBy) {
        this.lastEditedBy = lastEditedBy;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.name</code>.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>spellsource.decks.name</code>.
     */
    @Override
    public Decks setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.hero_class</code>.
     */
    @Override
    public String getHeroClass() {
        return this.heroClass;
    }

    /**
     * Setter for <code>spellsource.decks.hero_class</code>.
     */
    @Override
    public Decks setHeroClass(String heroClass) {
        this.heroClass = heroClass;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.trashed</code>.
     */
    @Override
    public Boolean getTrashed() {
        return this.trashed;
    }

    /**
     * Setter for <code>spellsource.decks.trashed</code>.
     */
    @Override
    public Decks setTrashed(Boolean trashed) {
        this.trashed = trashed;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.format</code>.
     */
    @Override
    public String getFormat() {
        return this.format;
    }

    /**
     * Setter for <code>spellsource.decks.format</code>.
     */
    @Override
    public Decks setFormat(String format) {
        this.format = format;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.deck_type</code>.
     */
    @Override
    public Integer getDeckType() {
        return this.deckType;
    }

    /**
     * Setter for <code>spellsource.decks.deck_type</code>.
     */
    @Override
    public Decks setDeckType(Integer deckType) {
        this.deckType = deckType;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.is_premade</code>. premades always
     * shared with all users by application logic
     */
    @Override
    public Boolean getIsPremade() {
        return this.isPremade;
    }

    /**
     * Setter for <code>spellsource.decks.is_premade</code>. premades always
     * shared with all users by application logic
     */
    @Override
    public Decks setIsPremade(Boolean isPremade) {
        this.isPremade = isPremade;
        return this;
    }

    /**
     * Getter for <code>spellsource.decks.permitted_to_duplicate</code>.
     */
    @Override
    public Boolean getPermittedToDuplicate() {
        return this.permittedToDuplicate;
    }

    /**
     * Setter for <code>spellsource.decks.permitted_to_duplicate</code>.
     */
    @Override
    public Decks setPermittedToDuplicate(Boolean permittedToDuplicate) {
        this.permittedToDuplicate = permittedToDuplicate;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Decks other = (Decks) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.lastEditedBy == null) {
            if (other.lastEditedBy != null)
                return false;
        }
        else if (!this.lastEditedBy.equals(other.lastEditedBy))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.heroClass == null) {
            if (other.heroClass != null)
                return false;
        }
        else if (!this.heroClass.equals(other.heroClass))
            return false;
        if (this.trashed == null) {
            if (other.trashed != null)
                return false;
        }
        else if (!this.trashed.equals(other.trashed))
            return false;
        if (this.format == null) {
            if (other.format != null)
                return false;
        }
        else if (!this.format.equals(other.format))
            return false;
        if (this.deckType == null) {
            if (other.deckType != null)
                return false;
        }
        else if (!this.deckType.equals(other.deckType))
            return false;
        if (this.isPremade == null) {
            if (other.isPremade != null)
                return false;
        }
        else if (!this.isPremade.equals(other.isPremade))
            return false;
        if (this.permittedToDuplicate == null) {
            if (other.permittedToDuplicate != null)
                return false;
        }
        else if (!this.permittedToDuplicate.equals(other.permittedToDuplicate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastEditedBy == null) ? 0 : this.lastEditedBy.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.heroClass == null) ? 0 : this.heroClass.hashCode());
        result = prime * result + ((this.trashed == null) ? 0 : this.trashed.hashCode());
        result = prime * result + ((this.format == null) ? 0 : this.format.hashCode());
        result = prime * result + ((this.deckType == null) ? 0 : this.deckType.hashCode());
        result = prime * result + ((this.isPremade == null) ? 0 : this.isPremade.hashCode());
        result = prime * result + ((this.permittedToDuplicate == null) ? 0 : this.permittedToDuplicate.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Decks (");

        sb.append(id);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastEditedBy);
        sb.append(", ").append(name);
        sb.append(", ").append(heroClass);
        sb.append(", ").append(trashed);
        sb.append(", ").append(format);
        sb.append(", ").append(deckType);
        sb.append(", ").append(isPremade);
        sb.append(", ").append(permittedToDuplicate);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDecks from) {
        setId(from.getId());
        setCreatedBy(from.getCreatedBy());
        setLastEditedBy(from.getLastEditedBy());
        setName(from.getName());
        setHeroClass(from.getHeroClass());
        setTrashed(from.getTrashed());
        setFormat(from.getFormat());
        setDeckType(from.getDeckType());
        setIsPremade(from.getIsPremade());
        setPermittedToDuplicate(from.getPermittedToDuplicate());
    }

    @Override
    public <E extends IDecks> E into(E into) {
        into.from(this);
        return into;
    }
}
