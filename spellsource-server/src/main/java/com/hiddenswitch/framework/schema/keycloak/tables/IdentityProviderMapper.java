/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.IdentityProviderMapperRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdentityProviderMapper extends TableImpl<IdentityProviderMapperRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.identity_provider_mapper</code>
     */
    public static final IdentityProviderMapper IDENTITY_PROVIDER_MAPPER = new IdentityProviderMapper();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdentityProviderMapperRecord> getRecordType() {
        return IdentityProviderMapperRecord.class;
    }

    /**
     * The column <code>keycloak.identity_provider_mapper.id</code>.
     */
    public final TableField<IdentityProviderMapperRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.identity_provider_mapper.name</code>.
     */
    public final TableField<IdentityProviderMapperRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.identity_provider_mapper.idp_alias</code>.
     */
    public final TableField<IdentityProviderMapperRecord, String> IDP_ALIAS = createField(DSL.name("idp_alias"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.identity_provider_mapper.idp_mapper_name</code>.
     */
    public final TableField<IdentityProviderMapperRecord, String> IDP_MAPPER_NAME = createField(DSL.name("idp_mapper_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.identity_provider_mapper.realm_id</code>.
     */
    public final TableField<IdentityProviderMapperRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private IdentityProviderMapper(Name alias, Table<IdentityProviderMapperRecord> aliased) {
        this(alias, aliased, null);
    }

    private IdentityProviderMapper(Name alias, Table<IdentityProviderMapperRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.identity_provider_mapper</code> table
     * reference
     */
    public IdentityProviderMapper(String alias) {
        this(DSL.name(alias), IDENTITY_PROVIDER_MAPPER);
    }

    /**
     * Create an aliased <code>keycloak.identity_provider_mapper</code> table
     * reference
     */
    public IdentityProviderMapper(Name alias) {
        this(alias, IDENTITY_PROVIDER_MAPPER);
    }

    /**
     * Create a <code>keycloak.identity_provider_mapper</code> table reference
     */
    public IdentityProviderMapper() {
        this(DSL.name("identity_provider_mapper"), null);
    }

    public <O extends Record> IdentityProviderMapper(Table<O> child, ForeignKey<O, IdentityProviderMapperRecord> key) {
        super(child, key, IDENTITY_PROVIDER_MAPPER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ID_PROV_MAPP_REALM);
    }

    @Override
    public UniqueKey<IdentityProviderMapperRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_IDPM;
    }

    @Override
    public List<ForeignKey<IdentityProviderMapperRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IDENTITY_PROVIDER_MAPPER__FK_IDPM_REALM);
    }

    private transient Realm _realm;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.IDENTITY_PROVIDER_MAPPER__FK_IDPM_REALM);

        return _realm;
    }

    @Override
    public IdentityProviderMapper as(String alias) {
        return new IdentityProviderMapper(DSL.name(alias), this);
    }

    @Override
    public IdentityProviderMapper as(Name alias) {
        return new IdentityProviderMapper(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentityProviderMapper rename(String name) {
        return new IdentityProviderMapper(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentityProviderMapper rename(Name name) {
        return new IdentityProviderMapper(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
