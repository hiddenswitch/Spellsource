/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.daos;


import com.hiddenswitch.framework.schema.keycloak.tables.IdentityProvider;
import com.hiddenswitch.framework.schema.keycloak.tables.records.IdentityProviderRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdentityProviderDao extends AbstractReactiveVertxDAO<IdentityProviderRecord, com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider, String, Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>>, Future<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<IdentityProviderRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider,String> {

        /**
     * @param configuration Used for rendering, so only SQLDialect must be set
     * and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query
     * execution
     */
        public IdentityProviderDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
                super(IdentityProvider.IDENTITY_PROVIDER, com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider.class, new ReactiveClassicQueryExecutor<IdentityProviderRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider,String>(configuration,delegate,com.hiddenswitch.framework.schema.keycloak.tables.mappers.RowMappers.getIdentityProviderMapper()));
        }

        @Override
        protected String getId(com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider object) {
                return object.getInternalId();
        }

        /**
     * Find records that have <code>enabled IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByEnabled(Collection<Boolean> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.ENABLED.in(values));
        }

        /**
     * Find records that have <code>enabled IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByEnabled(Collection<Boolean> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.ENABLED.in(values),limit);
        }

        /**
     * Find records that have <code>provider_alias IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByProviderAlias(Collection<String> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.PROVIDER_ALIAS.in(values));
        }

        /**
     * Find records that have <code>provider_alias IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByProviderAlias(Collection<String> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.PROVIDER_ALIAS.in(values),limit);
        }

        /**
     * Find records that have <code>provider_id IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByProviderId(Collection<String> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.PROVIDER_ID.in(values));
        }

        /**
     * Find records that have <code>provider_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByProviderId(Collection<String> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.PROVIDER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>store_token IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByStoreToken(Collection<Boolean> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.STORE_TOKEN.in(values));
        }

        /**
     * Find records that have <code>store_token IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByStoreToken(Collection<Boolean> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.STORE_TOKEN.in(values),limit);
        }

        /**
     * Find records that have <code>authenticate_by_default IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByAuthenticateByDefault(Collection<Boolean> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.AUTHENTICATE_BY_DEFAULT.in(values));
        }

        /**
     * Find records that have <code>authenticate_by_default IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByAuthenticateByDefault(Collection<Boolean> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.AUTHENTICATE_BY_DEFAULT.in(values),limit);
        }

        /**
     * Find records that have <code>realm_id IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByRealmId(Collection<String> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.REALM_ID.in(values));
        }

        /**
     * Find records that have <code>realm_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByRealmId(Collection<String> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.REALM_ID.in(values),limit);
        }

        /**
     * Find records that have <code>add_token_role IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByAddTokenRole(Collection<Boolean> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.ADD_TOKEN_ROLE.in(values));
        }

        /**
     * Find records that have <code>add_token_role IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByAddTokenRole(Collection<Boolean> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.ADD_TOKEN_ROLE.in(values),limit);
        }

        /**
     * Find records that have <code>trust_email IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByTrustEmail(Collection<Boolean> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.TRUST_EMAIL.in(values));
        }

        /**
     * Find records that have <code>trust_email IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByTrustEmail(Collection<Boolean> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.TRUST_EMAIL.in(values),limit);
        }

        /**
     * Find records that have <code>first_broker_login_flow_id IN
     * (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByFirstBrokerLoginFlowId(Collection<String> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.FIRST_BROKER_LOGIN_FLOW_ID.in(values));
        }

        /**
     * Find records that have <code>first_broker_login_flow_id IN
     * (values)</code> asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByFirstBrokerLoginFlowId(Collection<String> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.FIRST_BROKER_LOGIN_FLOW_ID.in(values),limit);
        }

        /**
     * Find records that have <code>post_broker_login_flow_id IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByPostBrokerLoginFlowId(Collection<String> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.POST_BROKER_LOGIN_FLOW_ID.in(values));
        }

        /**
     * Find records that have <code>post_broker_login_flow_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByPostBrokerLoginFlowId(Collection<String> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.POST_BROKER_LOGIN_FLOW_ID.in(values),limit);
        }

        /**
     * Find records that have <code>provider_display_name IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByProviderDisplayName(Collection<String> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.PROVIDER_DISPLAY_NAME.in(values));
        }

        /**
     * Find records that have <code>provider_display_name IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByProviderDisplayName(Collection<String> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.PROVIDER_DISPLAY_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>link_only IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByLinkOnly(Collection<Boolean> values) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.LINK_ONLY.in(values));
        }

        /**
     * Find records that have <code>link_only IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider>> findManyByLinkOnly(Collection<Boolean> values, int limit) {
                return findManyByCondition(IdentityProvider.IDENTITY_PROVIDER.LINK_ONLY.in(values),limit);
        }

        @Override
        public ReactiveClassicQueryExecutor<IdentityProviderRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider,String> queryExecutor(){
                return (ReactiveClassicQueryExecutor<IdentityProviderRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.IdentityProvider,String>) super.queryExecutor();
        }
}
