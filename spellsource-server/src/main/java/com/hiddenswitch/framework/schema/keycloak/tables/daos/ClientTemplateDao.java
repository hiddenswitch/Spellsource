/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.daos;


import com.hiddenswitch.framework.schema.keycloak.tables.ClientTemplate;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientTemplateRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientTemplateDao extends AbstractReactiveVertxDAO<ClientTemplateRecord, com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate, String, Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>>, Future<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<ClientTemplateRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate,String> {

        /**
     * @param configuration Used for rendering, so only SQLDialect must be set
     * and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query
     * execution
     */
        public ClientTemplateDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
                super(ClientTemplate.CLIENT_TEMPLATE, com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate.class, new ReactiveClassicQueryExecutor<ClientTemplateRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate,String>(configuration,delegate,com.hiddenswitch.framework.schema.keycloak.tables.mappers.RowMappers.getClientTemplateMapper()));
        }

        @Override
        protected String getId(com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate object) {
                return object.getId();
        }

        /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByName(Collection<String> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.NAME.in(values));
        }

        /**
     * Find records that have <code>name IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>realm_id IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByRealmId(Collection<String> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.REALM_ID.in(values));
        }

        /**
     * Find records that have <code>realm_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByRealmId(Collection<String> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.REALM_ID.in(values),limit);
        }

        /**
     * Find records that have <code>description IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByDescription(Collection<String> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.DESCRIPTION.in(values));
        }

        /**
     * Find records that have <code>description IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByDescription(Collection<String> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.DESCRIPTION.in(values),limit);
        }

        /**
     * Find records that have <code>protocol IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByProtocol(Collection<String> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.PROTOCOL.in(values));
        }

        /**
     * Find records that have <code>protocol IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByProtocol(Collection<String> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.PROTOCOL.in(values),limit);
        }

        /**
     * Find records that have <code>full_scope_allowed IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByFullScopeAllowed(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.FULL_SCOPE_ALLOWED.in(values));
        }

        /**
     * Find records that have <code>full_scope_allowed IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByFullScopeAllowed(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.FULL_SCOPE_ALLOWED.in(values),limit);
        }

        /**
     * Find records that have <code>consent_required IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByConsentRequired(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.CONSENT_REQUIRED.in(values));
        }

        /**
     * Find records that have <code>consent_required IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByConsentRequired(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.CONSENT_REQUIRED.in(values),limit);
        }

        /**
     * Find records that have <code>standard_flow_enabled IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByStandardFlowEnabled(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.STANDARD_FLOW_ENABLED.in(values));
        }

        /**
     * Find records that have <code>standard_flow_enabled IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByStandardFlowEnabled(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.STANDARD_FLOW_ENABLED.in(values),limit);
        }

        /**
     * Find records that have <code>implicit_flow_enabled IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByImplicitFlowEnabled(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.IMPLICIT_FLOW_ENABLED.in(values));
        }

        /**
     * Find records that have <code>implicit_flow_enabled IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByImplicitFlowEnabled(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.IMPLICIT_FLOW_ENABLED.in(values),limit);
        }

        /**
     * Find records that have <code>direct_access_grants_enabled IN
     * (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByDirectAccessGrantsEnabled(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.DIRECT_ACCESS_GRANTS_ENABLED.in(values));
        }

        /**
     * Find records that have <code>direct_access_grants_enabled IN
     * (values)</code> asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByDirectAccessGrantsEnabled(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.DIRECT_ACCESS_GRANTS_ENABLED.in(values),limit);
        }

        /**
     * Find records that have <code>service_accounts_enabled IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByServiceAccountsEnabled(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.SERVICE_ACCOUNTS_ENABLED.in(values));
        }

        /**
     * Find records that have <code>service_accounts_enabled IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByServiceAccountsEnabled(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.SERVICE_ACCOUNTS_ENABLED.in(values),limit);
        }

        /**
     * Find records that have <code>frontchannel_logout IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByFrontchannelLogout(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.FRONTCHANNEL_LOGOUT.in(values));
        }

        /**
     * Find records that have <code>frontchannel_logout IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByFrontchannelLogout(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.FRONTCHANNEL_LOGOUT.in(values),limit);
        }

        /**
     * Find records that have <code>bearer_only IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByBearerOnly(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.BEARER_ONLY.in(values));
        }

        /**
     * Find records that have <code>bearer_only IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByBearerOnly(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.BEARER_ONLY.in(values),limit);
        }

        /**
     * Find records that have <code>public_client IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByPublicClient(Collection<Boolean> values) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.PUBLIC_CLIENT.in(values));
        }

        /**
     * Find records that have <code>public_client IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate>> findManyByPublicClient(Collection<Boolean> values, int limit) {
                return findManyByCondition(ClientTemplate.CLIENT_TEMPLATE.PUBLIC_CLIENT.in(values),limit);
        }

        @Override
        public ReactiveClassicQueryExecutor<ClientTemplateRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate,String> queryExecutor(){
                return (ReactiveClassicQueryExecutor<ClientTemplateRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.ClientTemplate,String>) super.queryExecutor();
        }
}
