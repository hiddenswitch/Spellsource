/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.HardRemovalCardsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function1;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HardRemovalCards extends TableImpl<HardRemovalCardsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.hard_removal_cards</code>
     */
    public static final HardRemovalCards HARD_REMOVAL_CARDS = new HardRemovalCards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HardRemovalCardsRecord> getRecordType() {
        return HardRemovalCardsRecord.class;
    }

    /**
     * The column <code>spellsource.hard_removal_cards.card_id</code>.
     */
    public final TableField<HardRemovalCardsRecord, String> CARD_ID = createField(DSL.name("card_id"), SQLDataType.CLOB.nullable(false), this, "");

    private HardRemovalCards(Name alias, Table<HardRemovalCardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private HardRemovalCards(Name alias, Table<HardRemovalCardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.hard_removal_cards</code> table
     * reference
     */
    public HardRemovalCards(String alias) {
        this(DSL.name(alias), HARD_REMOVAL_CARDS);
    }

    /**
     * Create an aliased <code>spellsource.hard_removal_cards</code> table
     * reference
     */
    public HardRemovalCards(Name alias) {
        this(alias, HARD_REMOVAL_CARDS);
    }

    /**
     * Create a <code>spellsource.hard_removal_cards</code> table reference
     */
    public HardRemovalCards() {
        this(DSL.name("hard_removal_cards"), null);
    }

    public <O extends Record> HardRemovalCards(Table<O> child, ForeignKey<O, HardRemovalCardsRecord> key) {
        super(child, key, HARD_REMOVAL_CARDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public UniqueKey<HardRemovalCardsRecord> getPrimaryKey() {
        return Keys.HARD_REMOVAL_CARDS_PKEY;
    }

    @Override
    public List<ForeignKey<HardRemovalCardsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HARD_REMOVAL_CARDS__HARD_REMOVAL_CARDS_CARD_ID_FKEY);
    }

    private transient Cards _cards;

    /**
     * Get the implicit join path to the <code>spellsource.cards</code> table.
     */
    public Cards cards() {
        if (_cards == null)
            _cards = new Cards(this, Keys.HARD_REMOVAL_CARDS__HARD_REMOVAL_CARDS_CARD_ID_FKEY);

        return _cards;
    }

    @Override
    public HardRemovalCards as(String alias) {
        return new HardRemovalCards(DSL.name(alias), this);
    }

    @Override
    public HardRemovalCards as(Name alias) {
        return new HardRemovalCards(alias, this);
    }

    @Override
    public HardRemovalCards as(Table<?> alias) {
        return new HardRemovalCards(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HardRemovalCards rename(String name) {
        return new HardRemovalCards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HardRemovalCards rename(Name name) {
        return new HardRemovalCards(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HardRemovalCards rename(Table<?> name) {
        return new HardRemovalCards(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
