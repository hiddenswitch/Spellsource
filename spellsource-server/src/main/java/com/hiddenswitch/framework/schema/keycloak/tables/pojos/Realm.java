/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IRealm;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Realm implements VertxPojo, IRealm {

    private static final long serialVersionUID = 1L;

    private String id;
    private Integer accessCodeLifespan;
    private Integer userActionLifespan;
    private Integer accessTokenLifespan;
    private String accountTheme;
    private String adminTheme;
    private String emailTheme;
    private Boolean enabled;
    private Boolean eventsEnabled;
    private Long eventsExpiration;
    private String loginTheme;
    private String name;
    private Integer notBefore;
    private String passwordPolicy;
    private Boolean registrationAllowed;
    private Boolean rememberMe;
    private Boolean resetPasswordAllowed;
    private Boolean social;
    private String sslRequired;
    private Integer ssoIdleTimeout;
    private Integer ssoMaxLifespan;
    private Boolean updateProfileOnSocLogin;
    private Boolean verifyEmail;
    private String masterAdminClient;
    private Integer loginLifespan;
    private Boolean internationalizationEnabled;
    private String defaultLocale;
    private Boolean regEmailAsUsername;
    private Boolean adminEventsEnabled;
    private Boolean adminEventsDetailsEnabled;
    private Boolean editUsernameAllowed;
    private Integer otpPolicyCounter;
    private Integer otpPolicyWindow;
    private Integer otpPolicyPeriod;
    private Integer otpPolicyDigits;
    private String otpPolicyAlg;
    private String otpPolicyType;
    private String browserFlow;
    private String registrationFlow;
    private String directGrantFlow;
    private String resetCredentialsFlow;
    private String clientAuthFlow;
    private Integer offlineSessionIdleTimeout;
    private Boolean revokeRefreshToken;
    private Integer accessTokenLifeImplicit;
    private Boolean loginWithEmailAllowed;
    private Boolean duplicateEmailsAllowed;
    private String dockerAuthFlow;
    private Integer refreshTokenMaxReuse;
    private Boolean allowUserManagedAccess;
    private Integer ssoMaxLifespanRememberMe;
    private Integer ssoIdleTimeoutRememberMe;
    private String defaultRole;

    public Realm() {}

    public Realm(IRealm value) {
        this.id = value.getId();
        this.accessCodeLifespan = value.getAccessCodeLifespan();
        this.userActionLifespan = value.getUserActionLifespan();
        this.accessTokenLifespan = value.getAccessTokenLifespan();
        this.accountTheme = value.getAccountTheme();
        this.adminTheme = value.getAdminTheme();
        this.emailTheme = value.getEmailTheme();
        this.enabled = value.getEnabled();
        this.eventsEnabled = value.getEventsEnabled();
        this.eventsExpiration = value.getEventsExpiration();
        this.loginTheme = value.getLoginTheme();
        this.name = value.getName();
        this.notBefore = value.getNotBefore();
        this.passwordPolicy = value.getPasswordPolicy();
        this.registrationAllowed = value.getRegistrationAllowed();
        this.rememberMe = value.getRememberMe();
        this.resetPasswordAllowed = value.getResetPasswordAllowed();
        this.social = value.getSocial();
        this.sslRequired = value.getSslRequired();
        this.ssoIdleTimeout = value.getSsoIdleTimeout();
        this.ssoMaxLifespan = value.getSsoMaxLifespan();
        this.updateProfileOnSocLogin = value.getUpdateProfileOnSocLogin();
        this.verifyEmail = value.getVerifyEmail();
        this.masterAdminClient = value.getMasterAdminClient();
        this.loginLifespan = value.getLoginLifespan();
        this.internationalizationEnabled = value.getInternationalizationEnabled();
        this.defaultLocale = value.getDefaultLocale();
        this.regEmailAsUsername = value.getRegEmailAsUsername();
        this.adminEventsEnabled = value.getAdminEventsEnabled();
        this.adminEventsDetailsEnabled = value.getAdminEventsDetailsEnabled();
        this.editUsernameAllowed = value.getEditUsernameAllowed();
        this.otpPolicyCounter = value.getOtpPolicyCounter();
        this.otpPolicyWindow = value.getOtpPolicyWindow();
        this.otpPolicyPeriod = value.getOtpPolicyPeriod();
        this.otpPolicyDigits = value.getOtpPolicyDigits();
        this.otpPolicyAlg = value.getOtpPolicyAlg();
        this.otpPolicyType = value.getOtpPolicyType();
        this.browserFlow = value.getBrowserFlow();
        this.registrationFlow = value.getRegistrationFlow();
        this.directGrantFlow = value.getDirectGrantFlow();
        this.resetCredentialsFlow = value.getResetCredentialsFlow();
        this.clientAuthFlow = value.getClientAuthFlow();
        this.offlineSessionIdleTimeout = value.getOfflineSessionIdleTimeout();
        this.revokeRefreshToken = value.getRevokeRefreshToken();
        this.accessTokenLifeImplicit = value.getAccessTokenLifeImplicit();
        this.loginWithEmailAllowed = value.getLoginWithEmailAllowed();
        this.duplicateEmailsAllowed = value.getDuplicateEmailsAllowed();
        this.dockerAuthFlow = value.getDockerAuthFlow();
        this.refreshTokenMaxReuse = value.getRefreshTokenMaxReuse();
        this.allowUserManagedAccess = value.getAllowUserManagedAccess();
        this.ssoMaxLifespanRememberMe = value.getSsoMaxLifespanRememberMe();
        this.ssoIdleTimeoutRememberMe = value.getSsoIdleTimeoutRememberMe();
        this.defaultRole = value.getDefaultRole();
    }

    public Realm(
        String id,
        Integer accessCodeLifespan,
        Integer userActionLifespan,
        Integer accessTokenLifespan,
        String accountTheme,
        String adminTheme,
        String emailTheme,
        Boolean enabled,
        Boolean eventsEnabled,
        Long eventsExpiration,
        String loginTheme,
        String name,
        Integer notBefore,
        String passwordPolicy,
        Boolean registrationAllowed,
        Boolean rememberMe,
        Boolean resetPasswordAllowed,
        Boolean social,
        String sslRequired,
        Integer ssoIdleTimeout,
        Integer ssoMaxLifespan,
        Boolean updateProfileOnSocLogin,
        Boolean verifyEmail,
        String masterAdminClient,
        Integer loginLifespan,
        Boolean internationalizationEnabled,
        String defaultLocale,
        Boolean regEmailAsUsername,
        Boolean adminEventsEnabled,
        Boolean adminEventsDetailsEnabled,
        Boolean editUsernameAllowed,
        Integer otpPolicyCounter,
        Integer otpPolicyWindow,
        Integer otpPolicyPeriod,
        Integer otpPolicyDigits,
        String otpPolicyAlg,
        String otpPolicyType,
        String browserFlow,
        String registrationFlow,
        String directGrantFlow,
        String resetCredentialsFlow,
        String clientAuthFlow,
        Integer offlineSessionIdleTimeout,
        Boolean revokeRefreshToken,
        Integer accessTokenLifeImplicit,
        Boolean loginWithEmailAllowed,
        Boolean duplicateEmailsAllowed,
        String dockerAuthFlow,
        Integer refreshTokenMaxReuse,
        Boolean allowUserManagedAccess,
        Integer ssoMaxLifespanRememberMe,
        Integer ssoIdleTimeoutRememberMe,
        String defaultRole
    ) {
        this.id = id;
        this.accessCodeLifespan = accessCodeLifespan;
        this.userActionLifespan = userActionLifespan;
        this.accessTokenLifespan = accessTokenLifespan;
        this.accountTheme = accountTheme;
        this.adminTheme = adminTheme;
        this.emailTheme = emailTheme;
        this.enabled = enabled;
        this.eventsEnabled = eventsEnabled;
        this.eventsExpiration = eventsExpiration;
        this.loginTheme = loginTheme;
        this.name = name;
        this.notBefore = notBefore;
        this.passwordPolicy = passwordPolicy;
        this.registrationAllowed = registrationAllowed;
        this.rememberMe = rememberMe;
        this.resetPasswordAllowed = resetPasswordAllowed;
        this.social = social;
        this.sslRequired = sslRequired;
        this.ssoIdleTimeout = ssoIdleTimeout;
        this.ssoMaxLifespan = ssoMaxLifespan;
        this.updateProfileOnSocLogin = updateProfileOnSocLogin;
        this.verifyEmail = verifyEmail;
        this.masterAdminClient = masterAdminClient;
        this.loginLifespan = loginLifespan;
        this.internationalizationEnabled = internationalizationEnabled;
        this.defaultLocale = defaultLocale;
        this.regEmailAsUsername = regEmailAsUsername;
        this.adminEventsEnabled = adminEventsEnabled;
        this.adminEventsDetailsEnabled = adminEventsDetailsEnabled;
        this.editUsernameAllowed = editUsernameAllowed;
        this.otpPolicyCounter = otpPolicyCounter;
        this.otpPolicyWindow = otpPolicyWindow;
        this.otpPolicyPeriod = otpPolicyPeriod;
        this.otpPolicyDigits = otpPolicyDigits;
        this.otpPolicyAlg = otpPolicyAlg;
        this.otpPolicyType = otpPolicyType;
        this.browserFlow = browserFlow;
        this.registrationFlow = registrationFlow;
        this.directGrantFlow = directGrantFlow;
        this.resetCredentialsFlow = resetCredentialsFlow;
        this.clientAuthFlow = clientAuthFlow;
        this.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
        this.revokeRefreshToken = revokeRefreshToken;
        this.accessTokenLifeImplicit = accessTokenLifeImplicit;
        this.loginWithEmailAllowed = loginWithEmailAllowed;
        this.duplicateEmailsAllowed = duplicateEmailsAllowed;
        this.dockerAuthFlow = dockerAuthFlow;
        this.refreshTokenMaxReuse = refreshTokenMaxReuse;
        this.allowUserManagedAccess = allowUserManagedAccess;
        this.ssoMaxLifespanRememberMe = ssoMaxLifespanRememberMe;
        this.ssoIdleTimeoutRememberMe = ssoIdleTimeoutRememberMe;
        this.defaultRole = defaultRole;
    }

        public Realm(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>keycloak.realm.id</code>.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>keycloak.realm.id</code>.
     */
    @Override
    public Realm setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.access_code_lifespan</code>.
     */
    @Override
    public Integer getAccessCodeLifespan() {
        return this.accessCodeLifespan;
    }

    /**
     * Setter for <code>keycloak.realm.access_code_lifespan</code>.
     */
    @Override
    public Realm setAccessCodeLifespan(Integer accessCodeLifespan) {
        this.accessCodeLifespan = accessCodeLifespan;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.user_action_lifespan</code>.
     */
    @Override
    public Integer getUserActionLifespan() {
        return this.userActionLifespan;
    }

    /**
     * Setter for <code>keycloak.realm.user_action_lifespan</code>.
     */
    @Override
    public Realm setUserActionLifespan(Integer userActionLifespan) {
        this.userActionLifespan = userActionLifespan;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.access_token_lifespan</code>.
     */
    @Override
    public Integer getAccessTokenLifespan() {
        return this.accessTokenLifespan;
    }

    /**
     * Setter for <code>keycloak.realm.access_token_lifespan</code>.
     */
    @Override
    public Realm setAccessTokenLifespan(Integer accessTokenLifespan) {
        this.accessTokenLifespan = accessTokenLifespan;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.account_theme</code>.
     */
    @Override
    public String getAccountTheme() {
        return this.accountTheme;
    }

    /**
     * Setter for <code>keycloak.realm.account_theme</code>.
     */
    @Override
    public Realm setAccountTheme(String accountTheme) {
        this.accountTheme = accountTheme;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.admin_theme</code>.
     */
    @Override
    public String getAdminTheme() {
        return this.adminTheme;
    }

    /**
     * Setter for <code>keycloak.realm.admin_theme</code>.
     */
    @Override
    public Realm setAdminTheme(String adminTheme) {
        this.adminTheme = adminTheme;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.email_theme</code>.
     */
    @Override
    public String getEmailTheme() {
        return this.emailTheme;
    }

    /**
     * Setter for <code>keycloak.realm.email_theme</code>.
     */
    @Override
    public Realm setEmailTheme(String emailTheme) {
        this.emailTheme = emailTheme;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.enabled</code>.
     */
    @Override
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Setter for <code>keycloak.realm.enabled</code>.
     */
    @Override
    public Realm setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.events_enabled</code>.
     */
    @Override
    public Boolean getEventsEnabled() {
        return this.eventsEnabled;
    }

    /**
     * Setter for <code>keycloak.realm.events_enabled</code>.
     */
    @Override
    public Realm setEventsEnabled(Boolean eventsEnabled) {
        this.eventsEnabled = eventsEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.events_expiration</code>.
     */
    @Override
    public Long getEventsExpiration() {
        return this.eventsExpiration;
    }

    /**
     * Setter for <code>keycloak.realm.events_expiration</code>.
     */
    @Override
    public Realm setEventsExpiration(Long eventsExpiration) {
        this.eventsExpiration = eventsExpiration;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.login_theme</code>.
     */
    @Override
    public String getLoginTheme() {
        return this.loginTheme;
    }

    /**
     * Setter for <code>keycloak.realm.login_theme</code>.
     */
    @Override
    public Realm setLoginTheme(String loginTheme) {
        this.loginTheme = loginTheme;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.name</code>.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>keycloak.realm.name</code>.
     */
    @Override
    public Realm setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.not_before</code>.
     */
    @Override
    public Integer getNotBefore() {
        return this.notBefore;
    }

    /**
     * Setter for <code>keycloak.realm.not_before</code>.
     */
    @Override
    public Realm setNotBefore(Integer notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.password_policy</code>.
     */
    @Override
    public String getPasswordPolicy() {
        return this.passwordPolicy;
    }

    /**
     * Setter for <code>keycloak.realm.password_policy</code>.
     */
    @Override
    public Realm setPasswordPolicy(String passwordPolicy) {
        this.passwordPolicy = passwordPolicy;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.registration_allowed</code>.
     */
    @Override
    public Boolean getRegistrationAllowed() {
        return this.registrationAllowed;
    }

    /**
     * Setter for <code>keycloak.realm.registration_allowed</code>.
     */
    @Override
    public Realm setRegistrationAllowed(Boolean registrationAllowed) {
        this.registrationAllowed = registrationAllowed;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.remember_me</code>.
     */
    @Override
    public Boolean getRememberMe() {
        return this.rememberMe;
    }

    /**
     * Setter for <code>keycloak.realm.remember_me</code>.
     */
    @Override
    public Realm setRememberMe(Boolean rememberMe) {
        this.rememberMe = rememberMe;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.reset_password_allowed</code>.
     */
    @Override
    public Boolean getResetPasswordAllowed() {
        return this.resetPasswordAllowed;
    }

    /**
     * Setter for <code>keycloak.realm.reset_password_allowed</code>.
     */
    @Override
    public Realm setResetPasswordAllowed(Boolean resetPasswordAllowed) {
        this.resetPasswordAllowed = resetPasswordAllowed;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.social</code>.
     */
    @Override
    public Boolean getSocial() {
        return this.social;
    }

    /**
     * Setter for <code>keycloak.realm.social</code>.
     */
    @Override
    public Realm setSocial(Boolean social) {
        this.social = social;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.ssl_required</code>.
     */
    @Override
    public String getSslRequired() {
        return this.sslRequired;
    }

    /**
     * Setter for <code>keycloak.realm.ssl_required</code>.
     */
    @Override
    public Realm setSslRequired(String sslRequired) {
        this.sslRequired = sslRequired;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.sso_idle_timeout</code>.
     */
    @Override
    public Integer getSsoIdleTimeout() {
        return this.ssoIdleTimeout;
    }

    /**
     * Setter for <code>keycloak.realm.sso_idle_timeout</code>.
     */
    @Override
    public Realm setSsoIdleTimeout(Integer ssoIdleTimeout) {
        this.ssoIdleTimeout = ssoIdleTimeout;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.sso_max_lifespan</code>.
     */
    @Override
    public Integer getSsoMaxLifespan() {
        return this.ssoMaxLifespan;
    }

    /**
     * Setter for <code>keycloak.realm.sso_max_lifespan</code>.
     */
    @Override
    public Realm setSsoMaxLifespan(Integer ssoMaxLifespan) {
        this.ssoMaxLifespan = ssoMaxLifespan;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.update_profile_on_soc_login</code>.
     */
    @Override
    public Boolean getUpdateProfileOnSocLogin() {
        return this.updateProfileOnSocLogin;
    }

    /**
     * Setter for <code>keycloak.realm.update_profile_on_soc_login</code>.
     */
    @Override
    public Realm setUpdateProfileOnSocLogin(Boolean updateProfileOnSocLogin) {
        this.updateProfileOnSocLogin = updateProfileOnSocLogin;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.verify_email</code>.
     */
    @Override
    public Boolean getVerifyEmail() {
        return this.verifyEmail;
    }

    /**
     * Setter for <code>keycloak.realm.verify_email</code>.
     */
    @Override
    public Realm setVerifyEmail(Boolean verifyEmail) {
        this.verifyEmail = verifyEmail;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.master_admin_client</code>.
     */
    @Override
    public String getMasterAdminClient() {
        return this.masterAdminClient;
    }

    /**
     * Setter for <code>keycloak.realm.master_admin_client</code>.
     */
    @Override
    public Realm setMasterAdminClient(String masterAdminClient) {
        this.masterAdminClient = masterAdminClient;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.login_lifespan</code>.
     */
    @Override
    public Integer getLoginLifespan() {
        return this.loginLifespan;
    }

    /**
     * Setter for <code>keycloak.realm.login_lifespan</code>.
     */
    @Override
    public Realm setLoginLifespan(Integer loginLifespan) {
        this.loginLifespan = loginLifespan;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.internationalization_enabled</code>.
     */
    @Override
    public Boolean getInternationalizationEnabled() {
        return this.internationalizationEnabled;
    }

    /**
     * Setter for <code>keycloak.realm.internationalization_enabled</code>.
     */
    @Override
    public Realm setInternationalizationEnabled(Boolean internationalizationEnabled) {
        this.internationalizationEnabled = internationalizationEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.default_locale</code>.
     */
    @Override
    public String getDefaultLocale() {
        return this.defaultLocale;
    }

    /**
     * Setter for <code>keycloak.realm.default_locale</code>.
     */
    @Override
    public Realm setDefaultLocale(String defaultLocale) {
        this.defaultLocale = defaultLocale;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.reg_email_as_username</code>.
     */
    @Override
    public Boolean getRegEmailAsUsername() {
        return this.regEmailAsUsername;
    }

    /**
     * Setter for <code>keycloak.realm.reg_email_as_username</code>.
     */
    @Override
    public Realm setRegEmailAsUsername(Boolean regEmailAsUsername) {
        this.regEmailAsUsername = regEmailAsUsername;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.admin_events_enabled</code>.
     */
    @Override
    public Boolean getAdminEventsEnabled() {
        return this.adminEventsEnabled;
    }

    /**
     * Setter for <code>keycloak.realm.admin_events_enabled</code>.
     */
    @Override
    public Realm setAdminEventsEnabled(Boolean adminEventsEnabled) {
        this.adminEventsEnabled = adminEventsEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.admin_events_details_enabled</code>.
     */
    @Override
    public Boolean getAdminEventsDetailsEnabled() {
        return this.adminEventsDetailsEnabled;
    }

    /**
     * Setter for <code>keycloak.realm.admin_events_details_enabled</code>.
     */
    @Override
    public Realm setAdminEventsDetailsEnabled(Boolean adminEventsDetailsEnabled) {
        this.adminEventsDetailsEnabled = adminEventsDetailsEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.edit_username_allowed</code>.
     */
    @Override
    public Boolean getEditUsernameAllowed() {
        return this.editUsernameAllowed;
    }

    /**
     * Setter for <code>keycloak.realm.edit_username_allowed</code>.
     */
    @Override
    public Realm setEditUsernameAllowed(Boolean editUsernameAllowed) {
        this.editUsernameAllowed = editUsernameAllowed;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.otp_policy_counter</code>.
     */
    @Override
    public Integer getOtpPolicyCounter() {
        return this.otpPolicyCounter;
    }

    /**
     * Setter for <code>keycloak.realm.otp_policy_counter</code>.
     */
    @Override
    public Realm setOtpPolicyCounter(Integer otpPolicyCounter) {
        this.otpPolicyCounter = otpPolicyCounter;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.otp_policy_window</code>.
     */
    @Override
    public Integer getOtpPolicyWindow() {
        return this.otpPolicyWindow;
    }

    /**
     * Setter for <code>keycloak.realm.otp_policy_window</code>.
     */
    @Override
    public Realm setOtpPolicyWindow(Integer otpPolicyWindow) {
        this.otpPolicyWindow = otpPolicyWindow;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.otp_policy_period</code>.
     */
    @Override
    public Integer getOtpPolicyPeriod() {
        return this.otpPolicyPeriod;
    }

    /**
     * Setter for <code>keycloak.realm.otp_policy_period</code>.
     */
    @Override
    public Realm setOtpPolicyPeriod(Integer otpPolicyPeriod) {
        this.otpPolicyPeriod = otpPolicyPeriod;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.otp_policy_digits</code>.
     */
    @Override
    public Integer getOtpPolicyDigits() {
        return this.otpPolicyDigits;
    }

    /**
     * Setter for <code>keycloak.realm.otp_policy_digits</code>.
     */
    @Override
    public Realm setOtpPolicyDigits(Integer otpPolicyDigits) {
        this.otpPolicyDigits = otpPolicyDigits;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.otp_policy_alg</code>.
     */
    @Override
    public String getOtpPolicyAlg() {
        return this.otpPolicyAlg;
    }

    /**
     * Setter for <code>keycloak.realm.otp_policy_alg</code>.
     */
    @Override
    public Realm setOtpPolicyAlg(String otpPolicyAlg) {
        this.otpPolicyAlg = otpPolicyAlg;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.otp_policy_type</code>.
     */
    @Override
    public String getOtpPolicyType() {
        return this.otpPolicyType;
    }

    /**
     * Setter for <code>keycloak.realm.otp_policy_type</code>.
     */
    @Override
    public Realm setOtpPolicyType(String otpPolicyType) {
        this.otpPolicyType = otpPolicyType;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.browser_flow</code>.
     */
    @Override
    public String getBrowserFlow() {
        return this.browserFlow;
    }

    /**
     * Setter for <code>keycloak.realm.browser_flow</code>.
     */
    @Override
    public Realm setBrowserFlow(String browserFlow) {
        this.browserFlow = browserFlow;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.registration_flow</code>.
     */
    @Override
    public String getRegistrationFlow() {
        return this.registrationFlow;
    }

    /**
     * Setter for <code>keycloak.realm.registration_flow</code>.
     */
    @Override
    public Realm setRegistrationFlow(String registrationFlow) {
        this.registrationFlow = registrationFlow;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.direct_grant_flow</code>.
     */
    @Override
    public String getDirectGrantFlow() {
        return this.directGrantFlow;
    }

    /**
     * Setter for <code>keycloak.realm.direct_grant_flow</code>.
     */
    @Override
    public Realm setDirectGrantFlow(String directGrantFlow) {
        this.directGrantFlow = directGrantFlow;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.reset_credentials_flow</code>.
     */
    @Override
    public String getResetCredentialsFlow() {
        return this.resetCredentialsFlow;
    }

    /**
     * Setter for <code>keycloak.realm.reset_credentials_flow</code>.
     */
    @Override
    public Realm setResetCredentialsFlow(String resetCredentialsFlow) {
        this.resetCredentialsFlow = resetCredentialsFlow;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.client_auth_flow</code>.
     */
    @Override
    public String getClientAuthFlow() {
        return this.clientAuthFlow;
    }

    /**
     * Setter for <code>keycloak.realm.client_auth_flow</code>.
     */
    @Override
    public Realm setClientAuthFlow(String clientAuthFlow) {
        this.clientAuthFlow = clientAuthFlow;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.offline_session_idle_timeout</code>.
     */
    @Override
    public Integer getOfflineSessionIdleTimeout() {
        return this.offlineSessionIdleTimeout;
    }

    /**
     * Setter for <code>keycloak.realm.offline_session_idle_timeout</code>.
     */
    @Override
    public Realm setOfflineSessionIdleTimeout(Integer offlineSessionIdleTimeout) {
        this.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.revoke_refresh_token</code>.
     */
    @Override
    public Boolean getRevokeRefreshToken() {
        return this.revokeRefreshToken;
    }

    /**
     * Setter for <code>keycloak.realm.revoke_refresh_token</code>.
     */
    @Override
    public Realm setRevokeRefreshToken(Boolean revokeRefreshToken) {
        this.revokeRefreshToken = revokeRefreshToken;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.access_token_life_implicit</code>.
     */
    @Override
    public Integer getAccessTokenLifeImplicit() {
        return this.accessTokenLifeImplicit;
    }

    /**
     * Setter for <code>keycloak.realm.access_token_life_implicit</code>.
     */
    @Override
    public Realm setAccessTokenLifeImplicit(Integer accessTokenLifeImplicit) {
        this.accessTokenLifeImplicit = accessTokenLifeImplicit;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.login_with_email_allowed</code>.
     */
    @Override
    public Boolean getLoginWithEmailAllowed() {
        return this.loginWithEmailAllowed;
    }

    /**
     * Setter for <code>keycloak.realm.login_with_email_allowed</code>.
     */
    @Override
    public Realm setLoginWithEmailAllowed(Boolean loginWithEmailAllowed) {
        this.loginWithEmailAllowed = loginWithEmailAllowed;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.duplicate_emails_allowed</code>.
     */
    @Override
    public Boolean getDuplicateEmailsAllowed() {
        return this.duplicateEmailsAllowed;
    }

    /**
     * Setter for <code>keycloak.realm.duplicate_emails_allowed</code>.
     */
    @Override
    public Realm setDuplicateEmailsAllowed(Boolean duplicateEmailsAllowed) {
        this.duplicateEmailsAllowed = duplicateEmailsAllowed;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.docker_auth_flow</code>.
     */
    @Override
    public String getDockerAuthFlow() {
        return this.dockerAuthFlow;
    }

    /**
     * Setter for <code>keycloak.realm.docker_auth_flow</code>.
     */
    @Override
    public Realm setDockerAuthFlow(String dockerAuthFlow) {
        this.dockerAuthFlow = dockerAuthFlow;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.refresh_token_max_reuse</code>.
     */
    @Override
    public Integer getRefreshTokenMaxReuse() {
        return this.refreshTokenMaxReuse;
    }

    /**
     * Setter for <code>keycloak.realm.refresh_token_max_reuse</code>.
     */
    @Override
    public Realm setRefreshTokenMaxReuse(Integer refreshTokenMaxReuse) {
        this.refreshTokenMaxReuse = refreshTokenMaxReuse;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.allow_user_managed_access</code>.
     */
    @Override
    public Boolean getAllowUserManagedAccess() {
        return this.allowUserManagedAccess;
    }

    /**
     * Setter for <code>keycloak.realm.allow_user_managed_access</code>.
     */
    @Override
    public Realm setAllowUserManagedAccess(Boolean allowUserManagedAccess) {
        this.allowUserManagedAccess = allowUserManagedAccess;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.sso_max_lifespan_remember_me</code>.
     */
    @Override
    public Integer getSsoMaxLifespanRememberMe() {
        return this.ssoMaxLifespanRememberMe;
    }

    /**
     * Setter for <code>keycloak.realm.sso_max_lifespan_remember_me</code>.
     */
    @Override
    public Realm setSsoMaxLifespanRememberMe(Integer ssoMaxLifespanRememberMe) {
        this.ssoMaxLifespanRememberMe = ssoMaxLifespanRememberMe;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.sso_idle_timeout_remember_me</code>.
     */
    @Override
    public Integer getSsoIdleTimeoutRememberMe() {
        return this.ssoIdleTimeoutRememberMe;
    }

    /**
     * Setter for <code>keycloak.realm.sso_idle_timeout_remember_me</code>.
     */
    @Override
    public Realm setSsoIdleTimeoutRememberMe(Integer ssoIdleTimeoutRememberMe) {
        this.ssoIdleTimeoutRememberMe = ssoIdleTimeoutRememberMe;
        return this;
    }

    /**
     * Getter for <code>keycloak.realm.default_role</code>.
     */
    @Override
    public String getDefaultRole() {
        return this.defaultRole;
    }

    /**
     * Setter for <code>keycloak.realm.default_role</code>.
     */
    @Override
    public Realm setDefaultRole(String defaultRole) {
        this.defaultRole = defaultRole;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Realm other = (Realm) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.accessCodeLifespan == null) {
            if (other.accessCodeLifespan != null)
                return false;
        }
        else if (!this.accessCodeLifespan.equals(other.accessCodeLifespan))
            return false;
        if (this.userActionLifespan == null) {
            if (other.userActionLifespan != null)
                return false;
        }
        else if (!this.userActionLifespan.equals(other.userActionLifespan))
            return false;
        if (this.accessTokenLifespan == null) {
            if (other.accessTokenLifespan != null)
                return false;
        }
        else if (!this.accessTokenLifespan.equals(other.accessTokenLifespan))
            return false;
        if (this.accountTheme == null) {
            if (other.accountTheme != null)
                return false;
        }
        else if (!this.accountTheme.equals(other.accountTheme))
            return false;
        if (this.adminTheme == null) {
            if (other.adminTheme != null)
                return false;
        }
        else if (!this.adminTheme.equals(other.adminTheme))
            return false;
        if (this.emailTheme == null) {
            if (other.emailTheme != null)
                return false;
        }
        else if (!this.emailTheme.equals(other.emailTheme))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.eventsEnabled == null) {
            if (other.eventsEnabled != null)
                return false;
        }
        else if (!this.eventsEnabled.equals(other.eventsEnabled))
            return false;
        if (this.eventsExpiration == null) {
            if (other.eventsExpiration != null)
                return false;
        }
        else if (!this.eventsExpiration.equals(other.eventsExpiration))
            return false;
        if (this.loginTheme == null) {
            if (other.loginTheme != null)
                return false;
        }
        else if (!this.loginTheme.equals(other.loginTheme))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.notBefore == null) {
            if (other.notBefore != null)
                return false;
        }
        else if (!this.notBefore.equals(other.notBefore))
            return false;
        if (this.passwordPolicy == null) {
            if (other.passwordPolicy != null)
                return false;
        }
        else if (!this.passwordPolicy.equals(other.passwordPolicy))
            return false;
        if (this.registrationAllowed == null) {
            if (other.registrationAllowed != null)
                return false;
        }
        else if (!this.registrationAllowed.equals(other.registrationAllowed))
            return false;
        if (this.rememberMe == null) {
            if (other.rememberMe != null)
                return false;
        }
        else if (!this.rememberMe.equals(other.rememberMe))
            return false;
        if (this.resetPasswordAllowed == null) {
            if (other.resetPasswordAllowed != null)
                return false;
        }
        else if (!this.resetPasswordAllowed.equals(other.resetPasswordAllowed))
            return false;
        if (this.social == null) {
            if (other.social != null)
                return false;
        }
        else if (!this.social.equals(other.social))
            return false;
        if (this.sslRequired == null) {
            if (other.sslRequired != null)
                return false;
        }
        else if (!this.sslRequired.equals(other.sslRequired))
            return false;
        if (this.ssoIdleTimeout == null) {
            if (other.ssoIdleTimeout != null)
                return false;
        }
        else if (!this.ssoIdleTimeout.equals(other.ssoIdleTimeout))
            return false;
        if (this.ssoMaxLifespan == null) {
            if (other.ssoMaxLifespan != null)
                return false;
        }
        else if (!this.ssoMaxLifespan.equals(other.ssoMaxLifespan))
            return false;
        if (this.updateProfileOnSocLogin == null) {
            if (other.updateProfileOnSocLogin != null)
                return false;
        }
        else if (!this.updateProfileOnSocLogin.equals(other.updateProfileOnSocLogin))
            return false;
        if (this.verifyEmail == null) {
            if (other.verifyEmail != null)
                return false;
        }
        else if (!this.verifyEmail.equals(other.verifyEmail))
            return false;
        if (this.masterAdminClient == null) {
            if (other.masterAdminClient != null)
                return false;
        }
        else if (!this.masterAdminClient.equals(other.masterAdminClient))
            return false;
        if (this.loginLifespan == null) {
            if (other.loginLifespan != null)
                return false;
        }
        else if (!this.loginLifespan.equals(other.loginLifespan))
            return false;
        if (this.internationalizationEnabled == null) {
            if (other.internationalizationEnabled != null)
                return false;
        }
        else if (!this.internationalizationEnabled.equals(other.internationalizationEnabled))
            return false;
        if (this.defaultLocale == null) {
            if (other.defaultLocale != null)
                return false;
        }
        else if (!this.defaultLocale.equals(other.defaultLocale))
            return false;
        if (this.regEmailAsUsername == null) {
            if (other.regEmailAsUsername != null)
                return false;
        }
        else if (!this.regEmailAsUsername.equals(other.regEmailAsUsername))
            return false;
        if (this.adminEventsEnabled == null) {
            if (other.adminEventsEnabled != null)
                return false;
        }
        else if (!this.adminEventsEnabled.equals(other.adminEventsEnabled))
            return false;
        if (this.adminEventsDetailsEnabled == null) {
            if (other.adminEventsDetailsEnabled != null)
                return false;
        }
        else if (!this.adminEventsDetailsEnabled.equals(other.adminEventsDetailsEnabled))
            return false;
        if (this.editUsernameAllowed == null) {
            if (other.editUsernameAllowed != null)
                return false;
        }
        else if (!this.editUsernameAllowed.equals(other.editUsernameAllowed))
            return false;
        if (this.otpPolicyCounter == null) {
            if (other.otpPolicyCounter != null)
                return false;
        }
        else if (!this.otpPolicyCounter.equals(other.otpPolicyCounter))
            return false;
        if (this.otpPolicyWindow == null) {
            if (other.otpPolicyWindow != null)
                return false;
        }
        else if (!this.otpPolicyWindow.equals(other.otpPolicyWindow))
            return false;
        if (this.otpPolicyPeriod == null) {
            if (other.otpPolicyPeriod != null)
                return false;
        }
        else if (!this.otpPolicyPeriod.equals(other.otpPolicyPeriod))
            return false;
        if (this.otpPolicyDigits == null) {
            if (other.otpPolicyDigits != null)
                return false;
        }
        else if (!this.otpPolicyDigits.equals(other.otpPolicyDigits))
            return false;
        if (this.otpPolicyAlg == null) {
            if (other.otpPolicyAlg != null)
                return false;
        }
        else if (!this.otpPolicyAlg.equals(other.otpPolicyAlg))
            return false;
        if (this.otpPolicyType == null) {
            if (other.otpPolicyType != null)
                return false;
        }
        else if (!this.otpPolicyType.equals(other.otpPolicyType))
            return false;
        if (this.browserFlow == null) {
            if (other.browserFlow != null)
                return false;
        }
        else if (!this.browserFlow.equals(other.browserFlow))
            return false;
        if (this.registrationFlow == null) {
            if (other.registrationFlow != null)
                return false;
        }
        else if (!this.registrationFlow.equals(other.registrationFlow))
            return false;
        if (this.directGrantFlow == null) {
            if (other.directGrantFlow != null)
                return false;
        }
        else if (!this.directGrantFlow.equals(other.directGrantFlow))
            return false;
        if (this.resetCredentialsFlow == null) {
            if (other.resetCredentialsFlow != null)
                return false;
        }
        else if (!this.resetCredentialsFlow.equals(other.resetCredentialsFlow))
            return false;
        if (this.clientAuthFlow == null) {
            if (other.clientAuthFlow != null)
                return false;
        }
        else if (!this.clientAuthFlow.equals(other.clientAuthFlow))
            return false;
        if (this.offlineSessionIdleTimeout == null) {
            if (other.offlineSessionIdleTimeout != null)
                return false;
        }
        else if (!this.offlineSessionIdleTimeout.equals(other.offlineSessionIdleTimeout))
            return false;
        if (this.revokeRefreshToken == null) {
            if (other.revokeRefreshToken != null)
                return false;
        }
        else if (!this.revokeRefreshToken.equals(other.revokeRefreshToken))
            return false;
        if (this.accessTokenLifeImplicit == null) {
            if (other.accessTokenLifeImplicit != null)
                return false;
        }
        else if (!this.accessTokenLifeImplicit.equals(other.accessTokenLifeImplicit))
            return false;
        if (this.loginWithEmailAllowed == null) {
            if (other.loginWithEmailAllowed != null)
                return false;
        }
        else if (!this.loginWithEmailAllowed.equals(other.loginWithEmailAllowed))
            return false;
        if (this.duplicateEmailsAllowed == null) {
            if (other.duplicateEmailsAllowed != null)
                return false;
        }
        else if (!this.duplicateEmailsAllowed.equals(other.duplicateEmailsAllowed))
            return false;
        if (this.dockerAuthFlow == null) {
            if (other.dockerAuthFlow != null)
                return false;
        }
        else if (!this.dockerAuthFlow.equals(other.dockerAuthFlow))
            return false;
        if (this.refreshTokenMaxReuse == null) {
            if (other.refreshTokenMaxReuse != null)
                return false;
        }
        else if (!this.refreshTokenMaxReuse.equals(other.refreshTokenMaxReuse))
            return false;
        if (this.allowUserManagedAccess == null) {
            if (other.allowUserManagedAccess != null)
                return false;
        }
        else if (!this.allowUserManagedAccess.equals(other.allowUserManagedAccess))
            return false;
        if (this.ssoMaxLifespanRememberMe == null) {
            if (other.ssoMaxLifespanRememberMe != null)
                return false;
        }
        else if (!this.ssoMaxLifespanRememberMe.equals(other.ssoMaxLifespanRememberMe))
            return false;
        if (this.ssoIdleTimeoutRememberMe == null) {
            if (other.ssoIdleTimeoutRememberMe != null)
                return false;
        }
        else if (!this.ssoIdleTimeoutRememberMe.equals(other.ssoIdleTimeoutRememberMe))
            return false;
        if (this.defaultRole == null) {
            if (other.defaultRole != null)
                return false;
        }
        else if (!this.defaultRole.equals(other.defaultRole))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.accessCodeLifespan == null) ? 0 : this.accessCodeLifespan.hashCode());
        result = prime * result + ((this.userActionLifespan == null) ? 0 : this.userActionLifespan.hashCode());
        result = prime * result + ((this.accessTokenLifespan == null) ? 0 : this.accessTokenLifespan.hashCode());
        result = prime * result + ((this.accountTheme == null) ? 0 : this.accountTheme.hashCode());
        result = prime * result + ((this.adminTheme == null) ? 0 : this.adminTheme.hashCode());
        result = prime * result + ((this.emailTheme == null) ? 0 : this.emailTheme.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.eventsEnabled == null) ? 0 : this.eventsEnabled.hashCode());
        result = prime * result + ((this.eventsExpiration == null) ? 0 : this.eventsExpiration.hashCode());
        result = prime * result + ((this.loginTheme == null) ? 0 : this.loginTheme.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.notBefore == null) ? 0 : this.notBefore.hashCode());
        result = prime * result + ((this.passwordPolicy == null) ? 0 : this.passwordPolicy.hashCode());
        result = prime * result + ((this.registrationAllowed == null) ? 0 : this.registrationAllowed.hashCode());
        result = prime * result + ((this.rememberMe == null) ? 0 : this.rememberMe.hashCode());
        result = prime * result + ((this.resetPasswordAllowed == null) ? 0 : this.resetPasswordAllowed.hashCode());
        result = prime * result + ((this.social == null) ? 0 : this.social.hashCode());
        result = prime * result + ((this.sslRequired == null) ? 0 : this.sslRequired.hashCode());
        result = prime * result + ((this.ssoIdleTimeout == null) ? 0 : this.ssoIdleTimeout.hashCode());
        result = prime * result + ((this.ssoMaxLifespan == null) ? 0 : this.ssoMaxLifespan.hashCode());
        result = prime * result + ((this.updateProfileOnSocLogin == null) ? 0 : this.updateProfileOnSocLogin.hashCode());
        result = prime * result + ((this.verifyEmail == null) ? 0 : this.verifyEmail.hashCode());
        result = prime * result + ((this.masterAdminClient == null) ? 0 : this.masterAdminClient.hashCode());
        result = prime * result + ((this.loginLifespan == null) ? 0 : this.loginLifespan.hashCode());
        result = prime * result + ((this.internationalizationEnabled == null) ? 0 : this.internationalizationEnabled.hashCode());
        result = prime * result + ((this.defaultLocale == null) ? 0 : this.defaultLocale.hashCode());
        result = prime * result + ((this.regEmailAsUsername == null) ? 0 : this.regEmailAsUsername.hashCode());
        result = prime * result + ((this.adminEventsEnabled == null) ? 0 : this.adminEventsEnabled.hashCode());
        result = prime * result + ((this.adminEventsDetailsEnabled == null) ? 0 : this.adminEventsDetailsEnabled.hashCode());
        result = prime * result + ((this.editUsernameAllowed == null) ? 0 : this.editUsernameAllowed.hashCode());
        result = prime * result + ((this.otpPolicyCounter == null) ? 0 : this.otpPolicyCounter.hashCode());
        result = prime * result + ((this.otpPolicyWindow == null) ? 0 : this.otpPolicyWindow.hashCode());
        result = prime * result + ((this.otpPolicyPeriod == null) ? 0 : this.otpPolicyPeriod.hashCode());
        result = prime * result + ((this.otpPolicyDigits == null) ? 0 : this.otpPolicyDigits.hashCode());
        result = prime * result + ((this.otpPolicyAlg == null) ? 0 : this.otpPolicyAlg.hashCode());
        result = prime * result + ((this.otpPolicyType == null) ? 0 : this.otpPolicyType.hashCode());
        result = prime * result + ((this.browserFlow == null) ? 0 : this.browserFlow.hashCode());
        result = prime * result + ((this.registrationFlow == null) ? 0 : this.registrationFlow.hashCode());
        result = prime * result + ((this.directGrantFlow == null) ? 0 : this.directGrantFlow.hashCode());
        result = prime * result + ((this.resetCredentialsFlow == null) ? 0 : this.resetCredentialsFlow.hashCode());
        result = prime * result + ((this.clientAuthFlow == null) ? 0 : this.clientAuthFlow.hashCode());
        result = prime * result + ((this.offlineSessionIdleTimeout == null) ? 0 : this.offlineSessionIdleTimeout.hashCode());
        result = prime * result + ((this.revokeRefreshToken == null) ? 0 : this.revokeRefreshToken.hashCode());
        result = prime * result + ((this.accessTokenLifeImplicit == null) ? 0 : this.accessTokenLifeImplicit.hashCode());
        result = prime * result + ((this.loginWithEmailAllowed == null) ? 0 : this.loginWithEmailAllowed.hashCode());
        result = prime * result + ((this.duplicateEmailsAllowed == null) ? 0 : this.duplicateEmailsAllowed.hashCode());
        result = prime * result + ((this.dockerAuthFlow == null) ? 0 : this.dockerAuthFlow.hashCode());
        result = prime * result + ((this.refreshTokenMaxReuse == null) ? 0 : this.refreshTokenMaxReuse.hashCode());
        result = prime * result + ((this.allowUserManagedAccess == null) ? 0 : this.allowUserManagedAccess.hashCode());
        result = prime * result + ((this.ssoMaxLifespanRememberMe == null) ? 0 : this.ssoMaxLifespanRememberMe.hashCode());
        result = prime * result + ((this.ssoIdleTimeoutRememberMe == null) ? 0 : this.ssoIdleTimeoutRememberMe.hashCode());
        result = prime * result + ((this.defaultRole == null) ? 0 : this.defaultRole.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Realm (");

        sb.append(id);
        sb.append(", ").append(accessCodeLifespan);
        sb.append(", ").append(userActionLifespan);
        sb.append(", ").append(accessTokenLifespan);
        sb.append(", ").append(accountTheme);
        sb.append(", ").append(adminTheme);
        sb.append(", ").append(emailTheme);
        sb.append(", ").append(enabled);
        sb.append(", ").append(eventsEnabled);
        sb.append(", ").append(eventsExpiration);
        sb.append(", ").append(loginTheme);
        sb.append(", ").append(name);
        sb.append(", ").append(notBefore);
        sb.append(", ").append(passwordPolicy);
        sb.append(", ").append(registrationAllowed);
        sb.append(", ").append(rememberMe);
        sb.append(", ").append(resetPasswordAllowed);
        sb.append(", ").append(social);
        sb.append(", ").append(sslRequired);
        sb.append(", ").append(ssoIdleTimeout);
        sb.append(", ").append(ssoMaxLifespan);
        sb.append(", ").append(updateProfileOnSocLogin);
        sb.append(", ").append(verifyEmail);
        sb.append(", ").append(masterAdminClient);
        sb.append(", ").append(loginLifespan);
        sb.append(", ").append(internationalizationEnabled);
        sb.append(", ").append(defaultLocale);
        sb.append(", ").append(regEmailAsUsername);
        sb.append(", ").append(adminEventsEnabled);
        sb.append(", ").append(adminEventsDetailsEnabled);
        sb.append(", ").append(editUsernameAllowed);
        sb.append(", ").append(otpPolicyCounter);
        sb.append(", ").append(otpPolicyWindow);
        sb.append(", ").append(otpPolicyPeriod);
        sb.append(", ").append(otpPolicyDigits);
        sb.append(", ").append(otpPolicyAlg);
        sb.append(", ").append(otpPolicyType);
        sb.append(", ").append(browserFlow);
        sb.append(", ").append(registrationFlow);
        sb.append(", ").append(directGrantFlow);
        sb.append(", ").append(resetCredentialsFlow);
        sb.append(", ").append(clientAuthFlow);
        sb.append(", ").append(offlineSessionIdleTimeout);
        sb.append(", ").append(revokeRefreshToken);
        sb.append(", ").append(accessTokenLifeImplicit);
        sb.append(", ").append(loginWithEmailAllowed);
        sb.append(", ").append(duplicateEmailsAllowed);
        sb.append(", ").append(dockerAuthFlow);
        sb.append(", ").append(refreshTokenMaxReuse);
        sb.append(", ").append(allowUserManagedAccess);
        sb.append(", ").append(ssoMaxLifespanRememberMe);
        sb.append(", ").append(ssoIdleTimeoutRememberMe);
        sb.append(", ").append(defaultRole);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IRealm from) {
        setId(from.getId());
        setAccessCodeLifespan(from.getAccessCodeLifespan());
        setUserActionLifespan(from.getUserActionLifespan());
        setAccessTokenLifespan(from.getAccessTokenLifespan());
        setAccountTheme(from.getAccountTheme());
        setAdminTheme(from.getAdminTheme());
        setEmailTheme(from.getEmailTheme());
        setEnabled(from.getEnabled());
        setEventsEnabled(from.getEventsEnabled());
        setEventsExpiration(from.getEventsExpiration());
        setLoginTheme(from.getLoginTheme());
        setName(from.getName());
        setNotBefore(from.getNotBefore());
        setPasswordPolicy(from.getPasswordPolicy());
        setRegistrationAllowed(from.getRegistrationAllowed());
        setRememberMe(from.getRememberMe());
        setResetPasswordAllowed(from.getResetPasswordAllowed());
        setSocial(from.getSocial());
        setSslRequired(from.getSslRequired());
        setSsoIdleTimeout(from.getSsoIdleTimeout());
        setSsoMaxLifespan(from.getSsoMaxLifespan());
        setUpdateProfileOnSocLogin(from.getUpdateProfileOnSocLogin());
        setVerifyEmail(from.getVerifyEmail());
        setMasterAdminClient(from.getMasterAdminClient());
        setLoginLifespan(from.getLoginLifespan());
        setInternationalizationEnabled(from.getInternationalizationEnabled());
        setDefaultLocale(from.getDefaultLocale());
        setRegEmailAsUsername(from.getRegEmailAsUsername());
        setAdminEventsEnabled(from.getAdminEventsEnabled());
        setAdminEventsDetailsEnabled(from.getAdminEventsDetailsEnabled());
        setEditUsernameAllowed(from.getEditUsernameAllowed());
        setOtpPolicyCounter(from.getOtpPolicyCounter());
        setOtpPolicyWindow(from.getOtpPolicyWindow());
        setOtpPolicyPeriod(from.getOtpPolicyPeriod());
        setOtpPolicyDigits(from.getOtpPolicyDigits());
        setOtpPolicyAlg(from.getOtpPolicyAlg());
        setOtpPolicyType(from.getOtpPolicyType());
        setBrowserFlow(from.getBrowserFlow());
        setRegistrationFlow(from.getRegistrationFlow());
        setDirectGrantFlow(from.getDirectGrantFlow());
        setResetCredentialsFlow(from.getResetCredentialsFlow());
        setClientAuthFlow(from.getClientAuthFlow());
        setOfflineSessionIdleTimeout(from.getOfflineSessionIdleTimeout());
        setRevokeRefreshToken(from.getRevokeRefreshToken());
        setAccessTokenLifeImplicit(from.getAccessTokenLifeImplicit());
        setLoginWithEmailAllowed(from.getLoginWithEmailAllowed());
        setDuplicateEmailsAllowed(from.getDuplicateEmailsAllowed());
        setDockerAuthFlow(from.getDockerAuthFlow());
        setRefreshTokenMaxReuse(from.getRefreshTokenMaxReuse());
        setAllowUserManagedAccess(from.getAllowUserManagedAccess());
        setSsoMaxLifespanRememberMe(from.getSsoMaxLifespanRememberMe());
        setSsoIdleTimeoutRememberMe(from.getSsoIdleTimeoutRememberMe());
        setDefaultRole(from.getDefaultRole());
    }

    @Override
    public <E extends IRealm> E into(E into) {
        into.from(this);
        return into;
    }
}
