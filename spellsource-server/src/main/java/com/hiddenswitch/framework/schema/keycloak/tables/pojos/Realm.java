/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IRealm;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Realm implements VertxPojo, IRealm {

    private static final long serialVersionUID = 517758156;

    private String  id;
    private Integer accessCodeLifespan;
    private Integer userActionLifespan;
    private Integer accessTokenLifespan;
    private String  accountTheme;
    private String  adminTheme;
    private String  emailTheme;
    private Boolean enabled;
    private Boolean eventsEnabled;
    private Long    eventsExpiration;
    private String  loginTheme;
    private String  name;
    private Integer notBefore;
    private String  passwordPolicy;
    private Boolean registrationAllowed;
    private Boolean rememberMe;
    private Boolean resetPasswordAllowed;
    private Boolean social;
    private String  sslRequired;
    private Integer ssoIdleTimeout;
    private Integer ssoMaxLifespan;
    private Boolean updateProfileOnSocLogin;
    private Boolean verifyEmail;
    private String  masterAdminClient;
    private Integer loginLifespan;
    private Boolean internationalizationEnabled;
    private String  defaultLocale;
    private Boolean regEmailAsUsername;
    private Boolean adminEventsEnabled;
    private Boolean adminEventsDetailsEnabled;
    private Boolean editUsernameAllowed;
    private Integer otpPolicyCounter;
    private Integer otpPolicyWindow;
    private Integer otpPolicyPeriod;
    private Integer otpPolicyDigits;
    private String  otpPolicyAlg;
    private String  otpPolicyType;
    private String  browserFlow;
    private String  registrationFlow;
    private String  directGrantFlow;
    private String  resetCredentialsFlow;
    private String  clientAuthFlow;
    private Integer offlineSessionIdleTimeout;
    private Boolean revokeRefreshToken;
    private Integer accessTokenLifeImplicit;
    private Boolean loginWithEmailAllowed;
    private Boolean duplicateEmailsAllowed;
    private String  dockerAuthFlow;
    private Integer refreshTokenMaxReuse;
    private Boolean allowUserManagedAccess;
    private Integer ssoMaxLifespanRememberMe;
    private Integer ssoIdleTimeoutRememberMe;

    public Realm() {}

    public Realm(IRealm value) {
        this.id = value.getId();
        this.accessCodeLifespan = value.getAccessCodeLifespan();
        this.userActionLifespan = value.getUserActionLifespan();
        this.accessTokenLifespan = value.getAccessTokenLifespan();
        this.accountTheme = value.getAccountTheme();
        this.adminTheme = value.getAdminTheme();
        this.emailTheme = value.getEmailTheme();
        this.enabled = value.getEnabled();
        this.eventsEnabled = value.getEventsEnabled();
        this.eventsExpiration = value.getEventsExpiration();
        this.loginTheme = value.getLoginTheme();
        this.name = value.getName();
        this.notBefore = value.getNotBefore();
        this.passwordPolicy = value.getPasswordPolicy();
        this.registrationAllowed = value.getRegistrationAllowed();
        this.rememberMe = value.getRememberMe();
        this.resetPasswordAllowed = value.getResetPasswordAllowed();
        this.social = value.getSocial();
        this.sslRequired = value.getSslRequired();
        this.ssoIdleTimeout = value.getSsoIdleTimeout();
        this.ssoMaxLifespan = value.getSsoMaxLifespan();
        this.updateProfileOnSocLogin = value.getUpdateProfileOnSocLogin();
        this.verifyEmail = value.getVerifyEmail();
        this.masterAdminClient = value.getMasterAdminClient();
        this.loginLifespan = value.getLoginLifespan();
        this.internationalizationEnabled = value.getInternationalizationEnabled();
        this.defaultLocale = value.getDefaultLocale();
        this.regEmailAsUsername = value.getRegEmailAsUsername();
        this.adminEventsEnabled = value.getAdminEventsEnabled();
        this.adminEventsDetailsEnabled = value.getAdminEventsDetailsEnabled();
        this.editUsernameAllowed = value.getEditUsernameAllowed();
        this.otpPolicyCounter = value.getOtpPolicyCounter();
        this.otpPolicyWindow = value.getOtpPolicyWindow();
        this.otpPolicyPeriod = value.getOtpPolicyPeriod();
        this.otpPolicyDigits = value.getOtpPolicyDigits();
        this.otpPolicyAlg = value.getOtpPolicyAlg();
        this.otpPolicyType = value.getOtpPolicyType();
        this.browserFlow = value.getBrowserFlow();
        this.registrationFlow = value.getRegistrationFlow();
        this.directGrantFlow = value.getDirectGrantFlow();
        this.resetCredentialsFlow = value.getResetCredentialsFlow();
        this.clientAuthFlow = value.getClientAuthFlow();
        this.offlineSessionIdleTimeout = value.getOfflineSessionIdleTimeout();
        this.revokeRefreshToken = value.getRevokeRefreshToken();
        this.accessTokenLifeImplicit = value.getAccessTokenLifeImplicit();
        this.loginWithEmailAllowed = value.getLoginWithEmailAllowed();
        this.duplicateEmailsAllowed = value.getDuplicateEmailsAllowed();
        this.dockerAuthFlow = value.getDockerAuthFlow();
        this.refreshTokenMaxReuse = value.getRefreshTokenMaxReuse();
        this.allowUserManagedAccess = value.getAllowUserManagedAccess();
        this.ssoMaxLifespanRememberMe = value.getSsoMaxLifespanRememberMe();
        this.ssoIdleTimeoutRememberMe = value.getSsoIdleTimeoutRememberMe();
    }

    public Realm(
        String  id,
        Integer accessCodeLifespan,
        Integer userActionLifespan,
        Integer accessTokenLifespan,
        String  accountTheme,
        String  adminTheme,
        String  emailTheme,
        Boolean enabled,
        Boolean eventsEnabled,
        Long    eventsExpiration,
        String  loginTheme,
        String  name,
        Integer notBefore,
        String  passwordPolicy,
        Boolean registrationAllowed,
        Boolean rememberMe,
        Boolean resetPasswordAllowed,
        Boolean social,
        String  sslRequired,
        Integer ssoIdleTimeout,
        Integer ssoMaxLifespan,
        Boolean updateProfileOnSocLogin,
        Boolean verifyEmail,
        String  masterAdminClient,
        Integer loginLifespan,
        Boolean internationalizationEnabled,
        String  defaultLocale,
        Boolean regEmailAsUsername,
        Boolean adminEventsEnabled,
        Boolean adminEventsDetailsEnabled,
        Boolean editUsernameAllowed,
        Integer otpPolicyCounter,
        Integer otpPolicyWindow,
        Integer otpPolicyPeriod,
        Integer otpPolicyDigits,
        String  otpPolicyAlg,
        String  otpPolicyType,
        String  browserFlow,
        String  registrationFlow,
        String  directGrantFlow,
        String  resetCredentialsFlow,
        String  clientAuthFlow,
        Integer offlineSessionIdleTimeout,
        Boolean revokeRefreshToken,
        Integer accessTokenLifeImplicit,
        Boolean loginWithEmailAllowed,
        Boolean duplicateEmailsAllowed,
        String  dockerAuthFlow,
        Integer refreshTokenMaxReuse,
        Boolean allowUserManagedAccess,
        Integer ssoMaxLifespanRememberMe,
        Integer ssoIdleTimeoutRememberMe
    ) {
        this.id = id;
        this.accessCodeLifespan = accessCodeLifespan;
        this.userActionLifespan = userActionLifespan;
        this.accessTokenLifespan = accessTokenLifespan;
        this.accountTheme = accountTheme;
        this.adminTheme = adminTheme;
        this.emailTheme = emailTheme;
        this.enabled = enabled;
        this.eventsEnabled = eventsEnabled;
        this.eventsExpiration = eventsExpiration;
        this.loginTheme = loginTheme;
        this.name = name;
        this.notBefore = notBefore;
        this.passwordPolicy = passwordPolicy;
        this.registrationAllowed = registrationAllowed;
        this.rememberMe = rememberMe;
        this.resetPasswordAllowed = resetPasswordAllowed;
        this.social = social;
        this.sslRequired = sslRequired;
        this.ssoIdleTimeout = ssoIdleTimeout;
        this.ssoMaxLifespan = ssoMaxLifespan;
        this.updateProfileOnSocLogin = updateProfileOnSocLogin;
        this.verifyEmail = verifyEmail;
        this.masterAdminClient = masterAdminClient;
        this.loginLifespan = loginLifespan;
        this.internationalizationEnabled = internationalizationEnabled;
        this.defaultLocale = defaultLocale;
        this.regEmailAsUsername = regEmailAsUsername;
        this.adminEventsEnabled = adminEventsEnabled;
        this.adminEventsDetailsEnabled = adminEventsDetailsEnabled;
        this.editUsernameAllowed = editUsernameAllowed;
        this.otpPolicyCounter = otpPolicyCounter;
        this.otpPolicyWindow = otpPolicyWindow;
        this.otpPolicyPeriod = otpPolicyPeriod;
        this.otpPolicyDigits = otpPolicyDigits;
        this.otpPolicyAlg = otpPolicyAlg;
        this.otpPolicyType = otpPolicyType;
        this.browserFlow = browserFlow;
        this.registrationFlow = registrationFlow;
        this.directGrantFlow = directGrantFlow;
        this.resetCredentialsFlow = resetCredentialsFlow;
        this.clientAuthFlow = clientAuthFlow;
        this.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
        this.revokeRefreshToken = revokeRefreshToken;
        this.accessTokenLifeImplicit = accessTokenLifeImplicit;
        this.loginWithEmailAllowed = loginWithEmailAllowed;
        this.duplicateEmailsAllowed = duplicateEmailsAllowed;
        this.dockerAuthFlow = dockerAuthFlow;
        this.refreshTokenMaxReuse = refreshTokenMaxReuse;
        this.allowUserManagedAccess = allowUserManagedAccess;
        this.ssoMaxLifespanRememberMe = ssoMaxLifespanRememberMe;
        this.ssoIdleTimeoutRememberMe = ssoIdleTimeoutRememberMe;
    }

    public Realm(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    public Realm setId(String id) {
        this.id = id;
        return this;
    }

    @Override
    public Integer getAccessCodeLifespan() {
        return this.accessCodeLifespan;
    }

    @Override
    public Realm setAccessCodeLifespan(Integer accessCodeLifespan) {
        this.accessCodeLifespan = accessCodeLifespan;
        return this;
    }

    @Override
    public Integer getUserActionLifespan() {
        return this.userActionLifespan;
    }

    @Override
    public Realm setUserActionLifespan(Integer userActionLifespan) {
        this.userActionLifespan = userActionLifespan;
        return this;
    }

    @Override
    public Integer getAccessTokenLifespan() {
        return this.accessTokenLifespan;
    }

    @Override
    public Realm setAccessTokenLifespan(Integer accessTokenLifespan) {
        this.accessTokenLifespan = accessTokenLifespan;
        return this;
    }

    @Override
    public String getAccountTheme() {
        return this.accountTheme;
    }

    @Override
    public Realm setAccountTheme(String accountTheme) {
        this.accountTheme = accountTheme;
        return this;
    }

    @Override
    public String getAdminTheme() {
        return this.adminTheme;
    }

    @Override
    public Realm setAdminTheme(String adminTheme) {
        this.adminTheme = adminTheme;
        return this;
    }

    @Override
    public String getEmailTheme() {
        return this.emailTheme;
    }

    @Override
    public Realm setEmailTheme(String emailTheme) {
        this.emailTheme = emailTheme;
        return this;
    }

    @Override
    public Boolean getEnabled() {
        return this.enabled;
    }

    @Override
    public Realm setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    @Override
    public Boolean getEventsEnabled() {
        return this.eventsEnabled;
    }

    @Override
    public Realm setEventsEnabled(Boolean eventsEnabled) {
        this.eventsEnabled = eventsEnabled;
        return this;
    }

    @Override
    public Long getEventsExpiration() {
        return this.eventsExpiration;
    }

    @Override
    public Realm setEventsExpiration(Long eventsExpiration) {
        this.eventsExpiration = eventsExpiration;
        return this;
    }

    @Override
    public String getLoginTheme() {
        return this.loginTheme;
    }

    @Override
    public Realm setLoginTheme(String loginTheme) {
        this.loginTheme = loginTheme;
        return this;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public Realm setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public Integer getNotBefore() {
        return this.notBefore;
    }

    @Override
    public Realm setNotBefore(Integer notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    @Override
    public String getPasswordPolicy() {
        return this.passwordPolicy;
    }

    @Override
    public Realm setPasswordPolicy(String passwordPolicy) {
        this.passwordPolicy = passwordPolicy;
        return this;
    }

    @Override
    public Boolean getRegistrationAllowed() {
        return this.registrationAllowed;
    }

    @Override
    public Realm setRegistrationAllowed(Boolean registrationAllowed) {
        this.registrationAllowed = registrationAllowed;
        return this;
    }

    @Override
    public Boolean getRememberMe() {
        return this.rememberMe;
    }

    @Override
    public Realm setRememberMe(Boolean rememberMe) {
        this.rememberMe = rememberMe;
        return this;
    }

    @Override
    public Boolean getResetPasswordAllowed() {
        return this.resetPasswordAllowed;
    }

    @Override
    public Realm setResetPasswordAllowed(Boolean resetPasswordAllowed) {
        this.resetPasswordAllowed = resetPasswordAllowed;
        return this;
    }

    @Override
    public Boolean getSocial() {
        return this.social;
    }

    @Override
    public Realm setSocial(Boolean social) {
        this.social = social;
        return this;
    }

    @Override
    public String getSslRequired() {
        return this.sslRequired;
    }

    @Override
    public Realm setSslRequired(String sslRequired) {
        this.sslRequired = sslRequired;
        return this;
    }

    @Override
    public Integer getSsoIdleTimeout() {
        return this.ssoIdleTimeout;
    }

    @Override
    public Realm setSsoIdleTimeout(Integer ssoIdleTimeout) {
        this.ssoIdleTimeout = ssoIdleTimeout;
        return this;
    }

    @Override
    public Integer getSsoMaxLifespan() {
        return this.ssoMaxLifespan;
    }

    @Override
    public Realm setSsoMaxLifespan(Integer ssoMaxLifespan) {
        this.ssoMaxLifespan = ssoMaxLifespan;
        return this;
    }

    @Override
    public Boolean getUpdateProfileOnSocLogin() {
        return this.updateProfileOnSocLogin;
    }

    @Override
    public Realm setUpdateProfileOnSocLogin(Boolean updateProfileOnSocLogin) {
        this.updateProfileOnSocLogin = updateProfileOnSocLogin;
        return this;
    }

    @Override
    public Boolean getVerifyEmail() {
        return this.verifyEmail;
    }

    @Override
    public Realm setVerifyEmail(Boolean verifyEmail) {
        this.verifyEmail = verifyEmail;
        return this;
    }

    @Override
    public String getMasterAdminClient() {
        return this.masterAdminClient;
    }

    @Override
    public Realm setMasterAdminClient(String masterAdminClient) {
        this.masterAdminClient = masterAdminClient;
        return this;
    }

    @Override
    public Integer getLoginLifespan() {
        return this.loginLifespan;
    }

    @Override
    public Realm setLoginLifespan(Integer loginLifespan) {
        this.loginLifespan = loginLifespan;
        return this;
    }

    @Override
    public Boolean getInternationalizationEnabled() {
        return this.internationalizationEnabled;
    }

    @Override
    public Realm setInternationalizationEnabled(Boolean internationalizationEnabled) {
        this.internationalizationEnabled = internationalizationEnabled;
        return this;
    }

    @Override
    public String getDefaultLocale() {
        return this.defaultLocale;
    }

    @Override
    public Realm setDefaultLocale(String defaultLocale) {
        this.defaultLocale = defaultLocale;
        return this;
    }

    @Override
    public Boolean getRegEmailAsUsername() {
        return this.regEmailAsUsername;
    }

    @Override
    public Realm setRegEmailAsUsername(Boolean regEmailAsUsername) {
        this.regEmailAsUsername = regEmailAsUsername;
        return this;
    }

    @Override
    public Boolean getAdminEventsEnabled() {
        return this.adminEventsEnabled;
    }

    @Override
    public Realm setAdminEventsEnabled(Boolean adminEventsEnabled) {
        this.adminEventsEnabled = adminEventsEnabled;
        return this;
    }

    @Override
    public Boolean getAdminEventsDetailsEnabled() {
        return this.adminEventsDetailsEnabled;
    }

    @Override
    public Realm setAdminEventsDetailsEnabled(Boolean adminEventsDetailsEnabled) {
        this.adminEventsDetailsEnabled = adminEventsDetailsEnabled;
        return this;
    }

    @Override
    public Boolean getEditUsernameAllowed() {
        return this.editUsernameAllowed;
    }

    @Override
    public Realm setEditUsernameAllowed(Boolean editUsernameAllowed) {
        this.editUsernameAllowed = editUsernameAllowed;
        return this;
    }

    @Override
    public Integer getOtpPolicyCounter() {
        return this.otpPolicyCounter;
    }

    @Override
    public Realm setOtpPolicyCounter(Integer otpPolicyCounter) {
        this.otpPolicyCounter = otpPolicyCounter;
        return this;
    }

    @Override
    public Integer getOtpPolicyWindow() {
        return this.otpPolicyWindow;
    }

    @Override
    public Realm setOtpPolicyWindow(Integer otpPolicyWindow) {
        this.otpPolicyWindow = otpPolicyWindow;
        return this;
    }

    @Override
    public Integer getOtpPolicyPeriod() {
        return this.otpPolicyPeriod;
    }

    @Override
    public Realm setOtpPolicyPeriod(Integer otpPolicyPeriod) {
        this.otpPolicyPeriod = otpPolicyPeriod;
        return this;
    }

    @Override
    public Integer getOtpPolicyDigits() {
        return this.otpPolicyDigits;
    }

    @Override
    public Realm setOtpPolicyDigits(Integer otpPolicyDigits) {
        this.otpPolicyDigits = otpPolicyDigits;
        return this;
    }

    @Override
    public String getOtpPolicyAlg() {
        return this.otpPolicyAlg;
    }

    @Override
    public Realm setOtpPolicyAlg(String otpPolicyAlg) {
        this.otpPolicyAlg = otpPolicyAlg;
        return this;
    }

    @Override
    public String getOtpPolicyType() {
        return this.otpPolicyType;
    }

    @Override
    public Realm setOtpPolicyType(String otpPolicyType) {
        this.otpPolicyType = otpPolicyType;
        return this;
    }

    @Override
    public String getBrowserFlow() {
        return this.browserFlow;
    }

    @Override
    public Realm setBrowserFlow(String browserFlow) {
        this.browserFlow = browserFlow;
        return this;
    }

    @Override
    public String getRegistrationFlow() {
        return this.registrationFlow;
    }

    @Override
    public Realm setRegistrationFlow(String registrationFlow) {
        this.registrationFlow = registrationFlow;
        return this;
    }

    @Override
    public String getDirectGrantFlow() {
        return this.directGrantFlow;
    }

    @Override
    public Realm setDirectGrantFlow(String directGrantFlow) {
        this.directGrantFlow = directGrantFlow;
        return this;
    }

    @Override
    public String getResetCredentialsFlow() {
        return this.resetCredentialsFlow;
    }

    @Override
    public Realm setResetCredentialsFlow(String resetCredentialsFlow) {
        this.resetCredentialsFlow = resetCredentialsFlow;
        return this;
    }

    @Override
    public String getClientAuthFlow() {
        return this.clientAuthFlow;
    }

    @Override
    public Realm setClientAuthFlow(String clientAuthFlow) {
        this.clientAuthFlow = clientAuthFlow;
        return this;
    }

    @Override
    public Integer getOfflineSessionIdleTimeout() {
        return this.offlineSessionIdleTimeout;
    }

    @Override
    public Realm setOfflineSessionIdleTimeout(Integer offlineSessionIdleTimeout) {
        this.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
        return this;
    }

    @Override
    public Boolean getRevokeRefreshToken() {
        return this.revokeRefreshToken;
    }

    @Override
    public Realm setRevokeRefreshToken(Boolean revokeRefreshToken) {
        this.revokeRefreshToken = revokeRefreshToken;
        return this;
    }

    @Override
    public Integer getAccessTokenLifeImplicit() {
        return this.accessTokenLifeImplicit;
    }

    @Override
    public Realm setAccessTokenLifeImplicit(Integer accessTokenLifeImplicit) {
        this.accessTokenLifeImplicit = accessTokenLifeImplicit;
        return this;
    }

    @Override
    public Boolean getLoginWithEmailAllowed() {
        return this.loginWithEmailAllowed;
    }

    @Override
    public Realm setLoginWithEmailAllowed(Boolean loginWithEmailAllowed) {
        this.loginWithEmailAllowed = loginWithEmailAllowed;
        return this;
    }

    @Override
    public Boolean getDuplicateEmailsAllowed() {
        return this.duplicateEmailsAllowed;
    }

    @Override
    public Realm setDuplicateEmailsAllowed(Boolean duplicateEmailsAllowed) {
        this.duplicateEmailsAllowed = duplicateEmailsAllowed;
        return this;
    }

    @Override
    public String getDockerAuthFlow() {
        return this.dockerAuthFlow;
    }

    @Override
    public Realm setDockerAuthFlow(String dockerAuthFlow) {
        this.dockerAuthFlow = dockerAuthFlow;
        return this;
    }

    @Override
    public Integer getRefreshTokenMaxReuse() {
        return this.refreshTokenMaxReuse;
    }

    @Override
    public Realm setRefreshTokenMaxReuse(Integer refreshTokenMaxReuse) {
        this.refreshTokenMaxReuse = refreshTokenMaxReuse;
        return this;
    }

    @Override
    public Boolean getAllowUserManagedAccess() {
        return this.allowUserManagedAccess;
    }

    @Override
    public Realm setAllowUserManagedAccess(Boolean allowUserManagedAccess) {
        this.allowUserManagedAccess = allowUserManagedAccess;
        return this;
    }

    @Override
    public Integer getSsoMaxLifespanRememberMe() {
        return this.ssoMaxLifespanRememberMe;
    }

    @Override
    public Realm setSsoMaxLifespanRememberMe(Integer ssoMaxLifespanRememberMe) {
        this.ssoMaxLifespanRememberMe = ssoMaxLifespanRememberMe;
        return this;
    }

    @Override
    public Integer getSsoIdleTimeoutRememberMe() {
        return this.ssoIdleTimeoutRememberMe;
    }

    @Override
    public Realm setSsoIdleTimeoutRememberMe(Integer ssoIdleTimeoutRememberMe) {
        this.ssoIdleTimeoutRememberMe = ssoIdleTimeoutRememberMe;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Realm (");

        sb.append(id);
        sb.append(", ").append(accessCodeLifespan);
        sb.append(", ").append(userActionLifespan);
        sb.append(", ").append(accessTokenLifespan);
        sb.append(", ").append(accountTheme);
        sb.append(", ").append(adminTheme);
        sb.append(", ").append(emailTheme);
        sb.append(", ").append(enabled);
        sb.append(", ").append(eventsEnabled);
        sb.append(", ").append(eventsExpiration);
        sb.append(", ").append(loginTheme);
        sb.append(", ").append(name);
        sb.append(", ").append(notBefore);
        sb.append(", ").append(passwordPolicy);
        sb.append(", ").append(registrationAllowed);
        sb.append(", ").append(rememberMe);
        sb.append(", ").append(resetPasswordAllowed);
        sb.append(", ").append(social);
        sb.append(", ").append(sslRequired);
        sb.append(", ").append(ssoIdleTimeout);
        sb.append(", ").append(ssoMaxLifespan);
        sb.append(", ").append(updateProfileOnSocLogin);
        sb.append(", ").append(verifyEmail);
        sb.append(", ").append(masterAdminClient);
        sb.append(", ").append(loginLifespan);
        sb.append(", ").append(internationalizationEnabled);
        sb.append(", ").append(defaultLocale);
        sb.append(", ").append(regEmailAsUsername);
        sb.append(", ").append(adminEventsEnabled);
        sb.append(", ").append(adminEventsDetailsEnabled);
        sb.append(", ").append(editUsernameAllowed);
        sb.append(", ").append(otpPolicyCounter);
        sb.append(", ").append(otpPolicyWindow);
        sb.append(", ").append(otpPolicyPeriod);
        sb.append(", ").append(otpPolicyDigits);
        sb.append(", ").append(otpPolicyAlg);
        sb.append(", ").append(otpPolicyType);
        sb.append(", ").append(browserFlow);
        sb.append(", ").append(registrationFlow);
        sb.append(", ").append(directGrantFlow);
        sb.append(", ").append(resetCredentialsFlow);
        sb.append(", ").append(clientAuthFlow);
        sb.append(", ").append(offlineSessionIdleTimeout);
        sb.append(", ").append(revokeRefreshToken);
        sb.append(", ").append(accessTokenLifeImplicit);
        sb.append(", ").append(loginWithEmailAllowed);
        sb.append(", ").append(duplicateEmailsAllowed);
        sb.append(", ").append(dockerAuthFlow);
        sb.append(", ").append(refreshTokenMaxReuse);
        sb.append(", ").append(allowUserManagedAccess);
        sb.append(", ").append(ssoMaxLifespanRememberMe);
        sb.append(", ").append(ssoIdleTimeoutRememberMe);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IRealm from) {
        setId(from.getId());
        setAccessCodeLifespan(from.getAccessCodeLifespan());
        setUserActionLifespan(from.getUserActionLifespan());
        setAccessTokenLifespan(from.getAccessTokenLifespan());
        setAccountTheme(from.getAccountTheme());
        setAdminTheme(from.getAdminTheme());
        setEmailTheme(from.getEmailTheme());
        setEnabled(from.getEnabled());
        setEventsEnabled(from.getEventsEnabled());
        setEventsExpiration(from.getEventsExpiration());
        setLoginTheme(from.getLoginTheme());
        setName(from.getName());
        setNotBefore(from.getNotBefore());
        setPasswordPolicy(from.getPasswordPolicy());
        setRegistrationAllowed(from.getRegistrationAllowed());
        setRememberMe(from.getRememberMe());
        setResetPasswordAllowed(from.getResetPasswordAllowed());
        setSocial(from.getSocial());
        setSslRequired(from.getSslRequired());
        setSsoIdleTimeout(from.getSsoIdleTimeout());
        setSsoMaxLifespan(from.getSsoMaxLifespan());
        setUpdateProfileOnSocLogin(from.getUpdateProfileOnSocLogin());
        setVerifyEmail(from.getVerifyEmail());
        setMasterAdminClient(from.getMasterAdminClient());
        setLoginLifespan(from.getLoginLifespan());
        setInternationalizationEnabled(from.getInternationalizationEnabled());
        setDefaultLocale(from.getDefaultLocale());
        setRegEmailAsUsername(from.getRegEmailAsUsername());
        setAdminEventsEnabled(from.getAdminEventsEnabled());
        setAdminEventsDetailsEnabled(from.getAdminEventsDetailsEnabled());
        setEditUsernameAllowed(from.getEditUsernameAllowed());
        setOtpPolicyCounter(from.getOtpPolicyCounter());
        setOtpPolicyWindow(from.getOtpPolicyWindow());
        setOtpPolicyPeriod(from.getOtpPolicyPeriod());
        setOtpPolicyDigits(from.getOtpPolicyDigits());
        setOtpPolicyAlg(from.getOtpPolicyAlg());
        setOtpPolicyType(from.getOtpPolicyType());
        setBrowserFlow(from.getBrowserFlow());
        setRegistrationFlow(from.getRegistrationFlow());
        setDirectGrantFlow(from.getDirectGrantFlow());
        setResetCredentialsFlow(from.getResetCredentialsFlow());
        setClientAuthFlow(from.getClientAuthFlow());
        setOfflineSessionIdleTimeout(from.getOfflineSessionIdleTimeout());
        setRevokeRefreshToken(from.getRevokeRefreshToken());
        setAccessTokenLifeImplicit(from.getAccessTokenLifeImplicit());
        setLoginWithEmailAllowed(from.getLoginWithEmailAllowed());
        setDuplicateEmailsAllowed(from.getDuplicateEmailsAllowed());
        setDockerAuthFlow(from.getDockerAuthFlow());
        setRefreshTokenMaxReuse(from.getRefreshTokenMaxReuse());
        setAllowUserManagedAccess(from.getAllowUserManagedAccess());
        setSsoMaxLifespanRememberMe(from.getSsoMaxLifespanRememberMe());
        setSsoIdleTimeoutRememberMe(from.getSsoIdleTimeoutRememberMe());
    }

    @Override
    public <E extends IRealm> E into(E into) {
        into.from(this);
        return into;
    }
}
