/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GetCollectionCardsRecord;

import io.github.jklingsporn.vertx.jooq.shared.postgres.JSONBToJsonObjectConverter;
import io.vertx.core.json.JsonObject;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.XML;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetCollectionCards extends TableImpl<GetCollectionCardsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.get_collection_cards</code>
     */
    public static final GetCollectionCards GET_COLLECTION_CARDS = new GetCollectionCards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetCollectionCardsRecord> getRecordType() {
        return GetCollectionCardsRecord.class;
    }

    /**
     * The column <code>spellsource.get_collection_cards.id</code>.
     */
    public final TableField<GetCollectionCardsRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.created_by</code>.
     */
    public final TableField<GetCollectionCardsRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.card_script</code>.
     */
    public final TableField<GetCollectionCardsRecord, JsonObject> CARD_SCRIPT = createField(DSL.name("card_script"), SQLDataType.JSONB, this, "", new JSONBToJsonObjectConverter());

    /**
     * The column
     * <code>spellsource.get_collection_cards.blockly_workspace</code>.
     */
    public final TableField<GetCollectionCardsRecord, XML> BLOCKLY_WORKSPACE = createField(DSL.name("blockly_workspace"), SQLDataType.XML, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.name</code>.
     */
    public final TableField<GetCollectionCardsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.type</code>.
     */
    public final TableField<GetCollectionCardsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.class</code>.
     */
    public final TableField<GetCollectionCardsRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.cost</code>.
     */
    public final TableField<GetCollectionCardsRecord, Integer> COST = createField(DSL.name("cost"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.collectible</code>.
     */
    public final TableField<GetCollectionCardsRecord, Boolean> COLLECTIBLE = createField(DSL.name("collectible"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.search_message</code>.
     */
    public final TableField<GetCollectionCardsRecord, String> SEARCH_MESSAGE = createField(DSL.name("search_message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.get_collection_cards.last_modified</code>.
     */
    public final TableField<GetCollectionCardsRecord, OffsetDateTime> LAST_MODIFIED = createField(DSL.name("last_modified"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>spellsource.get_collection_cards.created_at</code>.
     */
    public final TableField<GetCollectionCardsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private GetCollectionCards(Name alias, Table<GetCollectionCardsRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private GetCollectionCards(Name alias, Table<GetCollectionCardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>spellsource.get_collection_cards</code> table
     * reference
     */
    public GetCollectionCards(String alias) {
        this(DSL.name(alias), GET_COLLECTION_CARDS);
    }

    /**
     * Create an aliased <code>spellsource.get_collection_cards</code> table
     * reference
     */
    public GetCollectionCards(Name alias) {
        this(alias, GET_COLLECTION_CARDS);
    }

    /**
     * Create a <code>spellsource.get_collection_cards</code> table reference
     */
    public GetCollectionCards() {
        this(DSL.name("get_collection_cards"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public GetCollectionCards as(String alias) {
        return new GetCollectionCards(DSL.name(alias), this, parameters);
    }

    @Override
    public GetCollectionCards as(Name alias) {
        return new GetCollectionCards(alias, this, parameters);
    }

    @Override
    public GetCollectionCards as(Table<?> alias) {
        return new GetCollectionCards(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCollectionCards rename(String name) {
        return new GetCollectionCards(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCollectionCards rename(Name name) {
        return new GetCollectionCards(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCollectionCards rename(Table<?> name) {
        return new GetCollectionCards(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, JsonObject, XML, String, String, String, Integer, Boolean, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetCollectionCards call() {
        GetCollectionCards result = new GetCollectionCards(DSL.name("get_collection_cards"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super String, ? super String, ? super JsonObject, ? super XML, ? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super String, ? super String, ? super JsonObject, ? super XML, ? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
