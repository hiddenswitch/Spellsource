/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.BrokerLinkRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BrokerLink extends TableImpl<BrokerLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.broker_link</code>
     */
    public static final BrokerLink BROKER_LINK = new BrokerLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrokerLinkRecord> getRecordType() {
        return BrokerLinkRecord.class;
    }

    /**
     * The column <code>keycloak.broker_link.identity_provider</code>.
     */
    public final TableField<BrokerLinkRecord, String> IDENTITY_PROVIDER = createField(DSL.name("identity_provider"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.broker_link.storage_provider_id</code>.
     */
    public final TableField<BrokerLinkRecord, String> STORAGE_PROVIDER_ID = createField(DSL.name("storage_provider_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.broker_link.realm_id</code>.
     */
    public final TableField<BrokerLinkRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.broker_link.broker_user_id</code>.
     */
    public final TableField<BrokerLinkRecord, String> BROKER_USER_ID = createField(DSL.name("broker_user_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.broker_link.broker_username</code>.
     */
    public final TableField<BrokerLinkRecord, String> BROKER_USERNAME = createField(DSL.name("broker_username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.broker_link.token</code>.
     */
    public final TableField<BrokerLinkRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>keycloak.broker_link.user_id</code>.
     */
    public final TableField<BrokerLinkRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private BrokerLink(Name alias, Table<BrokerLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private BrokerLink(Name alias, Table<BrokerLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.broker_link</code> table reference
     */
    public BrokerLink(String alias) {
        this(DSL.name(alias), BROKER_LINK);
    }

    /**
     * Create an aliased <code>keycloak.broker_link</code> table reference
     */
    public BrokerLink(Name alias) {
        this(alias, BROKER_LINK);
    }

    /**
     * Create a <code>keycloak.broker_link</code> table reference
     */
    public BrokerLink() {
        this(DSL.name("broker_link"), null);
    }

    public <O extends Record> BrokerLink(Table<O> child, ForeignKey<O, BrokerLinkRecord> key) {
        super(child, key, BROKER_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public UniqueKey<BrokerLinkRecord> getPrimaryKey() {
        return Keys.CONSTR_BROKER_LINK_PK;
    }

    @Override
    public BrokerLink as(String alias) {
        return new BrokerLink(DSL.name(alias), this);
    }

    @Override
    public BrokerLink as(Name alias) {
        return new BrokerLink(alias, this);
    }

    @Override
    public BrokerLink as(Table<?> alias) {
        return new BrokerLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BrokerLink rename(String name) {
        return new BrokerLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BrokerLink rename(Name name) {
        return new BrokerLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BrokerLink rename(Table<?> name) {
        return new BrokerLink(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
