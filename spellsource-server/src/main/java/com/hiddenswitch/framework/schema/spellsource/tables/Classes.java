/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.ClassesRecord;

import io.github.jklingsporn.vertx.jooq.shared.postgres.JSONBToJsonObjectConverter;
import io.vertx.core.json.JsonObject;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Classes extends TableImpl<ClassesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.classes</code>
     */
    public static final Classes CLASSES = new Classes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClassesRecord> getRecordType() {
        return ClassesRecord.class;
    }

    /**
     * The column <code>spellsource.classes.created_by</code>.
     */
    public final TableField<ClassesRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>spellsource.classes.class</code>.
     */
    public final TableField<ClassesRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.classes.is_private</code>.
     */
    public final TableField<ClassesRecord, Boolean> IS_PRIVATE = createField(DSL.name("is_private"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>spellsource.classes.collectible</code>.
     */
    public final TableField<ClassesRecord, Boolean> COLLECTIBLE = createField(DSL.name("collectible"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>spellsource.classes.card_script</code>.
     */
    public final TableField<ClassesRecord, JsonObject> CARD_SCRIPT = createField(DSL.name("card_script"), SQLDataType.JSONB, this, "", new JSONBToJsonObjectConverter());

    /**
     * The column <code>spellsource.classes.id</code>.
     */
    public final TableField<ClassesRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>spellsource.classes.name</code>.
     */
    public final TableField<ClassesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private Classes(Name alias, Table<ClassesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Classes(Name alias, Table<ClassesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "classes" as  SELECT get_classes.created_by,
         get_classes.class,
         get_classes.is_private,
         get_classes.collectible,
         get_classes.card_script,
         get_classes.id,
         get_classes.name
        FROM spellsource.get_classes() get_classes(created_by, class, is_private, collectible, card_script, id, name);
        """));
    }

    /**
     * Create an aliased <code>spellsource.classes</code> table reference
     */
    public Classes(String alias) {
        this(DSL.name(alias), CLASSES);
    }

    /**
     * Create an aliased <code>spellsource.classes</code> table reference
     */
    public Classes(Name alias) {
        this(alias, CLASSES);
    }

    /**
     * Create a <code>spellsource.classes</code> table reference
     */
    public Classes() {
        this(DSL.name("classes"), null);
    }

    public <O extends Record> Classes(Table<O> child, ForeignKey<O, ClassesRecord> key) {
        super(child, key, CLASSES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public Classes as(String alias) {
        return new Classes(DSL.name(alias), this);
    }

    @Override
    public Classes as(Name alias) {
        return new Classes(alias, this);
    }

    @Override
    public Classes as(Table<?> alias) {
        return new Classes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Classes rename(String name) {
        return new Classes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Classes rename(Name name) {
        return new Classes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Classes rename(Table<?> name) {
        return new Classes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Boolean, Boolean, JsonObject, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super Boolean, ? super Boolean, ? super JsonObject, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super Boolean, ? super Boolean, ? super JsonObject, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
