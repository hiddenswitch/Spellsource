/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.ResourceServer;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IResourceServer;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResourceServerRecord extends UpdatableRecordImpl<ResourceServerRecord> implements VertxPojo, Record4<String, String, Boolean, String>, IResourceServer {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>keycloak.resource_server.id</code>.
     */
    @Override
    public ResourceServerRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.resource_server.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.resource_server.client_id</code>.
     */
    @Override
    public ResourceServerRecord setClientId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.resource_server.client_id</code>.
     */
    @Override
    public String getClientId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>keycloak.resource_server.allow_rs_remote_mgmt</code>.
     */
    @Override
    public ResourceServerRecord setAllowRsRemoteMgmt(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.resource_server.allow_rs_remote_mgmt</code>.
     */
    @Override
    public Boolean getAllowRsRemoteMgmt() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>keycloak.resource_server.policy_enforce_mode</code>.
     */
    @Override
    public ResourceServerRecord setPolicyEnforceMode(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.resource_server.policy_enforce_mode</code>.
     */
    @Override
    public String getPolicyEnforceMode() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Boolean, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Boolean, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ResourceServer.RESOURCE_SERVER.ID;
    }

    @Override
    public Field<String> field2() {
        return ResourceServer.RESOURCE_SERVER.CLIENT_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return ResourceServer.RESOURCE_SERVER.ALLOW_RS_REMOTE_MGMT;
    }

    @Override
    public Field<String> field4() {
        return ResourceServer.RESOURCE_SERVER.POLICY_ENFORCE_MODE;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getClientId();
    }

    @Override
    public Boolean component3() {
        return getAllowRsRemoteMgmt();
    }

    @Override
    public String component4() {
        return getPolicyEnforceMode();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getClientId();
    }

    @Override
    public Boolean value3() {
        return getAllowRsRemoteMgmt();
    }

    @Override
    public String value4() {
        return getPolicyEnforceMode();
    }

    @Override
    public ResourceServerRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ResourceServerRecord value2(String value) {
        setClientId(value);
        return this;
    }

    @Override
    public ResourceServerRecord value3(Boolean value) {
        setAllowRsRemoteMgmt(value);
        return this;
    }

    @Override
    public ResourceServerRecord value4(String value) {
        setPolicyEnforceMode(value);
        return this;
    }

    @Override
    public ResourceServerRecord values(String value1, String value2, Boolean value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IResourceServer from) {
        setId(from.getId());
        setClientId(from.getClientId());
        setAllowRsRemoteMgmt(from.getAllowRsRemoteMgmt());
        setPolicyEnforceMode(from.getPolicyEnforceMode());
    }

    @Override
    public <E extends IResourceServer> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResourceServerRecord
     */
    public ResourceServerRecord() {
        super(ResourceServer.RESOURCE_SERVER);
    }

    /**
     * Create a detached, initialised ResourceServerRecord
     */
    public ResourceServerRecord(String id, String clientId, Boolean allowRsRemoteMgmt, String policyEnforceMode) {
        super(ResourceServer.RESOURCE_SERVER);

        setId(id);
        setClientId(clientId);
        setAllowRsRemoteMgmt(allowRsRemoteMgmt);
        setPolicyEnforceMode(policyEnforceMode);
    }

    /**
     * Create a detached, initialised ResourceServerRecord
     */
    public ResourceServerRecord(com.hiddenswitch.framework.schema.keycloak.tables.pojos.ResourceServer value) {
        super(ResourceServer.RESOURCE_SERVER);

        if (value != null) {
            setId(value.getId());
            setClientId(value.getClientId());
            setAllowRsRemoteMgmt(value.getAllowRsRemoteMgmt());
            setPolicyEnforceMode(value.getPolicyEnforceMode());
        }
    }

        public ResourceServerRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
