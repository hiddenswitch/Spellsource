/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.CredentialAttributeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CredentialAttribute extends TableImpl<CredentialAttributeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.credential_attribute</code>
     */
    public static final CredentialAttribute CREDENTIAL_ATTRIBUTE = new CredentialAttribute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CredentialAttributeRecord> getRecordType() {
        return CredentialAttributeRecord.class;
    }

    /**
     * The column <code>keycloak.credential_attribute.id</code>.
     */
    public final TableField<CredentialAttributeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.credential_attribute.credential_id</code>.
     */
    public final TableField<CredentialAttributeRecord, String> CREDENTIAL_ID = createField(DSL.name("credential_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.credential_attribute.name</code>.
     */
    public final TableField<CredentialAttributeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.credential_attribute.value</code>.
     */
    public final TableField<CredentialAttributeRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(4000), this, "");

    private CredentialAttribute(Name alias, Table<CredentialAttributeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CredentialAttribute(Name alias, Table<CredentialAttributeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.credential_attribute</code> table
     * reference
     */
    public CredentialAttribute(String alias) {
        this(DSL.name(alias), CREDENTIAL_ATTRIBUTE);
    }

    /**
     * Create an aliased <code>keycloak.credential_attribute</code> table
     * reference
     */
    public CredentialAttribute(Name alias) {
        this(alias, CREDENTIAL_ATTRIBUTE);
    }

    /**
     * Create a <code>keycloak.credential_attribute</code> table reference
     */
    public CredentialAttribute() {
        this(DSL.name("credential_attribute"), null);
    }

    public <O extends Record> CredentialAttribute(Table<O> child, ForeignKey<O, CredentialAttributeRecord> key) {
        super(child, key, CREDENTIAL_ATTRIBUTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CREDENTIAL_ATTR_CRED);
    }

    @Override
    public List<ForeignKey<CredentialAttributeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CREDENTIAL_ATTRIBUTE__FK_CRED_ATTR);
    }

    private transient Credential _credential;

    /**
     * Get the implicit join path to the <code>keycloak.credential</code> table.
     */
    public Credential credential() {
        if (_credential == null)
            _credential = new Credential(this, Keys.CREDENTIAL_ATTRIBUTE__FK_CRED_ATTR);

        return _credential;
    }

    @Override
    public CredentialAttribute as(String alias) {
        return new CredentialAttribute(DSL.name(alias), this);
    }

    @Override
    public CredentialAttribute as(Name alias) {
        return new CredentialAttribute(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CredentialAttribute rename(String name) {
        return new CredentialAttribute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CredentialAttribute rename(Name name) {
        return new CredentialAttribute(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
