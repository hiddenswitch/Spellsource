/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.IdentityProviderRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdentityProvider extends TableImpl<IdentityProviderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.identity_provider</code>
     */
    public static final IdentityProvider IDENTITY_PROVIDER = new IdentityProvider();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdentityProviderRecord> getRecordType() {
        return IdentityProviderRecord.class;
    }

    /**
     * The column <code>keycloak.identity_provider.internal_id</code>.
     */
    public final TableField<IdentityProviderRecord, String> INTERNAL_ID = createField(DSL.name("internal_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.identity_provider.enabled</code>.
     */
    public final TableField<IdentityProviderRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.identity_provider.provider_alias</code>.
     */
    public final TableField<IdentityProviderRecord, String> PROVIDER_ALIAS = createField(DSL.name("provider_alias"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.identity_provider.provider_id</code>.
     */
    public final TableField<IdentityProviderRecord, String> PROVIDER_ID = createField(DSL.name("provider_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.identity_provider.store_token</code>.
     */
    public final TableField<IdentityProviderRecord, Boolean> STORE_TOKEN = createField(DSL.name("store_token"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>keycloak.identity_provider.authenticate_by_default</code>.
     */
    public final TableField<IdentityProviderRecord, Boolean> AUTHENTICATE_BY_DEFAULT = createField(DSL.name("authenticate_by_default"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.identity_provider.realm_id</code>.
     */
    public final TableField<IdentityProviderRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.identity_provider.add_token_role</code>.
     */
    public final TableField<IdentityProviderRecord, Boolean> ADD_TOKEN_ROLE = createField(DSL.name("add_token_role"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.identity_provider.trust_email</code>.
     */
    public final TableField<IdentityProviderRecord, Boolean> TRUST_EMAIL = createField(DSL.name("trust_email"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>keycloak.identity_provider.first_broker_login_flow_id</code>.
     */
    public final TableField<IdentityProviderRecord, String> FIRST_BROKER_LOGIN_FLOW_ID = createField(DSL.name("first_broker_login_flow_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column
     * <code>keycloak.identity_provider.post_broker_login_flow_id</code>.
     */
    public final TableField<IdentityProviderRecord, String> POST_BROKER_LOGIN_FLOW_ID = createField(DSL.name("post_broker_login_flow_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.identity_provider.provider_display_name</code>.
     */
    public final TableField<IdentityProviderRecord, String> PROVIDER_DISPLAY_NAME = createField(DSL.name("provider_display_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.identity_provider.link_only</code>.
     */
    public final TableField<IdentityProviderRecord, Boolean> LINK_ONLY = createField(DSL.name("link_only"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private IdentityProvider(Name alias, Table<IdentityProviderRecord> aliased) {
        this(alias, aliased, null);
    }

    private IdentityProvider(Name alias, Table<IdentityProviderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.identity_provider</code> table reference
     */
    public IdentityProvider(String alias) {
        this(DSL.name(alias), IDENTITY_PROVIDER);
    }

    /**
     * Create an aliased <code>keycloak.identity_provider</code> table reference
     */
    public IdentityProvider(Name alias) {
        this(alias, IDENTITY_PROVIDER);
    }

    /**
     * Create a <code>keycloak.identity_provider</code> table reference
     */
    public IdentityProvider() {
        this(DSL.name("identity_provider"), null);
    }

    public <O extends Record> IdentityProvider(Table<O> child, ForeignKey<O, IdentityProviderRecord> key) {
        super(child, key, IDENTITY_PROVIDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_IDENT_PROV_REALM);
    }

    @Override
    public UniqueKey<IdentityProviderRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2B;
    }

    @Override
    public List<UniqueKey<IdentityProviderRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_2DAELWNIBJI49AVXSRTUF6XJ33);
    }

    @Override
    public List<ForeignKey<IdentityProviderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IDENTITY_PROVIDER__FK2B4EBC52AE5C3B34);
    }

    private transient Realm _realm;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.IDENTITY_PROVIDER__FK2B4EBC52AE5C3B34);

        return _realm;
    }

    @Override
    public IdentityProvider as(String alias) {
        return new IdentityProvider(DSL.name(alias), this);
    }

    @Override
    public IdentityProvider as(Name alias) {
        return new IdentityProvider(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentityProvider rename(String name) {
        return new IdentityProvider(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentityProvider rename(Name name) {
        return new IdentityProvider(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, Boolean, String, String, Boolean, Boolean, String, Boolean, Boolean, String, String, String, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
