/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserEntityRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.BannedDraftCards;
import com.hiddenswitch.framework.schema.spellsource.tables.BotUsers;
import com.hiddenswitch.framework.schema.spellsource.tables.Cards;
import com.hiddenswitch.framework.schema.spellsource.tables.CardsInDeck;
import com.hiddenswitch.framework.schema.spellsource.tables.DeckPlayerAttributeTuples;
import com.hiddenswitch.framework.schema.spellsource.tables.DeckShares;
import com.hiddenswitch.framework.schema.spellsource.tables.Decks;
import com.hiddenswitch.framework.schema.spellsource.tables.Friends;
import com.hiddenswitch.framework.schema.spellsource.tables.GameUsers;
import com.hiddenswitch.framework.schema.spellsource.tables.Games;
import com.hiddenswitch.framework.schema.spellsource.tables.Guests;
import com.hiddenswitch.framework.schema.spellsource.tables.HardRemovalCards;
import com.hiddenswitch.framework.schema.spellsource.tables.MatchmakingQueues;
import com.hiddenswitch.framework.schema.spellsource.tables.MatchmakingTickets;
import com.hiddenswitch.framework.schema.spellsource.tables.UserEntityAddons;
import com.hiddenswitch.framework.schema.spellsource.tables.records.BannedDraftCardsRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.BotUsersRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardsInDeckRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardsRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.DeckPlayerAttributeTuplesRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.DeckSharesRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.DecksRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.FriendsRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GameUsersRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GamesRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GuestsRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.HardRemovalCardsRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.MatchmakingQueuesRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.MatchmakingTicketsRecord;
import com.hiddenswitch.framework.schema.spellsource.tables.records.UserEntityAddonsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * spellsource.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BotUsersRecord> BOT_USERS_PKEY = Internal.createUniqueKey(BotUsers.BOT_USERS, DSL.name("bot_users_pkey"), new TableField[] { BotUsers.BOT_USERS.ID }, true);
    public static final UniqueKey<CardsRecord> CARDS_PKEY = Internal.createUniqueKey(Cards.CARDS, DSL.name("cards_pkey"), new TableField[] { Cards.CARDS.ID }, true);
    public static final UniqueKey<CardsInDeckRecord> CARDS_IN_DECK_PKEY = Internal.createUniqueKey(CardsInDeck.CARDS_IN_DECK, DSL.name("cards_in_deck_pkey"), new TableField[] { CardsInDeck.CARDS_IN_DECK.ID }, true);
    public static final UniqueKey<DeckPlayerAttributeTuplesRecord> DECK_PLAYER_ATTRIBUTE_TUPLES_PKEY = Internal.createUniqueKey(DeckPlayerAttributeTuples.DECK_PLAYER_ATTRIBUTE_TUPLES, DSL.name("deck_player_attribute_tuples_pkey"), new TableField[] { DeckPlayerAttributeTuples.DECK_PLAYER_ATTRIBUTE_TUPLES.ID }, true);
    public static final UniqueKey<DeckSharesRecord> DECK_SHARES_PKEY = Internal.createUniqueKey(DeckShares.DECK_SHARES, DSL.name("deck_shares_pkey"), new TableField[] { DeckShares.DECK_SHARES.DECK_ID, DeckShares.DECK_SHARES.SHARE_RECIPIENT_ID }, true);
    public static final UniqueKey<DecksRecord> DECKS_PKEY = Internal.createUniqueKey(Decks.DECKS, DSL.name("decks_pkey"), new TableField[] { Decks.DECKS.ID }, true);
    public static final UniqueKey<FriendsRecord> FRIENDS_PKEY = Internal.createUniqueKey(Friends.FRIENDS, DSL.name("friends_pkey"), new TableField[] { Friends.FRIENDS.ID, Friends.FRIENDS.FRIEND }, true);
    public static final UniqueKey<GameUsersRecord> GAME_USERS_PKEY = Internal.createUniqueKey(GameUsers.GAME_USERS, DSL.name("game_users_pkey"), new TableField[] { GameUsers.GAME_USERS.GAME_ID, GameUsers.GAME_USERS.USER_ID }, true);
    public static final UniqueKey<GamesRecord> GAMES_PKEY = Internal.createUniqueKey(Games.GAMES, DSL.name("games_pkey"), new TableField[] { Games.GAMES.ID }, true);
    public static final UniqueKey<GuestsRecord> GUESTS_PKEY = Internal.createUniqueKey(Guests.GUESTS, DSL.name("guests_pkey"), new TableField[] { Guests.GUESTS.ID }, true);
    public static final UniqueKey<MatchmakingQueuesRecord> MATCHMAKING_QUEUES_PKEY = Internal.createUniqueKey(MatchmakingQueues.MATCHMAKING_QUEUES, DSL.name("matchmaking_queues_pkey"), new TableField[] { MatchmakingQueues.MATCHMAKING_QUEUES.ID }, true);
    public static final UniqueKey<MatchmakingTicketsRecord> MATCHMAKING_TICKETS_PKEY = Internal.createUniqueKey(MatchmakingTickets.MATCHMAKING_TICKETS, DSL.name("matchmaking_tickets_pkey"), new TableField[] { MatchmakingTickets.MATCHMAKING_TICKETS.USER_ID }, true);
    public static final UniqueKey<UserEntityAddonsRecord> USER_ENTITY_ADDONS_PKEY = Internal.createUniqueKey(UserEntityAddons.USER_ENTITY_ADDONS, DSL.name("user_entity_addons_pkey"), new TableField[] { UserEntityAddons.USER_ENTITY_ADDONS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BannedDraftCardsRecord, CardsRecord> BANNED_DRAFT_CARDS__BANNED_DRAFT_CARDS_CARD_ID_FKEY = Internal.createForeignKey(BannedDraftCards.BANNED_DRAFT_CARDS, DSL.name("banned_draft_cards_card_id_fkey"), new TableField[] { BannedDraftCards.BANNED_DRAFT_CARDS.CARD_ID }, Keys.CARDS_PKEY, new TableField[] { Cards.CARDS.ID }, true);
    public static final ForeignKey<BotUsersRecord, UserEntityRecord> BOT_USERS__BOT_USERS_ID_FKEY = Internal.createForeignKey(BotUsers.BOT_USERS, DSL.name("bot_users_id_fkey"), new TableField[] { BotUsers.BOT_USERS.ID }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<CardsRecord, UserEntityRecord> CARDS__CARDS_CREATED_BY_FKEY = Internal.createForeignKey(Cards.CARDS, DSL.name("cards_created_by_fkey"), new TableField[] { Cards.CARDS.CREATED_BY }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<CardsInDeckRecord, CardsRecord> CARDS_IN_DECK__CARDS_IN_DECK_CARD_ID_FKEY = Internal.createForeignKey(CardsInDeck.CARDS_IN_DECK, DSL.name("cards_in_deck_card_id_fkey"), new TableField[] { CardsInDeck.CARDS_IN_DECK.CARD_ID }, Keys.CARDS_PKEY, new TableField[] { Cards.CARDS.ID }, true);
    public static final ForeignKey<CardsInDeckRecord, DecksRecord> CARDS_IN_DECK__CARDS_IN_DECK_DECK_ID_FKEY = Internal.createForeignKey(CardsInDeck.CARDS_IN_DECK, DSL.name("cards_in_deck_deck_id_fkey"), new TableField[] { CardsInDeck.CARDS_IN_DECK.DECK_ID }, Keys.DECKS_PKEY, new TableField[] { Decks.DECKS.ID }, true);
    public static final ForeignKey<DeckPlayerAttributeTuplesRecord, DecksRecord> DECK_PLAYER_ATTRIBUTE_TUPLES__DECK_PLAYER_ATTRIBUTE_TUPLES_DECK_ID_FKEY = Internal.createForeignKey(DeckPlayerAttributeTuples.DECK_PLAYER_ATTRIBUTE_TUPLES, DSL.name("deck_player_attribute_tuples_deck_id_fkey"), new TableField[] { DeckPlayerAttributeTuples.DECK_PLAYER_ATTRIBUTE_TUPLES.DECK_ID }, Keys.DECKS_PKEY, new TableField[] { Decks.DECKS.ID }, true);
    public static final ForeignKey<DeckSharesRecord, DecksRecord> DECK_SHARES__DECK_SHARES_DECK_ID_FKEY = Internal.createForeignKey(DeckShares.DECK_SHARES, DSL.name("deck_shares_deck_id_fkey"), new TableField[] { DeckShares.DECK_SHARES.DECK_ID }, Keys.DECKS_PKEY, new TableField[] { Decks.DECKS.ID }, true);
    public static final ForeignKey<DeckSharesRecord, UserEntityRecord> DECK_SHARES__DECK_SHARES_SHARE_RECIPIENT_ID_FKEY = Internal.createForeignKey(DeckShares.DECK_SHARES, DSL.name("deck_shares_share_recipient_id_fkey"), new TableField[] { DeckShares.DECK_SHARES.SHARE_RECIPIENT_ID }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<DecksRecord, UserEntityRecord> DECKS__DECKS_CREATED_BY_FKEY = Internal.createForeignKey(Decks.DECKS, DSL.name("decks_created_by_fkey"), new TableField[] { Decks.DECKS.CREATED_BY }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<DecksRecord, UserEntityRecord> DECKS__DECKS_LAST_EDITED_BY_FKEY = Internal.createForeignKey(Decks.DECKS, DSL.name("decks_last_edited_by_fkey"), new TableField[] { Decks.DECKS.LAST_EDITED_BY }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<FriendsRecord, UserEntityRecord> FRIENDS__FRIENDS_FRIEND_FKEY = Internal.createForeignKey(Friends.FRIENDS, DSL.name("friends_friend_fkey"), new TableField[] { Friends.FRIENDS.FRIEND }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<FriendsRecord, UserEntityRecord> FRIENDS__FRIENDS_ID_FKEY = Internal.createForeignKey(Friends.FRIENDS, DSL.name("friends_id_fkey"), new TableField[] { Friends.FRIENDS.ID }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<GameUsersRecord, DecksRecord> GAME_USERS__GAME_USERS_DECK_ID_FKEY = Internal.createForeignKey(GameUsers.GAME_USERS, DSL.name("game_users_deck_id_fkey"), new TableField[] { GameUsers.GAME_USERS.DECK_ID }, Keys.DECKS_PKEY, new TableField[] { Decks.DECKS.ID }, true);
    public static final ForeignKey<GameUsersRecord, GamesRecord> GAME_USERS__GAME_USERS_GAME_ID_FKEY = Internal.createForeignKey(GameUsers.GAME_USERS, DSL.name("game_users_game_id_fkey"), new TableField[] { GameUsers.GAME_USERS.GAME_ID }, Keys.GAMES_PKEY, new TableField[] { Games.GAMES.ID }, true);
    public static final ForeignKey<GameUsersRecord, UserEntityRecord> GAME_USERS__GAME_USERS_USER_ID_FKEY = Internal.createForeignKey(GameUsers.GAME_USERS, DSL.name("game_users_user_id_fkey"), new TableField[] { GameUsers.GAME_USERS.USER_ID }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<GuestsRecord, UserEntityRecord> GUESTS__GUESTS_USER_ID_FKEY = Internal.createForeignKey(Guests.GUESTS, DSL.name("guests_user_id_fkey"), new TableField[] { Guests.GUESTS.USER_ID }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<HardRemovalCardsRecord, CardsRecord> HARD_REMOVAL_CARDS__HARD_REMOVAL_CARDS_CARD_ID_FKEY = Internal.createForeignKey(HardRemovalCards.HARD_REMOVAL_CARDS, DSL.name("hard_removal_cards_card_id_fkey"), new TableField[] { HardRemovalCards.HARD_REMOVAL_CARDS.CARD_ID }, Keys.CARDS_PKEY, new TableField[] { Cards.CARDS.ID }, true);
    public static final ForeignKey<MatchmakingTicketsRecord, DecksRecord> MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_BOT_DECK_ID_FKEY = Internal.createForeignKey(MatchmakingTickets.MATCHMAKING_TICKETS, DSL.name("matchmaking_tickets_bot_deck_id_fkey"), new TableField[] { MatchmakingTickets.MATCHMAKING_TICKETS.BOT_DECK_ID }, Keys.DECKS_PKEY, new TableField[] { Decks.DECKS.ID }, true);
    public static final ForeignKey<MatchmakingTicketsRecord, DecksRecord> MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_DECK_ID_FKEY = Internal.createForeignKey(MatchmakingTickets.MATCHMAKING_TICKETS, DSL.name("matchmaking_tickets_deck_id_fkey"), new TableField[] { MatchmakingTickets.MATCHMAKING_TICKETS.DECK_ID }, Keys.DECKS_PKEY, new TableField[] { Decks.DECKS.ID }, true);
    public static final ForeignKey<MatchmakingTicketsRecord, MatchmakingQueuesRecord> MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_QUEUE_ID_FKEY = Internal.createForeignKey(MatchmakingTickets.MATCHMAKING_TICKETS, DSL.name("matchmaking_tickets_queue_id_fkey"), new TableField[] { MatchmakingTickets.MATCHMAKING_TICKETS.QUEUE_ID }, Keys.MATCHMAKING_QUEUES_PKEY, new TableField[] { MatchmakingQueues.MATCHMAKING_QUEUES.ID }, true);
    public static final ForeignKey<MatchmakingTicketsRecord, UserEntityRecord> MATCHMAKING_TICKETS__MATCHMAKING_TICKETS_USER_ID_FKEY = Internal.createForeignKey(MatchmakingTickets.MATCHMAKING_TICKETS, DSL.name("matchmaking_tickets_user_id_fkey"), new TableField[] { MatchmakingTickets.MATCHMAKING_TICKETS.USER_ID }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<UserEntityAddonsRecord, UserEntityRecord> USER_ENTITY_ADDONS__USER_ENTITY_ADDONS_ID_FKEY = Internal.createForeignKey(UserEntityAddons.USER_ENTITY_ADDONS, DSL.name("user_entity_addons_id_fkey"), new TableField[] { UserEntityAddons.USER_ENTITY_ADDONS.ID }, com.hiddenswitch.framework.schema.keycloak.Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
}
