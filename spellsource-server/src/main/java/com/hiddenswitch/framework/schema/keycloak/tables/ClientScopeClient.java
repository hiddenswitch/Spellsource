/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientScopeClientRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientScopeClient extends TableImpl<ClientScopeClientRecord> {

    private static final long serialVersionUID = -2090452395;

    /**
     * The reference instance of <code>keycloak.client_scope_client</code>
     */
    public static final ClientScopeClient CLIENT_SCOPE_CLIENT = new ClientScopeClient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientScopeClientRecord> getRecordType() {
        return ClientScopeClientRecord.class;
    }

    /**
     * The column <code>keycloak.client_scope_client.client_id</code>.
     */
    public final TableField<ClientScopeClientRecord, String> CLIENT_ID = createField(DSL.name("client_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.client_scope_client.scope_id</code>.
     */
    public final TableField<ClientScopeClientRecord, String> SCOPE_ID = createField(DSL.name("scope_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.client_scope_client.default_scope</code>.
     */
    public final TableField<ClientScopeClientRecord, Boolean> DEFAULT_SCOPE = createField(DSL.name("default_scope"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>keycloak.client_scope_client</code> table reference
     */
    public ClientScopeClient() {
        this(DSL.name("client_scope_client"), null);
    }

    /**
     * Create an aliased <code>keycloak.client_scope_client</code> table reference
     */
    public ClientScopeClient(String alias) {
        this(DSL.name(alias), CLIENT_SCOPE_CLIENT);
    }

    /**
     * Create an aliased <code>keycloak.client_scope_client</code> table reference
     */
    public ClientScopeClient(Name alias) {
        this(alias, CLIENT_SCOPE_CLIENT);
    }

    private ClientScopeClient(Name alias, Table<ClientScopeClientRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientScopeClient(Name alias, Table<ClientScopeClientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ClientScopeClient(Table<O> child, ForeignKey<O, ClientScopeClientRecord> key) {
        super(child, key, CLIENT_SCOPE_CLIENT);
    }

    @Override
    public Schema getSchema() {
        return Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_CL_CLSCOPE, Indexes.IDX_CLSCOPE_CL);
    }

    @Override
    public UniqueKey<ClientScopeClientRecord> getPrimaryKey() {
        return Keys.C_CLI_SCOPE_BIND;
    }

    @Override
    public List<UniqueKey<ClientScopeClientRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientScopeClientRecord>>asList(Keys.C_CLI_SCOPE_BIND);
    }

    @Override
    public List<ForeignKey<ClientScopeClientRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClientScopeClientRecord, ?>>asList(Keys.CLIENT_SCOPE_CLIENT__FK_C_CLI_SCOPE_CLIENT, Keys.CLIENT_SCOPE_CLIENT__FK_C_CLI_SCOPE_SCOPE);
    }

    public Client client() {
        return new Client(this, Keys.CLIENT_SCOPE_CLIENT__FK_C_CLI_SCOPE_CLIENT);
    }

    public ClientScope clientScope() {
        return new ClientScope(this, Keys.CLIENT_SCOPE_CLIENT__FK_C_CLI_SCOPE_SCOPE);
    }

    @Override
    public ClientScopeClient as(String alias) {
        return new ClientScopeClient(DSL.name(alias), this);
    }

    @Override
    public ClientScopeClient as(Name alias) {
        return new ClientScopeClient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientScopeClient rename(String name) {
        return new ClientScopeClient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientScopeClient rename(Name name) {
        return new ClientScopeClient(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
