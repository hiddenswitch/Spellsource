/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.FedUserConsentClScope;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IFedUserConsentClScope;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FedUserConsentClScopeRecord extends UpdatableRecordImpl<FedUserConsentClScopeRecord> implements VertxPojo, Record2<String, String>, IFedUserConsentClScope {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>keycloak.fed_user_consent_cl_scope.user_consent_id</code>.
     */
    @Override
    public FedUserConsentClScopeRecord setUserConsentId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>keycloak.fed_user_consent_cl_scope.user_consent_id</code>.
     */
    @Override
    public String getUserConsentId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.fed_user_consent_cl_scope.scope_id</code>.
     */
    @Override
    public FedUserConsentClScopeRecord setScopeId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.fed_user_consent_cl_scope.scope_id</code>.
     */
    @Override
    public String getScopeId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return FedUserConsentClScope.FED_USER_CONSENT_CL_SCOPE.USER_CONSENT_ID;
    }

    @Override
    public Field<String> field2() {
        return FedUserConsentClScope.FED_USER_CONSENT_CL_SCOPE.SCOPE_ID;
    }

    @Override
    public String component1() {
        return getUserConsentId();
    }

    @Override
    public String component2() {
        return getScopeId();
    }

    @Override
    public String value1() {
        return getUserConsentId();
    }

    @Override
    public String value2() {
        return getScopeId();
    }

    @Override
    public FedUserConsentClScopeRecord value1(String value) {
        setUserConsentId(value);
        return this;
    }

    @Override
    public FedUserConsentClScopeRecord value2(String value) {
        setScopeId(value);
        return this;
    }

    @Override
    public FedUserConsentClScopeRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IFedUserConsentClScope from) {
        setUserConsentId(from.getUserConsentId());
        setScopeId(from.getScopeId());
    }

    @Override
    public <E extends IFedUserConsentClScope> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FedUserConsentClScopeRecord
     */
    public FedUserConsentClScopeRecord() {
        super(FedUserConsentClScope.FED_USER_CONSENT_CL_SCOPE);
    }

    /**
     * Create a detached, initialised FedUserConsentClScopeRecord
     */
    public FedUserConsentClScopeRecord(String userConsentId, String scopeId) {
        super(FedUserConsentClScope.FED_USER_CONSENT_CL_SCOPE);

        setUserConsentId(userConsentId);
        setScopeId(scopeId);
    }

    /**
     * Create a detached, initialised FedUserConsentClScopeRecord
     */
    public FedUserConsentClScopeRecord(com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsentClScope value) {
        super(FedUserConsentClScope.FED_USER_CONSENT_CL_SCOPE);

        if (value != null) {
            setUserConsentId(value.getUserConsentId());
            setScopeId(value.getScopeId());
        }
    }

        public FedUserConsentClScopeRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
