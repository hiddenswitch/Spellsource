/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.GeneratedArtRecord;

import io.github.jklingsporn.vertx.jooq.shared.postgres.JSONBToJsonObjectConverter;
import io.vertx.core.json.JsonObject;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeneratedArt extends TableImpl<GeneratedArtRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.generated_art</code>
     */
    public static final GeneratedArt GENERATED_ART = new GeneratedArt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeneratedArtRecord> getRecordType() {
        return GeneratedArtRecord.class;
    }

    /**
     * The column <code>spellsource.generated_art.hash</code>.
     */
    public final TableField<GeneratedArtRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.generated_art.owner</code>.
     */
    public final TableField<GeneratedArtRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(36).nullable(false).defaultValue(DSL.field("spellsource.get_user_id()", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>spellsource.generated_art.urls</code>.
     */
    public final TableField<GeneratedArtRecord, String[]> URLS = createField(DSL.name("urls"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>spellsource.generated_art.info</code>.
     */
    public final TableField<GeneratedArtRecord, JsonObject> INFO = createField(DSL.name("info"), SQLDataType.JSONB, this, "", new JSONBToJsonObjectConverter());

    /**
     * The column <code>spellsource.generated_art.is_archived</code>.
     */
    public final TableField<GeneratedArtRecord, Boolean> IS_ARCHIVED = createField(DSL.name("is_archived"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private GeneratedArt(Name alias, Table<GeneratedArtRecord> aliased) {
        this(alias, aliased, null);
    }

    private GeneratedArt(Name alias, Table<GeneratedArtRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.generated_art</code> table reference
     */
    public GeneratedArt(String alias) {
        this(DSL.name(alias), GENERATED_ART);
    }

    /**
     * Create an aliased <code>spellsource.generated_art</code> table reference
     */
    public GeneratedArt(Name alias) {
        this(alias, GENERATED_ART);
    }

    /**
     * Create a <code>spellsource.generated_art</code> table reference
     */
    public GeneratedArt() {
        this(DSL.name("generated_art"), null);
    }

    public <O extends Record> GeneratedArt(Table<O> child, ForeignKey<O, GeneratedArtRecord> key) {
        super(child, key, GENERATED_ART);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public List<UniqueKey<GeneratedArtRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.GENERATED_ART_HASH_OWNER_KEY);
    }

    @Override
    public List<ForeignKey<GeneratedArtRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GENERATED_ART__GENERATED_ART_OWNER_FKEY);
    }

    private transient UserEntity _userEntity;

    /**
     * Get the implicit join path to the <code>keycloak.user_entity</code>
     * table.
     */
    public UserEntity userEntity() {
        if (_userEntity == null)
            _userEntity = new UserEntity(this, Keys.GENERATED_ART__GENERATED_ART_OWNER_FKEY);

        return _userEntity;
    }

    @Override
    public GeneratedArt as(String alias) {
        return new GeneratedArt(DSL.name(alias), this);
    }

    @Override
    public GeneratedArt as(Name alias) {
        return new GeneratedArt(alias, this);
    }

    @Override
    public GeneratedArt as(Table<?> alias) {
        return new GeneratedArt(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GeneratedArt rename(String name) {
        return new GeneratedArt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeneratedArt rename(Name name) {
        return new GeneratedArt(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeneratedArt rename(Table<?> name) {
        return new GeneratedArt(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String[], JsonObject, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String[], ? super JsonObject, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String[], ? super JsonObject, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
