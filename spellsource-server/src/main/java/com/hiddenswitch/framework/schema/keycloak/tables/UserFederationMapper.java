/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserFederationMapperRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFederationMapper extends TableImpl<UserFederationMapperRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.user_federation_mapper</code>
     */
    public static final UserFederationMapper USER_FEDERATION_MAPPER = new UserFederationMapper();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFederationMapperRecord> getRecordType() {
        return UserFederationMapperRecord.class;
    }

    /**
     * The column <code>keycloak.user_federation_mapper.id</code>.
     */
    public final TableField<UserFederationMapperRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.user_federation_mapper.name</code>.
     */
    public final TableField<UserFederationMapperRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.user_federation_mapper.federation_provider_id</code>.
     */
    public final TableField<UserFederationMapperRecord, String> FEDERATION_PROVIDER_ID = createField(DSL.name("federation_provider_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column
     * <code>keycloak.user_federation_mapper.federation_mapper_type</code>.
     */
    public final TableField<UserFederationMapperRecord, String> FEDERATION_MAPPER_TYPE = createField(DSL.name("federation_mapper_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.user_federation_mapper.realm_id</code>.
     */
    public final TableField<UserFederationMapperRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private UserFederationMapper(Name alias, Table<UserFederationMapperRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFederationMapper(Name alias, Table<UserFederationMapperRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.user_federation_mapper</code> table
     * reference
     */
    public UserFederationMapper(String alias) {
        this(DSL.name(alias), USER_FEDERATION_MAPPER);
    }

    /**
     * Create an aliased <code>keycloak.user_federation_mapper</code> table
     * reference
     */
    public UserFederationMapper(Name alias) {
        this(alias, USER_FEDERATION_MAPPER);
    }

    /**
     * Create a <code>keycloak.user_federation_mapper</code> table reference
     */
    public UserFederationMapper() {
        this(DSL.name("user_federation_mapper"), null);
    }

    public <O extends Record> UserFederationMapper(Table<O> child, ForeignKey<O, UserFederationMapperRecord> key) {
        super(child, key, USER_FEDERATION_MAPPER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USR_FED_MAP_FED_PRV, Indexes.IDX_USR_FED_MAP_REALM);
    }

    @Override
    public UniqueKey<UserFederationMapperRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FEDMAPPERPM;
    }

    @Override
    public List<ForeignKey<UserFederationMapperRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_FEDERATION_MAPPER__FK_FEDMAPPERPM_FEDPRV, Keys.USER_FEDERATION_MAPPER__FK_FEDMAPPERPM_REALM);
    }

    private transient UserFederationProvider _userFederationProvider;
    private transient Realm _realm;

    /**
     * Get the implicit join path to the
     * <code>keycloak.user_federation_provider</code> table.
     */
    public UserFederationProvider userFederationProvider() {
        if (_userFederationProvider == null)
            _userFederationProvider = new UserFederationProvider(this, Keys.USER_FEDERATION_MAPPER__FK_FEDMAPPERPM_FEDPRV);

        return _userFederationProvider;
    }

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.USER_FEDERATION_MAPPER__FK_FEDMAPPERPM_REALM);

        return _realm;
    }

    @Override
    public UserFederationMapper as(String alias) {
        return new UserFederationMapper(DSL.name(alias), this);
    }

    @Override
    public UserFederationMapper as(Name alias) {
        return new UserFederationMapper(alias, this);
    }

    @Override
    public UserFederationMapper as(Table<?> alias) {
        return new UserFederationMapper(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationMapper rename(String name) {
        return new UserFederationMapper(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationMapper rename(Name name) {
        return new UserFederationMapper(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationMapper rename(Table<?> name) {
        return new UserFederationMapper(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
