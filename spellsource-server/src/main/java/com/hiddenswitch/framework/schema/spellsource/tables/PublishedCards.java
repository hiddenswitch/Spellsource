/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.PublishedCardsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublishedCards extends TableImpl<PublishedCardsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.published_cards</code>
     */
    public static final PublishedCards PUBLISHED_CARDS = new PublishedCards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublishedCardsRecord> getRecordType() {
        return PublishedCardsRecord.class;
    }

    /**
     * The column <code>spellsource.published_cards.id</code>.
     */
    public final TableField<PublishedCardsRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.published_cards.succession</code>.
     */
    public final TableField<PublishedCardsRecord, Long> SUCCESSION = createField(DSL.name("succession"), SQLDataType.BIGINT.nullable(false), this, "");

    private PublishedCards(Name alias, Table<PublishedCardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PublishedCards(Name alias, Table<PublishedCardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.published_cards</code> table
     * reference
     */
    public PublishedCards(String alias) {
        this(DSL.name(alias), PUBLISHED_CARDS);
    }

    /**
     * Create an aliased <code>spellsource.published_cards</code> table
     * reference
     */
    public PublishedCards(Name alias) {
        this(alias, PUBLISHED_CARDS);
    }

    /**
     * Create a <code>spellsource.published_cards</code> table reference
     */
    public PublishedCards() {
        this(DSL.name("published_cards"), null);
    }

    public <O extends Record> PublishedCards(Table<O> child, ForeignKey<O, PublishedCardsRecord> key) {
        super(child, key, PUBLISHED_CARDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public UniqueKey<PublishedCardsRecord> getPrimaryKey() {
        return Keys.PUBLISHED_CARDS_PKEY;
    }

    @Override
    public List<ForeignKey<PublishedCardsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PUBLISHED_CARDS__PUBLISHED_CARDS_SUCCESSION_FKEY);
    }

    private transient Cards _cards;

    /**
     * Get the implicit join path to the <code>spellsource.cards</code> table.
     */
    public Cards cards() {
        if (_cards == null)
            _cards = new Cards(this, Keys.PUBLISHED_CARDS__PUBLISHED_CARDS_SUCCESSION_FKEY);

        return _cards;
    }

    @Override
    public PublishedCards as(String alias) {
        return new PublishedCards(DSL.name(alias), this);
    }

    @Override
    public PublishedCards as(Name alias) {
        return new PublishedCards(alias, this);
    }

    @Override
    public PublishedCards as(Table<?> alias) {
        return new PublishedCards(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PublishedCards rename(String name) {
        return new PublishedCards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PublishedCards rename(Name name) {
        return new PublishedCards(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PublishedCards rename(Table<?> name) {
        return new PublishedCards(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
