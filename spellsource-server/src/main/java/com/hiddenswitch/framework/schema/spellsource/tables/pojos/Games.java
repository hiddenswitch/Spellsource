/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.pojos;


import com.hiddenswitch.framework.schema.spellsource.enums.GameStateEnum;
import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.IGames;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.vertx.core.json.JsonObject;

import java.time.OffsetDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Games implements VertxPojo, IGames {

    private static final long serialVersionUID = 1L;

    private Long id;
    private GameStateEnum status;
    private String gitHash;
    private JsonObject trace;
    private OffsetDateTime createdAt;

    public Games() {}

    public Games(IGames value) {
        this.id = value.getId();
        this.status = value.getStatus();
        this.gitHash = value.getGitHash();
        this.trace = value.getTrace();
        this.createdAt = value.getCreatedAt();
    }

    public Games(
        Long id,
        GameStateEnum status,
        String gitHash,
        JsonObject trace,
        OffsetDateTime createdAt
    ) {
        this.id = id;
        this.status = status;
        this.gitHash = gitHash;
        this.trace = trace;
        this.createdAt = createdAt;
    }

        public Games(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>spellsource.games.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>spellsource.games.id</code>.
     */
    @Override
    public Games setId(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>spellsource.games.status</code>.
     */
    @Override
    public GameStateEnum getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>spellsource.games.status</code>.
     */
    @Override
    public Games setStatus(GameStateEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>spellsource.games.git_hash</code>.
     */
    @Override
    public String getGitHash() {
        return this.gitHash;
    }

    /**
     * Setter for <code>spellsource.games.git_hash</code>.
     */
    @Override
    public Games setGitHash(String gitHash) {
        this.gitHash = gitHash;
        return this;
    }

    /**
     * Getter for <code>spellsource.games.trace</code>.
     */
    @Override
    public JsonObject getTrace() {
        return this.trace;
    }

    /**
     * Setter for <code>spellsource.games.trace</code>.
     */
    @Override
    public Games setTrace(JsonObject trace) {
        this.trace = trace;
        return this;
    }

    /**
     * Getter for <code>spellsource.games.created_at</code>.
     */
    @Override
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>spellsource.games.created_at</code>.
     */
    @Override
    public Games setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Games other = (Games) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.gitHash == null) {
            if (other.gitHash != null)
                return false;
        }
        else if (!this.gitHash.equals(other.gitHash))
            return false;
        if (this.trace == null) {
            if (other.trace != null)
                return false;
        }
        else if (!this.trace.equals(other.trace))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.gitHash == null) ? 0 : this.gitHash.hashCode());
        result = prime * result + ((this.trace == null) ? 0 : this.trace.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Games (");

        sb.append(id);
        sb.append(", ").append(status);
        sb.append(", ").append(gitHash);
        sb.append(", ").append(trace);
        sb.append(", ").append(createdAt);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IGames from) {
        setId(from.getId());
        setStatus(from.getStatus());
        setGitHash(from.getGitHash());
        setTrace(from.getTrace());
        setCreatedAt(from.getCreatedAt());
    }

    @Override
    public <E extends IGames> E into(E into) {
        into.from(this);
        return into;
    }
}
