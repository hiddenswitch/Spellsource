/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserFederationMapperConfigRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFederationMapperConfig extends TableImpl<UserFederationMapperConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>keycloak.user_federation_mapper_config</code>
     */
    public static final UserFederationMapperConfig USER_FEDERATION_MAPPER_CONFIG = new UserFederationMapperConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFederationMapperConfigRecord> getRecordType() {
        return UserFederationMapperConfigRecord.class;
    }

    /**
     * The column
     * <code>keycloak.user_federation_mapper_config.user_federation_mapper_id</code>.
     */
    public final TableField<UserFederationMapperConfigRecord, String> USER_FEDERATION_MAPPER_ID = createField(DSL.name("user_federation_mapper_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.user_federation_mapper_config.value</code>.
     */
    public final TableField<UserFederationMapperConfigRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.user_federation_mapper_config.name</code>.
     */
    public final TableField<UserFederationMapperConfigRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private UserFederationMapperConfig(Name alias, Table<UserFederationMapperConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFederationMapperConfig(Name alias, Table<UserFederationMapperConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.user_federation_mapper_config</code>
     * table reference
     */
    public UserFederationMapperConfig(String alias) {
        this(DSL.name(alias), USER_FEDERATION_MAPPER_CONFIG);
    }

    /**
     * Create an aliased <code>keycloak.user_federation_mapper_config</code>
     * table reference
     */
    public UserFederationMapperConfig(Name alias) {
        this(alias, USER_FEDERATION_MAPPER_CONFIG);
    }

    /**
     * Create a <code>keycloak.user_federation_mapper_config</code> table
     * reference
     */
    public UserFederationMapperConfig() {
        this(DSL.name("user_federation_mapper_config"), null);
    }

    public <O extends Record> UserFederationMapperConfig(Table<O> child, ForeignKey<O, UserFederationMapperConfigRecord> key) {
        super(child, key, USER_FEDERATION_MAPPER_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public UniqueKey<UserFederationMapperConfigRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FEDMAPPER_CFG_PM;
    }

    @Override
    public List<ForeignKey<UserFederationMapperConfigRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_FEDERATION_MAPPER_CONFIG__FK_FEDMAPPER_CFG);
    }

    private transient UserFederationMapper _userFederationMapper;

    /**
     * Get the implicit join path to the
     * <code>keycloak.user_federation_mapper</code> table.
     */
    public UserFederationMapper userFederationMapper() {
        if (_userFederationMapper == null)
            _userFederationMapper = new UserFederationMapper(this, Keys.USER_FEDERATION_MAPPER_CONFIG__FK_FEDMAPPER_CFG);

        return _userFederationMapper;
    }

    @Override
    public UserFederationMapperConfig as(String alias) {
        return new UserFederationMapperConfig(DSL.name(alias), this);
    }

    @Override
    public UserFederationMapperConfig as(Name alias) {
        return new UserFederationMapperConfig(alias, this);
    }

    @Override
    public UserFederationMapperConfig as(Table<?> alias) {
        return new UserFederationMapperConfig(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationMapperConfig rename(String name) {
        return new UserFederationMapperConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationMapperConfig rename(Name name) {
        return new UserFederationMapperConfig(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFederationMapperConfig rename(Table<?> name) {
        return new UserFederationMapperConfig(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
