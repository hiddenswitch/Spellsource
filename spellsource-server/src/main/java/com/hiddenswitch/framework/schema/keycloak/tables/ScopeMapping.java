/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ScopeMappingRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScopeMapping extends TableImpl<ScopeMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.scope_mapping</code>
     */
    public static final ScopeMapping SCOPE_MAPPING = new ScopeMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScopeMappingRecord> getRecordType() {
        return ScopeMappingRecord.class;
    }

    /**
     * The column <code>keycloak.scope_mapping.client_id</code>.
     */
    public final TableField<ScopeMappingRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.scope_mapping.role_id</code>.
     */
    public final TableField<ScopeMappingRecord, String> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private ScopeMapping(Name alias, Table<ScopeMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScopeMapping(Name alias, Table<ScopeMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.scope_mapping</code> table reference
     */
    public ScopeMapping(String alias) {
        this(DSL.name(alias), SCOPE_MAPPING);
    }

    /**
     * Create an aliased <code>keycloak.scope_mapping</code> table reference
     */
    public ScopeMapping(Name alias) {
        this(alias, SCOPE_MAPPING);
    }

    /**
     * Create a <code>keycloak.scope_mapping</code> table reference
     */
    public ScopeMapping() {
        this(DSL.name("scope_mapping"), null);
    }

    public <O extends Record> ScopeMapping(Table<O> child, ForeignKey<O, ScopeMappingRecord> key) {
        super(child, key, SCOPE_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SCOPE_MAPPING_ROLE);
    }

    @Override
    public UniqueKey<ScopeMappingRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_81;
    }

    @Override
    public List<ForeignKey<ScopeMappingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SCOPE_MAPPING__FK_OUSE064PLMLR732LXJCN1Q5F1, Keys.SCOPE_MAPPING__FK_P3RH9GRKU11KQFRS4FLTT7RNQ);
    }

    private transient Client _client;
    private transient KeycloakRole _keycloakRole;

    /**
     * Get the implicit join path to the <code>keycloak.client</code> table.
     */
    public Client client() {
        if (_client == null)
            _client = new Client(this, Keys.SCOPE_MAPPING__FK_OUSE064PLMLR732LXJCN1Q5F1);

        return _client;
    }

    /**
     * Get the implicit join path to the <code>keycloak.keycloak_role</code>
     * table.
     */
    public KeycloakRole keycloakRole() {
        if (_keycloakRole == null)
            _keycloakRole = new KeycloakRole(this, Keys.SCOPE_MAPPING__FK_P3RH9GRKU11KQFRS4FLTT7RNQ);

        return _keycloakRole;
    }

    @Override
    public ScopeMapping as(String alias) {
        return new ScopeMapping(DSL.name(alias), this);
    }

    @Override
    public ScopeMapping as(Name alias) {
        return new ScopeMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopeMapping rename(String name) {
        return new ScopeMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopeMapping rename(Name name) {
        return new ScopeMapping(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
