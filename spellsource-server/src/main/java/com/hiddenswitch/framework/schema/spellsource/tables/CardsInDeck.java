/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.CardsInDeckRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsInDeck extends TableImpl<CardsInDeckRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.cards_in_deck</code>
     */
    public static final CardsInDeck CARDS_IN_DECK = new CardsInDeck();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsInDeckRecord> getRecordType() {
        return CardsInDeckRecord.class;
    }

    /**
     * The column <code>spellsource.cards_in_deck.id</code>.
     */
    public final TableField<CardsInDeckRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>spellsource.cards_in_deck.deck_id</code>. deleting a
     * deck deletes all its card references
     */
    public final TableField<CardsInDeckRecord, String> DECK_ID = createField(DSL.name("deck_id"), SQLDataType.CLOB.nullable(false), this, "deleting a deck deletes all its card references");

    /**
     * The column <code>spellsource.cards_in_deck.card_id</code>. cannot delete
     * cards that are currently used in decks
     */
    public final TableField<CardsInDeckRecord, String> CARD_ID = createField(DSL.name("card_id"), SQLDataType.CLOB.nullable(false), this, "cannot delete cards that are currently used in decks");

    private CardsInDeck(Name alias, Table<CardsInDeckRecord> aliased) {
        this(alias, aliased, null);
    }

    private CardsInDeck(Name alias, Table<CardsInDeckRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.cards_in_deck</code> table reference
     */
    public CardsInDeck(String alias) {
        this(DSL.name(alias), CARDS_IN_DECK);
    }

    /**
     * Create an aliased <code>spellsource.cards_in_deck</code> table reference
     */
    public CardsInDeck(Name alias) {
        this(alias, CARDS_IN_DECK);
    }

    /**
     * Create a <code>spellsource.cards_in_deck</code> table reference
     */
    public CardsInDeck() {
        this(DSL.name("cards_in_deck"), null);
    }

    public <O extends Record> CardsInDeck(Table<O> child, ForeignKey<O, CardsInDeckRecord> key) {
        super(child, key, CARDS_IN_DECK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public Identity<CardsInDeckRecord, Long> getIdentity() {
        return (Identity<CardsInDeckRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CardsInDeckRecord> getPrimaryKey() {
        return Keys.CARDS_IN_DECK_PKEY;
    }

    @Override
    public List<ForeignKey<CardsInDeckRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CARDS_IN_DECK__CARDS_IN_DECK_DECK_ID_FKEY);
    }

    private transient Decks _decks;

    /**
     * Get the implicit join path to the <code>spellsource.decks</code> table.
     */
    public Decks decks() {
        if (_decks == null)
            _decks = new Decks(this, Keys.CARDS_IN_DECK__CARDS_IN_DECK_DECK_ID_FKEY);

        return _decks;
    }

    @Override
    public CardsInDeck as(String alias) {
        return new CardsInDeck(DSL.name(alias), this);
    }

    @Override
    public CardsInDeck as(Name alias) {
        return new CardsInDeck(alias, this);
    }

    @Override
    public CardsInDeck as(Table<?> alias) {
        return new CardsInDeck(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CardsInDeck rename(String name) {
        return new CardsInDeck(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CardsInDeck rename(Name name) {
        return new CardsInDeck(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CardsInDeck rename(Table<?> name) {
        return new CardsInDeck(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
