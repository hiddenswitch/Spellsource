/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables;


import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.spellsource.Indexes;
import com.hiddenswitch.framework.schema.spellsource.Keys;
import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.DeckSharesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * indicates a deck shared to a player
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeckShares extends TableImpl<DeckSharesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spellsource.deck_shares</code>
     */
    public static final DeckShares DECK_SHARES = new DeckShares();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeckSharesRecord> getRecordType() {
        return DeckSharesRecord.class;
    }

    /**
     * The column <code>spellsource.deck_shares.deck_id</code>.
     */
    public final TableField<DeckSharesRecord, String> DECK_ID = createField(DSL.name("deck_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.deck_shares.share_recipient_id</code>.
     */
    public final TableField<DeckSharesRecord, String> SHARE_RECIPIENT_ID = createField(DSL.name("share_recipient_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>spellsource.deck_shares.trashed_by_recipient</code>.
     */
    public final TableField<DeckSharesRecord, Boolean> TRASHED_BY_RECIPIENT = createField(DSL.name("trashed_by_recipient"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private DeckShares(Name alias, Table<DeckSharesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeckShares(Name alias, Table<DeckSharesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("indicates a deck shared to a player"), TableOptions.table());
    }

    /**
     * Create an aliased <code>spellsource.deck_shares</code> table reference
     */
    public DeckShares(String alias) {
        this(DSL.name(alias), DECK_SHARES);
    }

    /**
     * Create an aliased <code>spellsource.deck_shares</code> table reference
     */
    public DeckShares(Name alias) {
        this(alias, DECK_SHARES);
    }

    /**
     * Create a <code>spellsource.deck_shares</code> table reference
     */
    public DeckShares() {
        this(DSL.name("deck_shares"), null);
    }

    public <O extends Record> DeckShares(Table<O> child, ForeignKey<O, DeckSharesRecord> key) {
        super(child, key, DECK_SHARES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spellsource.SPELLSOURCE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DECK_SHARES_TRASHED_BY_RECIPIENT_IDX);
    }

    @Override
    public UniqueKey<DeckSharesRecord> getPrimaryKey() {
        return Keys.DECK_SHARES_PKEY;
    }

    @Override
    public List<ForeignKey<DeckSharesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DECK_SHARES__DECK_SHARES_DECK_ID_FKEY, Keys.DECK_SHARES__DECK_SHARES_SHARE_RECIPIENT_ID_FKEY);
    }

    private transient Decks _decks;
    private transient UserEntity _userEntity;

    /**
     * Get the implicit join path to the <code>spellsource.decks</code> table.
     */
    public Decks decks() {
        if (_decks == null)
            _decks = new Decks(this, Keys.DECK_SHARES__DECK_SHARES_DECK_ID_FKEY);

        return _decks;
    }

    /**
     * Get the implicit join path to the <code>keycloak.user_entity</code>
     * table.
     */
    public UserEntity userEntity() {
        if (_userEntity == null)
            _userEntity = new UserEntity(this, Keys.DECK_SHARES__DECK_SHARES_SHARE_RECIPIENT_ID_FKEY);

        return _userEntity;
    }

    @Override
    public DeckShares as(String alias) {
        return new DeckShares(DSL.name(alias), this);
    }

    @Override
    public DeckShares as(Name alias) {
        return new DeckShares(alias, this);
    }

    @Override
    public DeckShares as(Table<?> alias) {
        return new DeckShares(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DeckShares rename(String name) {
        return new DeckShares(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DeckShares rename(Name name) {
        return new DeckShares(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DeckShares rename(Table<?> name) {
        return new DeckShares(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
