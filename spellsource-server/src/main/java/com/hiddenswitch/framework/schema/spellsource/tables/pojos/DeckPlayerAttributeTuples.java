/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.tables.pojos;


import com.hiddenswitch.framework.schema.spellsource.tables.interfaces.IDeckPlayerAttributeTuples;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeckPlayerAttributeTuples implements VertxPojo, IDeckPlayerAttributeTuples {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String deckId;
    private Integer attribute;
    private String stringValue;

    public DeckPlayerAttributeTuples() {}

    public DeckPlayerAttributeTuples(IDeckPlayerAttributeTuples value) {
        this.id = value.getId();
        this.deckId = value.getDeckId();
        this.attribute = value.getAttribute();
        this.stringValue = value.getStringValue();
    }

    public DeckPlayerAttributeTuples(
        Long id,
        String deckId,
        Integer attribute,
        String stringValue
    ) {
        this.id = id;
        this.deckId = deckId;
        this.attribute = attribute;
        this.stringValue = stringValue;
    }

        public DeckPlayerAttributeTuples(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>spellsource.deck_player_attribute_tuples.id</code>.
     */
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>spellsource.deck_player_attribute_tuples.id</code>.
     */
    @Override
    public DeckPlayerAttributeTuples setId(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>spellsource.deck_player_attribute_tuples.deck_id</code>.
     */
    @Override
    public String getDeckId() {
        return this.deckId;
    }

    /**
     * Setter for <code>spellsource.deck_player_attribute_tuples.deck_id</code>.
     */
    @Override
    public DeckPlayerAttributeTuples setDeckId(String deckId) {
        this.deckId = deckId;
        return this;
    }

    /**
     * Getter for
     * <code>spellsource.deck_player_attribute_tuples.attribute</code>.
     */
    @Override
    public Integer getAttribute() {
        return this.attribute;
    }

    /**
     * Setter for
     * <code>spellsource.deck_player_attribute_tuples.attribute</code>.
     */
    @Override
    public DeckPlayerAttributeTuples setAttribute(Integer attribute) {
        this.attribute = attribute;
        return this;
    }

    /**
     * Getter for
     * <code>spellsource.deck_player_attribute_tuples.string_value</code>.
     */
    @Override
    public String getStringValue() {
        return this.stringValue;
    }

    /**
     * Setter for
     * <code>spellsource.deck_player_attribute_tuples.string_value</code>.
     */
    @Override
    public DeckPlayerAttributeTuples setStringValue(String stringValue) {
        this.stringValue = stringValue;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DeckPlayerAttributeTuples other = (DeckPlayerAttributeTuples) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.deckId == null) {
            if (other.deckId != null)
                return false;
        }
        else if (!this.deckId.equals(other.deckId))
            return false;
        if (this.attribute == null) {
            if (other.attribute != null)
                return false;
        }
        else if (!this.attribute.equals(other.attribute))
            return false;
        if (this.stringValue == null) {
            if (other.stringValue != null)
                return false;
        }
        else if (!this.stringValue.equals(other.stringValue))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.deckId == null) ? 0 : this.deckId.hashCode());
        result = prime * result + ((this.attribute == null) ? 0 : this.attribute.hashCode());
        result = prime * result + ((this.stringValue == null) ? 0 : this.stringValue.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DeckPlayerAttributeTuples (");

        sb.append(id);
        sb.append(", ").append(deckId);
        sb.append(", ").append(attribute);
        sb.append(", ").append(stringValue);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDeckPlayerAttributeTuples from) {
        setId(from.getId());
        setDeckId(from.getDeckId());
        setAttribute(from.getAttribute());
        setStringValue(from.getStringValue());
    }

    @Override
    public <E extends IDeckPlayerAttributeTuples> E into(E into) {
        into.from(this);
        return into;
    }
}
