/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FederatedUserRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FederatedUser extends TableImpl<FederatedUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.federated_user</code>
     */
    public static final FederatedUser FEDERATED_USER = new FederatedUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FederatedUserRecord> getRecordType() {
        return FederatedUserRecord.class;
    }

    /**
     * The column <code>keycloak.federated_user.id</code>.
     */
    public final TableField<FederatedUserRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keycloak.federated_user.storage_provider_id</code>.
     */
    public final TableField<FederatedUserRecord, String> STORAGE_PROVIDER_ID = createField(DSL.name("storage_provider_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.federated_user.realm_id</code>.
     */
    public final TableField<FederatedUserRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private FederatedUser(Name alias, Table<FederatedUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private FederatedUser(Name alias, Table<FederatedUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.federated_user</code> table reference
     */
    public FederatedUser(String alias) {
        this(DSL.name(alias), FEDERATED_USER);
    }

    /**
     * Create an aliased <code>keycloak.federated_user</code> table reference
     */
    public FederatedUser(Name alias) {
        this(alias, FEDERATED_USER);
    }

    /**
     * Create a <code>keycloak.federated_user</code> table reference
     */
    public FederatedUser() {
        this(DSL.name("federated_user"), null);
    }

    public <O extends Record> FederatedUser(Table<O> child, ForeignKey<O, FederatedUserRecord> key) {
        super(child, key, FEDERATED_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public UniqueKey<FederatedUserRecord> getPrimaryKey() {
        return Keys.CONSTR_FEDERATED_USER;
    }

    @Override
    public FederatedUser as(String alias) {
        return new FederatedUser(DSL.name(alias), this);
    }

    @Override
    public FederatedUser as(Name alias) {
        return new FederatedUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FederatedUser rename(String name) {
        return new FederatedUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FederatedUser rename(Name name) {
        return new FederatedUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
