/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.OfflineClientSession;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IOfflineClientSession;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfflineClientSessionRecord extends UpdatableRecordImpl<OfflineClientSessionRecord> implements VertxPojo, Record5<String, String, String, Integer, String>, IOfflineClientSession {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>keycloak.offline_client_session.user_session_id</code>.
     */
    @Override
    public OfflineClientSessionRecord setUserSessionId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.user_session_id</code>.
     */
    @Override
    public String getUserSessionId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.offline_client_session.client_id</code>.
     */
    @Override
    public OfflineClientSessionRecord setClientId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.client_id</code>.
     */
    @Override
    public String getClientId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>keycloak.offline_client_session.offline_flag</code>.
     */
    @Override
    public OfflineClientSessionRecord setOfflineFlag(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.offline_flag</code>.
     */
    @Override
    public String getOfflineFlag() {
        return (String) get(2);
    }

    /**
     * Setter for <code>keycloak.offline_client_session.timestamp</code>.
     */
    @Override
    public OfflineClientSessionRecord setTimestamp(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.timestamp</code>.
     */
    @Override
    public Integer getTimestamp() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>keycloak.offline_client_session.data</code>.
     */
    @Override
    public OfflineClientSessionRecord setData(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.offline_client_session.data</code>.
     */
    @Override
    public String getData() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String, Integer, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return OfflineClientSession.OFFLINE_CLIENT_SESSION.USER_SESSION_ID;
    }

    @Override
    public Field<String> field2() {
        return OfflineClientSession.OFFLINE_CLIENT_SESSION.CLIENT_ID;
    }

    @Override
    public Field<String> field3() {
        return OfflineClientSession.OFFLINE_CLIENT_SESSION.OFFLINE_FLAG;
    }

    @Override
    public Field<Integer> field4() {
        return OfflineClientSession.OFFLINE_CLIENT_SESSION.TIMESTAMP;
    }

    @Override
    public Field<String> field5() {
        return OfflineClientSession.OFFLINE_CLIENT_SESSION.DATA;
    }

    @Override
    public String component1() {
        return getUserSessionId();
    }

    @Override
    public String component2() {
        return getClientId();
    }

    @Override
    public String component3() {
        return getOfflineFlag();
    }

    @Override
    public Integer component4() {
        return getTimestamp();
    }

    @Override
    public String component5() {
        return getData();
    }

    @Override
    public String value1() {
        return getUserSessionId();
    }

    @Override
    public String value2() {
        return getClientId();
    }

    @Override
    public String value3() {
        return getOfflineFlag();
    }

    @Override
    public Integer value4() {
        return getTimestamp();
    }

    @Override
    public String value5() {
        return getData();
    }

    @Override
    public OfflineClientSessionRecord value1(String value) {
        setUserSessionId(value);
        return this;
    }

    @Override
    public OfflineClientSessionRecord value2(String value) {
        setClientId(value);
        return this;
    }

    @Override
    public OfflineClientSessionRecord value3(String value) {
        setOfflineFlag(value);
        return this;
    }

    @Override
    public OfflineClientSessionRecord value4(Integer value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public OfflineClientSessionRecord value5(String value) {
        setData(value);
        return this;
    }

    @Override
    public OfflineClientSessionRecord values(String value1, String value2, String value3, Integer value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOfflineClientSession from) {
        setUserSessionId(from.getUserSessionId());
        setClientId(from.getClientId());
        setOfflineFlag(from.getOfflineFlag());
        setTimestamp(from.getTimestamp());
        setData(from.getData());
    }

    @Override
    public <E extends IOfflineClientSession> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OfflineClientSessionRecord
     */
    public OfflineClientSessionRecord() {
        super(OfflineClientSession.OFFLINE_CLIENT_SESSION);
    }

    /**
     * Create a detached, initialised OfflineClientSessionRecord
     */
    public OfflineClientSessionRecord(String userSessionId, String clientId, String offlineFlag, Integer timestamp, String data) {
        super(OfflineClientSession.OFFLINE_CLIENT_SESSION);

        setUserSessionId(userSessionId);
        setClientId(clientId);
        setOfflineFlag(offlineFlag);
        setTimestamp(timestamp);
        setData(data);
    }

    /**
     * Create a detached, initialised OfflineClientSessionRecord
     */
    public OfflineClientSessionRecord(com.hiddenswitch.framework.schema.keycloak.tables.pojos.OfflineClientSession value) {
        super(OfflineClientSession.OFFLINE_CLIENT_SESSION);

        if (value != null) {
            setUserSessionId(value.getUserSessionId());
            setClientId(value.getClientId());
            setOfflineFlag(value.getOfflineFlag());
            setTimestamp(value.getTimestamp());
            setData(value.getData());
        }
    }

        public OfflineClientSessionRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
