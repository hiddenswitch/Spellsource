/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.spellsource.routines;


import com.hiddenswitch.framework.schema.spellsource.Spellsource;
import com.hiddenswitch.framework.schema.spellsource.tables.records.DecksRecord;

import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CreateDeckWithCards extends AbstractRoutine<DecksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The parameter
     * <code>spellsource.create_deck_with_cards.RETURN_VALUE</code>.
     */
    public static final Parameter<DecksRecord> RETURN_VALUE = Internal.createParameter("RETURN_VALUE", com.hiddenswitch.framework.schema.spellsource.tables.Decks.DECKS.getDataType(), false, false);

    /**
     * The parameter <code>spellsource.create_deck_with_cards.deck_name</code>.
     */
    public static final Parameter<String> DECK_NAME = Internal.createParameter("deck_name", SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>spellsource.create_deck_with_cards.class_hero</code>.
     */
    public static final Parameter<String> CLASS_HERO = Internal.createParameter("class_hero", SQLDataType.CLOB, false, false);

    /**
     * The parameter
     * <code>spellsource.create_deck_with_cards.format_name</code>.
     */
    public static final Parameter<String> FORMAT_NAME = Internal.createParameter("format_name", SQLDataType.CLOB, false, false);

    /**
     * The parameter <code>spellsource.create_deck_with_cards.card_ids</code>.
     */
    public static final Parameter<String[]> CARD_IDS = Internal.createParameter("card_ids", SQLDataType.CLOB.getArrayDataType(), false, false);

    /**
     * Create a new routine call instance
     */
    public CreateDeckWithCards() {
        super("create_deck_with_cards", Spellsource.SPELLSOURCE, com.hiddenswitch.framework.schema.spellsource.tables.Decks.DECKS.getDataType());

        setReturnParameter(RETURN_VALUE);
        addInParameter(DECK_NAME);
        addInParameter(CLASS_HERO);
        addInParameter(FORMAT_NAME);
        addInParameter(CARD_IDS);
    }

    /**
     * Set the <code>deck_name</code> parameter IN value to the routine
     */
    public void setDeckName(String value) {
        setValue(DECK_NAME, value);
    }

    /**
     * Set the <code>deck_name</code> parameter to the function to be used with
     * a {@link org.jooq.Select} statement
     */
    public CreateDeckWithCards setDeckName(Field<String> field) {
        setField(DECK_NAME, field);
        return this;
    }

    /**
     * Set the <code>class_hero</code> parameter IN value to the routine
     */
    public void setClassHero(String value) {
        setValue(CLASS_HERO, value);
    }

    /**
     * Set the <code>class_hero</code> parameter to the function to be used with
     * a {@link org.jooq.Select} statement
     */
    public CreateDeckWithCards setClassHero(Field<String> field) {
        setField(CLASS_HERO, field);
        return this;
    }

    /**
     * Set the <code>format_name</code> parameter IN value to the routine
     */
    public void setFormatName(String value) {
        setValue(FORMAT_NAME, value);
    }

    /**
     * Set the <code>format_name</code> parameter to the function to be used
     * with a {@link org.jooq.Select} statement
     */
    public CreateDeckWithCards setFormatName(Field<String> field) {
        setField(FORMAT_NAME, field);
        return this;
    }

    /**
     * Set the <code>card_ids</code> parameter IN value to the routine
     */
    public void setCardIds(String[] value) {
        setValue(CARD_IDS, value);
    }

    /**
     * Set the <code>card_ids</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    public CreateDeckWithCards setCardIds(Field<String[]> field) {
        setField(CARD_IDS, field);
        return this;
    }
}
