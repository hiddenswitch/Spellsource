/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IClientTemplate;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientTemplate implements VertxPojo, IClientTemplate {

    private static final long serialVersionUID = 1L;

    private String  id;
    private String  name;
    private String  realmId;
    private String  description;
    private String  protocol;
    private Boolean fullScopeAllowed;
    private Boolean consentRequired;
    private Boolean standardFlowEnabled;
    private Boolean implicitFlowEnabled;
    private Boolean directAccessGrantsEnabled;
    private Boolean serviceAccountsEnabled;
    private Boolean frontchannelLogout;
    private Boolean bearerOnly;
    private Boolean publicClient;

    public ClientTemplate() {}

    public ClientTemplate(IClientTemplate value) {
        this.id = value.getId();
        this.name = value.getName();
        this.realmId = value.getRealmId();
        this.description = value.getDescription();
        this.protocol = value.getProtocol();
        this.fullScopeAllowed = value.getFullScopeAllowed();
        this.consentRequired = value.getConsentRequired();
        this.standardFlowEnabled = value.getStandardFlowEnabled();
        this.implicitFlowEnabled = value.getImplicitFlowEnabled();
        this.directAccessGrantsEnabled = value.getDirectAccessGrantsEnabled();
        this.serviceAccountsEnabled = value.getServiceAccountsEnabled();
        this.frontchannelLogout = value.getFrontchannelLogout();
        this.bearerOnly = value.getBearerOnly();
        this.publicClient = value.getPublicClient();
    }

    public ClientTemplate(
        String  id,
        String  name,
        String  realmId,
        String  description,
        String  protocol,
        Boolean fullScopeAllowed,
        Boolean consentRequired,
        Boolean standardFlowEnabled,
        Boolean implicitFlowEnabled,
        Boolean directAccessGrantsEnabled,
        Boolean serviceAccountsEnabled,
        Boolean frontchannelLogout,
        Boolean bearerOnly,
        Boolean publicClient
    ) {
        this.id = id;
        this.name = name;
        this.realmId = realmId;
        this.description = description;
        this.protocol = protocol;
        this.fullScopeAllowed = fullScopeAllowed;
        this.consentRequired = consentRequired;
        this.standardFlowEnabled = standardFlowEnabled;
        this.implicitFlowEnabled = implicitFlowEnabled;
        this.directAccessGrantsEnabled = directAccessGrantsEnabled;
        this.serviceAccountsEnabled = serviceAccountsEnabled;
        this.frontchannelLogout = frontchannelLogout;
        this.bearerOnly = bearerOnly;
        this.publicClient = publicClient;
    }

        public ClientTemplate(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>keycloak.client_template.id</code>.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>keycloak.client_template.id</code>.
     */
    @Override
    public ClientTemplate setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.name</code>.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>keycloak.client_template.name</code>.
     */
    @Override
    public ClientTemplate setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.realm_id</code>.
     */
    @Override
    public String getRealmId() {
        return this.realmId;
    }

    /**
     * Setter for <code>keycloak.client_template.realm_id</code>.
     */
    @Override
    public ClientTemplate setRealmId(String realmId) {
        this.realmId = realmId;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.description</code>.
     */
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>keycloak.client_template.description</code>.
     */
    @Override
    public ClientTemplate setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.protocol</code>.
     */
    @Override
    public String getProtocol() {
        return this.protocol;
    }

    /**
     * Setter for <code>keycloak.client_template.protocol</code>.
     */
    @Override
    public ClientTemplate setProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.full_scope_allowed</code>.
     */
    @Override
    public Boolean getFullScopeAllowed() {
        return this.fullScopeAllowed;
    }

    /**
     * Setter for <code>keycloak.client_template.full_scope_allowed</code>.
     */
    @Override
    public ClientTemplate setFullScopeAllowed(Boolean fullScopeAllowed) {
        this.fullScopeAllowed = fullScopeAllowed;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.consent_required</code>.
     */
    @Override
    public Boolean getConsentRequired() {
        return this.consentRequired;
    }

    /**
     * Setter for <code>keycloak.client_template.consent_required</code>.
     */
    @Override
    public ClientTemplate setConsentRequired(Boolean consentRequired) {
        this.consentRequired = consentRequired;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.standard_flow_enabled</code>.
     */
    @Override
    public Boolean getStandardFlowEnabled() {
        return this.standardFlowEnabled;
    }

    /**
     * Setter for <code>keycloak.client_template.standard_flow_enabled</code>.
     */
    @Override
    public ClientTemplate setStandardFlowEnabled(Boolean standardFlowEnabled) {
        this.standardFlowEnabled = standardFlowEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.implicit_flow_enabled</code>.
     */
    @Override
    public Boolean getImplicitFlowEnabled() {
        return this.implicitFlowEnabled;
    }

    /**
     * Setter for <code>keycloak.client_template.implicit_flow_enabled</code>.
     */
    @Override
    public ClientTemplate setImplicitFlowEnabled(Boolean implicitFlowEnabled) {
        this.implicitFlowEnabled = implicitFlowEnabled;
        return this;
    }

    /**
     * Getter for
     * <code>keycloak.client_template.direct_access_grants_enabled</code>.
     */
    @Override
    public Boolean getDirectAccessGrantsEnabled() {
        return this.directAccessGrantsEnabled;
    }

    /**
     * Setter for
     * <code>keycloak.client_template.direct_access_grants_enabled</code>.
     */
    @Override
    public ClientTemplate setDirectAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
        this.directAccessGrantsEnabled = directAccessGrantsEnabled;
        return this;
    }

    /**
     * Getter for
     * <code>keycloak.client_template.service_accounts_enabled</code>.
     */
    @Override
    public Boolean getServiceAccountsEnabled() {
        return this.serviceAccountsEnabled;
    }

    /**
     * Setter for
     * <code>keycloak.client_template.service_accounts_enabled</code>.
     */
    @Override
    public ClientTemplate setServiceAccountsEnabled(Boolean serviceAccountsEnabled) {
        this.serviceAccountsEnabled = serviceAccountsEnabled;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.frontchannel_logout</code>.
     */
    @Override
    public Boolean getFrontchannelLogout() {
        return this.frontchannelLogout;
    }

    /**
     * Setter for <code>keycloak.client_template.frontchannel_logout</code>.
     */
    @Override
    public ClientTemplate setFrontchannelLogout(Boolean frontchannelLogout) {
        this.frontchannelLogout = frontchannelLogout;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.bearer_only</code>.
     */
    @Override
    public Boolean getBearerOnly() {
        return this.bearerOnly;
    }

    /**
     * Setter for <code>keycloak.client_template.bearer_only</code>.
     */
    @Override
    public ClientTemplate setBearerOnly(Boolean bearerOnly) {
        this.bearerOnly = bearerOnly;
        return this;
    }

    /**
     * Getter for <code>keycloak.client_template.public_client</code>.
     */
    @Override
    public Boolean getPublicClient() {
        return this.publicClient;
    }

    /**
     * Setter for <code>keycloak.client_template.public_client</code>.
     */
    @Override
    public ClientTemplate setPublicClient(Boolean publicClient) {
        this.publicClient = publicClient;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ClientTemplate (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(realmId);
        sb.append(", ").append(description);
        sb.append(", ").append(protocol);
        sb.append(", ").append(fullScopeAllowed);
        sb.append(", ").append(consentRequired);
        sb.append(", ").append(standardFlowEnabled);
        sb.append(", ").append(implicitFlowEnabled);
        sb.append(", ").append(directAccessGrantsEnabled);
        sb.append(", ").append(serviceAccountsEnabled);
        sb.append(", ").append(frontchannelLogout);
        sb.append(", ").append(bearerOnly);
        sb.append(", ").append(publicClient);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IClientTemplate from) {
        setId(from.getId());
        setName(from.getName());
        setRealmId(from.getRealmId());
        setDescription(from.getDescription());
        setProtocol(from.getProtocol());
        setFullScopeAllowed(from.getFullScopeAllowed());
        setConsentRequired(from.getConsentRequired());
        setStandardFlowEnabled(from.getStandardFlowEnabled());
        setImplicitFlowEnabled(from.getImplicitFlowEnabled());
        setDirectAccessGrantsEnabled(from.getDirectAccessGrantsEnabled());
        setServiceAccountsEnabled(from.getServiceAccountsEnabled());
        setFrontchannelLogout(from.getFrontchannelLogout());
        setBearerOnly(from.getBearerOnly());
        setPublicClient(from.getPublicClient());
    }

    @Override
    public <E extends IClientTemplate> E into(E into) {
        into.from(this);
        return into;
    }
}
