/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Indexes;
import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.AssociatedPolicyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssociatedPolicy extends TableImpl<AssociatedPolicyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.associated_policy</code>
     */
    public static final AssociatedPolicy ASSOCIATED_POLICY = new AssociatedPolicy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssociatedPolicyRecord> getRecordType() {
        return AssociatedPolicyRecord.class;
    }

    /**
     * The column <code>keycloak.associated_policy.policy_id</code>.
     */
    public final TableField<AssociatedPolicyRecord, String> POLICY_ID = createField(DSL.name("policy_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.associated_policy.associated_policy_id</code>.
     */
    public final TableField<AssociatedPolicyRecord, String> ASSOCIATED_POLICY_ID = createField(DSL.name("associated_policy_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private AssociatedPolicy(Name alias, Table<AssociatedPolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssociatedPolicy(Name alias, Table<AssociatedPolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.associated_policy</code> table reference
     */
    public AssociatedPolicy(String alias) {
        this(DSL.name(alias), ASSOCIATED_POLICY);
    }

    /**
     * Create an aliased <code>keycloak.associated_policy</code> table reference
     */
    public AssociatedPolicy(Name alias) {
        this(alias, ASSOCIATED_POLICY);
    }

    /**
     * Create a <code>keycloak.associated_policy</code> table reference
     */
    public AssociatedPolicy() {
        this(DSL.name("associated_policy"), null);
    }

    public <O extends Record> AssociatedPolicy(Table<O> child, ForeignKey<O, AssociatedPolicyRecord> key) {
        super(child, key, ASSOCIATED_POLICY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ASSOC_POL_ASSOC_POL_ID);
    }

    @Override
    public UniqueKey<AssociatedPolicyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FARSRPAP;
    }

    @Override
    public List<ForeignKey<AssociatedPolicyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASSOCIATED_POLICY__FK_FRSRPAS14XCX4WNKOG82SSRFY, Keys.ASSOCIATED_POLICY__FK_FRSR5S213XCX4WNKOG82SSRFY);
    }

    private transient ResourceServerPolicy _fkFrsrpas14xcx4wnkog82ssrfy;
    private transient ResourceServerPolicy _fkFrsr5s213xcx4wnkog82ssrfy;

    /**
     * Get the implicit join path to the
     * <code>keycloak.resource_server_policy</code> table, via the
     * <code>fk_frsrpas14xcx4wnkog82ssrfy</code> key.
     */
    public ResourceServerPolicy fkFrsrpas14xcx4wnkog82ssrfy() {
        if (_fkFrsrpas14xcx4wnkog82ssrfy == null)
            _fkFrsrpas14xcx4wnkog82ssrfy = new ResourceServerPolicy(this, Keys.ASSOCIATED_POLICY__FK_FRSRPAS14XCX4WNKOG82SSRFY);

        return _fkFrsrpas14xcx4wnkog82ssrfy;
    }

    /**
     * Get the implicit join path to the
     * <code>keycloak.resource_server_policy</code> table, via the
     * <code>fk_frsr5s213xcx4wnkog82ssrfy</code> key.
     */
    public ResourceServerPolicy fkFrsr5s213xcx4wnkog82ssrfy() {
        if (_fkFrsr5s213xcx4wnkog82ssrfy == null)
            _fkFrsr5s213xcx4wnkog82ssrfy = new ResourceServerPolicy(this, Keys.ASSOCIATED_POLICY__FK_FRSR5S213XCX4WNKOG82SSRFY);

        return _fkFrsr5s213xcx4wnkog82ssrfy;
    }

    @Override
    public AssociatedPolicy as(String alias) {
        return new AssociatedPolicy(DSL.name(alias), this);
    }

    @Override
    public AssociatedPolicy as(Name alias) {
        return new AssociatedPolicy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssociatedPolicy rename(String name) {
        return new AssociatedPolicy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssociatedPolicy rename(Name name) {
        return new AssociatedPolicy(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
