/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.pojos;


import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IAuthenticationExecution;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthenticationExecution implements VertxPojo, IAuthenticationExecution {

    private static final long serialVersionUID = 1L;

    private String id;
    private String alias;
    private String authenticator;
    private String realmId;
    private String flowId;
    private Integer requirement;
    private Integer priority;
    private Boolean authenticatorFlow;
    private String authFlowId;
    private String authConfig;

    public AuthenticationExecution() {}

    public AuthenticationExecution(IAuthenticationExecution value) {
        this.id = value.getId();
        this.alias = value.getAlias();
        this.authenticator = value.getAuthenticator();
        this.realmId = value.getRealmId();
        this.flowId = value.getFlowId();
        this.requirement = value.getRequirement();
        this.priority = value.getPriority();
        this.authenticatorFlow = value.getAuthenticatorFlow();
        this.authFlowId = value.getAuthFlowId();
        this.authConfig = value.getAuthConfig();
    }

    public AuthenticationExecution(
        String id,
        String alias,
        String authenticator,
        String realmId,
        String flowId,
        Integer requirement,
        Integer priority,
        Boolean authenticatorFlow,
        String authFlowId,
        String authConfig
    ) {
        this.id = id;
        this.alias = alias;
        this.authenticator = authenticator;
        this.realmId = realmId;
        this.flowId = flowId;
        this.requirement = requirement;
        this.priority = priority;
        this.authenticatorFlow = authenticatorFlow;
        this.authFlowId = authFlowId;
        this.authConfig = authConfig;
    }

        public AuthenticationExecution(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>keycloak.authentication_execution.id</code>.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.id</code>.
     */
    @Override
    public AuthenticationExecution setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>keycloak.authentication_execution.alias</code>.
     */
    @Override
    public String getAlias() {
        return this.alias;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.alias</code>.
     */
    @Override
    public AuthenticationExecution setAlias(String alias) {
        this.alias = alias;
        return this;
    }

    /**
     * Getter for <code>keycloak.authentication_execution.authenticator</code>.
     */
    @Override
    public String getAuthenticator() {
        return this.authenticator;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.authenticator</code>.
     */
    @Override
    public AuthenticationExecution setAuthenticator(String authenticator) {
        this.authenticator = authenticator;
        return this;
    }

    /**
     * Getter for <code>keycloak.authentication_execution.realm_id</code>.
     */
    @Override
    public String getRealmId() {
        return this.realmId;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.realm_id</code>.
     */
    @Override
    public AuthenticationExecution setRealmId(String realmId) {
        this.realmId = realmId;
        return this;
    }

    /**
     * Getter for <code>keycloak.authentication_execution.flow_id</code>.
     */
    @Override
    public String getFlowId() {
        return this.flowId;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.flow_id</code>.
     */
    @Override
    public AuthenticationExecution setFlowId(String flowId) {
        this.flowId = flowId;
        return this;
    }

    /**
     * Getter for <code>keycloak.authentication_execution.requirement</code>.
     */
    @Override
    public Integer getRequirement() {
        return this.requirement;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.requirement</code>.
     */
    @Override
    public AuthenticationExecution setRequirement(Integer requirement) {
        this.requirement = requirement;
        return this;
    }

    /**
     * Getter for <code>keycloak.authentication_execution.priority</code>.
     */
    @Override
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.priority</code>.
     */
    @Override
    public AuthenticationExecution setPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Getter for
     * <code>keycloak.authentication_execution.authenticator_flow</code>.
     */
    @Override
    public Boolean getAuthenticatorFlow() {
        return this.authenticatorFlow;
    }

    /**
     * Setter for
     * <code>keycloak.authentication_execution.authenticator_flow</code>.
     */
    @Override
    public AuthenticationExecution setAuthenticatorFlow(Boolean authenticatorFlow) {
        this.authenticatorFlow = authenticatorFlow;
        return this;
    }

    /**
     * Getter for <code>keycloak.authentication_execution.auth_flow_id</code>.
     */
    @Override
    public String getAuthFlowId() {
        return this.authFlowId;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.auth_flow_id</code>.
     */
    @Override
    public AuthenticationExecution setAuthFlowId(String authFlowId) {
        this.authFlowId = authFlowId;
        return this;
    }

    /**
     * Getter for <code>keycloak.authentication_execution.auth_config</code>.
     */
    @Override
    public String getAuthConfig() {
        return this.authConfig;
    }

    /**
     * Setter for <code>keycloak.authentication_execution.auth_config</code>.
     */
    @Override
    public AuthenticationExecution setAuthConfig(String authConfig) {
        this.authConfig = authConfig;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AuthenticationExecution other = (AuthenticationExecution) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.alias == null) {
            if (other.alias != null)
                return false;
        }
        else if (!this.alias.equals(other.alias))
            return false;
        if (this.authenticator == null) {
            if (other.authenticator != null)
                return false;
        }
        else if (!this.authenticator.equals(other.authenticator))
            return false;
        if (this.realmId == null) {
            if (other.realmId != null)
                return false;
        }
        else if (!this.realmId.equals(other.realmId))
            return false;
        if (this.flowId == null) {
            if (other.flowId != null)
                return false;
        }
        else if (!this.flowId.equals(other.flowId))
            return false;
        if (this.requirement == null) {
            if (other.requirement != null)
                return false;
        }
        else if (!this.requirement.equals(other.requirement))
            return false;
        if (this.priority == null) {
            if (other.priority != null)
                return false;
        }
        else if (!this.priority.equals(other.priority))
            return false;
        if (this.authenticatorFlow == null) {
            if (other.authenticatorFlow != null)
                return false;
        }
        else if (!this.authenticatorFlow.equals(other.authenticatorFlow))
            return false;
        if (this.authFlowId == null) {
            if (other.authFlowId != null)
                return false;
        }
        else if (!this.authFlowId.equals(other.authFlowId))
            return false;
        if (this.authConfig == null) {
            if (other.authConfig != null)
                return false;
        }
        else if (!this.authConfig.equals(other.authConfig))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.alias == null) ? 0 : this.alias.hashCode());
        result = prime * result + ((this.authenticator == null) ? 0 : this.authenticator.hashCode());
        result = prime * result + ((this.realmId == null) ? 0 : this.realmId.hashCode());
        result = prime * result + ((this.flowId == null) ? 0 : this.flowId.hashCode());
        result = prime * result + ((this.requirement == null) ? 0 : this.requirement.hashCode());
        result = prime * result + ((this.priority == null) ? 0 : this.priority.hashCode());
        result = prime * result + ((this.authenticatorFlow == null) ? 0 : this.authenticatorFlow.hashCode());
        result = prime * result + ((this.authFlowId == null) ? 0 : this.authFlowId.hashCode());
        result = prime * result + ((this.authConfig == null) ? 0 : this.authConfig.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AuthenticationExecution (");

        sb.append(id);
        sb.append(", ").append(alias);
        sb.append(", ").append(authenticator);
        sb.append(", ").append(realmId);
        sb.append(", ").append(flowId);
        sb.append(", ").append(requirement);
        sb.append(", ").append(priority);
        sb.append(", ").append(authenticatorFlow);
        sb.append(", ").append(authFlowId);
        sb.append(", ").append(authConfig);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IAuthenticationExecution from) {
        setId(from.getId());
        setAlias(from.getAlias());
        setAuthenticator(from.getAuthenticator());
        setRealmId(from.getRealmId());
        setFlowId(from.getFlowId());
        setRequirement(from.getRequirement());
        setPriority(from.getPriority());
        setAuthenticatorFlow(from.getAuthenticatorFlow());
        setAuthFlowId(from.getAuthFlowId());
        setAuthConfig(from.getAuthConfig());
    }

    @Override
    public <E extends IAuthenticationExecution> E into(E into) {
        into.from(this);
        return into;
    }
}
