/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IClient extends VertxPojo, Serializable {

    /**
     * Setter for <code>keycloak.client.id</code>.
     */
    public IClient setId(String value);

    /**
     * Getter for <code>keycloak.client.id</code>.
     */
    public String getId();

    /**
     * Setter for <code>keycloak.client.enabled</code>.
     */
    public IClient setEnabled(Boolean value);

    /**
     * Getter for <code>keycloak.client.enabled</code>.
     */
    public Boolean getEnabled();

    /**
     * Setter for <code>keycloak.client.full_scope_allowed</code>.
     */
    public IClient setFullScopeAllowed(Boolean value);

    /**
     * Getter for <code>keycloak.client.full_scope_allowed</code>.
     */
    public Boolean getFullScopeAllowed();

    /**
     * Setter for <code>keycloak.client.client_id</code>.
     */
    public IClient setClientId(String value);

    /**
     * Getter for <code>keycloak.client.client_id</code>.
     */
    public String getClientId();

    /**
     * Setter for <code>keycloak.client.not_before</code>.
     */
    public IClient setNotBefore(Integer value);

    /**
     * Getter for <code>keycloak.client.not_before</code>.
     */
    public Integer getNotBefore();

    /**
     * Setter for <code>keycloak.client.public_client</code>.
     */
    public IClient setPublicClient(Boolean value);

    /**
     * Getter for <code>keycloak.client.public_client</code>.
     */
    public Boolean getPublicClient();

    /**
     * Setter for <code>keycloak.client.secret</code>.
     */
    public IClient setSecret(String value);

    /**
     * Getter for <code>keycloak.client.secret</code>.
     */
    public String getSecret();

    /**
     * Setter for <code>keycloak.client.base_url</code>.
     */
    public IClient setBaseUrl(String value);

    /**
     * Getter for <code>keycloak.client.base_url</code>.
     */
    public String getBaseUrl();

    /**
     * Setter for <code>keycloak.client.bearer_only</code>.
     */
    public IClient setBearerOnly(Boolean value);

    /**
     * Getter for <code>keycloak.client.bearer_only</code>.
     */
    public Boolean getBearerOnly();

    /**
     * Setter for <code>keycloak.client.management_url</code>.
     */
    public IClient setManagementUrl(String value);

    /**
     * Getter for <code>keycloak.client.management_url</code>.
     */
    public String getManagementUrl();

    /**
     * Setter for <code>keycloak.client.surrogate_auth_required</code>.
     */
    public IClient setSurrogateAuthRequired(Boolean value);

    /**
     * Getter for <code>keycloak.client.surrogate_auth_required</code>.
     */
    public Boolean getSurrogateAuthRequired();

    /**
     * Setter for <code>keycloak.client.realm_id</code>.
     */
    public IClient setRealmId(String value);

    /**
     * Getter for <code>keycloak.client.realm_id</code>.
     */
    public String getRealmId();

    /**
     * Setter for <code>keycloak.client.protocol</code>.
     */
    public IClient setProtocol(String value);

    /**
     * Getter for <code>keycloak.client.protocol</code>.
     */
    public String getProtocol();

    /**
     * Setter for <code>keycloak.client.node_rereg_timeout</code>.
     */
    public IClient setNodeReregTimeout(Integer value);

    /**
     * Getter for <code>keycloak.client.node_rereg_timeout</code>.
     */
    public Integer getNodeReregTimeout();

    /**
     * Setter for <code>keycloak.client.frontchannel_logout</code>.
     */
    public IClient setFrontchannelLogout(Boolean value);

    /**
     * Getter for <code>keycloak.client.frontchannel_logout</code>.
     */
    public Boolean getFrontchannelLogout();

    /**
     * Setter for <code>keycloak.client.consent_required</code>.
     */
    public IClient setConsentRequired(Boolean value);

    /**
     * Getter for <code>keycloak.client.consent_required</code>.
     */
    public Boolean getConsentRequired();

    /**
     * Setter for <code>keycloak.client.name</code>.
     */
    public IClient setName(String value);

    /**
     * Getter for <code>keycloak.client.name</code>.
     */
    public String getName();

    /**
     * Setter for <code>keycloak.client.service_accounts_enabled</code>.
     */
    public IClient setServiceAccountsEnabled(Boolean value);

    /**
     * Getter for <code>keycloak.client.service_accounts_enabled</code>.
     */
    public Boolean getServiceAccountsEnabled();

    /**
     * Setter for <code>keycloak.client.client_authenticator_type</code>.
     */
    public IClient setClientAuthenticatorType(String value);

    /**
     * Getter for <code>keycloak.client.client_authenticator_type</code>.
     */
    public String getClientAuthenticatorType();

    /**
     * Setter for <code>keycloak.client.root_url</code>.
     */
    public IClient setRootUrl(String value);

    /**
     * Getter for <code>keycloak.client.root_url</code>.
     */
    public String getRootUrl();

    /**
     * Setter for <code>keycloak.client.description</code>.
     */
    public IClient setDescription(String value);

    /**
     * Getter for <code>keycloak.client.description</code>.
     */
    public String getDescription();

    /**
     * Setter for <code>keycloak.client.registration_token</code>.
     */
    public IClient setRegistrationToken(String value);

    /**
     * Getter for <code>keycloak.client.registration_token</code>.
     */
    public String getRegistrationToken();

    /**
     * Setter for <code>keycloak.client.standard_flow_enabled</code>.
     */
    public IClient setStandardFlowEnabled(Boolean value);

    /**
     * Getter for <code>keycloak.client.standard_flow_enabled</code>.
     */
    public Boolean getStandardFlowEnabled();

    /**
     * Setter for <code>keycloak.client.implicit_flow_enabled</code>.
     */
    public IClient setImplicitFlowEnabled(Boolean value);

    /**
     * Getter for <code>keycloak.client.implicit_flow_enabled</code>.
     */
    public Boolean getImplicitFlowEnabled();

    /**
     * Setter for <code>keycloak.client.direct_access_grants_enabled</code>.
     */
    public IClient setDirectAccessGrantsEnabled(Boolean value);

    /**
     * Getter for <code>keycloak.client.direct_access_grants_enabled</code>.
     */
    public Boolean getDirectAccessGrantsEnabled();

    /**
     * Setter for <code>keycloak.client.client_template_id</code>.
     */
    public IClient setClientTemplateId(String value);

    /**
     * Getter for <code>keycloak.client.client_template_id</code>.
     */
    public String getClientTemplateId();

    /**
     * Setter for <code>keycloak.client.use_template_config</code>.
     */
    public IClient setUseTemplateConfig(Boolean value);

    /**
     * Getter for <code>keycloak.client.use_template_config</code>.
     */
    public Boolean getUseTemplateConfig();

    /**
     * Setter for <code>keycloak.client.use_template_scope</code>.
     */
    public IClient setUseTemplateScope(Boolean value);

    /**
     * Getter for <code>keycloak.client.use_template_scope</code>.
     */
    public Boolean getUseTemplateScope();

    /**
     * Setter for <code>keycloak.client.use_template_mappers</code>.
     */
    public IClient setUseTemplateMappers(Boolean value);

    /**
     * Getter for <code>keycloak.client.use_template_mappers</code>.
     */
    public Boolean getUseTemplateMappers();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IClient
     */
    public void from(IClient from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IClient
     */
    public <E extends IClient> E into(E into);

        @Override
        public default IClient fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setId,json::getString,"id","java.lang.String");
                setOrThrow(this::setEnabled,json::getBoolean,"enabled","java.lang.Boolean");
                setOrThrow(this::setFullScopeAllowed,json::getBoolean,"full_scope_allowed","java.lang.Boolean");
                setOrThrow(this::setClientId,json::getString,"client_id","java.lang.String");
                setOrThrow(this::setNotBefore,json::getInteger,"not_before","java.lang.Integer");
                setOrThrow(this::setPublicClient,json::getBoolean,"public_client","java.lang.Boolean");
                setOrThrow(this::setSecret,json::getString,"secret","java.lang.String");
                setOrThrow(this::setBaseUrl,json::getString,"base_url","java.lang.String");
                setOrThrow(this::setBearerOnly,json::getBoolean,"bearer_only","java.lang.Boolean");
                setOrThrow(this::setManagementUrl,json::getString,"management_url","java.lang.String");
                setOrThrow(this::setSurrogateAuthRequired,json::getBoolean,"surrogate_auth_required","java.lang.Boolean");
                setOrThrow(this::setRealmId,json::getString,"realm_id","java.lang.String");
                setOrThrow(this::setProtocol,json::getString,"protocol","java.lang.String");
                setOrThrow(this::setNodeReregTimeout,json::getInteger,"node_rereg_timeout","java.lang.Integer");
                setOrThrow(this::setFrontchannelLogout,json::getBoolean,"frontchannel_logout","java.lang.Boolean");
                setOrThrow(this::setConsentRequired,json::getBoolean,"consent_required","java.lang.Boolean");
                setOrThrow(this::setName,json::getString,"name","java.lang.String");
                setOrThrow(this::setServiceAccountsEnabled,json::getBoolean,"service_accounts_enabled","java.lang.Boolean");
                setOrThrow(this::setClientAuthenticatorType,json::getString,"client_authenticator_type","java.lang.String");
                setOrThrow(this::setRootUrl,json::getString,"root_url","java.lang.String");
                setOrThrow(this::setDescription,json::getString,"description","java.lang.String");
                setOrThrow(this::setRegistrationToken,json::getString,"registration_token","java.lang.String");
                setOrThrow(this::setStandardFlowEnabled,json::getBoolean,"standard_flow_enabled","java.lang.Boolean");
                setOrThrow(this::setImplicitFlowEnabled,json::getBoolean,"implicit_flow_enabled","java.lang.Boolean");
                setOrThrow(this::setDirectAccessGrantsEnabled,json::getBoolean,"direct_access_grants_enabled","java.lang.Boolean");
                setOrThrow(this::setClientTemplateId,json::getString,"client_template_id","java.lang.String");
                setOrThrow(this::setUseTemplateConfig,json::getBoolean,"use_template_config","java.lang.Boolean");
                setOrThrow(this::setUseTemplateScope,json::getBoolean,"use_template_scope","java.lang.Boolean");
                setOrThrow(this::setUseTemplateMappers,json::getBoolean,"use_template_mappers","java.lang.Boolean");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("id",getId());
                json.put("enabled",getEnabled());
                json.put("full_scope_allowed",getFullScopeAllowed());
                json.put("client_id",getClientId());
                json.put("not_before",getNotBefore());
                json.put("public_client",getPublicClient());
                json.put("secret",getSecret());
                json.put("base_url",getBaseUrl());
                json.put("bearer_only",getBearerOnly());
                json.put("management_url",getManagementUrl());
                json.put("surrogate_auth_required",getSurrogateAuthRequired());
                json.put("realm_id",getRealmId());
                json.put("protocol",getProtocol());
                json.put("node_rereg_timeout",getNodeReregTimeout());
                json.put("frontchannel_logout",getFrontchannelLogout());
                json.put("consent_required",getConsentRequired());
                json.put("name",getName());
                json.put("service_accounts_enabled",getServiceAccountsEnabled());
                json.put("client_authenticator_type",getClientAuthenticatorType());
                json.put("root_url",getRootUrl());
                json.put("description",getDescription());
                json.put("registration_token",getRegistrationToken());
                json.put("standard_flow_enabled",getStandardFlowEnabled());
                json.put("implicit_flow_enabled",getImplicitFlowEnabled());
                json.put("direct_access_grants_enabled",getDirectAccessGrantsEnabled());
                json.put("client_template_id",getClientTemplateId());
                json.put("use_template_config",getUseTemplateConfig());
                json.put("use_template_scope",getUseTemplateScope());
                json.put("use_template_mappers",getUseTemplateMappers());
                return json;
        }

}
