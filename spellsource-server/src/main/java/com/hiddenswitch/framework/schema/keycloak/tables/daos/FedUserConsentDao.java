/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.daos;


import com.hiddenswitch.framework.schema.keycloak.tables.FedUserConsent;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserConsentRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FedUserConsentDao extends AbstractReactiveVertxDAO<FedUserConsentRecord, com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent, String, Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>>, Future<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FedUserConsentRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent,String> {

        /**
     * @param configuration Used for rendering, so only SQLDialect must be set
     * and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query
     * execution
     */
        public FedUserConsentDao(Configuration configuration, io.vertx.sqlclient.SqlClient delegate) {
                super(FedUserConsent.FED_USER_CONSENT, com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent.class, new ReactiveClassicQueryExecutor<FedUserConsentRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent,String>(configuration,delegate,com.hiddenswitch.framework.schema.keycloak.tables.mappers.RowMappers.getFedUserConsentMapper()));
        }

        @Override
        protected String getId(com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent object) {
                return object.getId();
        }

        /**
     * Find records that have <code>client_id IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByClientId(Collection<String> values) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.CLIENT_ID.in(values));
        }

        /**
     * Find records that have <code>client_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByClientId(Collection<String> values, int limit) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.CLIENT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>user_id IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByUserId(Collection<String> values) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.USER_ID.in(values));
        }

        /**
     * Find records that have <code>user_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByUserId(Collection<String> values, int limit) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.USER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>realm_id IN (values)</code> asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByRealmId(Collection<String> values) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.REALM_ID.in(values));
        }

        /**
     * Find records that have <code>realm_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByRealmId(Collection<String> values, int limit) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.REALM_ID.in(values),limit);
        }

        /**
     * Find records that have <code>storage_provider_id IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByStorageProviderId(Collection<String> values) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.STORAGE_PROVIDER_ID.in(values));
        }

        /**
     * Find records that have <code>storage_provider_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByStorageProviderId(Collection<String> values, int limit) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.STORAGE_PROVIDER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>created_date IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByCreatedDate(Collection<Long> values) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.CREATED_DATE.in(values));
        }

        /**
     * Find records that have <code>created_date IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByCreatedDate(Collection<Long> values, int limit) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.CREATED_DATE.in(values),limit);
        }

        /**
     * Find records that have <code>last_updated_date IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByLastUpdatedDate(Collection<Long> values) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.LAST_UPDATED_DATE.in(values));
        }

        /**
     * Find records that have <code>last_updated_date IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByLastUpdatedDate(Collection<Long> values, int limit) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.LAST_UPDATED_DATE.in(values),limit);
        }

        /**
     * Find records that have <code>client_storage_provider IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByClientStorageProvider(Collection<String> values) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.CLIENT_STORAGE_PROVIDER.in(values));
        }

        /**
     * Find records that have <code>client_storage_provider IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByClientStorageProvider(Collection<String> values, int limit) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.CLIENT_STORAGE_PROVIDER.in(values),limit);
        }

        /**
     * Find records that have <code>external_client_id IN (values)</code>
     * asynchronously
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByExternalClientId(Collection<String> values) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.EXTERNAL_CLIENT_ID.in(values));
        }

        /**
     * Find records that have <code>external_client_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent>> findManyByExternalClientId(Collection<String> values, int limit) {
                return findManyByCondition(FedUserConsent.FED_USER_CONSENT.EXTERNAL_CLIENT_ID.in(values),limit);
        }

        @Override
        public ReactiveClassicQueryExecutor<FedUserConsentRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent,String> queryExecutor(){
                return (ReactiveClassicQueryExecutor<FedUserConsentRecord,com.hiddenswitch.framework.schema.keycloak.tables.pojos.FedUserConsent,String>) super.queryExecutor();
        }
}
