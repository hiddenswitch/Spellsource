/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables.records;


import com.hiddenswitch.framework.schema.keycloak.tables.Databasechangelog;
import com.hiddenswitch.framework.schema.keycloak.tables.interfaces.IDatabasechangelog;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatabasechangelogRecord extends TableRecordImpl<DatabasechangelogRecord> implements VertxPojo, Record14<String, String, String, LocalDateTime, Integer, String, String, String, String, String, String, String, String, String>, IDatabasechangelog {

    private static final long serialVersionUID = 1681027350;

    /**
     * Setter for <code>keycloak.databasechangelog.id</code>.
     */
    @Override
    public DatabasechangelogRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.author</code>.
     */
    @Override
    public DatabasechangelogRecord setAuthor(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.author</code>.
     */
    @Override
    public String getAuthor() {
        return (String) get(1);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.filename</code>.
     */
    @Override
    public DatabasechangelogRecord setFilename(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.filename</code>.
     */
    @Override
    public String getFilename() {
        return (String) get(2);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.dateexecuted</code>.
     */
    @Override
    public DatabasechangelogRecord setDateexecuted(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.dateexecuted</code>.
     */
    @Override
    public LocalDateTime getDateexecuted() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.orderexecuted</code>.
     */
    @Override
    public DatabasechangelogRecord setOrderexecuted(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.orderexecuted</code>.
     */
    @Override
    public Integer getOrderexecuted() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.exectype</code>.
     */
    @Override
    public DatabasechangelogRecord setExectype(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.exectype</code>.
     */
    @Override
    public String getExectype() {
        return (String) get(5);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.md5sum</code>.
     */
    @Override
    public DatabasechangelogRecord setMd5sum(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.md5sum</code>.
     */
    @Override
    public String getMd5sum() {
        return (String) get(6);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.description</code>.
     */
    @Override
    public DatabasechangelogRecord setDescription(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.description</code>.
     */
    @Override
    public String getDescription() {
        return (String) get(7);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.comments</code>.
     */
    @Override
    public DatabasechangelogRecord setComments(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.comments</code>.
     */
    @Override
    public String getComments() {
        return (String) get(8);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.tag</code>.
     */
    @Override
    public DatabasechangelogRecord setTag(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.tag</code>.
     */
    @Override
    public String getTag() {
        return (String) get(9);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.liquibase</code>.
     */
    @Override
    public DatabasechangelogRecord setLiquibase(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.liquibase</code>.
     */
    @Override
    public String getLiquibase() {
        return (String) get(10);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.contexts</code>.
     */
    @Override
    public DatabasechangelogRecord setContexts(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.contexts</code>.
     */
    @Override
    public String getContexts() {
        return (String) get(11);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.labels</code>.
     */
    @Override
    public DatabasechangelogRecord setLabels(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.labels</code>.
     */
    @Override
    public String getLabels() {
        return (String) get(12);
    }

    /**
     * Setter for <code>keycloak.databasechangelog.deployment_id</code>.
     */
    @Override
    public DatabasechangelogRecord setDeploymentId(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>keycloak.databasechangelog.deployment_id</code>.
     */
    @Override
    public String getDeploymentId() {
        return (String) get(13);
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, LocalDateTime, Integer, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<String, String, String, LocalDateTime, Integer, String, String, String, String, String, String, String, String, String> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Databasechangelog.DATABASECHANGELOG.ID;
    }

    @Override
    public Field<String> field2() {
        return Databasechangelog.DATABASECHANGELOG.AUTHOR;
    }

    @Override
    public Field<String> field3() {
        return Databasechangelog.DATABASECHANGELOG.FILENAME;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Databasechangelog.DATABASECHANGELOG.DATEEXECUTED;
    }

    @Override
    public Field<Integer> field5() {
        return Databasechangelog.DATABASECHANGELOG.ORDEREXECUTED;
    }

    @Override
    public Field<String> field6() {
        return Databasechangelog.DATABASECHANGELOG.EXECTYPE;
    }

    @Override
    public Field<String> field7() {
        return Databasechangelog.DATABASECHANGELOG.MD5SUM;
    }

    @Override
    public Field<String> field8() {
        return Databasechangelog.DATABASECHANGELOG.DESCRIPTION;
    }

    @Override
    public Field<String> field9() {
        return Databasechangelog.DATABASECHANGELOG.COMMENTS;
    }

    @Override
    public Field<String> field10() {
        return Databasechangelog.DATABASECHANGELOG.TAG;
    }

    @Override
    public Field<String> field11() {
        return Databasechangelog.DATABASECHANGELOG.LIQUIBASE;
    }

    @Override
    public Field<String> field12() {
        return Databasechangelog.DATABASECHANGELOG.CONTEXTS;
    }

    @Override
    public Field<String> field13() {
        return Databasechangelog.DATABASECHANGELOG.LABELS;
    }

    @Override
    public Field<String> field14() {
        return Databasechangelog.DATABASECHANGELOG.DEPLOYMENT_ID;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAuthor();
    }

    @Override
    public String component3() {
        return getFilename();
    }

    @Override
    public LocalDateTime component4() {
        return getDateexecuted();
    }

    @Override
    public Integer component5() {
        return getOrderexecuted();
    }

    @Override
    public String component6() {
        return getExectype();
    }

    @Override
    public String component7() {
        return getMd5sum();
    }

    @Override
    public String component8() {
        return getDescription();
    }

    @Override
    public String component9() {
        return getComments();
    }

    @Override
    public String component10() {
        return getTag();
    }

    @Override
    public String component11() {
        return getLiquibase();
    }

    @Override
    public String component12() {
        return getContexts();
    }

    @Override
    public String component13() {
        return getLabels();
    }

    @Override
    public String component14() {
        return getDeploymentId();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAuthor();
    }

    @Override
    public String value3() {
        return getFilename();
    }

    @Override
    public LocalDateTime value4() {
        return getDateexecuted();
    }

    @Override
    public Integer value5() {
        return getOrderexecuted();
    }

    @Override
    public String value6() {
        return getExectype();
    }

    @Override
    public String value7() {
        return getMd5sum();
    }

    @Override
    public String value8() {
        return getDescription();
    }

    @Override
    public String value9() {
        return getComments();
    }

    @Override
    public String value10() {
        return getTag();
    }

    @Override
    public String value11() {
        return getLiquibase();
    }

    @Override
    public String value12() {
        return getContexts();
    }

    @Override
    public String value13() {
        return getLabels();
    }

    @Override
    public String value14() {
        return getDeploymentId();
    }

    @Override
    public DatabasechangelogRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value2(String value) {
        setAuthor(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value3(String value) {
        setFilename(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value4(LocalDateTime value) {
        setDateexecuted(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value5(Integer value) {
        setOrderexecuted(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value6(String value) {
        setExectype(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value7(String value) {
        setMd5sum(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value8(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value9(String value) {
        setComments(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value10(String value) {
        setTag(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value11(String value) {
        setLiquibase(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value12(String value) {
        setContexts(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value13(String value) {
        setLabels(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord value14(String value) {
        setDeploymentId(value);
        return this;
    }

    @Override
    public DatabasechangelogRecord values(String value1, String value2, String value3, LocalDateTime value4, Integer value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12, String value13, String value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatabasechangelog from) {
        setId(from.getId());
        setAuthor(from.getAuthor());
        setFilename(from.getFilename());
        setDateexecuted(from.getDateexecuted());
        setOrderexecuted(from.getOrderexecuted());
        setExectype(from.getExectype());
        setMd5sum(from.getMd5sum());
        setDescription(from.getDescription());
        setComments(from.getComments());
        setTag(from.getTag());
        setLiquibase(from.getLiquibase());
        setContexts(from.getContexts());
        setLabels(from.getLabels());
        setDeploymentId(from.getDeploymentId());
    }

    @Override
    public <E extends IDatabasechangelog> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatabasechangelogRecord
     */
    public DatabasechangelogRecord() {
        super(Databasechangelog.DATABASECHANGELOG);
    }

    /**
     * Create a detached, initialised DatabasechangelogRecord
     */
    public DatabasechangelogRecord(String id, String author, String filename, LocalDateTime dateexecuted, Integer orderexecuted, String exectype, String md5sum, String description, String comments, String tag, String liquibase, String contexts, String labels, String deploymentId) {
        super(Databasechangelog.DATABASECHANGELOG);

        set(0, id);
        set(1, author);
        set(2, filename);
        set(3, dateexecuted);
        set(4, orderexecuted);
        set(5, exectype);
        set(6, md5sum);
        set(7, description);
        set(8, comments);
        set(9, tag);
        set(10, liquibase);
        set(11, contexts);
        set(12, labels);
        set(13, deploymentId);
    }

    public DatabasechangelogRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
