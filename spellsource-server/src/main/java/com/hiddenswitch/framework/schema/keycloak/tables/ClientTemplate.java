/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak.tables;


import com.hiddenswitch.framework.schema.keycloak.Keycloak;
import com.hiddenswitch.framework.schema.keycloak.Keys;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientTemplateRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientTemplate extends TableImpl<ClientTemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keycloak.client_template</code>
     */
    public static final ClientTemplate CLIENT_TEMPLATE = new ClientTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientTemplateRecord> getRecordType() {
        return ClientTemplateRecord.class;
    }

    /**
     * The column <code>keycloak.client_template.id</code>.
     */
    public final TableField<ClientTemplateRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>keycloak.client_template.name</code>.
     */
    public final TableField<ClientTemplateRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.client_template.realm_id</code>.
     */
    public final TableField<ClientTemplateRecord, String> REALM_ID = createField(DSL.name("realm_id"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>keycloak.client_template.description</code>.
     */
    public final TableField<ClientTemplateRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.client_template.protocol</code>.
     */
    public final TableField<ClientTemplateRecord, String> PROTOCOL = createField(DSL.name("protocol"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keycloak.client_template.full_scope_allowed</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> FULL_SCOPE_ALLOWED = createField(DSL.name("full_scope_allowed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.client_template.consent_required</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> CONSENT_REQUIRED = createField(DSL.name("consent_required"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.client_template.standard_flow_enabled</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> STANDARD_FLOW_ENABLED = createField(DSL.name("standard_flow_enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.client_template.implicit_flow_enabled</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> IMPLICIT_FLOW_ENABLED = createField(DSL.name("implicit_flow_enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>keycloak.client_template.direct_access_grants_enabled</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> DIRECT_ACCESS_GRANTS_ENABLED = createField(DSL.name("direct_access_grants_enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>keycloak.client_template.service_accounts_enabled</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> SERVICE_ACCOUNTS_ENABLED = createField(DSL.name("service_accounts_enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.client_template.frontchannel_logout</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> FRONTCHANNEL_LOGOUT = createField(DSL.name("frontchannel_logout"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.client_template.bearer_only</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> BEARER_ONLY = createField(DSL.name("bearer_only"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>keycloak.client_template.public_client</code>.
     */
    public final TableField<ClientTemplateRecord, Boolean> PUBLIC_CLIENT = createField(DSL.name("public_client"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private ClientTemplate(Name alias, Table<ClientTemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientTemplate(Name alias, Table<ClientTemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keycloak.client_template</code> table reference
     */
    public ClientTemplate(String alias) {
        this(DSL.name(alias), CLIENT_TEMPLATE);
    }

    /**
     * Create an aliased <code>keycloak.client_template</code> table reference
     */
    public ClientTemplate(Name alias) {
        this(alias, CLIENT_TEMPLATE);
    }

    /**
     * Create a <code>keycloak.client_template</code> table reference
     */
    public ClientTemplate() {
        this(DSL.name("client_template"), null);
    }

    public <O extends Record> ClientTemplate(Table<O> child, ForeignKey<O, ClientTemplateRecord> key) {
        super(child, key, CLIENT_TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Keycloak.KEYCLOAK;
    }

    @Override
    public UniqueKey<ClientTemplateRecord> getPrimaryKey() {
        return Keys.PK_CLI_TEMPLATE;
    }

    @Override
    public List<UniqueKey<ClientTemplateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_CLI_TEMPLATE);
    }

    @Override
    public List<ForeignKey<ClientTemplateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLIENT_TEMPLATE__FK_REALM_CLI_TMPLT);
    }

    private transient Realm _realm;

    /**
     * Get the implicit join path to the <code>keycloak.realm</code> table.
     */
    public Realm realm() {
        if (_realm == null)
            _realm = new Realm(this, Keys.CLIENT_TEMPLATE__FK_REALM_CLI_TMPLT);

        return _realm;
    }

    @Override
    public ClientTemplate as(String alias) {
        return new ClientTemplate(DSL.name(alias), this);
    }

    @Override
    public ClientTemplate as(Name alias) {
        return new ClientTemplate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientTemplate rename(String name) {
        return new ClientTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientTemplate rename(Name name) {
        return new ClientTemplate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
