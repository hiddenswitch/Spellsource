/*
 * This file is generated by jOOQ.
 */
package com.hiddenswitch.framework.schema.keycloak;


import com.hiddenswitch.framework.schema.keycloak.tables.AssociatedPolicy;
import com.hiddenswitch.framework.schema.keycloak.tables.AuthenticationExecution;
import com.hiddenswitch.framework.schema.keycloak.tables.AuthenticationFlow;
import com.hiddenswitch.framework.schema.keycloak.tables.AuthenticatorConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.AuthenticatorConfigEntry;
import com.hiddenswitch.framework.schema.keycloak.tables.BrokerLink;
import com.hiddenswitch.framework.schema.keycloak.tables.Client;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientAttributes;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientDefaultRoles;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientIdentityProvMapping;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientNodeRegistrations;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientSession;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientSessionAuthStatus;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientSessionNote;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientSessionProtMapper;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientSessionRole;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientTemplate;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientTemplateAttributes;
import com.hiddenswitch.framework.schema.keycloak.tables.ClientUserSessionNote;
import com.hiddenswitch.framework.schema.keycloak.tables.Component;
import com.hiddenswitch.framework.schema.keycloak.tables.ComponentConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.CompositeRole;
import com.hiddenswitch.framework.schema.keycloak.tables.Credential;
import com.hiddenswitch.framework.schema.keycloak.tables.CredentialAttribute;
import com.hiddenswitch.framework.schema.keycloak.tables.Databasechangeloglock;
import com.hiddenswitch.framework.schema.keycloak.tables.EventEntity;
import com.hiddenswitch.framework.schema.keycloak.tables.FedCredentialAttribute;
import com.hiddenswitch.framework.schema.keycloak.tables.FedUserAttribute;
import com.hiddenswitch.framework.schema.keycloak.tables.FedUserConsent;
import com.hiddenswitch.framework.schema.keycloak.tables.FedUserConsentProtMapper;
import com.hiddenswitch.framework.schema.keycloak.tables.FedUserConsentRole;
import com.hiddenswitch.framework.schema.keycloak.tables.FedUserCredential;
import com.hiddenswitch.framework.schema.keycloak.tables.FedUserGroupMembership;
import com.hiddenswitch.framework.schema.keycloak.tables.FedUserRequiredAction;
import com.hiddenswitch.framework.schema.keycloak.tables.FedUserRoleMapping;
import com.hiddenswitch.framework.schema.keycloak.tables.FederatedIdentity;
import com.hiddenswitch.framework.schema.keycloak.tables.FederatedUser;
import com.hiddenswitch.framework.schema.keycloak.tables.GroupAttribute;
import com.hiddenswitch.framework.schema.keycloak.tables.GroupRoleMapping;
import com.hiddenswitch.framework.schema.keycloak.tables.IdentityProvider;
import com.hiddenswitch.framework.schema.keycloak.tables.IdentityProviderConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.IdentityProviderMapper;
import com.hiddenswitch.framework.schema.keycloak.tables.IdpMapperConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.KeycloakGroup;
import com.hiddenswitch.framework.schema.keycloak.tables.KeycloakRole;
import com.hiddenswitch.framework.schema.keycloak.tables.MigrationModel;
import com.hiddenswitch.framework.schema.keycloak.tables.OfflineClientSession;
import com.hiddenswitch.framework.schema.keycloak.tables.OfflineUserSession;
import com.hiddenswitch.framework.schema.keycloak.tables.PolicyConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.ProtocolMapper;
import com.hiddenswitch.framework.schema.keycloak.tables.ProtocolMapperConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.Realm;
import com.hiddenswitch.framework.schema.keycloak.tables.RealmAttribute;
import com.hiddenswitch.framework.schema.keycloak.tables.RealmDefaultGroups;
import com.hiddenswitch.framework.schema.keycloak.tables.RealmDefaultRoles;
import com.hiddenswitch.framework.schema.keycloak.tables.RealmEnabledEventTypes;
import com.hiddenswitch.framework.schema.keycloak.tables.RealmEventsListeners;
import com.hiddenswitch.framework.schema.keycloak.tables.RealmRequiredCredential;
import com.hiddenswitch.framework.schema.keycloak.tables.RealmSmtpConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.RealmSupportedLocales;
import com.hiddenswitch.framework.schema.keycloak.tables.RedirectUris;
import com.hiddenswitch.framework.schema.keycloak.tables.RequiredActionConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.RequiredActionProvider;
import com.hiddenswitch.framework.schema.keycloak.tables.ResourcePolicy;
import com.hiddenswitch.framework.schema.keycloak.tables.ResourceScope;
import com.hiddenswitch.framework.schema.keycloak.tables.ResourceServer;
import com.hiddenswitch.framework.schema.keycloak.tables.ResourceServerPolicy;
import com.hiddenswitch.framework.schema.keycloak.tables.ResourceServerResource;
import com.hiddenswitch.framework.schema.keycloak.tables.ResourceServerScope;
import com.hiddenswitch.framework.schema.keycloak.tables.ScopeMapping;
import com.hiddenswitch.framework.schema.keycloak.tables.ScopePolicy;
import com.hiddenswitch.framework.schema.keycloak.tables.TemplateScopeMapping;
import com.hiddenswitch.framework.schema.keycloak.tables.UserAttribute;
import com.hiddenswitch.framework.schema.keycloak.tables.UserConsent;
import com.hiddenswitch.framework.schema.keycloak.tables.UserConsentProtMapper;
import com.hiddenswitch.framework.schema.keycloak.tables.UserConsentRole;
import com.hiddenswitch.framework.schema.keycloak.tables.UserEntity;
import com.hiddenswitch.framework.schema.keycloak.tables.UserFederationConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.UserFederationMapper;
import com.hiddenswitch.framework.schema.keycloak.tables.UserFederationMapperConfig;
import com.hiddenswitch.framework.schema.keycloak.tables.UserFederationProvider;
import com.hiddenswitch.framework.schema.keycloak.tables.UserGroupMembership;
import com.hiddenswitch.framework.schema.keycloak.tables.UserRequiredAction;
import com.hiddenswitch.framework.schema.keycloak.tables.UserRoleMapping;
import com.hiddenswitch.framework.schema.keycloak.tables.UserSession;
import com.hiddenswitch.framework.schema.keycloak.tables.UserSessionNote;
import com.hiddenswitch.framework.schema.keycloak.tables.UsernameLoginFailure;
import com.hiddenswitch.framework.schema.keycloak.tables.WebOrigins;
import com.hiddenswitch.framework.schema.keycloak.tables.records.AssociatedPolicyRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.AuthenticationExecutionRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.AuthenticationFlowRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.AuthenticatorConfigEntryRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.AuthenticatorConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.BrokerLinkRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientAttributesRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientDefaultRolesRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientIdentityProvMappingRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientNodeRegistrationsRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientSessionAuthStatusRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientSessionNoteRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientSessionProtMapperRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientSessionRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientSessionRoleRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientTemplateAttributesRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientTemplateRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ClientUserSessionNoteRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ComponentConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ComponentRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.CompositeRoleRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.CredentialAttributeRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.CredentialRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.DatabasechangeloglockRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.EventEntityRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedCredentialAttributeRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserAttributeRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserConsentProtMapperRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserConsentRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserConsentRoleRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserCredentialRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserGroupMembershipRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserRequiredActionRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FedUserRoleMappingRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FederatedIdentityRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.FederatedUserRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.GroupAttributeRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.GroupRoleMappingRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.IdentityProviderConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.IdentityProviderMapperRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.IdentityProviderRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.IdpMapperConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.KeycloakGroupRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.KeycloakRoleRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.MigrationModelRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.OfflineClientSessionRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.OfflineUserSessionRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.PolicyConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ProtocolMapperConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ProtocolMapperRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmAttributeRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmDefaultGroupsRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmDefaultRolesRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmEnabledEventTypesRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmEventsListenersRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmRequiredCredentialRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmSmtpConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RealmSupportedLocalesRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RedirectUrisRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RequiredActionConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.RequiredActionProviderRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourcePolicyRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourceScopeRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourceServerPolicyRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourceServerRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourceServerResourceRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ResourceServerScopeRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ScopeMappingRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.ScopePolicyRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.TemplateScopeMappingRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserAttributeRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserConsentProtMapperRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserConsentRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserConsentRoleRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserEntityRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserFederationConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserFederationMapperConfigRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserFederationMapperRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserFederationProviderRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserGroupMembershipRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserRequiredActionRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserRoleMappingRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserSessionNoteRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UserSessionRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.UsernameLoginFailureRecord;
import com.hiddenswitch.framework.schema.keycloak.tables.records.WebOriginsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * keycloak.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AssociatedPolicyRecord> CONSTRAINT_FARSRPAP = Internal.createUniqueKey(AssociatedPolicy.ASSOCIATED_POLICY, DSL.name("constraint_farsrpap"), new TableField[] { AssociatedPolicy.ASSOCIATED_POLICY.POLICY_ID, AssociatedPolicy.ASSOCIATED_POLICY.ASSOCIATED_POLICY_ID }, true);
    public static final UniqueKey<AuthenticationExecutionRecord> CONSTRAINT_AUTH_EXEC_PK = Internal.createUniqueKey(AuthenticationExecution.AUTHENTICATION_EXECUTION, DSL.name("constraint_auth_exec_pk"), new TableField[] { AuthenticationExecution.AUTHENTICATION_EXECUTION.ID }, true);
    public static final UniqueKey<AuthenticationFlowRecord> CONSTRAINT_AUTH_FLOW_PK = Internal.createUniqueKey(AuthenticationFlow.AUTHENTICATION_FLOW, DSL.name("constraint_auth_flow_pk"), new TableField[] { AuthenticationFlow.AUTHENTICATION_FLOW.ID }, true);
    public static final UniqueKey<AuthenticatorConfigRecord> CONSTRAINT_AUTH_PK = Internal.createUniqueKey(AuthenticatorConfig.AUTHENTICATOR_CONFIG, DSL.name("constraint_auth_pk"), new TableField[] { AuthenticatorConfig.AUTHENTICATOR_CONFIG.ID }, true);
    public static final UniqueKey<AuthenticatorConfigEntryRecord> CONSTRAINT_AUTH_CFG_PK = Internal.createUniqueKey(AuthenticatorConfigEntry.AUTHENTICATOR_CONFIG_ENTRY, DSL.name("constraint_auth_cfg_pk"), new TableField[] { AuthenticatorConfigEntry.AUTHENTICATOR_CONFIG_ENTRY.AUTHENTICATOR_ID, AuthenticatorConfigEntry.AUTHENTICATOR_CONFIG_ENTRY.NAME }, true);
    public static final UniqueKey<BrokerLinkRecord> CONSTR_BROKER_LINK_PK = Internal.createUniqueKey(BrokerLink.BROKER_LINK, DSL.name("constr_broker_link_pk"), new TableField[] { BrokerLink.BROKER_LINK.IDENTITY_PROVIDER, BrokerLink.BROKER_LINK.USER_ID }, true);
    public static final UniqueKey<ClientRecord> CONSTRAINT_7 = Internal.createUniqueKey(Client.CLIENT, DSL.name("constraint_7"), new TableField[] { Client.CLIENT.ID }, true);
    public static final UniqueKey<ClientRecord> UK_B71CJLBENV945RB6GCON438AT = Internal.createUniqueKey(Client.CLIENT, DSL.name("uk_b71cjlbenv945rb6gcon438at"), new TableField[] { Client.CLIENT.REALM_ID, Client.CLIENT.CLIENT_ID }, true);
    public static final UniqueKey<ClientAttributesRecord> CONSTRAINT_3C = Internal.createUniqueKey(ClientAttributes.CLIENT_ATTRIBUTES, DSL.name("constraint_3c"), new TableField[] { ClientAttributes.CLIENT_ATTRIBUTES.CLIENT_ID, ClientAttributes.CLIENT_ATTRIBUTES.NAME }, true);
    public static final UniqueKey<ClientDefaultRolesRecord> UK_8AELWNIBJI49AVXSRTUF6XJOW = Internal.createUniqueKey(ClientDefaultRoles.CLIENT_DEFAULT_ROLES, DSL.name("uk_8aelwnibji49avxsrtuf6xjow"), new TableField[] { ClientDefaultRoles.CLIENT_DEFAULT_ROLES.ROLE_ID }, true);
    public static final UniqueKey<ClientIdentityProvMappingRecord> UK_7CAELWNIBJI49AVXSRTUF6XJ12 = Internal.createUniqueKey(ClientIdentityProvMapping.CLIENT_IDENTITY_PROV_MAPPING, DSL.name("uk_7caelwnibji49avxsrtuf6xj12"), new TableField[] { ClientIdentityProvMapping.CLIENT_IDENTITY_PROV_MAPPING.IDENTITY_PROVIDER_ID, ClientIdentityProvMapping.CLIENT_IDENTITY_PROV_MAPPING.CLIENT_ID }, true);
    public static final UniqueKey<ClientNodeRegistrationsRecord> CONSTRAINT_84 = Internal.createUniqueKey(ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS, DSL.name("constraint_84"), new TableField[] { ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS.CLIENT_ID, ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS.NAME }, true);
    public static final UniqueKey<ClientSessionRecord> CONSTRAINT_8 = Internal.createUniqueKey(ClientSession.CLIENT_SESSION, DSL.name("constraint_8"), new TableField[] { ClientSession.CLIENT_SESSION.ID }, true);
    public static final UniqueKey<ClientSessionAuthStatusRecord> CONSTRAINT_AUTH_STATUS_PK = Internal.createUniqueKey(ClientSessionAuthStatus.CLIENT_SESSION_AUTH_STATUS, DSL.name("constraint_auth_status_pk"), new TableField[] { ClientSessionAuthStatus.CLIENT_SESSION_AUTH_STATUS.CLIENT_SESSION, ClientSessionAuthStatus.CLIENT_SESSION_AUTH_STATUS.AUTHENTICATOR }, true);
    public static final UniqueKey<ClientSessionNoteRecord> CONSTRAINT_5E = Internal.createUniqueKey(ClientSessionNote.CLIENT_SESSION_NOTE, DSL.name("constraint_5e"), new TableField[] { ClientSessionNote.CLIENT_SESSION_NOTE.CLIENT_SESSION, ClientSessionNote.CLIENT_SESSION_NOTE.NAME }, true);
    public static final UniqueKey<ClientSessionProtMapperRecord> CONSTRAINT_CS_PMP_PK = Internal.createUniqueKey(ClientSessionProtMapper.CLIENT_SESSION_PROT_MAPPER, DSL.name("constraint_cs_pmp_pk"), new TableField[] { ClientSessionProtMapper.CLIENT_SESSION_PROT_MAPPER.CLIENT_SESSION, ClientSessionProtMapper.CLIENT_SESSION_PROT_MAPPER.PROTOCOL_MAPPER_ID }, true);
    public static final UniqueKey<ClientSessionRoleRecord> CONSTRAINT_5 = Internal.createUniqueKey(ClientSessionRole.CLIENT_SESSION_ROLE, DSL.name("constraint_5"), new TableField[] { ClientSessionRole.CLIENT_SESSION_ROLE.CLIENT_SESSION, ClientSessionRole.CLIENT_SESSION_ROLE.ROLE_ID }, true);
    public static final UniqueKey<ClientTemplateRecord> PK_CLI_TEMPLATE = Internal.createUniqueKey(ClientTemplate.CLIENT_TEMPLATE, DSL.name("pk_cli_template"), new TableField[] { ClientTemplate.CLIENT_TEMPLATE.ID }, true);
    public static final UniqueKey<ClientTemplateRecord> UK_CLI_TEMPLATE = Internal.createUniqueKey(ClientTemplate.CLIENT_TEMPLATE, DSL.name("uk_cli_template"), new TableField[] { ClientTemplate.CLIENT_TEMPLATE.REALM_ID, ClientTemplate.CLIENT_TEMPLATE.NAME }, true);
    public static final UniqueKey<ClientTemplateAttributesRecord> PK_CL_TMPL_ATTR = Internal.createUniqueKey(ClientTemplateAttributes.CLIENT_TEMPLATE_ATTRIBUTES, DSL.name("pk_cl_tmpl_attr"), new TableField[] { ClientTemplateAttributes.CLIENT_TEMPLATE_ATTRIBUTES.TEMPLATE_ID, ClientTemplateAttributes.CLIENT_TEMPLATE_ATTRIBUTES.NAME }, true);
    public static final UniqueKey<ClientUserSessionNoteRecord> CONSTR_CL_USR_SES_NOTE = Internal.createUniqueKey(ClientUserSessionNote.CLIENT_USER_SESSION_NOTE, DSL.name("constr_cl_usr_ses_note"), new TableField[] { ClientUserSessionNote.CLIENT_USER_SESSION_NOTE.CLIENT_SESSION, ClientUserSessionNote.CLIENT_USER_SESSION_NOTE.NAME }, true);
    public static final UniqueKey<ComponentRecord> CONSTR_COMPONENT_PK = Internal.createUniqueKey(Component.COMPONENT, DSL.name("constr_component_pk"), new TableField[] { Component.COMPONENT.ID }, true);
    public static final UniqueKey<ComponentConfigRecord> CONSTR_COMPONENT_CONFIG_PK = Internal.createUniqueKey(ComponentConfig.COMPONENT_CONFIG, DSL.name("constr_component_config_pk"), new TableField[] { ComponentConfig.COMPONENT_CONFIG.ID }, true);
    public static final UniqueKey<CredentialRecord> CONSTRAINT_F = Internal.createUniqueKey(Credential.CREDENTIAL, DSL.name("constraint_f"), new TableField[] { Credential.CREDENTIAL.ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> PK_DATABASECHANGELOGLOCK = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("pk_databasechangeloglock"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<EventEntityRecord> CONSTRAINT_4 = Internal.createUniqueKey(EventEntity.EVENT_ENTITY, DSL.name("constraint_4"), new TableField[] { EventEntity.EVENT_ENTITY.ID }, true);
    public static final UniqueKey<FedUserAttributeRecord> CONSTR_FED_USER_ATTR_PK = Internal.createUniqueKey(FedUserAttribute.FED_USER_ATTRIBUTE, DSL.name("constr_fed_user_attr_pk"), new TableField[] { FedUserAttribute.FED_USER_ATTRIBUTE.ID }, true);
    public static final UniqueKey<FedUserConsentRecord> CONSTR_FED_USER_CONSENT_PK = Internal.createUniqueKey(FedUserConsent.FED_USER_CONSENT, DSL.name("constr_fed_user_consent_pk"), new TableField[] { FedUserConsent.FED_USER_CONSENT.ID }, true);
    public static final UniqueKey<FedUserConsentProtMapperRecord> CONSTR_USER_CONSENT_PROTM_PK = Internal.createUniqueKey(FedUserConsentProtMapper.FED_USER_CONSENT_PROT_MAPPER, DSL.name("constr_user_consent_protm_pk"), new TableField[] { FedUserConsentProtMapper.FED_USER_CONSENT_PROT_MAPPER.USER_CONSENT_ID, FedUserConsentProtMapper.FED_USER_CONSENT_PROT_MAPPER.PROTOCOL_MAPPER_ID }, true);
    public static final UniqueKey<FedUserConsentRoleRecord> CONSTR_USER_CONSENT_ROLE_PK = Internal.createUniqueKey(FedUserConsentRole.FED_USER_CONSENT_ROLE, DSL.name("constr_user_consent_role_pk"), new TableField[] { FedUserConsentRole.FED_USER_CONSENT_ROLE.USER_CONSENT_ID, FedUserConsentRole.FED_USER_CONSENT_ROLE.ROLE_ID }, true);
    public static final UniqueKey<FedUserCredentialRecord> CONSTR_FED_USER_CRED_PK = Internal.createUniqueKey(FedUserCredential.FED_USER_CREDENTIAL, DSL.name("constr_fed_user_cred_pk"), new TableField[] { FedUserCredential.FED_USER_CREDENTIAL.ID }, true);
    public static final UniqueKey<FedUserGroupMembershipRecord> CONSTR_FED_USER_GROUP = Internal.createUniqueKey(FedUserGroupMembership.FED_USER_GROUP_MEMBERSHIP, DSL.name("constr_fed_user_group"), new TableField[] { FedUserGroupMembership.FED_USER_GROUP_MEMBERSHIP.GROUP_ID, FedUserGroupMembership.FED_USER_GROUP_MEMBERSHIP.USER_ID }, true);
    public static final UniqueKey<FedUserRequiredActionRecord> CONSTR_FED_REQUIRED_ACTION = Internal.createUniqueKey(FedUserRequiredAction.FED_USER_REQUIRED_ACTION, DSL.name("constr_fed_required_action"), new TableField[] { FedUserRequiredAction.FED_USER_REQUIRED_ACTION.REQUIRED_ACTION, FedUserRequiredAction.FED_USER_REQUIRED_ACTION.USER_ID }, true);
    public static final UniqueKey<FedUserRoleMappingRecord> CONSTR_FED_USER_ROLE = Internal.createUniqueKey(FedUserRoleMapping.FED_USER_ROLE_MAPPING, DSL.name("constr_fed_user_role"), new TableField[] { FedUserRoleMapping.FED_USER_ROLE_MAPPING.ROLE_ID, FedUserRoleMapping.FED_USER_ROLE_MAPPING.USER_ID }, true);
    public static final UniqueKey<FederatedIdentityRecord> CONSTRAINT_40 = Internal.createUniqueKey(FederatedIdentity.FEDERATED_IDENTITY, DSL.name("constraint_40"), new TableField[] { FederatedIdentity.FEDERATED_IDENTITY.IDENTITY_PROVIDER, FederatedIdentity.FEDERATED_IDENTITY.USER_ID }, true);
    public static final UniqueKey<FederatedUserRecord> CONSTR_FEDERATED_USER = Internal.createUniqueKey(FederatedUser.FEDERATED_USER, DSL.name("constr_federated_user"), new TableField[] { FederatedUser.FEDERATED_USER.ID }, true);
    public static final UniqueKey<GroupAttributeRecord> CONSTRAINT_GROUP_ATTRIBUTE_PK = Internal.createUniqueKey(GroupAttribute.GROUP_ATTRIBUTE, DSL.name("constraint_group_attribute_pk"), new TableField[] { GroupAttribute.GROUP_ATTRIBUTE.ID }, true);
    public static final UniqueKey<GroupRoleMappingRecord> CONSTRAINT_GROUP_ROLE = Internal.createUniqueKey(GroupRoleMapping.GROUP_ROLE_MAPPING, DSL.name("constraint_group_role"), new TableField[] { GroupRoleMapping.GROUP_ROLE_MAPPING.ROLE_ID, GroupRoleMapping.GROUP_ROLE_MAPPING.GROUP_ID }, true);
    public static final UniqueKey<IdentityProviderRecord> CONSTRAINT_2B = Internal.createUniqueKey(IdentityProvider.IDENTITY_PROVIDER, DSL.name("constraint_2b"), new TableField[] { IdentityProvider.IDENTITY_PROVIDER.INTERNAL_ID }, true);
    public static final UniqueKey<IdentityProviderRecord> UK_2DAELWNIBJI49AVXSRTUF6XJ33 = Internal.createUniqueKey(IdentityProvider.IDENTITY_PROVIDER, DSL.name("uk_2daelwnibji49avxsrtuf6xj33"), new TableField[] { IdentityProvider.IDENTITY_PROVIDER.PROVIDER_ALIAS, IdentityProvider.IDENTITY_PROVIDER.REALM_ID }, true);
    public static final UniqueKey<IdentityProviderConfigRecord> CONSTRAINT_D = Internal.createUniqueKey(IdentityProviderConfig.IDENTITY_PROVIDER_CONFIG, DSL.name("constraint_d"), new TableField[] { IdentityProviderConfig.IDENTITY_PROVIDER_CONFIG.IDENTITY_PROVIDER_ID, IdentityProviderConfig.IDENTITY_PROVIDER_CONFIG.NAME }, true);
    public static final UniqueKey<IdentityProviderMapperRecord> CONSTRAINT_IDPM = Internal.createUniqueKey(IdentityProviderMapper.IDENTITY_PROVIDER_MAPPER, DSL.name("constraint_idpm"), new TableField[] { IdentityProviderMapper.IDENTITY_PROVIDER_MAPPER.ID }, true);
    public static final UniqueKey<IdpMapperConfigRecord> CONSTRAINT_IDPMCONFIG = Internal.createUniqueKey(IdpMapperConfig.IDP_MAPPER_CONFIG, DSL.name("constraint_idpmconfig"), new TableField[] { IdpMapperConfig.IDP_MAPPER_CONFIG.IDP_MAPPER_ID, IdpMapperConfig.IDP_MAPPER_CONFIG.NAME }, true);
    public static final UniqueKey<KeycloakGroupRecord> CONSTRAINT_GROUP = Internal.createUniqueKey(KeycloakGroup.KEYCLOAK_GROUP, DSL.name("constraint_group"), new TableField[] { KeycloakGroup.KEYCLOAK_GROUP.ID }, true);
    public static final UniqueKey<KeycloakGroupRecord> SIBLING_NAMES = Internal.createUniqueKey(KeycloakGroup.KEYCLOAK_GROUP, DSL.name("sibling_names"), new TableField[] { KeycloakGroup.KEYCLOAK_GROUP.REALM_ID, KeycloakGroup.KEYCLOAK_GROUP.PARENT_GROUP, KeycloakGroup.KEYCLOAK_GROUP.NAME }, true);
    public static final UniqueKey<KeycloakRoleRecord> CONSTRAINT_A = Internal.createUniqueKey(KeycloakRole.KEYCLOAK_ROLE, DSL.name("constraint_a"), new TableField[] { KeycloakRole.KEYCLOAK_ROLE.ID }, true);
    public static final UniqueKey<KeycloakRoleRecord> UK_J3RWUVD56ONTGSUHOGM184WW2_2 = Internal.createUniqueKey(KeycloakRole.KEYCLOAK_ROLE, DSL.name("UK_J3RWUVD56ONTGSUHOGM184WW2-2"), new TableField[] { KeycloakRole.KEYCLOAK_ROLE.NAME, KeycloakRole.KEYCLOAK_ROLE.CLIENT_REALM_CONSTRAINT }, true);
    public static final UniqueKey<MigrationModelRecord> CONSTRAINT_MIGMOD = Internal.createUniqueKey(MigrationModel.MIGRATION_MODEL, DSL.name("constraint_migmod"), new TableField[] { MigrationModel.MIGRATION_MODEL.ID }, true);
    public static final UniqueKey<OfflineClientSessionRecord> CONSTRAINT_OFFL_CL_SES_PK3 = Internal.createUniqueKey(OfflineClientSession.OFFLINE_CLIENT_SESSION, DSL.name("constraint_offl_cl_ses_pk3"), new TableField[] { OfflineClientSession.OFFLINE_CLIENT_SESSION.USER_SESSION_ID, OfflineClientSession.OFFLINE_CLIENT_SESSION.CLIENT_ID, OfflineClientSession.OFFLINE_CLIENT_SESSION.OFFLINE_FLAG }, true);
    public static final UniqueKey<OfflineUserSessionRecord> CONSTRAINT_OFFL_US_SES_PK2 = Internal.createUniqueKey(OfflineUserSession.OFFLINE_USER_SESSION, DSL.name("constraint_offl_us_ses_pk2"), new TableField[] { OfflineUserSession.OFFLINE_USER_SESSION.USER_SESSION_ID, OfflineUserSession.OFFLINE_USER_SESSION.OFFLINE_FLAG }, true);
    public static final UniqueKey<PolicyConfigRecord> CONSTRAINT_DPC = Internal.createUniqueKey(PolicyConfig.POLICY_CONFIG, DSL.name("constraint_dpc"), new TableField[] { PolicyConfig.POLICY_CONFIG.POLICY_ID, PolicyConfig.POLICY_CONFIG.NAME }, true);
    public static final UniqueKey<ProtocolMapperRecord> CONSTRAINT_PCM = Internal.createUniqueKey(ProtocolMapper.PROTOCOL_MAPPER, DSL.name("constraint_pcm"), new TableField[] { ProtocolMapper.PROTOCOL_MAPPER.ID }, true);
    public static final UniqueKey<ProtocolMapperConfigRecord> CONSTRAINT_PMCONFIG = Internal.createUniqueKey(ProtocolMapperConfig.PROTOCOL_MAPPER_CONFIG, DSL.name("constraint_pmconfig"), new TableField[] { ProtocolMapperConfig.PROTOCOL_MAPPER_CONFIG.PROTOCOL_MAPPER_ID, ProtocolMapperConfig.PROTOCOL_MAPPER_CONFIG.NAME }, true);
    public static final UniqueKey<RealmRecord> CONSTRAINT_4A = Internal.createUniqueKey(Realm.REALM, DSL.name("constraint_4a"), new TableField[] { Realm.REALM.ID }, true);
    public static final UniqueKey<RealmRecord> UK_ORVSDMLA56612EAEFIQ6WL5OI = Internal.createUniqueKey(Realm.REALM, DSL.name("uk_orvsdmla56612eaefiq6wl5oi"), new TableField[] { Realm.REALM.NAME }, true);
    public static final UniqueKey<RealmAttributeRecord> CONSTRAINT_9 = Internal.createUniqueKey(RealmAttribute.REALM_ATTRIBUTE, DSL.name("constraint_9"), new TableField[] { RealmAttribute.REALM_ATTRIBUTE.NAME, RealmAttribute.REALM_ATTRIBUTE.REALM_ID }, true);
    public static final UniqueKey<RealmDefaultGroupsRecord> CON_GROUP_ID_DEF_GROUPS = Internal.createUniqueKey(RealmDefaultGroups.REALM_DEFAULT_GROUPS, DSL.name("con_group_id_def_groups"), new TableField[] { RealmDefaultGroups.REALM_DEFAULT_GROUPS.GROUP_ID }, true);
    public static final UniqueKey<RealmDefaultRolesRecord> UK_H4WPD7W4HSOOLNI3H0SW7BTJE = Internal.createUniqueKey(RealmDefaultRoles.REALM_DEFAULT_ROLES, DSL.name("uk_h4wpd7w4hsoolni3h0sw7btje"), new TableField[] { RealmDefaultRoles.REALM_DEFAULT_ROLES.ROLE_ID }, true);
    public static final UniqueKey<RealmRequiredCredentialRecord> CONSTRAINT_92 = Internal.createUniqueKey(RealmRequiredCredential.REALM_REQUIRED_CREDENTIAL, DSL.name("constraint_92"), new TableField[] { RealmRequiredCredential.REALM_REQUIRED_CREDENTIAL.REALM_ID, RealmRequiredCredential.REALM_REQUIRED_CREDENTIAL.TYPE }, true);
    public static final UniqueKey<RealmSmtpConfigRecord> CONSTRAINT_E = Internal.createUniqueKey(RealmSmtpConfig.REALM_SMTP_CONFIG, DSL.name("constraint_e"), new TableField[] { RealmSmtpConfig.REALM_SMTP_CONFIG.REALM_ID, RealmSmtpConfig.REALM_SMTP_CONFIG.NAME }, true);
    public static final UniqueKey<RequiredActionConfigRecord> CONSTRAINT_REQ_ACT_CFG_PK = Internal.createUniqueKey(RequiredActionConfig.REQUIRED_ACTION_CONFIG, DSL.name("constraint_req_act_cfg_pk"), new TableField[] { RequiredActionConfig.REQUIRED_ACTION_CONFIG.REQUIRED_ACTION_ID, RequiredActionConfig.REQUIRED_ACTION_CONFIG.NAME }, true);
    public static final UniqueKey<RequiredActionProviderRecord> CONSTRAINT_REQ_ACT_PRV_PK = Internal.createUniqueKey(RequiredActionProvider.REQUIRED_ACTION_PROVIDER, DSL.name("constraint_req_act_prv_pk"), new TableField[] { RequiredActionProvider.REQUIRED_ACTION_PROVIDER.ID }, true);
    public static final UniqueKey<ResourcePolicyRecord> CONSTRAINT_FARSRPP = Internal.createUniqueKey(ResourcePolicy.RESOURCE_POLICY, DSL.name("constraint_farsrpp"), new TableField[] { ResourcePolicy.RESOURCE_POLICY.RESOURCE_ID, ResourcePolicy.RESOURCE_POLICY.POLICY_ID }, true);
    public static final UniqueKey<ResourceScopeRecord> CONSTRAINT_FARSRSP = Internal.createUniqueKey(ResourceScope.RESOURCE_SCOPE, DSL.name("constraint_farsrsp"), new TableField[] { ResourceScope.RESOURCE_SCOPE.RESOURCE_ID, ResourceScope.RESOURCE_SCOPE.SCOPE_ID }, true);
    public static final UniqueKey<ResourceServerRecord> CONSTRAINT_FARS = Internal.createUniqueKey(ResourceServer.RESOURCE_SERVER, DSL.name("constraint_fars"), new TableField[] { ResourceServer.RESOURCE_SERVER.ID }, true);
    public static final UniqueKey<ResourceServerPolicyRecord> CONSTRAINT_FARSRP = Internal.createUniqueKey(ResourceServerPolicy.RESOURCE_SERVER_POLICY, DSL.name("constraint_farsrp"), new TableField[] { ResourceServerPolicy.RESOURCE_SERVER_POLICY.ID }, true);
    public static final UniqueKey<ResourceServerPolicyRecord> UK_FRSRPT700S9V50BU18WS5HA6 = Internal.createUniqueKey(ResourceServerPolicy.RESOURCE_SERVER_POLICY, DSL.name("uk_frsrpt700s9v50bu18ws5ha6"), new TableField[] { ResourceServerPolicy.RESOURCE_SERVER_POLICY.NAME, ResourceServerPolicy.RESOURCE_SERVER_POLICY.RESOURCE_SERVER_ID }, true);
    public static final UniqueKey<ResourceServerResourceRecord> CONSTRAINT_FARSR = Internal.createUniqueKey(ResourceServerResource.RESOURCE_SERVER_RESOURCE, DSL.name("constraint_farsr"), new TableField[] { ResourceServerResource.RESOURCE_SERVER_RESOURCE.ID }, true);
    public static final UniqueKey<ResourceServerResourceRecord> UK_FRSR6T700S9V50BU18WS5HA6 = Internal.createUniqueKey(ResourceServerResource.RESOURCE_SERVER_RESOURCE, DSL.name("uk_frsr6t700s9v50bu18ws5ha6"), new TableField[] { ResourceServerResource.RESOURCE_SERVER_RESOURCE.NAME, ResourceServerResource.RESOURCE_SERVER_RESOURCE.OWNER, ResourceServerResource.RESOURCE_SERVER_RESOURCE.RESOURCE_SERVER_ID }, true);
    public static final UniqueKey<ResourceServerScopeRecord> CONSTRAINT_FARSRS = Internal.createUniqueKey(ResourceServerScope.RESOURCE_SERVER_SCOPE, DSL.name("constraint_farsrs"), new TableField[] { ResourceServerScope.RESOURCE_SERVER_SCOPE.ID }, true);
    public static final UniqueKey<ResourceServerScopeRecord> UK_FRSRST700S9V50BU18WS5HA6 = Internal.createUniqueKey(ResourceServerScope.RESOURCE_SERVER_SCOPE, DSL.name("uk_frsrst700s9v50bu18ws5ha6"), new TableField[] { ResourceServerScope.RESOURCE_SERVER_SCOPE.NAME, ResourceServerScope.RESOURCE_SERVER_SCOPE.RESOURCE_SERVER_ID }, true);
    public static final UniqueKey<ScopeMappingRecord> CONSTRAINT_81 = Internal.createUniqueKey(ScopeMapping.SCOPE_MAPPING, DSL.name("constraint_81"), new TableField[] { ScopeMapping.SCOPE_MAPPING.CLIENT_ID, ScopeMapping.SCOPE_MAPPING.ROLE_ID }, true);
    public static final UniqueKey<ScopePolicyRecord> CONSTRAINT_FARSRSPS = Internal.createUniqueKey(ScopePolicy.SCOPE_POLICY, DSL.name("constraint_farsrsps"), new TableField[] { ScopePolicy.SCOPE_POLICY.SCOPE_ID, ScopePolicy.SCOPE_POLICY.POLICY_ID }, true);
    public static final UniqueKey<TemplateScopeMappingRecord> PK_TEMPLATE_SCOPE = Internal.createUniqueKey(TemplateScopeMapping.TEMPLATE_SCOPE_MAPPING, DSL.name("pk_template_scope"), new TableField[] { TemplateScopeMapping.TEMPLATE_SCOPE_MAPPING.TEMPLATE_ID, TemplateScopeMapping.TEMPLATE_SCOPE_MAPPING.ROLE_ID }, true);
    public static final UniqueKey<UserAttributeRecord> CONSTRAINT_USER_ATTRIBUTE_PK = Internal.createUniqueKey(UserAttribute.USER_ATTRIBUTE, DSL.name("constraint_user_attribute_pk"), new TableField[] { UserAttribute.USER_ATTRIBUTE.ID }, true);
    public static final UniqueKey<UserConsentRecord> CONSTRAINT_GRNTCSNT_PM = Internal.createUniqueKey(UserConsent.USER_CONSENT, DSL.name("constraint_grntcsnt_pm"), new TableField[] { UserConsent.USER_CONSENT.ID }, true);
    public static final UniqueKey<UserConsentRecord> UK_JKUWUVD56ONTGSUHOGM8UEWRT = Internal.createUniqueKey(UserConsent.USER_CONSENT, DSL.name("uk_jkuwuvd56ontgsuhogm8uewrt"), new TableField[] { UserConsent.USER_CONSENT.CLIENT_ID, UserConsent.USER_CONSENT.USER_ID }, true);
    public static final UniqueKey<UserConsentProtMapperRecord> CONSTRAINT_GRNTCSNT_PRM_PM = Internal.createUniqueKey(UserConsentProtMapper.USER_CONSENT_PROT_MAPPER, DSL.name("constraint_grntcsnt_prm_pm"), new TableField[] { UserConsentProtMapper.USER_CONSENT_PROT_MAPPER.USER_CONSENT_ID, UserConsentProtMapper.USER_CONSENT_PROT_MAPPER.PROTOCOL_MAPPER_ID }, true);
    public static final UniqueKey<UserConsentRoleRecord> CONSTRAINT_GRNTCSNT_ROLE_PM = Internal.createUniqueKey(UserConsentRole.USER_CONSENT_ROLE, DSL.name("constraint_grntcsnt_role_pm"), new TableField[] { UserConsentRole.USER_CONSENT_ROLE.USER_CONSENT_ID, UserConsentRole.USER_CONSENT_ROLE.ROLE_ID }, true);
    public static final UniqueKey<UserEntityRecord> CONSTRAINT_FB = Internal.createUniqueKey(UserEntity.USER_ENTITY, DSL.name("constraint_fb"), new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final UniqueKey<UserEntityRecord> UK_DYKN684SL8UP1CRFEI6ECKHD7 = Internal.createUniqueKey(UserEntity.USER_ENTITY, DSL.name("uk_dykn684sl8up1crfei6eckhd7"), new TableField[] { UserEntity.USER_ENTITY.REALM_ID, UserEntity.USER_ENTITY.EMAIL_CONSTRAINT }, true);
    public static final UniqueKey<UserEntityRecord> UK_RU8TT6T700S9V50BU18WS5HA6 = Internal.createUniqueKey(UserEntity.USER_ENTITY, DSL.name("uk_ru8tt6t700s9v50bu18ws5ha6"), new TableField[] { UserEntity.USER_ENTITY.REALM_ID, UserEntity.USER_ENTITY.USERNAME }, true);
    public static final UniqueKey<UserFederationConfigRecord> CONSTRAINT_F9 = Internal.createUniqueKey(UserFederationConfig.USER_FEDERATION_CONFIG, DSL.name("constraint_f9"), new TableField[] { UserFederationConfig.USER_FEDERATION_CONFIG.USER_FEDERATION_PROVIDER_ID, UserFederationConfig.USER_FEDERATION_CONFIG.NAME }, true);
    public static final UniqueKey<UserFederationMapperRecord> CONSTRAINT_FEDMAPPERPM = Internal.createUniqueKey(UserFederationMapper.USER_FEDERATION_MAPPER, DSL.name("constraint_fedmapperpm"), new TableField[] { UserFederationMapper.USER_FEDERATION_MAPPER.ID }, true);
    public static final UniqueKey<UserFederationMapperConfigRecord> CONSTRAINT_FEDMAPPER_CFG_PM = Internal.createUniqueKey(UserFederationMapperConfig.USER_FEDERATION_MAPPER_CONFIG, DSL.name("constraint_fedmapper_cfg_pm"), new TableField[] { UserFederationMapperConfig.USER_FEDERATION_MAPPER_CONFIG.USER_FEDERATION_MAPPER_ID, UserFederationMapperConfig.USER_FEDERATION_MAPPER_CONFIG.NAME }, true);
    public static final UniqueKey<UserFederationProviderRecord> CONSTRAINT_5C = Internal.createUniqueKey(UserFederationProvider.USER_FEDERATION_PROVIDER, DSL.name("constraint_5c"), new TableField[] { UserFederationProvider.USER_FEDERATION_PROVIDER.ID }, true);
    public static final UniqueKey<UserGroupMembershipRecord> CONSTRAINT_USER_GROUP = Internal.createUniqueKey(UserGroupMembership.USER_GROUP_MEMBERSHIP, DSL.name("constraint_user_group"), new TableField[] { UserGroupMembership.USER_GROUP_MEMBERSHIP.GROUP_ID, UserGroupMembership.USER_GROUP_MEMBERSHIP.USER_ID }, true);
    public static final UniqueKey<UserRequiredActionRecord> CONSTRAINT_REQUIRED_ACTION = Internal.createUniqueKey(UserRequiredAction.USER_REQUIRED_ACTION, DSL.name("constraint_required_action"), new TableField[] { UserRequiredAction.USER_REQUIRED_ACTION.REQUIRED_ACTION, UserRequiredAction.USER_REQUIRED_ACTION.USER_ID }, true);
    public static final UniqueKey<UserRoleMappingRecord> CONSTRAINT_C = Internal.createUniqueKey(UserRoleMapping.USER_ROLE_MAPPING, DSL.name("constraint_c"), new TableField[] { UserRoleMapping.USER_ROLE_MAPPING.ROLE_ID, UserRoleMapping.USER_ROLE_MAPPING.USER_ID }, true);
    public static final UniqueKey<UserSessionRecord> CONSTRAINT_57 = Internal.createUniqueKey(UserSession.USER_SESSION, DSL.name("constraint_57"), new TableField[] { UserSession.USER_SESSION.ID }, true);
    public static final UniqueKey<UserSessionNoteRecord> CONSTRAINT_USN_PK = Internal.createUniqueKey(UserSessionNote.USER_SESSION_NOTE, DSL.name("constraint_usn_pk"), new TableField[] { UserSessionNote.USER_SESSION_NOTE.USER_SESSION, UserSessionNote.USER_SESSION_NOTE.NAME }, true);
    public static final UniqueKey<UsernameLoginFailureRecord> CONSTRAINT_17_2 = Internal.createUniqueKey(UsernameLoginFailure.USERNAME_LOGIN_FAILURE, DSL.name("CONSTRAINT_17-2"), new TableField[] { UsernameLoginFailure.USERNAME_LOGIN_FAILURE.REALM_ID, UsernameLoginFailure.USERNAME_LOGIN_FAILURE.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AssociatedPolicyRecord, ResourceServerPolicyRecord> ASSOCIATED_POLICY__FK_FRSR5S213XCX4WNKOG82SSRFY = Internal.createForeignKey(AssociatedPolicy.ASSOCIATED_POLICY, DSL.name("fk_frsr5s213xcx4wnkog82ssrfy"), new TableField[] { AssociatedPolicy.ASSOCIATED_POLICY.ASSOCIATED_POLICY_ID }, Keys.CONSTRAINT_FARSRP, new TableField[] { ResourceServerPolicy.RESOURCE_SERVER_POLICY.ID }, true);
    public static final ForeignKey<AssociatedPolicyRecord, ResourceServerPolicyRecord> ASSOCIATED_POLICY__FK_FRSRPAS14XCX4WNKOG82SSRFY = Internal.createForeignKey(AssociatedPolicy.ASSOCIATED_POLICY, DSL.name("fk_frsrpas14xcx4wnkog82ssrfy"), new TableField[] { AssociatedPolicy.ASSOCIATED_POLICY.POLICY_ID }, Keys.CONSTRAINT_FARSRP, new TableField[] { ResourceServerPolicy.RESOURCE_SERVER_POLICY.ID }, true);
    public static final ForeignKey<AuthenticationExecutionRecord, AuthenticationFlowRecord> AUTHENTICATION_EXECUTION__FK_AUTH_EXEC_FLOW = Internal.createForeignKey(AuthenticationExecution.AUTHENTICATION_EXECUTION, DSL.name("fk_auth_exec_flow"), new TableField[] { AuthenticationExecution.AUTHENTICATION_EXECUTION.FLOW_ID }, Keys.CONSTRAINT_AUTH_FLOW_PK, new TableField[] { AuthenticationFlow.AUTHENTICATION_FLOW.ID }, true);
    public static final ForeignKey<AuthenticationExecutionRecord, RealmRecord> AUTHENTICATION_EXECUTION__FK_AUTH_EXEC_REALM = Internal.createForeignKey(AuthenticationExecution.AUTHENTICATION_EXECUTION, DSL.name("fk_auth_exec_realm"), new TableField[] { AuthenticationExecution.AUTHENTICATION_EXECUTION.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<AuthenticationFlowRecord, RealmRecord> AUTHENTICATION_FLOW__FK_AUTH_FLOW_REALM = Internal.createForeignKey(AuthenticationFlow.AUTHENTICATION_FLOW, DSL.name("fk_auth_flow_realm"), new TableField[] { AuthenticationFlow.AUTHENTICATION_FLOW.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<AuthenticatorConfigRecord, RealmRecord> AUTHENTICATOR_CONFIG__FK_AUTH_REALM = Internal.createForeignKey(AuthenticatorConfig.AUTHENTICATOR_CONFIG, DSL.name("fk_auth_realm"), new TableField[] { AuthenticatorConfig.AUTHENTICATOR_CONFIG.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<ClientRecord, ClientTemplateRecord> CLIENT__FK_CLI_TMPLT_CLIENT = Internal.createForeignKey(Client.CLIENT, DSL.name("fk_cli_tmplt_client"), new TableField[] { Client.CLIENT.CLIENT_TEMPLATE_ID }, Keys.PK_CLI_TEMPLATE, new TableField[] { ClientTemplate.CLIENT_TEMPLATE.ID }, true);
    public static final ForeignKey<ClientRecord, RealmRecord> CLIENT__FK_P56CTINXXB9GSK57FO49F9TAC = Internal.createForeignKey(Client.CLIENT, DSL.name("fk_p56ctinxxb9gsk57fo49f9tac"), new TableField[] { Client.CLIENT.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<ClientAttributesRecord, ClientRecord> CLIENT_ATTRIBUTES__FK3C47C64BEACCA966 = Internal.createForeignKey(ClientAttributes.CLIENT_ATTRIBUTES, DSL.name("fk3c47c64beacca966"), new TableField[] { ClientAttributes.CLIENT_ATTRIBUTES.CLIENT_ID }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<ClientDefaultRolesRecord, KeycloakRoleRecord> CLIENT_DEFAULT_ROLES__FK_8AELWNIBJI49AVXSRTUF6XJOW = Internal.createForeignKey(ClientDefaultRoles.CLIENT_DEFAULT_ROLES, DSL.name("fk_8aelwnibji49avxsrtuf6xjow"), new TableField[] { ClientDefaultRoles.CLIENT_DEFAULT_ROLES.ROLE_ID }, Keys.CONSTRAINT_A, new TableField[] { KeycloakRole.KEYCLOAK_ROLE.ID }, true);
    public static final ForeignKey<ClientDefaultRolesRecord, ClientRecord> CLIENT_DEFAULT_ROLES__FK_NUILTS7KLWQW2H8M2B5JOYTKY = Internal.createForeignKey(ClientDefaultRoles.CLIENT_DEFAULT_ROLES, DSL.name("fk_nuilts7klwqw2h8m2b5joytky"), new TableField[] { ClientDefaultRoles.CLIENT_DEFAULT_ROLES.CLIENT_ID }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<ClientIdentityProvMappingRecord, ClientRecord> CLIENT_IDENTITY_PROV_MAPPING__FK_56ELWNIBJI49AVXSRTUF6XJ23 = Internal.createForeignKey(ClientIdentityProvMapping.CLIENT_IDENTITY_PROV_MAPPING, DSL.name("fk_56elwnibji49avxsrtuf6xj23"), new TableField[] { ClientIdentityProvMapping.CLIENT_IDENTITY_PROV_MAPPING.CLIENT_ID }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<ClientIdentityProvMappingRecord, IdentityProviderRecord> CLIENT_IDENTITY_PROV_MAPPING__FK_7CELWNIBJI49AVXSRTUF6XJ12 = Internal.createForeignKey(ClientIdentityProvMapping.CLIENT_IDENTITY_PROV_MAPPING, DSL.name("fk_7celwnibji49avxsrtuf6xj12"), new TableField[] { ClientIdentityProvMapping.CLIENT_IDENTITY_PROV_MAPPING.IDENTITY_PROVIDER_ID }, Keys.CONSTRAINT_2B, new TableField[] { IdentityProvider.IDENTITY_PROVIDER.INTERNAL_ID }, true);
    public static final ForeignKey<ClientNodeRegistrationsRecord, ClientRecord> CLIENT_NODE_REGISTRATIONS__FK4129723BA992F594 = Internal.createForeignKey(ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS, DSL.name("fk4129723ba992f594"), new TableField[] { ClientNodeRegistrations.CLIENT_NODE_REGISTRATIONS.CLIENT_ID }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<ClientSessionRecord, UserSessionRecord> CLIENT_SESSION__FK_B4AO2VCVAT6UKAU74WBWTFQO1 = Internal.createForeignKey(ClientSession.CLIENT_SESSION, DSL.name("fk_b4ao2vcvat6ukau74wbwtfqo1"), new TableField[] { ClientSession.CLIENT_SESSION.SESSION_ID }, Keys.CONSTRAINT_57, new TableField[] { UserSession.USER_SESSION.ID }, true);
    public static final ForeignKey<ClientSessionAuthStatusRecord, ClientSessionRecord> CLIENT_SESSION_AUTH_STATUS__AUTH_STATUS_CONSTRAINT = Internal.createForeignKey(ClientSessionAuthStatus.CLIENT_SESSION_AUTH_STATUS, DSL.name("auth_status_constraint"), new TableField[] { ClientSessionAuthStatus.CLIENT_SESSION_AUTH_STATUS.CLIENT_SESSION }, Keys.CONSTRAINT_8, new TableField[] { ClientSession.CLIENT_SESSION.ID }, true);
    public static final ForeignKey<ClientSessionNoteRecord, ClientSessionRecord> CLIENT_SESSION_NOTE__FK5EDFB00FF51C2736 = Internal.createForeignKey(ClientSessionNote.CLIENT_SESSION_NOTE, DSL.name("fk5edfb00ff51c2736"), new TableField[] { ClientSessionNote.CLIENT_SESSION_NOTE.CLIENT_SESSION }, Keys.CONSTRAINT_8, new TableField[] { ClientSession.CLIENT_SESSION.ID }, true);
    public static final ForeignKey<ClientSessionProtMapperRecord, ClientSessionRecord> CLIENT_SESSION_PROT_MAPPER__FK_33A8SGQW18I532811V7O2DK89 = Internal.createForeignKey(ClientSessionProtMapper.CLIENT_SESSION_PROT_MAPPER, DSL.name("fk_33a8sgqw18i532811v7o2dk89"), new TableField[] { ClientSessionProtMapper.CLIENT_SESSION_PROT_MAPPER.CLIENT_SESSION }, Keys.CONSTRAINT_8, new TableField[] { ClientSession.CLIENT_SESSION.ID }, true);
    public static final ForeignKey<ClientSessionRoleRecord, ClientSessionRecord> CLIENT_SESSION_ROLE__FK_11B7SGQW18I532811V7O2DV76 = Internal.createForeignKey(ClientSessionRole.CLIENT_SESSION_ROLE, DSL.name("fk_11b7sgqw18i532811v7o2dv76"), new TableField[] { ClientSessionRole.CLIENT_SESSION_ROLE.CLIENT_SESSION }, Keys.CONSTRAINT_8, new TableField[] { ClientSession.CLIENT_SESSION.ID }, true);
    public static final ForeignKey<ClientTemplateRecord, RealmRecord> CLIENT_TEMPLATE__FK_REALM_CLI_TMPLT = Internal.createForeignKey(ClientTemplate.CLIENT_TEMPLATE, DSL.name("fk_realm_cli_tmplt"), new TableField[] { ClientTemplate.CLIENT_TEMPLATE.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<ClientTemplateAttributesRecord, ClientTemplateRecord> CLIENT_TEMPLATE_ATTRIBUTES__FK_CL_TEMPL_ATTR_TEMPL = Internal.createForeignKey(ClientTemplateAttributes.CLIENT_TEMPLATE_ATTRIBUTES, DSL.name("fk_cl_templ_attr_templ"), new TableField[] { ClientTemplateAttributes.CLIENT_TEMPLATE_ATTRIBUTES.TEMPLATE_ID }, Keys.PK_CLI_TEMPLATE, new TableField[] { ClientTemplate.CLIENT_TEMPLATE.ID }, true);
    public static final ForeignKey<ClientUserSessionNoteRecord, ClientSessionRecord> CLIENT_USER_SESSION_NOTE__FK_CL_USR_SES_NOTE = Internal.createForeignKey(ClientUserSessionNote.CLIENT_USER_SESSION_NOTE, DSL.name("fk_cl_usr_ses_note"), new TableField[] { ClientUserSessionNote.CLIENT_USER_SESSION_NOTE.CLIENT_SESSION }, Keys.CONSTRAINT_8, new TableField[] { ClientSession.CLIENT_SESSION.ID }, true);
    public static final ForeignKey<ComponentRecord, RealmRecord> COMPONENT__FK_COMPONENT_REALM = Internal.createForeignKey(Component.COMPONENT, DSL.name("fk_component_realm"), new TableField[] { Component.COMPONENT.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<ComponentConfigRecord, ComponentRecord> COMPONENT_CONFIG__FK_COMPONENT_CONFIG = Internal.createForeignKey(ComponentConfig.COMPONENT_CONFIG, DSL.name("fk_component_config"), new TableField[] { ComponentConfig.COMPONENT_CONFIG.COMPONENT_ID }, Keys.CONSTR_COMPONENT_PK, new TableField[] { Component.COMPONENT.ID }, true);
    public static final ForeignKey<CompositeRoleRecord, KeycloakRoleRecord> COMPOSITE_ROLE__FK_A63WVEKFTU8JO1PNJ81E7MCE2 = Internal.createForeignKey(CompositeRole.COMPOSITE_ROLE, DSL.name("fk_a63wvekftu8jo1pnj81e7mce2"), new TableField[] { CompositeRole.COMPOSITE_ROLE.COMPOSITE }, Keys.CONSTRAINT_A, new TableField[] { KeycloakRole.KEYCLOAK_ROLE.ID }, true);
    public static final ForeignKey<CompositeRoleRecord, KeycloakRoleRecord> COMPOSITE_ROLE__FK_GR7THLLB9LU8Q4VQA4524JJY8 = Internal.createForeignKey(CompositeRole.COMPOSITE_ROLE, DSL.name("fk_gr7thllb9lu8q4vqa4524jjy8"), new TableField[] { CompositeRole.COMPOSITE_ROLE.CHILD_ROLE }, Keys.CONSTRAINT_A, new TableField[] { KeycloakRole.KEYCLOAK_ROLE.ID }, true);
    public static final ForeignKey<CredentialRecord, UserEntityRecord> CREDENTIAL__FK_PFYR0GLASQYL0DEI3KL69R6V0 = Internal.createForeignKey(Credential.CREDENTIAL, DSL.name("fk_pfyr0glasqyl0dei3kl69r6v0"), new TableField[] { Credential.CREDENTIAL.USER_ID }, Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<CredentialAttributeRecord, CredentialRecord> CREDENTIAL_ATTRIBUTE__FK_CRED_ATTR = Internal.createForeignKey(CredentialAttribute.CREDENTIAL_ATTRIBUTE, DSL.name("fk_cred_attr"), new TableField[] { CredentialAttribute.CREDENTIAL_ATTRIBUTE.CREDENTIAL_ID }, Keys.CONSTRAINT_F, new TableField[] { Credential.CREDENTIAL.ID }, true);
    public static final ForeignKey<FedCredentialAttributeRecord, FedUserCredentialRecord> FED_CREDENTIAL_ATTRIBUTE__FK_FED_CRED_ATTR = Internal.createForeignKey(FedCredentialAttribute.FED_CREDENTIAL_ATTRIBUTE, DSL.name("fk_fed_cred_attr"), new TableField[] { FedCredentialAttribute.FED_CREDENTIAL_ATTRIBUTE.CREDENTIAL_ID }, Keys.CONSTR_FED_USER_CRED_PK, new TableField[] { FedUserCredential.FED_USER_CREDENTIAL.ID }, true);
    public static final ForeignKey<FederatedIdentityRecord, UserEntityRecord> FEDERATED_IDENTITY__FK404288B92EF007A6 = Internal.createForeignKey(FederatedIdentity.FEDERATED_IDENTITY, DSL.name("fk404288b92ef007a6"), new TableField[] { FederatedIdentity.FEDERATED_IDENTITY.USER_ID }, Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<GroupAttributeRecord, KeycloakGroupRecord> GROUP_ATTRIBUTE__FK_GROUP_ATTRIBUTE_GROUP = Internal.createForeignKey(GroupAttribute.GROUP_ATTRIBUTE, DSL.name("fk_group_attribute_group"), new TableField[] { GroupAttribute.GROUP_ATTRIBUTE.GROUP_ID }, Keys.CONSTRAINT_GROUP, new TableField[] { KeycloakGroup.KEYCLOAK_GROUP.ID }, true);
    public static final ForeignKey<GroupRoleMappingRecord, KeycloakGroupRecord> GROUP_ROLE_MAPPING__FK_GROUP_ROLE_GROUP = Internal.createForeignKey(GroupRoleMapping.GROUP_ROLE_MAPPING, DSL.name("fk_group_role_group"), new TableField[] { GroupRoleMapping.GROUP_ROLE_MAPPING.GROUP_ID }, Keys.CONSTRAINT_GROUP, new TableField[] { KeycloakGroup.KEYCLOAK_GROUP.ID }, true);
    public static final ForeignKey<GroupRoleMappingRecord, KeycloakRoleRecord> GROUP_ROLE_MAPPING__FK_GROUP_ROLE_ROLE = Internal.createForeignKey(GroupRoleMapping.GROUP_ROLE_MAPPING, DSL.name("fk_group_role_role"), new TableField[] { GroupRoleMapping.GROUP_ROLE_MAPPING.ROLE_ID }, Keys.CONSTRAINT_A, new TableField[] { KeycloakRole.KEYCLOAK_ROLE.ID }, true);
    public static final ForeignKey<IdentityProviderRecord, RealmRecord> IDENTITY_PROVIDER__FK2B4EBC52AE5C3B34 = Internal.createForeignKey(IdentityProvider.IDENTITY_PROVIDER, DSL.name("fk2b4ebc52ae5c3b34"), new TableField[] { IdentityProvider.IDENTITY_PROVIDER.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<IdentityProviderConfigRecord, IdentityProviderRecord> IDENTITY_PROVIDER_CONFIG__FKDC4897CF864C4E43 = Internal.createForeignKey(IdentityProviderConfig.IDENTITY_PROVIDER_CONFIG, DSL.name("fkdc4897cf864c4e43"), new TableField[] { IdentityProviderConfig.IDENTITY_PROVIDER_CONFIG.IDENTITY_PROVIDER_ID }, Keys.CONSTRAINT_2B, new TableField[] { IdentityProvider.IDENTITY_PROVIDER.INTERNAL_ID }, true);
    public static final ForeignKey<IdentityProviderMapperRecord, RealmRecord> IDENTITY_PROVIDER_MAPPER__FK_IDPM_REALM = Internal.createForeignKey(IdentityProviderMapper.IDENTITY_PROVIDER_MAPPER, DSL.name("fk_idpm_realm"), new TableField[] { IdentityProviderMapper.IDENTITY_PROVIDER_MAPPER.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<IdpMapperConfigRecord, IdentityProviderMapperRecord> IDP_MAPPER_CONFIG__FK_IDPMCONFIG = Internal.createForeignKey(IdpMapperConfig.IDP_MAPPER_CONFIG, DSL.name("fk_idpmconfig"), new TableField[] { IdpMapperConfig.IDP_MAPPER_CONFIG.IDP_MAPPER_ID }, Keys.CONSTRAINT_IDPM, new TableField[] { IdentityProviderMapper.IDENTITY_PROVIDER_MAPPER.ID }, true);
    public static final ForeignKey<KeycloakGroupRecord, RealmRecord> KEYCLOAK_GROUP__FK_GROUP_REALM = Internal.createForeignKey(KeycloakGroup.KEYCLOAK_GROUP, DSL.name("fk_group_realm"), new TableField[] { KeycloakGroup.KEYCLOAK_GROUP.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<KeycloakRoleRecord, RealmRecord> KEYCLOAK_ROLE__FK_6VYQFE4CN4WLQ8R6KT5VDSJ5C = Internal.createForeignKey(KeycloakRole.KEYCLOAK_ROLE, DSL.name("fk_6vyqfe4cn4wlq8r6kt5vdsj5c"), new TableField[] { KeycloakRole.KEYCLOAK_ROLE.REALM }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<KeycloakRoleRecord, ClientRecord> KEYCLOAK_ROLE__FK_KJHO5LE2C0RAL09FL8CM9WFW9 = Internal.createForeignKey(KeycloakRole.KEYCLOAK_ROLE, DSL.name("fk_kjho5le2c0ral09fl8cm9wfw9"), new TableField[] { KeycloakRole.KEYCLOAK_ROLE.CLIENT }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<PolicyConfigRecord, ResourceServerPolicyRecord> POLICY_CONFIG__FKDC34197CF864C4E43 = Internal.createForeignKey(PolicyConfig.POLICY_CONFIG, DSL.name("fkdc34197cf864c4e43"), new TableField[] { PolicyConfig.POLICY_CONFIG.POLICY_ID }, Keys.CONSTRAINT_FARSRP, new TableField[] { ResourceServerPolicy.RESOURCE_SERVER_POLICY.ID }, true);
    public static final ForeignKey<ProtocolMapperRecord, ClientTemplateRecord> PROTOCOL_MAPPER__FK_CLI_TMPLT_MAPPER = Internal.createForeignKey(ProtocolMapper.PROTOCOL_MAPPER, DSL.name("fk_cli_tmplt_mapper"), new TableField[] { ProtocolMapper.PROTOCOL_MAPPER.CLIENT_TEMPLATE_ID }, Keys.PK_CLI_TEMPLATE, new TableField[] { ClientTemplate.CLIENT_TEMPLATE.ID }, true);
    public static final ForeignKey<ProtocolMapperRecord, ClientRecord> PROTOCOL_MAPPER__FK_PCM_REALM = Internal.createForeignKey(ProtocolMapper.PROTOCOL_MAPPER, DSL.name("fk_pcm_realm"), new TableField[] { ProtocolMapper.PROTOCOL_MAPPER.CLIENT_ID }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<ProtocolMapperConfigRecord, ProtocolMapperRecord> PROTOCOL_MAPPER_CONFIG__FK_PMCONFIG = Internal.createForeignKey(ProtocolMapperConfig.PROTOCOL_MAPPER_CONFIG, DSL.name("fk_pmconfig"), new TableField[] { ProtocolMapperConfig.PROTOCOL_MAPPER_CONFIG.PROTOCOL_MAPPER_ID }, Keys.CONSTRAINT_PCM, new TableField[] { ProtocolMapper.PROTOCOL_MAPPER.ID }, true);
    public static final ForeignKey<RealmRecord, ClientRecord> REALM__FK_TRAF444KK6QRKMS7N56AIWQ5Y = Internal.createForeignKey(Realm.REALM, DSL.name("fk_traf444kk6qrkms7n56aiwq5y"), new TableField[] { Realm.REALM.MASTER_ADMIN_CLIENT }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<RealmAttributeRecord, RealmRecord> REALM_ATTRIBUTE__FK_8SHXD6L3E9ATQUKACXGPFFPTW = Internal.createForeignKey(RealmAttribute.REALM_ATTRIBUTE, DSL.name("fk_8shxd6l3e9atqukacxgpffptw"), new TableField[] { RealmAttribute.REALM_ATTRIBUTE.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<RealmDefaultGroupsRecord, KeycloakGroupRecord> REALM_DEFAULT_GROUPS__FK_DEF_GROUPS_GROUP = Internal.createForeignKey(RealmDefaultGroups.REALM_DEFAULT_GROUPS, DSL.name("fk_def_groups_group"), new TableField[] { RealmDefaultGroups.REALM_DEFAULT_GROUPS.GROUP_ID }, Keys.CONSTRAINT_GROUP, new TableField[] { KeycloakGroup.KEYCLOAK_GROUP.ID }, true);
    public static final ForeignKey<RealmDefaultGroupsRecord, RealmRecord> REALM_DEFAULT_GROUPS__FK_DEF_GROUPS_REALM = Internal.createForeignKey(RealmDefaultGroups.REALM_DEFAULT_GROUPS, DSL.name("fk_def_groups_realm"), new TableField[] { RealmDefaultGroups.REALM_DEFAULT_GROUPS.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<RealmDefaultRolesRecord, RealmRecord> REALM_DEFAULT_ROLES__FK_EVUDB1PPW84OXFAX2DRS03ICC = Internal.createForeignKey(RealmDefaultRoles.REALM_DEFAULT_ROLES, DSL.name("fk_evudb1ppw84oxfax2drs03icc"), new TableField[] { RealmDefaultRoles.REALM_DEFAULT_ROLES.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<RealmDefaultRolesRecord, KeycloakRoleRecord> REALM_DEFAULT_ROLES__FK_H4WPD7W4HSOOLNI3H0SW7BTJE = Internal.createForeignKey(RealmDefaultRoles.REALM_DEFAULT_ROLES, DSL.name("fk_h4wpd7w4hsoolni3h0sw7btje"), new TableField[] { RealmDefaultRoles.REALM_DEFAULT_ROLES.ROLE_ID }, Keys.CONSTRAINT_A, new TableField[] { KeycloakRole.KEYCLOAK_ROLE.ID }, true);
    public static final ForeignKey<RealmEnabledEventTypesRecord, RealmRecord> REALM_ENABLED_EVENT_TYPES__FK_H846O4H0W8EPX5NWEDRF5Y69J = Internal.createForeignKey(RealmEnabledEventTypes.REALM_ENABLED_EVENT_TYPES, DSL.name("fk_h846o4h0w8epx5nwedrf5y69j"), new TableField[] { RealmEnabledEventTypes.REALM_ENABLED_EVENT_TYPES.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<RealmEventsListenersRecord, RealmRecord> REALM_EVENTS_LISTENERS__FK_H846O4H0W8EPX5NXEV9F5Y69J = Internal.createForeignKey(RealmEventsListeners.REALM_EVENTS_LISTENERS, DSL.name("fk_h846o4h0w8epx5nxev9f5y69j"), new TableField[] { RealmEventsListeners.REALM_EVENTS_LISTENERS.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<RealmRequiredCredentialRecord, RealmRecord> REALM_REQUIRED_CREDENTIAL__FK_5HG65LYBEVAVKQFKI3KPONH9V = Internal.createForeignKey(RealmRequiredCredential.REALM_REQUIRED_CREDENTIAL, DSL.name("fk_5hg65lybevavkqfki3kponh9v"), new TableField[] { RealmRequiredCredential.REALM_REQUIRED_CREDENTIAL.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<RealmSmtpConfigRecord, RealmRecord> REALM_SMTP_CONFIG__FK_70EJ8XDXGXD0B9HH6180IRR0O = Internal.createForeignKey(RealmSmtpConfig.REALM_SMTP_CONFIG, DSL.name("fk_70ej8xdxgxd0b9hh6180irr0o"), new TableField[] { RealmSmtpConfig.REALM_SMTP_CONFIG.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<RealmSupportedLocalesRecord, RealmRecord> REALM_SUPPORTED_LOCALES__FK_SUPPORTED_LOCALES_REALM = Internal.createForeignKey(RealmSupportedLocales.REALM_SUPPORTED_LOCALES, DSL.name("fk_supported_locales_realm"), new TableField[] { RealmSupportedLocales.REALM_SUPPORTED_LOCALES.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<RedirectUrisRecord, ClientRecord> REDIRECT_URIS__FK_1BURS8PB4OUJ97H5WUPPAHV9F = Internal.createForeignKey(RedirectUris.REDIRECT_URIS, DSL.name("fk_1burs8pb4ouj97h5wuppahv9f"), new TableField[] { RedirectUris.REDIRECT_URIS.CLIENT_ID }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<RequiredActionProviderRecord, RealmRecord> REQUIRED_ACTION_PROVIDER__FK_REQ_ACT_REALM = Internal.createForeignKey(RequiredActionProvider.REQUIRED_ACTION_PROVIDER, DSL.name("fk_req_act_realm"), new TableField[] { RequiredActionProvider.REQUIRED_ACTION_PROVIDER.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<ResourcePolicyRecord, ResourceServerResourceRecord> RESOURCE_POLICY__FK_FRSRPOS53XCX4WNKOG82SSRFY = Internal.createForeignKey(ResourcePolicy.RESOURCE_POLICY, DSL.name("fk_frsrpos53xcx4wnkog82ssrfy"), new TableField[] { ResourcePolicy.RESOURCE_POLICY.RESOURCE_ID }, Keys.CONSTRAINT_FARSR, new TableField[] { ResourceServerResource.RESOURCE_SERVER_RESOURCE.ID }, true);
    public static final ForeignKey<ResourcePolicyRecord, ResourceServerPolicyRecord> RESOURCE_POLICY__FK_FRSRPP213XCX4WNKOG82SSRFY = Internal.createForeignKey(ResourcePolicy.RESOURCE_POLICY, DSL.name("fk_frsrpp213xcx4wnkog82ssrfy"), new TableField[] { ResourcePolicy.RESOURCE_POLICY.POLICY_ID }, Keys.CONSTRAINT_FARSRP, new TableField[] { ResourceServerPolicy.RESOURCE_SERVER_POLICY.ID }, true);
    public static final ForeignKey<ResourceScopeRecord, ResourceServerResourceRecord> RESOURCE_SCOPE__FK_FRSRPOS13XCX4WNKOG82SSRFY = Internal.createForeignKey(ResourceScope.RESOURCE_SCOPE, DSL.name("fk_frsrpos13xcx4wnkog82ssrfy"), new TableField[] { ResourceScope.RESOURCE_SCOPE.RESOURCE_ID }, Keys.CONSTRAINT_FARSR, new TableField[] { ResourceServerResource.RESOURCE_SERVER_RESOURCE.ID }, true);
    public static final ForeignKey<ResourceScopeRecord, ResourceServerScopeRecord> RESOURCE_SCOPE__FK_FRSRPS213XCX4WNKOG82SSRFY = Internal.createForeignKey(ResourceScope.RESOURCE_SCOPE, DSL.name("fk_frsrps213xcx4wnkog82ssrfy"), new TableField[] { ResourceScope.RESOURCE_SCOPE.SCOPE_ID }, Keys.CONSTRAINT_FARSRS, new TableField[] { ResourceServerScope.RESOURCE_SERVER_SCOPE.ID }, true);
    public static final ForeignKey<ScopeMappingRecord, ClientRecord> SCOPE_MAPPING__FK_OUSE064PLMLR732LXJCN1Q5F1 = Internal.createForeignKey(ScopeMapping.SCOPE_MAPPING, DSL.name("fk_ouse064plmlr732lxjcn1q5f1"), new TableField[] { ScopeMapping.SCOPE_MAPPING.CLIENT_ID }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
    public static final ForeignKey<ScopeMappingRecord, KeycloakRoleRecord> SCOPE_MAPPING__FK_P3RH9GRKU11KQFRS4FLTT7RNQ = Internal.createForeignKey(ScopeMapping.SCOPE_MAPPING, DSL.name("fk_p3rh9grku11kqfrs4fltt7rnq"), new TableField[] { ScopeMapping.SCOPE_MAPPING.ROLE_ID }, Keys.CONSTRAINT_A, new TableField[] { KeycloakRole.KEYCLOAK_ROLE.ID }, true);
    public static final ForeignKey<ScopePolicyRecord, ResourceServerPolicyRecord> SCOPE_POLICY__FK_FRSRASP13XCX4WNKOG82SSRFY = Internal.createForeignKey(ScopePolicy.SCOPE_POLICY, DSL.name("fk_frsrasp13xcx4wnkog82ssrfy"), new TableField[] { ScopePolicy.SCOPE_POLICY.POLICY_ID }, Keys.CONSTRAINT_FARSRP, new TableField[] { ResourceServerPolicy.RESOURCE_SERVER_POLICY.ID }, true);
    public static final ForeignKey<ScopePolicyRecord, ResourceServerScopeRecord> SCOPE_POLICY__FK_FRSRPASS3XCX4WNKOG82SSRFY = Internal.createForeignKey(ScopePolicy.SCOPE_POLICY, DSL.name("fk_frsrpass3xcx4wnkog82ssrfy"), new TableField[] { ScopePolicy.SCOPE_POLICY.SCOPE_ID }, Keys.CONSTRAINT_FARSRS, new TableField[] { ResourceServerScope.RESOURCE_SERVER_SCOPE.ID }, true);
    public static final ForeignKey<TemplateScopeMappingRecord, KeycloakRoleRecord> TEMPLATE_SCOPE_MAPPING__FK_TEMPL_SCOPE_ROLE = Internal.createForeignKey(TemplateScopeMapping.TEMPLATE_SCOPE_MAPPING, DSL.name("fk_templ_scope_role"), new TableField[] { TemplateScopeMapping.TEMPLATE_SCOPE_MAPPING.ROLE_ID }, Keys.CONSTRAINT_A, new TableField[] { KeycloakRole.KEYCLOAK_ROLE.ID }, true);
    public static final ForeignKey<TemplateScopeMappingRecord, ClientTemplateRecord> TEMPLATE_SCOPE_MAPPING__FK_TEMPL_SCOPE_TEMPL = Internal.createForeignKey(TemplateScopeMapping.TEMPLATE_SCOPE_MAPPING, DSL.name("fk_templ_scope_templ"), new TableField[] { TemplateScopeMapping.TEMPLATE_SCOPE_MAPPING.TEMPLATE_ID }, Keys.PK_CLI_TEMPLATE, new TableField[] { ClientTemplate.CLIENT_TEMPLATE.ID }, true);
    public static final ForeignKey<UserAttributeRecord, UserEntityRecord> USER_ATTRIBUTE__FK_5HRM2VLF9QL5FU043KQEPOVBR = Internal.createForeignKey(UserAttribute.USER_ATTRIBUTE, DSL.name("fk_5hrm2vlf9ql5fu043kqepovbr"), new TableField[] { UserAttribute.USER_ATTRIBUTE.USER_ID }, Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<UserConsentRecord, UserEntityRecord> USER_CONSENT__FK_GRNTCSNT_USER = Internal.createForeignKey(UserConsent.USER_CONSENT, DSL.name("fk_grntcsnt_user"), new TableField[] { UserConsent.USER_CONSENT.USER_ID }, Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<UserConsentProtMapperRecord, UserConsentRecord> USER_CONSENT_PROT_MAPPER__FK_GRNTCSNT_PRM_GR = Internal.createForeignKey(UserConsentProtMapper.USER_CONSENT_PROT_MAPPER, DSL.name("fk_grntcsnt_prm_gr"), new TableField[] { UserConsentProtMapper.USER_CONSENT_PROT_MAPPER.USER_CONSENT_ID }, Keys.CONSTRAINT_GRNTCSNT_PM, new TableField[] { UserConsent.USER_CONSENT.ID }, true);
    public static final ForeignKey<UserConsentRoleRecord, UserConsentRecord> USER_CONSENT_ROLE__FK_GRNTCSNT_ROLE_GR = Internal.createForeignKey(UserConsentRole.USER_CONSENT_ROLE, DSL.name("fk_grntcsnt_role_gr"), new TableField[] { UserConsentRole.USER_CONSENT_ROLE.USER_CONSENT_ID }, Keys.CONSTRAINT_GRNTCSNT_PM, new TableField[] { UserConsent.USER_CONSENT.ID }, true);
    public static final ForeignKey<UserFederationConfigRecord, UserFederationProviderRecord> USER_FEDERATION_CONFIG__FK_T13HPU1J94R2EBPEKR39X5EU5 = Internal.createForeignKey(UserFederationConfig.USER_FEDERATION_CONFIG, DSL.name("fk_t13hpu1j94r2ebpekr39x5eu5"), new TableField[] { UserFederationConfig.USER_FEDERATION_CONFIG.USER_FEDERATION_PROVIDER_ID }, Keys.CONSTRAINT_5C, new TableField[] { UserFederationProvider.USER_FEDERATION_PROVIDER.ID }, true);
    public static final ForeignKey<UserFederationMapperRecord, UserFederationProviderRecord> USER_FEDERATION_MAPPER__FK_FEDMAPPERPM_FEDPRV = Internal.createForeignKey(UserFederationMapper.USER_FEDERATION_MAPPER, DSL.name("fk_fedmapperpm_fedprv"), new TableField[] { UserFederationMapper.USER_FEDERATION_MAPPER.FEDERATION_PROVIDER_ID }, Keys.CONSTRAINT_5C, new TableField[] { UserFederationProvider.USER_FEDERATION_PROVIDER.ID }, true);
    public static final ForeignKey<UserFederationMapperRecord, RealmRecord> USER_FEDERATION_MAPPER__FK_FEDMAPPERPM_REALM = Internal.createForeignKey(UserFederationMapper.USER_FEDERATION_MAPPER, DSL.name("fk_fedmapperpm_realm"), new TableField[] { UserFederationMapper.USER_FEDERATION_MAPPER.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<UserFederationMapperConfigRecord, UserFederationMapperRecord> USER_FEDERATION_MAPPER_CONFIG__FK_FEDMAPPER_CFG = Internal.createForeignKey(UserFederationMapperConfig.USER_FEDERATION_MAPPER_CONFIG, DSL.name("fk_fedmapper_cfg"), new TableField[] { UserFederationMapperConfig.USER_FEDERATION_MAPPER_CONFIG.USER_FEDERATION_MAPPER_ID }, Keys.CONSTRAINT_FEDMAPPERPM, new TableField[] { UserFederationMapper.USER_FEDERATION_MAPPER.ID }, true);
    public static final ForeignKey<UserFederationProviderRecord, RealmRecord> USER_FEDERATION_PROVIDER__FK_1FJ32F6PTOLW2QY60CD8N01E8 = Internal.createForeignKey(UserFederationProvider.USER_FEDERATION_PROVIDER, DSL.name("fk_1fj32f6ptolw2qy60cd8n01e8"), new TableField[] { UserFederationProvider.USER_FEDERATION_PROVIDER.REALM_ID }, Keys.CONSTRAINT_4A, new TableField[] { Realm.REALM.ID }, true);
    public static final ForeignKey<UserGroupMembershipRecord, UserEntityRecord> USER_GROUP_MEMBERSHIP__FK_USER_GROUP_USER = Internal.createForeignKey(UserGroupMembership.USER_GROUP_MEMBERSHIP, DSL.name("fk_user_group_user"), new TableField[] { UserGroupMembership.USER_GROUP_MEMBERSHIP.USER_ID }, Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<UserRequiredActionRecord, UserEntityRecord> USER_REQUIRED_ACTION__FK_6QJ3W1JW9CVAFHE19BWSIUVMD = Internal.createForeignKey(UserRequiredAction.USER_REQUIRED_ACTION, DSL.name("fk_6qj3w1jw9cvafhe19bwsiuvmd"), new TableField[] { UserRequiredAction.USER_REQUIRED_ACTION.USER_ID }, Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<UserRoleMappingRecord, UserEntityRecord> USER_ROLE_MAPPING__FK_C4FQV34P1MBYLLOXANG7B1Q3L = Internal.createForeignKey(UserRoleMapping.USER_ROLE_MAPPING, DSL.name("fk_c4fqv34p1mbylloxang7b1q3l"), new TableField[] { UserRoleMapping.USER_ROLE_MAPPING.USER_ID }, Keys.CONSTRAINT_FB, new TableField[] { UserEntity.USER_ENTITY.ID }, true);
    public static final ForeignKey<UserSessionNoteRecord, UserSessionRecord> USER_SESSION_NOTE__FK5EDFB00FF51D3472 = Internal.createForeignKey(UserSessionNote.USER_SESSION_NOTE, DSL.name("fk5edfb00ff51d3472"), new TableField[] { UserSessionNote.USER_SESSION_NOTE.USER_SESSION }, Keys.CONSTRAINT_57, new TableField[] { UserSession.USER_SESSION.ID }, true);
    public static final ForeignKey<WebOriginsRecord, ClientRecord> WEB_ORIGINS__FK_LOJPHO213XCX4WNKOG82SSRFY = Internal.createForeignKey(WebOrigins.WEB_ORIGINS, DSL.name("fk_lojpho213xcx4wnkog82ssrfy"), new TableField[] { WebOrigins.WEB_ORIGINS.CLIENT_ID }, Keys.CONSTRAINT_7, new TableField[] { Client.CLIENT.ID }, true);
}
