buildscript {
    ext {
        vertxJooqVersion = '6.5.5'
        flywayVersion = '6.5.5'
    }
    repositories {
        mavenLocal()
        // for jooq from github
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }
    dependencies {
        classpath "io.github.jklingsporn:vertx-jooq-generate:$vertxJooqVersion"
        classpath "org.postgresql:postgresql:$postgresqlVersion"
        classpath "io.vertx:vertx-core:$vertxVersion"
    }
}


plugins {
    id 'com.bmuschko.docker-remote-api' version '7.3.0'
    id 'com.google.cloud.tools.jib' version '3.3.1'
    id "org.flywaydb.flyway" version "$flywayVersion"
    id 'com.github.johnrengelman.shadow' version "$shadowPluginVersion"
    id 'org.javamodularity.moduleplugin'
    id 'idea'
    id 'application'
}

apply from: '../gradle/instrument.gradle'

repositories {
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
}



import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import io.github.jklingsporn.vertx.jooq.shared.postgres.JSONBToJsonObjectConverter
import io.vertx.core.json.JsonObject
import org.apache.tools.ant.taskdefs.condition.Os
import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

def isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
def localUsername = 'admin'
def localPassword = 'password'
def localDatabaseName = 'spellsource'
def mainClassNameConst = 'com.hiddenswitch.framework.EntryPoint'
def jdbcUrl = "jdbc:postgresql://localhost:5432/$localDatabaseName"
def createPostgresImage = tasks.getByPath(':spellsource-containers:createPostgresImage')
def jvmArgs = ['--enable-preview', '--add-opens', 'java.base/java.lang=ALL-UNNAMED']

application {
    mainClassName mainClassNameConst
}

dependencies {
    implementation project(':spellsource-common')
    implementation project(':spellsource-game')
    implementation project(':spellsource-cards-git')
    implementation 'io.vertx:vertx-async-await-incubator:1.0.0-SNAPSHOT'
    implementation 'io.vertx:vertx-execute-blocking-incubator:1.0.0-SNAPSHOT'
    implementation "io.github.classgraph:classgraph:$classgraphVersion"
    implementation group: 'io.vertx', name: 'vertx-infinispan', version: vertxVersion
    implementation group: 'io.vertx', name: 'vertx-web-client', version: vertxVersion
    implementation group: 'io.vertx', name: 'vertx-service-discovery', version: vertxVersion
    implementation group: 'io.vertx', name: 'vertx-web', version: vertxVersion
    implementation 'javax.activation:activation:1.1.1'

    // includes withCallCredentials fix
    implementation ("com.github.doctorpangloss.vertx-grpc-1:vertx-grpc-server:c4d99c22f6") {
        exclude group: 'io.vertx', module: 'vertx-core'
    }
    implementation ("com.github.doctorpangloss.vertx-grpc-1:vertx-grpc-client:c4d99c22f6") {
        exclude group: 'io.vertx', module: 'vertx-core'
    }

    // keycloak
    implementation 'net.openhft:zero-allocation-hashing:0.16'
    implementation platform("org.keycloak.bom:keycloak-bom-parent:$keycloakVersion")
    implementation(group: 'org.keycloak', name: 'keycloak-admin-client', version: "$keycloakVersion") {
        exclude group: 'org.jboss.resteasy', module: 'resteasy-client'
    }
    implementation "org.keycloak:keycloak-server-spi:$keycloakVersion"
    implementation "org.keycloak:keycloak-server-spi-private:$keycloakVersion"

    implementation "ch.qos.logback:logback-classic:$logbackVersion"

    implementation group: 'com.lambdaworks', name: 'scrypt', version: '1.4.0'
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.7'
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:$jacksonVersion") {
        exclude group: 'jakarta.xml.bind', module: '*'
        exclude group: 'jakarta.activation', module: '*'
    }
    implementation("com.fasterxml.jackson.module:jackson-module-afterburner:$jacksonVersion") {
        exclude group: 'jakarta.xml.bind', module: '*'
        exclude group: 'jakarta.activation', module: '*'
    }

    implementation("com.avast.grpc.jwt:grpc-java-jwt:0.5.8") {
        exclude group: 'com.google.code.gson'
        exclude group: 'io.grpc'
        exclude group: 'org.keycloak'
    }

    implementation("org.postgresql:postgresql:$postgresqlVersion") {
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }

    implementation("org.jboss.resteasy:resteasy-client:$resteasyVersion") {
        exclude group: 'io.vertx', module: 'vertx-core'
    }

    implementation group: "io.netty", name: "netty-resolver-dns-native-macos", version: nettyVersion, classifier: "osx-aarch_64"
    implementation 'org.jooq:jooq:3.17.3'
    implementation "io.vertx:vertx-pg-client:$vertxVersion"
    implementation("io.github.jklingsporn:vertx-jooq-classic-reactive:$vertxJooqVersion") {
        exclude group: "io.vertx", module: '*'
    }

    implementation group: 'io.vertx', name: 'vertx-auth-common', version: vertxVersion
    implementation(group: 'io.vertx', name: 'vertx-opentracing', version: vertxVersion) {
        exclude group: 'io.jaegertracing', module: '*'
    }
    implementation "io.vertx:vertx-micrometer-metrics:$vertxVersion"
    implementation "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"
    implementation "io.micrometer:micrometer-registry-jmx:$micrometerVersion"
    implementation 'com.be-hase.grpc-micrometer:grpc-micrometer:0.0.2'
    implementation 'io.opentracing.contrib:opentracing-grpc:0.2.3'
    implementation "io.jaegertracing:jaeger-client:$jaegerVersion"
    implementation("com.github.marschall:micrometer-jfr:1.10.0") {
        exclude group: 'io.micrometer', module: 'micrometer-core'
    }
    implementation "org.flywaydb:flyway-core:$flywayVersion"
    implementation 'org.redisson:redisson:3.15.5'
    implementation(group: 'com.github.pcj', name: 'google-options', version: '1.0.0') {
        exclude group: 'com.google.guava', module: 'guava'
    }


    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
    testImplementation(project(':spellsource-containers'))
    testImplementation project(':spellsource-testutils')
    testImplementation("org.testcontainers:testcontainers:$testcontainersVersion")
    testImplementation("org.testcontainers:junit-jupiter:$testcontainersVersion")
    testImplementation group: 'io.vertx', name: 'vertx-junit5', version: vertxVersion
    testImplementation group: 'io.vertx', name: 'vertx-web-client', version: vertxVersion
    testImplementation group: 'io.vertx', name: 'vertx-web-common', version: vertxVersion
    testImplementation "com.google.guava:guava:$guavaVersion"
    testImplementation "io.github.classgraph:classgraph:$classgraphVersion"
    testImplementation 'org.jetbrains:annotations'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation 'uk.org.webcompere:system-stubs-jupiter:2.0.1'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassNameConst
    }
}

shadowJar {
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': mainClassNameConst
    }
}

run {
    group('spellsource')
    description("Starts the Spellsource server locally. Starts all dependencies using Docker (must be installed).")
    dependsOn += [classes, testClasses, createPostgresImage]
    classpath sourceSets.test.runtimeClasspath
    mainClass.set('com.hiddenswitch.framework.tests.applications.EntryPoint')
    jvmArgs.addAll(jvmArgs)
}

artifacts {
    archives shadowJar
}

application {
    mainClass.set(mainClassNameConst)
}


task stopExistingPostgresContainer(type: DockerStopContainer, group: 'Spellsource Internal') {
    containerId.set('gradleSupabasePostgres')
    onError({})
}

task removeExistingPostgresContainer(type: DockerRemoveContainer, group: 'Spellsource Internal') {
    dependsOn stopExistingPostgresContainer
    containerId.set('gradleSupabasePostgres')
    onError({})
}

task createPostgresContainer(type: DockerCreateContainer, group: 'Spellsource Internal') {
    dependsOn += [createPostgresImage, removeExistingPostgresContainer]
    targetImageId createPostgresImage.imageId
    containerName.set('gradleSupabasePostgres')
    hostConfig.portBindings.set(['5432:5432'])
    envVars.putAll(['POSTGRES_DB': localDatabaseName, 'POSTGRES_USER': localUsername, 'POSTGRES_PASSWORD': localPassword])
    hostConfig.autoRemove.set(true)
}

task startPostgresContainer(type: DockerStartContainer, group: 'Spellsource Internal') {
    dependsOn createPostgresContainer
    targetContainerId createPostgresContainer.getContainerId()
    doLast {
        sleep(12000)
    }
}

task stopPostgresContainer(type: DockerStopContainer, group: 'Spellsource Internal') {
    targetContainerId createPostgresContainer.getContainerId()
}

task createKeycloakContainer(type: DockerCreateContainer, group: 'Spellsource Internal') {
    dependsOn += [createPostgresContainer]
    imageId.set("quay.io/keycloak/keycloak:20.0")
    envVars.putAll([
            'KEYCLOAK_ADMIN_USERNAME': "admin",
            'KEYCLOAK_ADMIN_PASSWORD': 'password',
            'KC_DB'                  : 'postgres',
            'KC_DB_URL_HOST'         : 'gradleSupabasePostgres',
            'KC_DB_URL_DATABASE'     : 'spellsource',
            'KC_DB_USERNAME'         : 'admin',
            'KC_DB_PASSWORD'         : 'password',
            'KC_DB_SCHEMA'           : 'keycloak',
            'KC_HOSTNAME_STRICT'     : 'false'
    ])
    cmd.set(["start-dev"])
    hostConfig.autoRemove.set(true)
    hostConfig.portBindings.set(["8080:8080"])
    hostConfig.links.set(['gradleSupabasePostgres:gradleSupabasePostgres'])
}

task startKeycloakContainer(type: DockerStartContainer, group: 'Spellsource Internal') {
    dependsOn += [createKeycloakContainer, startPostgresContainer]
    targetContainerId createKeycloakContainer.getContainerId()
    doLast {
        sleep(12000)
    }
}

task stopKeycloakContainer(type: DockerStopContainer, group: 'Spellsource Internal') {
    targetContainerId createKeycloakContainer.getContainerId()
}

task jooqGenerate(group: 'Spellsource Internal') {
    // Do all migrations first
    dependsOn flywayMigrate
    finalizedBy = [stopKeycloakContainer, stopPostgresContainer]
    def outputDir = "$project.projectDir/src/main/java"

    inputs.dir("$project.projectDir/src/main/resources/db/migration")
    outputs.dir(outputDir + '/com/hiddenswitch/framework/schema')

    def configuration = new Configuration()
    configuration
            .withJdbc(new Jdbc()
                    .withDriver('org.postgresql.Driver')
                    .withUrl(jdbcUrl)
                    .withUser(localUsername)
                    .withPassword(localPassword))
            .withGenerator(new Generator()
                    .withName('io.github.jklingsporn.vertx.jooq.generate.classic.ClassicReactiveVertxGenerator')
                    .withDatabase(new Database()
                            .withName('org.jooq.meta.postgres.PostgresDatabase')
                            .withSchemata(new SchemaMappingType().withInputSchema("keycloak").withOutputSchema('keycloak'),
                                    new SchemaMappingType().withInputSchema("spellsource").withOutputSchema('spellsource'),
                                    new SchemaMappingType().withInputSchema("hiddenswitch").withOutputSchema("hiddenswitch"))
                            .withForcedTypes(
                                    new ForcedType()
                                            .withUserType(JsonObject.class.getName())
                                            .withConverter(JSONBToJsonObjectConverter.class.getName())
                                            .withIncludeTypes("jsonb"))
                            .withIncludeTables(true)
                            .withIncludeRoutines(true)
                            .withIncludePackages(false)
                            .withIncludeUDTs(true)
                            .withIncludeSequences(true)
                            .withExcludes('schema_version')
                            .withIncludes('.*'))
                    .withGenerate(new Generate()
                            .withDeprecated(false)
                            .withRecords(true)
                            .withInterfaces(true)
                            .withFluentSetters(true)
                            .withPojos(true)
                            .withDaos(true))
                    .withTarget(new Target()
                            .withPackageName('com.hiddenswitch.framework.schema')
                            .withDirectory(outputDir))
                    .withStrategy(new Strategy()
                            .withName('io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy')))

    doLast() {
        GenerationTool.generate(configuration)
        exec {
            // dump the generated ddl to a file
            workingDir project.projectDir
            // this is using docker-wrapped pg_dump
            environment('PGPASSWORD', localPassword)
            environment('PGDATABASE', localDatabaseName)
            environment('PGUSER', localUsername)
            def containerId = startPostgresContainer.containerId.get()
            environment('DOCKER_OPTS', "--link " + containerId + ":database")
            if (isWindows) {
                // postgres is bound to localhost
                commandLine "$project.rootProject.projectDir\\bin\\pg_dump.exe", '-h', 'localhost', '-s', '-f', "$project.projectDir\\src\\main\\resources\\db\\ddl.sql"
            } else {
                commandLine "$project.rootProject.projectDir/bin/pg_dump", '-h', "database", '-s', '-f', "/git/$project.projectDir.name/src/main/resources/db/ddl.sql"
            }
        }
    }
}

task migrationsOrSqlChanged(group: 'Spellsource') {
    description("Run whenever the schema as encoded in $project.projectDir.name/src/main/resources/db/migration has changed - recreates the JOOQ DSL and dumps a ddl.sql file for autocompletion")
    dependsOn += [jooqGenerate]
}

flyway {
    url = jdbcUrl
    user = localUsername
    password = localPassword
    schemas = ['hiddenswitch', 'spellsource']
    locations = ['filesystem:src/main/resources/db/migration']
}

// Make sure keycloak has done its migration first
flywayMigrate.dependsOn += [startKeycloakContainer]

test {
    group('spellsource')
    dependsOn += [createPostgresImage]
    useJUnitPlatform()
    enableAssertions = false
    testLogging {
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

jib {
    from {
        image = "eclipse-temurin:19.0.1_10-jre"
    }
    to {
        image = 'docker.io/doctorpangloss/spellsource-server'
    }
    container {
        ports = ['8080']
        jvmFlags = jvmArgs
    }
}