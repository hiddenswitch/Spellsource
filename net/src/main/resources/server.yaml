swagger: "2.0"
info:
  version: 1.0.1
  title: Hidden Switch Minionate API
  description: The Minionate API for matchmaking, user accounts, collections management and more
  contact:
    name: Benjamin Berman
    email: benjamin.s.berman@gmail.com
    url: http://hiddenswitch.com
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: api-us-east-2.hiddenswitch.com:8080
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  TokenSecurity:
    type: apiKey
    in: header
    name: X-Auth-Token
definitions:
  Account:
    type: 'object'
    properties:
      _id:
        type: 'string'
      name:
        type: 'string'
      email:
        type: 'string'
      decks:
        type: 'array'
        items:
          $ref: '#/definitions/InventoryCollection'
      personalCollection:
        $ref: '#/definitions/InventoryCollection'
  GetAccountsRequest:
    type: 'object'
    required:
      - userIds
    properties:
      userIds:
        description: |
          An array of user IDs to fetch.
        type: 'array'
        items:
          type: 'string'
  GetAccountsResponse:
    type: 'object'
    properties:
      accounts:
        type: 'array'
        items:
          $ref: '#/definitions/Account'
  CreateAccountRequest:
    type: 'object'
    required:
      - name
      - email
      - password
    properties:
      name:
        description: |
          A display name for the user.
        type: 'string'
      email:
        description: |
          An email account for password resets.
        type: 'string'
        format: 'email'
      password:
        description: |
          A password used to login to Minionate.
        type: 'string'
        format: 'password'
  CreateAccountResponse:
    type: 'object'
    properties:
      loginToken:
        description: |
          A string containing the token to login with via the standard Minionate authentication method.
        type: 'string'
      account:
        $ref: '#/definitions/Account'
  LoginRequest:
    type: 'object'
    required:
      - userId
      - password
    properties:
      email:
        type: 'string'
      password:
        type: 'string'
        format: 'password'
  LoginResponse:
    properties:
      account:
        $ref: '#/definitions/Account'
      loginToken:
        type: 'string'
  DecksPutRequest:
    type: 'object'
    required:
      - 'heroClass'
      - 'name'
    properties:
      heroClass:
        type: 'string'
      name:
        type: 'string'
      inventoryIds:
        type: 'array'
        items:
          type: 'string'
  DecksPutResponse:
    type: 'object'
    properties:
      deckId:
        type: 'string'
  DecksUpdateCommand:
    type: 'object'
    properties:
      setHeroClass:
        type: 'string'
      setName:
        type: 'string'
      setInventoryIds:
        type: 'array'
        items:
          type: 'string'
      pushInventoryIds:
        type: 'object'
        properties:
          $each:
            type: 'array'
            items:
              type: 'string'
      pullAllInventoryIds:
        type: 'array'
        items:
          type: 'string'
  DecksGetResponse:
    type: 'object'
    properties:
      collection:
        $ref: '#/definitions/InventoryCollection'
      inventoryIdsSize:
        description: |
          The current number of cards in this deck.
        type: 'integer'
  DecksGetAllResponse:
    type: 'object'
    properties:
      decks:
        type: 'array'
        items:
          $ref: '#/definitions/DecksGetResponse'
  InventoryCollection:
    type: 'object'
    properties:
      _id:
        type: 'string'
      userId:
        type: 'string'
      name:
        type: 'string'
      heroClass:
        type: 'string'
      type:
        type: 'string'
      inventory:
        type: 'array'
        items:
          $ref: '#/definitions/CardRecord'
  CardRecord:
    type: 'object'
    properties:
      _id:
        type: 'string'
      cardDesc:
        description: |
          A CardDesc object that represents the definition of the card, including any legacy (permanence) properties.
        type: 'object'
        additionalProperties:
          type: 'object'
      userId:
        type: 'string'
      collectionIds:
        type: 'array'
        items:
          type: 'string'
      borrowedByUserId:
        type: 'string'
      allianceId:
        type: 'string'
      donorUserId:
        type: 'string'
  MessageType:
    type: 'string'
    enum:
      - 'REGISTER_PLAYER'
      - 'UPDATE_ACTION'
      - 'ON_GAME_EVENT'
      - 'ON_GAME_END'
      - 'SET_PLAYERS'
      - 'ON_ACTIVE_PLAYER'
      - 'ON_UPDATE'
      - 'ON_TURN_END'
      - 'ON_REQUEST_ACTION'
      - 'FIRST_MESSAGE'
      - 'ON_MULLIGAN'
      - 'UPDATE_MULLIGAN'
  ServerToClientMessage:
    type: 'object'
    properties:
      id:
        type: 'string'
        description: |
          An optional ID used to disambiguate multiple client replies. Include this ID in the repliesTo field of your
          ClientToServerMessage if this field is not null.
      localPlayerId:
        type: 'integer'
        description: |
          The ID of the player that corresponds to the local player (the recipient).
      messageType:
        $ref: '#/definitions/MessageType'
      changes:
        $ref: '#/definitions/EntityChangeSet'
      gameState:
        $ref: '#/definitions/GameState'
      actions:
        $ref: '#/definitions/GameActions'
      startingCards:
        description: |
          Used for a mulligan request. An array of entities representing the cards you may mulligan.
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      event:
        $ref: '#/definitions/GameEvent'
  ClientToServerMessage:
    type: 'object'
    properties:
      messageType:
        $ref: '#/definitions/MessageType'
      repliesTo:
        type: 'string'
        description: |
          The ID of the server message this client message is replying to.
      firstMessage:
        type: 'object'
        properties:
          playerKey:
            type: 'string'
            description: |
              A key authenticating this connection. Used only for the first message.
          playerSecret:
            type: 'string'
            description: |
              A server-signed secret that authenticates this player for this match. Used only for the first message.
      actionIndex:
        type: 'integer'
        description: |
          The index of the available actions to use.
      discardedCardIndices:
        type: 'array'
        items:
          type: 'integer'
        description:
          The indices of cards to discard in a mulligan.
  PhysicalAttackEvent:
    type: 'object'
    properties:
      attacker:
        $ref: '#/definitions/Entity'
      defender:
        $ref: '#/definitions/Entity'
      damageDealt:
        type: 'integer'
  EntityLocation:
    type: 'object'
    required:
     - zone
     - index
     - player
    properties:
      player:
        type: 'integer'
        enum:
          - -1
          - 0
          - 1
      index:
        type: 'integer'
      zone:
        type: 'string'
        enum: 
          - 'NONE'
          - 'HAND'
          - 'DECK'
          - 'GRAVEYARD'
          - 'BATTLEFIELD'
          - 'SECRET'
          - 'HERO_POWER'
          - 'HERO'
          - 'WEAPON'
          - 'SET_ASIDE_ZONE'
          - 'HIDDEN'
          - 'PLAYER'
  EntityChangeSet:
    description: |
      An abbreviated description of changes since the last change set this client received.
    type: 'array'
    items:
      type: 'object'
      properties:
        op:
          description: |
            Describes a change to an entity. 'A' corresponds to added/inserted, 'C' corresponds to changed, 'R' corresponds to
            removed. p0 is the previous value, if it exists. p1 is the current value. Only the entity's locatino is currently
            populated in this changeset.
          type: 'string'
          enum:
            - 'A'
            - 'C'
            - 'R'
        id:
          description: |
            The ID of the entity in this change set.
          type: 'integer'
        p0:
          $ref: '#/definitions/EntityState'
        p1:
          $ref: '#/definitions/EntityState'

  GameEvent:
    type: 'object'
    properties:
      eventTarget:
        $ref: '#/definitions/Entity'
      eventSource:
        $ref: '#/definitions/Entity'
      targetPlayerId:
        type: 'integer'
      sourcePlayerId:
        type: 'integer'
      description:
        type: 'string'
      eventType:
        type: 'string'
        description: |
          The game event type corresponding to this game event.
        enum:
          - 'AFTER_PHYSICAL_ATTACK'
          - 'AFTER_SPELL_CASTED'
          - 'AFTER_SUMMON'
          - 'ARMOR_GAINED'
          - 'BEFORE_SUMMON'
          - 'BOARD_CHANGED'
          - 'DAMAGE'
          - 'DISCARD'
          - 'DRAW_CARD'
          - 'ENRAGE_CHANGED'
          - 'GAME_START'
          - 'HEAL'
          - 'HERO_POWER_USED'
          - 'JOUST'
          - 'KILL'
          - 'OVERLOAD'
          - 'PHYSICAL_ATTACK'
          - 'PLAY_CARD'
          - 'PRE_DAMAGE'
          - 'REVEAL_CARD'
          - 'SECRET_PLAYED'
          - 'SECRET_REVEALED'
          - 'SPELL_CASTED'
          - 'SUMMON'
          - 'TARGET_ACQUISITION'
          - 'TURN_END'
          - 'TURN_START'
          - 'SILENCE'
          - 'WEAPON_DESTROYED'
          - 'WEAPON_EQUIPPED'
      afterPhysicalAttack:
        $ref: '#/definitions/PhysicalAttackEvent'
      drawCard:
        type: 'object'
        properties:
          card:
            $ref: '#/definitions/Entity'
          drawn:
            type: 'boolean'
      preDamage:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      silence:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
      secretPlayed:
        type: 'object'
        properties:
          secretCard:
            $ref: '#/definitions/Entity'
      beforeSummon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      cardPlayed:
        type: 'object'
        properties:
          card:
            $ref: '#/definitions/Entity'
      armorGained:
        type: 'object'
        properties:
          hero:
            $ref: '#/definitions/Entity'
      afterSummon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      spellCasted:
        type: 'object'
        properties:
          sourceCard:
            $ref: '#/definitions/Entity'
      joust:
        type: 'object'
        properties:
          won:
            type: 'boolean'
          ownCard:
            $ref: '#/definitions/Entity'
          opponentCard:
            $ref: '#/definitions/Entity'
      weaponDestroyed:
        type: 'object'
        properties:
          weapon:
            $ref: '#/definitions/Entity'
      heroPowerUsed:
        type: 'object'
        properties:
          heroPower:
            $ref: '#/definitions/Entity'
      cardRevealed:
        type: 'object'
        properties:
          card:
            $ref: '#/definitions/Entity'
          delay:
            type: 'number'
            format: 'double'
      enrageChanged:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
      targetAcquisition:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
          actionType:
            $ref: '#/definitions/ActionType'
      damage:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
          damage:
            type: 'integer'
          source:
            $ref: '#/definitions/Entity'
      weaponEquipped:
        type: 'object'
        properties:
          weapon:
            $ref: '#/definitions/Entity'
      physicalAttack:
        $ref: '#/definitions/PhysicalAttackEvent'
      overload:
        type: 'object'
        properties:
          card:
            $ref: '#/definitions/Entity'
      heal:
        type: 'object'
        properties:
          target:
            $ref: '#/definitions/Entity'
          healing:
            type: 'integer'
      secretRevealed:
        type: 'object'
        properties:
          secret:
            $ref: '#/definitions/Entity'
      summon:
        type: 'object'
        properties:
          minion:
            $ref: '#/definitions/Entity'
          source:
            $ref: '#/definitions/Entity'
      afterSpellCasted:
        type: 'object'
        properties:
          sourceCard:
            $ref: '#/definitions/Entity'
          spellTarget:
            $ref: '#/definitions/Entity'
      discard:
        type: 'object'
        properties:
          card:
            $ref: '#/definitions/Entity'
      kill:
        type: 'object'
        properties:
          victim:
            $ref: '#/definitions/Entity'
  JavaSerializationObject:
    type: 'object'
    required:
      - 'javaSerialized'
    properties:
      javaSerialized:
        type: 'string'
  MatchmakingDeck:
    type: 'object'
    required:
      - 'cards'
    properties:
      heroClass:
        type: 'string'
      cards:
        type: 'array'
        items:
          type: 'string'
  MatchmakingQueuePutRequest:
    type: 'object'
    properties:
      casual:
        type: 'boolean'
      deckId:
        type: 'string'
      deck:
        $ref: '#/definitions/MatchmakingDeck'
  MatchmakingQueuePutResponse:
    type: 'object'
    properties:
      connection:
        $ref: '#/definitions/JavaSerializationObject'
      unityConnection:
        type: 'object'
        properties:
          url:
            type: 'string'
            description: |
              The websocket URL to connect to.
          firstMessage:
            $ref: '#/definitions/ClientToServerMessage'
      retry:
        $ref: '#/definitions/MatchmakingQueuePutRequest'
  MatchCancelResponse:
    type: 'object'
    properties:
      isCanceled:
        type: 'boolean'
  MatchConcedeResponse:
    type: 'object'
    properties:
      isConceded:
        type: 'boolean'
  GameState:
    type: 'object'
    properties:
      eventStack:
        type: 'array'
        items:
          $ref: '#/definitions/GameEvent'
      entities:
        type: 'array'
        items:
          $ref: '#/definitions/Entity'
      turnState:
        type: 'string'
      turnNumber:
        type: 'integer'
      timestamp:
        type: 'integer'
        format: 'int64'
  TargetActionPair:
    description: |
      A pair combining a target (entity ID) and the correponding action for that target.
    type: 'object'
    properties:
      target:
        type: 'integer'
      action:
        type: 'integer'
  SpellAction:
    type: 'object'
    description: |
      A spell action or battlecry.
    properties:
      sourceId:
        description: |
          The ID of the source card in your hand or the minion that originates this battlecry.
        type: 'integer'
      action:
        description: |
          The action for this spell. Defined when this spell is not targetable.
        type: 'integer'
      targetKeyToActions:
        description: |
          An array of entity ID-action pairs that let you convert a valid target to an action index to respond with.
          Defined if this spell is targetable.
        type: 'array'
        items:
          $ref: '#/definitions/TargetActionPair'
  SummonAction:
    description: |
      A summon action that originates from a specific card.
    type: 'object'
    properties:
      sourceId:
        description: |
          The ID of the source card in your hand.
        type: 'integer'
      indexToActions:
        description: |
          An array of index-action pairs that let you convert a battlefield location to an action index to
          respond with.
        type: 'array'
        items:
          description: |
            A single index-action pair.
          type: 'object'
          properties:
            index:
              description: |
                The position in the battlefield that corresponds to this summon action.
              type: 'integer'
            action:
              description: |
                The action index of this particular summon index position for this card.
              type: 'integer'
  GameActions:
    description: |
      An object representing all valid game actions in this action request.
    type: 'object'
    properties:
      compatibility:
        description: |
          An array of game action indices. Choose one at random for compatibility purposes until the client can support
          all actions
        type: 'array'
        items:
          type: 'integer'
      endTurn:
        description: |
          The end turn action. Not necessarily always available, because you cannot end your turn in the middle of
          a discover or a battlecry. The value corresponds to which integer index to reply with.
        type: 'integer'
      physicalAttacks:
        description: |
          An array of entity ID - target IDs pairs that represent valid physical attacks.
        type: 'array'
        items:
          type: 'object'
          properties:
            sourceId:
              description: |
                The entity (minion or hero) that corresponds to the source of this physical attack.
              type: 'integer'
            defenders:
              description: |
                Valid defenders for this attacker.
              type: 'array'
              items:
                $ref: '#/definitions/TargetActionPair'
      summons:
        description: |
          The cards in your hand that can be summoned. These are typically only minions.
        type: 'array'
        items:
          $ref: '#/definitions/SummonAction'
      heroPower:
        $ref: '#/definitions/SpellAction'
      spells:
        description: |
          The cards in your hand that are spells that take targets.
        type: 'array'
        items:
          $ref: '#/definitions/SpellAction'
      battlecries:
        description: |
          A set of possible targetable battlecry actions.
        type: 'array'
        items:
          $ref: '#/definitions/SpellAction'
      discoveries:
        description: |
          Card discovers.
        type: 'array'
        items:
          description: |
            Cards and their corresponding action indices.
          type: 'object'
          properties:
            card:
              $ref: '#/definitions/Entity'
            action:
              type: 'integer'
      weapons:
        description: |
          The weapons in your hand that can be equipped. These are the equivalent of summons that only have a single
          index, but do not require targeting on the battlefield.
        type: 'array'
        items:
          $ref: '#/definitions/SummonAction'
      chooseOnes:
        description: |
          Choose one actions, summons and spells.
        type: 'object'
        properties:
          spells:
            description: |
              An array of choose one spells. Each spell is represented by a different card. The entities are provided.
            type: 'array'
            items:
              type: 'object'
              properties:
                entity:
                  $ref: '#/definitions/Entity'
                spell:
                  $ref: '#/definitions/SpellAction'
          summons:
            description: |
              An array of choose one summonables. Use the description to help render the appropriate options.
            type: 'array'
            items:
              properties:
                description:
                  description: |
                    The text to show for this option.
                  type: 'string'
                summon:
                  $ref: '#/definitions/SummonAction'
  ActionType:
    type: 'string'
    enum:
      - 'SYSTEM'
      - 'END_TURN'
      - 'PHYSICAL_ATTACK'
      - 'SPELL'
      - 'SUMMON'
      - 'HERO_POWER'
      - 'BATTLECRY'
      - 'EQUIP_WEAPON'
      - 'DISCOVER'
  Entity:
    type: 'object'
    properties:
      id:
        type: 'integer'
        required: true
        default: -1
      cardId:
        type: 'string'
      entityType:
        type: 'string'
        enum: ['PLAYER', 'HERO', 'CARD', 'MINION', 'WEAPON', 'SECRET']
      name:
        type: 'string'
      description: 
        type: 'string'
      state:
        $ref: '#/definitions/EntityState'
  EntityState:
    type: 'object'
    properties:
      location:
        $ref: '#/definitions/EntityLocation'
      background:
        type: 'string'
      portrait:
        type: 'string'
      gold:
        type: 'boolean'
      boardPosition:
        type: 'integer'
      owner:
        type: 'integer'
      heroClass:
        type: 'string'
      hp:
        type: 'integer'
      durability:
        type: 'integer'
      maxHp:
        type: 'integer'
      baseAttack:
        type: 'integer'
      attack:
        type: 'integer'
      baseManaCost:
        type: 'integer'
      manaCost:
        type: 'integer'
      armor:
        type: 'integer'
      destroyed:
        type: 'boolean'
      pendingDestroy:
        type: 'boolean'
      summoningSickness:
        type: 'boolean'
      frozen:
        type: 'boolean'
      silenced:
        type: 'boolean'
      windfury:
        type: 'boolean'
      taunt:
        type: 'boolean'
      spellDamage:
        type: 'integer'
      charge:
        type: 'boolean'
      enraged:
        type: 'boolean'
      battlecry:
        type: 'boolean'
      deathrattles:
        type: 'boolean'
      immune:
        type: 'boolean'
      divineShield:
        type: 'boolean'
      stealth:
        type: 'boolean'
      secret:
        type: 'boolean'
      combo:
        type: 'boolean'
      overload:
        type: 'integer'
      chooseOne:
        type: 'boolean'
      untargetableBySpells:
        type: 'boolean'
      cannotAttack:
        type: 'boolean'
      underAura:
        type: 'boolean'
      customRenderer:
        type: 'string'
      customData:
        type: 'string'
      playable:
        type: 'boolean'
      mana:
        type: 'integer'
      maxMana:
        type: 'integer'
      lockedMana:
        type: 'integer'
paths:
  /accounts/{targetUserId}:
    get:
      description: |
        Get a specific account. Contains more information if the userId matches the requesting user.
      operationId: getAccount
      security:
        - TokenSecurity: []
      parameters:
        - name: targetUserId
          in: path
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            A specific user account.
          schema:
            $ref: '#/definitions/GetAccountsResponse'
  /accounts:
    get:
      description: |
        Get a list of accounts including user profile information.
      operationId: getAccounts
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetAccountsRequest'
      responses:
        "200":
          description: |
            Gets a list of user profile accounts
          schema:
            $ref: '#/definitions/GetAccountsResponse'
    put:
      description: |
        Create an account with Minionate.
      operationId: createAccount
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateAccountRequest'
      responses:
        "200":
          description: |
            An account has been successfully created.
          schema:
            $ref: '#/definitions/CreateAccountResponse'
    post:
      description: |
        Login with a username and password, receiving an authentication token to use for future sessions.
      operationId: login
      parameters:
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        "200":
          description: |
            A response containing the token to put into future request headers.
          schema:
            $ref: '#/definitions/LoginResponse'
  /decks:
    get:
      description: |
        Gets all the user's decks.
      operationId: decksGetAll
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The server returns an array of DeckGetResponses for each deck
          schema:
            $ref: '#/definitions/DecksGetAllResponse'
    put:
      description: |
        Creates a new deck with optionally specified inventory IDs, a name and a hero class.
      operationId: decksPut
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          description: |
            The deck creation request.
          required: true
          schema:
            $ref: '#/definitions/DecksPutRequest'
      responses:
        "200":
          description: |
            The server has created a deck with the optionally specified cards and provides the ID of the deck for later use.
          schema:
            $ref: '#/definitions/DecksPutResponse'
  /decks/{deckId}:
    get:
      description: |
        Gets a deck. Only viewable for the owner of the deck or players in the alliance.
      operationId: decksGet
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          description: The Deck ID to get.
          type: 'string'
      responses:
        "200":
          description: |
            The deck has been successfully retrieved.
          schema:
            $ref: '#/definitions/DecksGetResponse'
    post:
      description: |
        Updates the deck by adding or removing cards, changing the hero class, or renaming the deck.
      operationId: decksUpdate
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          description: The Deck ID to update.
          required: true
          type: 'string'
        - name: updateCommand
          in: body
          description: |
            An update command modifying specified properties of the deck.
          required: true
          schema:
            $ref: '#/definitions/DecksUpdateCommand'
      responses:
        "200":
          description: |
            The update has been successfully applied.
          schema:
            $ref: '#/definitions/DecksGetResponse'
    delete:
      description: |
        Deletes the specified deck by ID.
      operationId: decksDelete
      security:
        - TokenSecurity: []
      parameters:
        - name: deckId
          in: path
          description: The Deck ID to delete.
          required: true
          type: 'string'
      responses:
        "200":
          description: |
            The deck has been deleted.
  /matchmaking/constructed:
    get:
      description: |
        Gets a renderable gamestate representing this player's current game.
      operationId: matchmakingConstructedGet
      security:
        - TokenSecurity: []
      responses:
        "404":
          description: |
            There is no game currently available.
        "200":
          description: |
            The client has a game and its state was delivered.
          schema:
            $ref: '#/definitions/GameState'
    delete:
      description: |
        Concedes the player's current constructed game.
      operationId: matchmakingConstructedDelete
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The client's game was successfully conceded.
          schema:
            $ref: '#/definitions/MatchConcedeResponse'
  /matchmaking/constructed/queue:
    put:
      description: |
        Enters your client into a matchmaking queue for constructed deck matchmaking. Clients have to keep their matchmaking queue entry alive by regularly retrying when they have not yet been matched. Retry within 5 seconds.
      operationId: matchmakingConstructedQueuePut
      security:
        - TokenSecurity: []
      parameters:
        - name: request
          in: body
          description: |
            The matchmaking queue entry. Contains the deck.
          required: true
          schema:
            $ref: '#/definitions/MatchmakingQueuePutRequest'
      responses:
        "200":
          description: |
            The client has been matched with a client and is ready to connect. Use the "connection" field for connection information (client specific).
          schema:
            $ref: '#/definitions/MatchmakingQueuePutResponse'
        "202":
          description: |
            The client is waiting in the matchmaking queue and has been given a MatchmakingRequest object to retry with in the "retry" field of the MatchmakingResponse. Retry with this request within 5 seconds.
          schema:
            $ref: '#/definitions/MatchmakingQueuePutResponse'
    delete:
      description: Removes your client from the matchmaking queue.
      operationId: matchmakingConstructedQueueDelete
      security:
        - TokenSecurity: []
      responses:
        "200":
          description: |
            The client's cancel request has been processed. The result can be found in the body's MatchCancelResponse.
          schema:
            $ref: '#/definitions/MatchCancelResponse'
