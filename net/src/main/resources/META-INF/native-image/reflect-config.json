[
  {
    "name": "[Ljava.lang.Object;"
  },
  {
    "name": "co.paralleluniverse.fibers.Fiber",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "co.paralleluniverse.fibers.RunnableFiberTask",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "co.paralleluniverse.strands.OwnedSynchronizer",
    "fields": [
      {
        "name": "waiter"
      }
    ]
  },
  {
    "name": "co.paralleluniverse.strands.concurrent.AbstractQueuedSynchronizer",
    "fields": [
      {
        "name": "head"
      },
      {
        "name": "state"
      },
      {
        "name": "tail"
      }
    ]
  },
  {
    "name": "co.paralleluniverse.strands.concurrent.AbstractQueuedSynchronizer$Node",
    "fields": [
      {
        "name": "next"
      },
      {
        "name": "waitStatus"
      }
    ]
  },
  {
    "name": "co.paralleluniverse.strands.queues.SingleConsumerLinkedArrayQueue",
    "fields": [
      {
        "name": "head"
      },
      {
        "name": "tail"
      }
    ]
  },
  {
    "name": "co.paralleluniverse.strands.queues.SingleConsumerLinkedArrayQueue$Node",
    "fields": [
      {
        "name": "next"
      },
      {
        "name": "prev"
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.google.common.util.concurrent.AbstractFuture",
    "fields": [
      {
        "name": "listeners"
      },
      {
        "name": "value"
      },
      {
        "name": "waiters"
      }
    ]
  },
  {
    "name": "com.google.common.util.concurrent.AbstractFuture$Waiter",
    "fields": [
      {
        "name": "next"
      },
      {
        "name": "thread"
      }
    ]
  },
  {
    "name": "com.google.inject.AbstractModule",
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.internal.Annotations",
    "methods": [
      {
        "name": "determineWhetherToQuote",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.google.inject.internal.Element",
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.internal.InjectorShell$RootModule",
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.internal.InternalProviderInstanceBindingImpl$Factory",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.internal.RealMultibinder",
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.internal.RealMultibinder$RealMultibinderCollectionOfProvidersProvider",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.internal.RealMultibinder$RealMultibinderProvider",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey",
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.name.Named",
    "allDeclaredMethods": true
  },
  {
    "name": "com.google.inject.util.Modules$EmptyModule",
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.aggregation.impl.AggregatorDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.aws.AwsDiscoveryStrategyFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.cache.impl.CacheDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.cardinality.impl.CardinalityEstimatorDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.client.impl.ClientDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.client.impl.ClientEndpointManager",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.client.impl.ClientEndpointManagerImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.cache.impl.AbstractCacheService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.cache.impl.CacheService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllMessageTask",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveInvalidationListenerMessageTask",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.client.impl.protocol.task.cache.CacheRemoveAllKeysMessageTask",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.management.request.GetCacheEntryRequest",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.instance.DefaultNodeExtension",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.config.CacheConfig",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "javax.cache.CacheException",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "javax.cache.configuration.CacheEntryListenerConfiguration",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "javax.cache.expiry.ExpiryPolicy",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.collection.impl.collection.CollectionDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.collection.impl.queue.QueueDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.concurrent.atomiclong.AtomicLongDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.concurrent.atomicreference.AtomicReferenceDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.concurrent.countdownlatch.CountDownLatchDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.concurrent.lock.LockDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.concurrent.semaphore.SemaphoreDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.config.ConfigDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.core.Cluster",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.crdt.CRDTDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.durableexecutor.impl.DurableExecutorDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.executor.impl.ExecutorDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.flakeidgen.impl.FlakeIdGeneratorDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.instance.GeneratedBuildProperties",
    "fields": [
      {
        "name": "BUILD"
      },
      {
        "name": "DISTRIBUTION"
      },
      {
        "name": "REVISION"
      },
      {
        "name": "SERIALIZATION_VERSION"
      },
      {
        "name": "VERSION"
      }
    ]
  },
  {
    "name": "com.hazelcast.internal.ascii.TextProtocolsDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.internal.cluster.ClusterClock",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.cluster.ClusterService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.cluster.ClusterStateListener",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.cluster.ClusterVersionListener",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.cluster.impl.ClusterClockImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.cluster.impl.ClusterDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.internal.cluster.impl.ClusterHeartbeatManager",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.cluster.impl.ClusterServiceImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.journal.EventJournalDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.internal.management.ManagementDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.internal.metrics.MetricsProvider",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.metrics.metricsets.GarbageCollectionMetricSet$GcStats",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.networking.InboundPipeline",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.networking.OutboundPipeline",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.networking.nio.MigratablePipeline",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.networking.nio.NioInboundPipeline",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.networking.nio.NioOutboundPipeline",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.networking.nio.NioPipeline",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.networking.nio.NioThread",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.networking.nio.iobalancer.IOBalancer",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.partition.InternalPartitionService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.partition.PartitionReplicaVersionManager",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.partition.impl.InternalPartitionServiceImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.partition.impl.MigrationManager",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.partition.impl.PartitionDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.internal.partition.impl.PartitionPortableHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.internal.partition.impl.PartitionReplicaManager",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.partition.impl.PartitionStateManager",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.internal.usercodedeployment.impl.UserCodeDeploymentSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.internal.util.counters.SwCounter$UnsafeSwCounter",
    "fields": [
      {
        "name": "value"
      }
    ]
  },
  {
    "name": "com.hazelcast.logging.Slf4jFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.map.impl.MapDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.map.impl.client.MapPortableHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.map.impl.event.EntryEventData",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.map.merge.LatestUpdateMapMergePolicy",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.mapreduce.aggregation.impl.AggregationsDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.mapreduce.impl.MapReduceDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.mapreduce.impl.MapReducePortableHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.memory.DefaultMemoryStats",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.memory.MemoryStats",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.multimap.impl.MultiMapDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.nio.ClassLoaderUtil$IrresolvableConstructor",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.nio.ConnectionListenable",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.nio.ConnectionListener",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.nio.ConnectionManager",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.nio.tcp.TcpIpAcceptor",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.nio.tcp.TcpIpConnectionManager",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.projection.impl.ProjectionDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.query.impl.predicates.PredicateDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.replicatedmap.impl.client.ReplicatedMapPortableHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.replicatedmap.impl.operation.ReplicatedMapDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.ringbuffer.impl.RingbufferDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.ringbuffer.impl.client.RingbufferPortableHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.scheduledexecutor.impl.ScheduledExecutorDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.spi.ClientAwareService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.CoreService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.EventPublishingService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.EventService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.GracefulShutdownAwareService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.LiveOperationsTracker",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.ManagedService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.MembershipAwareService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.OperationService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.PartitionAwareService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.PostJoinAwareService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.PreJoinAwareService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.ProxyService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.TransactionalService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.discovery.multicast.MulticastDiscoveryStrategyFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.spi.impl.SpiDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.spi.impl.SpiPortableHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.spi.impl.eventservice.InternalEventService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.eventservice.impl.EventServiceImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.eventservice.impl.EventServiceSegment",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.merge.SplitBrainDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.spi.impl.operationexecutor.OperationExecutor",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationexecutor.OperationHostileThread",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationexecutor.OperationRunner",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationexecutor.impl.GenericOperationThread",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationexecutor.impl.OperationExecutorImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationexecutor.impl.OperationThread",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationexecutor.impl.PartitionOperationThread",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationparker.OperationParker",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationparker.impl.OperationParkerImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationservice.InternalOperationService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationservice.impl.InboundResponseHandlerSupplier",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationservice.impl.InvocationMonitor",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationservice.impl.InvocationRegistry",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationservice.impl.OperationRunnerImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.operationservice.impl.OperationServiceImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.proxyservice.InternalProxyService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.impl.proxyservice.impl.DistributedObjectEventPacket",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.spi.impl.proxyservice.impl.ProxyServiceImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.spi.partition.IPartitionService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.topic.impl.TopicDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.transaction.TransactionManagerService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.transaction.impl.TransactionDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hazelcast.transaction.impl.TransactionManagerServiceImpl",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.util.executor.CachedExecutorServiceDelegate",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.util.executor.HazelcastManagedThread",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.util.executor.ManagedExecutorService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.util.executor.NamedThreadPoolExecutor",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.util.function.Consumer",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.util.function.Supplier",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hazelcast.wan.impl.WanDataSerializerHook",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hiddenswitch.spellsource.AbstractCardResources",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.BaseCardResources",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.BaseCardsModule",
    "allDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hiddenswitch.spellsource.CardResources",
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.CardsModule",
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.Games",
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.HearthstoneCardResources",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.HearthstoneCardsModule",
    "allDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hiddenswitch.spellsource.SpellsourceCardResources",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.SpellsourceCardsModule",
    "allDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Account",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.CardEvent",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.CardRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.ChatMessage",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.ChooseOneOptions",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.ClientToServerMessage",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.ClientToServerMessageFirstMessage",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.CreateAccountRequest",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.CreateAccountResponse",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.DamageTypeEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.DefaultMethodResponse",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Emote",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Emote$MessageEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Entity",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Entity$EntityTypeEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EntityChangeSet",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EntityChangeSetInner",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EntityChangeSetInner$OpEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EntityLocation",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EntityLocation$ZoneEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EntityState",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EntityState$CardTypeEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EntityState$RarityEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Envelope",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeAdded",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeChanged",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeGame",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeMethod",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeMethodDequeue",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeMethodSendMessage",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeRemoved",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeRequest",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeResponse",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeResult",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeResultSendMessage",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeSub",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.EnvelopeSubConversation",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Friend",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameActions",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameActionsDiscoveries",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameActionsPhysicalAttacks",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEvent",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEvent$EventTypeEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventAfterSpellCasted",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventArmorGained",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventBeforeSummon",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventDamage",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventFatigue",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventHeal",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventHeroPowerUsed",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventJoust",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventKill",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventOverload",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventPerformedGameAction",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventPreDamage",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventQuestSuccessful",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventSecretPlayed",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventSecretRevealed",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventSilence",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventTargetAcquisition",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventTriggerFired",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameEventWeaponDestroyed",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameOver",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GameState",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GetAccountsResponse",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.GetCardsResponse",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.InventoryCollection",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.InventoryCollection$DeckTypeEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.InventoryCollection$TypeEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Invite",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Invite$StatusEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Match",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.MatchmakingQueuePutRequest",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.MatchmakingQueuePutResponse",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.MatchmakingQueuePutResponseUnityConnection",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.MessageType",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.PhysicalAttackEvent",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.PresenceEnum",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Replay",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.ReplayDeltas",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.ReplayGameStates",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.ServerToClientMessage",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.SpanContext",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.SpellAction",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.SpellsourceException",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.SummonAction",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.SummonActionIndexToActions",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.TargetActionPair",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.client.models.Timers",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.GameId",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.SpanContextDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.SpanContextSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.StringEx",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.UserId",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.server.Configuration",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.CollectionRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.DeckType",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.DelegateSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.EmailRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.FriendRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.GameRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.HashedLoginTokenRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.InventoryRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.MongoRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.PasswordRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.ResumeRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.ServicesRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.impl.util.UserRecord",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.models.CollectionTypes",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.models.ConfigurationRequest",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.models.CreateGameSessionResponse",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.hiddenswitch.spellsource.util.DefaultClusterSerializable",
    "allDeclaredMethods": true
  },
  {
    "name": "com.hiddenswitch.spellsource.util.MatchmakingQueueConfiguration",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "com.mongodb.WriteConcern",
    "allPublicFields": true
  },
  {
    "name": "io.jaegertracing.internal.metrics.Metrics",
    "allDeclaredFields": true
  },
  {
    "name": "io.netty.buffer.AbstractByteBufAllocator",
    "allDeclaredMethods": true
  },
  {
    "name": "io.netty.buffer.AbstractReferenceCountedByteBuf",
    "fields": [
      {
        "name": "refCnt"
      }
    ]
  },
  {
    "name": "io.netty.util.ReferenceCountUtil",
    "allDeclaredMethods": true
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "io.vertx.core.logging.SLF4JLogDelegateFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.vertx.core.shareddata.Shareable",
    "allDeclaredMethods": true
  },
  {
    "name": "io.vertx.core.shareddata.impl.ClusterSerializable",
    "allDeclaredMethods": true
  },
  {
    "name": "io.vertx.ext.auth.User",
    "allDeclaredMethods": true
  },
  {
    "name": "io.vertx.spi.cluster.hazelcast.impl.ConversionUtils$DataSerializableHolder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.vertx.spi.cluster.hazelcast.impl.HazelcastClusterNodeInfo",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.io.Serializable",
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Boolean",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true,
    "methods": [
      {
        "name": "parseBoolean",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.Byte",
    "methods": [
      {
        "name": "parseByte",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.CharSequence",
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.ClassLoader",
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Cloneable",
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Comparable",
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Double",
    "methods": [
      {
        "name": "parseDouble",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.Enum",
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Float",
    "methods": [
      {
        "name": "parseFloat",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.Integer",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true,
    "methods": [
      {
        "name": "parseInt",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.Iterable",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Long",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true,
    "methods": [
      {
        "name": "parseLong",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.Number",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Object",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Runnable",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.Short",
    "methods": [
      {
        "name": "parseShort",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.StringBuilder"
  },
  {
    "name": "java.lang.Thread",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.lang.ThreadLocal$ThreadLocalMap",
    "fields": [
      {
        "name": "size"
      },
      {
        "name": "table"
      },
      {
        "name": "threshold"
      }
    ],
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.ThreadLocal$ThreadLocalMap"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.ThreadLocal",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "java.lang.ThreadLocal$ThreadLocalMap$Entry",
    "fields": [
      {
        "name": "value"
      }
    ],
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.ThreadLocal",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "java.lang.Throwable",
    "methods": [
      {
        "name": "addSuppressed",
        "parameterTypes": [
          "java.lang.Throwable"
        ]
      },
      {
        "name": "getSuppressed",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.invoke.CallSite"
  },
  {
    "name": "java.lang.invoke.MethodHandle"
  },
  {
    "name": "java.lang.management.ManagementFactory",
    "methods": [
      {
        "name": "getRuntimeMXBean",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.management.RuntimeMXBean",
    "methods": [
      {
        "name": "getName",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.net.SocketOption"
  },
  {
    "name": "java.net.StandardSocketOptions",
    "fields": [
      {
        "name": "IP_MULTICAST_IF"
      },
      {
        "name": "IP_MULTICAST_LOOP"
      },
      {
        "name": "IP_MULTICAST_TTL"
      }
    ]
  },
  {
    "name": "java.nio.Bits",
    "methods": [
      {
        "name": "unaligned",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.nio.Buffer",
    "fields": [
      {
        "name": "address"
      }
    ]
  },
  {
    "name": "java.nio.DirectByteBuffer",
    "fields": [
      {
        "name": "cleaner"
      }
    ],
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "long",
          "int"
        ]
      }
    ]
  },
  {
    "name": "java.nio.channels.NetworkChannel",
    "methods": [
      {
        "name": "getOption",
        "parameterTypes": [
          "java.net.SocketOption"
        ]
      },
      {
        "name": "setOption",
        "parameterTypes": [
          "java.net.SocketOption",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "java.util.AbstractCollection",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.AbstractList",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.AbstractMap",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.ArrayList",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "java.util.Collection",
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.Date",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "java.util.EnumMap",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.HashSet"
  },
  {
    "name": "java.util.LinkedHashMap",
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "java.util.LinkedHashSet"
  },
  {
    "name": "java.util.List",
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.Map",
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.RandomAccess",
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.concurrent.AbstractExecutorService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.concurrent.Executor",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.concurrent.ExecutorService",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "methods": [
      {
        "name": "setRemoveOnCancelPolicy",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "java.util.concurrent.ThreadLocalRandom"
  },
  {
    "name": "java.util.concurrent.ThreadPoolExecutor",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "java.util.function.Function"
  },
  {
    "name": "java.util.zip.DeflaterInputStream"
  },
  {
    "name": "net.demilich.metastone.game.cards.Attribute",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.cards.AttributeMap",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "net.demilich.metastone.game.cards.BaseMap",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.cards.CardCatalogue$InjectedCardResources",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "net.demilich.metastone.game.cards.CardSet",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.cards.CardType",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.cards.Rarity",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.cards.costmodifier.CardCostModifier",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.manamodifier.CardCostModifierDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.costmodifier.OneTurnCostModifier"
  },
  {
    "name": "net.demilich.metastone.game.cards.costmodifier.ToggleCostModifier"
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.AuraDescDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.CardCostModifierDescDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.CardDesc",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.ConditionDescDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.DescSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.EventTriggerDescDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.HasEntrySet",
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.SpellDescDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.desc.ValueProviderDescDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.dynamicdescription.ConditionalDescription"
  },
  {
    "name": "net.demilich.metastone.game.cards.dynamicdescription.DynamicDescriptionDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.dynamicdescription.MetaDescription",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.cards.dynamicdescription.DynamicDescriptionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.dynamicdescription.PluralDescription",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.cards.dynamicdescription.DynamicDescriptionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.dynamicdescription.StringDescription",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.cards.dynamicdescription.DynamicDescriptionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.cards.dynamicdescription.ValueDescription",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.cards.dynamicdescription.DynamicDescriptionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.decks.CollectionDeck",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "net.demilich.metastone.game.decks.Deck",
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.entities.heroes.HeroClass",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.entities.minions.Race",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "net.demilich.metastone.game.logic.Trace",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "net.demilich.metastone.game.spells.AddAttributeSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.AddBattlecrySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.AddDeathrattleSecondaryAsTargetSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.AddDeathrattleSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.AddDescriptionSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.AddEnchantmentSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.AddQuestSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.AddSecretSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.AdjacentEffectSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.AuraBuffSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.BuffHeroSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.BuffSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.CardCostModifierSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.CastAfterSequenceSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.CastCardsSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.CastFromGroupSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.CastRandomSpellSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.CastRepeatedlySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ChangeHeroPowerSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ChangeHeroSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ChooseAndReshuffleSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ClearOverloadSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.CloneMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ComboSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ConditionalAttackBonusSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ConditionalEffectSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.ConditionalSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.CopyCardSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.CopyDeathrattleSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.CopyHeroPower"
  },
  {
    "name": "net.demilich.metastone.game.spells.CreateCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.CreateSummonSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DamageSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.DestroyAllExceptOneSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DestroySecretsSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DestroySpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.DiscardCardsFromDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DiscardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DiscoverCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DiscoverFilteredCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DiscoverOptionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DiscoverSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.DoubleAttackSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DrainSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DrawCardSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.DrawCardUntilConditionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.DuelSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.EitherOrSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.EnrageSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.EquipRandomWeaponSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.EquipWeaponSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ExcessDamageSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.FatigueSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.FightSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.FirstConditionalSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ForceDeathPhaseSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.FromDeckToHandSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.FumbleSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.GainArmorSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.GainManaSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.HealSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.HealingMissilesSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.HeroPowerSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.JoustSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.MetaSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.MindControlSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.MisdirectSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.MissilesSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ModifyAttributeSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ModifyDamageSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ModifyDurabilitySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ModifyMaxManaSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.MultiTargetSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.NullSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.OppositeEffectSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.OverkillSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.OverrideTargetSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.PutCopyInHandSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.PutDeckTopSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.PutMinionOnBoardFromDeckSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.PutMinionOnBoardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.PutOnBottomOfDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.PutRandomSecretIntoPlaySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.QueryTargetSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RandomCardTargetSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RandomlyCastSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RecastWhileSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ReceiveCardSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.ReceiveLastCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RecruitSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RefreshAttacksSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RefreshHeroPowerSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RefreshManaSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RemoveActorPeacefullySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RemoveAttributeSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.RemoveBonusAttributes"
  },
  {
    "name": "net.demilich.metastone.game.spells.RemoveCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RemoveEnchantmentSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ReplaceCardsSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ReservoirSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ResetDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ResurrectFromBothSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ResurrectSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ReturnTargetToHandSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.ReturnToHandWithEnchantments"
  },
  {
    "name": "net.demilich.metastone.game.spells.RevealCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ReviveMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.RoastSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.SetAttackSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.SetAttackerSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SetAttributeSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SetDescriptionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SetHeroHpSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SetHpSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.SetMaxManaSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ShuffleMinionToDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ShuffleOriginalToDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ShuffleToDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ShuffleToDeckWithEnchantmentsSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SilenceSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.SortDeckByManaCostSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SplashDamageSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.StealCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.StealRandomSecretSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SummonCardFromAttributeSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SummonSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.SupremacySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SwapAttackAndHpSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SwapAttackSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SwapCardsSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SwapHpSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.SwipeSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.TargetToSourceSecondaryToTargetSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.TemporaryAttackSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.TransformCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.TransformMinionSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.TransformToRandomMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.TriggerDeathrattleSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.UseHeroPowerSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.ValueToHowManySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.WeaponDamageSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.WhereverTheyAreSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.WitherSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.AttributeAura",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.aura.AuraDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.AttributeValueAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.Aura",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.aura.AuraDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.BuffAura",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.aura.AuraDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.CaptnCookieAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.CardAura",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.aura.AuraDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.CardCostInsteadAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.ChooseOneOverrideAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.DoubleBattlecriesAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.DoubleCombosAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.DoubleDeathrattlesAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.EnrageAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.HeroPowerBonusAura",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.aura.AuraDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.ModifyBuffSpellAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.ModifyTemporaryAttackSpellAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.NoggenfoggerAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.PhysicalAttackTargetOverrideAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.ReservoirsAlwaysActiveAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.ReservoirsNeverActiveAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.SecretsTriggerTwiceAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.SpecificCardFilterOverrideAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.SpellOverrideAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.SpellTargetsAdjacentAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.StatefulAttributeValueAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.SupremaciesTriggerTwiceAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.SupremacyBonusEffectAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.TargetSelectionOverrideAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.aura.TheliaSilentdreamerAura"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.AbholosSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ActivateTriggeredEffectSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.AddActorEffectsToTargetActorSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.AddEnchantmentToMinionCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.AddTriggerToCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.AdjacentDeathrattleSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.AnobiiSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.AysaCloudsingerSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.BaulPocuseSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.BloodElfChampionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.BrothersInBloodSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.BuffLeftmostMinionInHandSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CastOnEntitiesInStorageSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CastSpellSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ClearStorageSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CopyCardEnchantmentsSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CopyLastRoastedCardSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CopyLowestCostMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CopyMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CreateAndTeachSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CreateCardFromChoicesSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.CreationSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.DamageAdjacentMinionsSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.DamageOppositeMinionsSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.DestroyAndSummonInPlaceSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.DiluteSoulSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.DiscoverDiscardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.DoubleSummonSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.DuelRandomSecondarySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ElorthaNoShandraSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.FarseerNobundoSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.FelfireDrakeSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.FightRandomAdjacentMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.GainStatsOfHighestCostMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.GetChooseOneChoicesSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.GuessCardSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.HealAndBuffExcessAsDrainSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.HeroPowerToSpellSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.JailMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.KeepersPupilSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.LastMinionCardInDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ManaCrystalToMinionSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.MergeSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.MindControlOneTurnSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.PlayCardsRandomlySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.PlayLastCardsRandomlySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ProphetWaRanSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.PutIntoEggSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.RafaamThiefSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.RecastIfMinionsDestroyedSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ReceiveCardNextTurnSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ReceiveCardsInStorageSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.RemoveTopUntilMinionAndSummonSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.RepeatAllOtherBattlecriesSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ResurrectFromEntityStorageSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.ShuffleWithCardCostModifierSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.SleightOfHandSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.StoreEntitySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.SummonFriendlyMinionsThatDiedSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.SwapCardsInHandAndDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.SwapHpAndCostSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.SwapMinionWithDeckSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.SwapWithHandSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.TextifySpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.TransformInHandSpell",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.TransformToAndBackSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.TriggerSecretRevealSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.UpgradeHeroPowerSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.WeaponOnEquipEffectSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.custom.WeaponOnUnEquipEffectSpell"
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.BattlecryDesc",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.AdjacentToPermanentCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.AllMatchFilterCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.AllModuloValueEqualsZeroCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.AmalgamRaceCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.AndCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.AnyMatchFilterCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.AttributeCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.AttributeExistsCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.CardCountCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.CardPropertyCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.ComboCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.ComparisonCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.ControlsSecretCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.DeckContainsCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.EventTargetMatchesReferenceCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.GraveyardContainsCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.GraveyardCountCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.HasAttackedCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.HasEntitiesOnBoardCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.HasHeroPowerCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.HasWeaponCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.HeroClassCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.HighlanderDeckCondition"
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.HoldsCardCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.InvokeCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.IsAdjacentCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.IsDamagedCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.IsDeadCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.ManaCostCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.ManaMaxedCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.MinionCountCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.MinionOnBoardCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.OrCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.OverloadedCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.OverloadedManaCrystalsCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.OwnedByPlayerCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.PlayedLastTurnCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.RaceCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.RandomCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.ReservoirCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.condition.SurgeCondition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.condition.ConditionDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.AmalgamRaceFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.AndFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.AttributeFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.CardFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.CopiesHaveBeenPlayedFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.DamagedFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.DeckContainsFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.EntityEqualsFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.EntityTypeFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.HandContainsFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.HasAttackedFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.HasEffectsFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.HasEnchantmentFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.HasTextFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.HealedFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.HighestAttributeFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.IsDestroyedFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.ManaCostFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.OrFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.OwnedByPlayerFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.RaceEqualsFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.RaceFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.SameHeroClassFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.SecretsContainsFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.SpecificCardFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.SpellFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.SummonedByPlayerFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.filter.TargetSelectionFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.filter.EntityFilterDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.CatalogueSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.CombinedSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.DeckCollectionSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.DeckSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.FormatCatalogueSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.GraveyardActorsSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.GraveyardCardsSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.HandSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.MinionsSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.SecretSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.ShuffledCardsSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.TopThreeCardsOfDeckSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.UncollectibleCatalogueSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.UngoroPackRarityWeightedCardSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.source.UnweightedCatalogueSource",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.source.CardSourceDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.trigger.EnchantmentDesc",
    "allDeclaredFields": true,
    "allDeclaredMethods": true,
    "allDeclaredConstructors": true
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.AlgebraicValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.AttributeCounter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.AttributeValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.CardCountValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.CardsPlayedValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.ConditionalValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.CurrentTurnValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.DestroyedThisSequenceValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.DiedThisTurnValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.DistinctTribesValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.EntityCounter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.EventValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.FiresLeftValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.GameValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.LastTurnValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.ManaCostModifierValueProvider"
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.ManaCostProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.MaxBoardSizeValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.MinionSummonValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.OriginalValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.PlayedLastTurnValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.PlayedThisTurnValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.PlayerAttributeValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.RandomValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.ReduceValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.SpellDamageValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.SpellstoneValueProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.valueprovider.ValueProviderDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.desc.valueprovider.TurnsNoCardPlayedValueProvider"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.AfterCardPlayedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.AfterDamagingSpellCastedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.AfterMinionPlayedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.AfterMinionSummonedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.AfterPhysicalAttackTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.AfterSpellCastedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.ArmorChangedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.AttributeAppliedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.BattlecryResolvedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.BeforeMinionPlayedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.BeforeMinionSummonedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.BoardChangedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.CardAddedToDeckTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.CardDrawnTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.CardPlayedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.CardReceivedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.CardRevealedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.CavernsBelowTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.DamageCausedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.DamageReceivedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.DiscardTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.DrainTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.EnrageChangedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.FatalDamageTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.GameStartTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.GameStateChangedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.HealingTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.HeroPowerUsedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.InspireTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.InvokedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.LoseDeflectTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.LoseDivineShieldTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.LoseStealthTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.MaxHpIncreasedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.MaxManaChangedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.MinionDeathTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.MinionPlayedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.MinionSummonedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.NonFatigueDamageCausedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.OverloadTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.PhysicalAttackTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.PreDamageTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.PreGameStartTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.ReturnToHandTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.RoastTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.SecretPlayedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.SecretRevealedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.ShuffledTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.SilenceTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.SpellCastedTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.SupremacyTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.TargetAcquisitionTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.TurnEndTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.TurnStartTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.WeaponDestroyedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.WeaponEquippedTrigger"
  },
  {
    "name": "net.demilich.metastone.game.spells.trigger.WillEndSequenceTrigger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "net.demilich.metastone.game.spells.desc.trigger.EventTriggerDesc"
        ]
      }
    ]
  },
  {
    "name": "net.demilich.metastone.game.targeting.TargetSelection",
    "allDeclaredFields": true,
    "allDeclaredMethods": true
  },
  {
    "name": "org.slf4j.LoggerFactory"
  },
  {
    "name": "org.slf4j.impl.StaticLoggerBinder"
  },
  {
    "name": "sun.management.OperatingSystemImpl",
    "methods": [
      {
        "name": "getCommittedVirtualMemorySize",
        "parameterTypes": []
      },
      {
        "name": "getFreePhysicalMemorySize",
        "parameterTypes": []
      },
      {
        "name": "getFreeSwapSpaceSize",
        "parameterTypes": []
      },
      {
        "name": "getMaxFileDescriptorCount",
        "parameterTypes": []
      },
      {
        "name": "getOpenFileDescriptorCount",
        "parameterTypes": []
      },
      {
        "name": "getProcessCpuLoad",
        "parameterTypes": []
      },
      {
        "name": "getProcessCpuTime",
        "parameterTypes": []
      },
      {
        "name": "getSystemCpuLoad",
        "parameterTypes": []
      },
      {
        "name": "getTotalPhysicalMemorySize",
        "parameterTypes": []
      },
      {
        "name": "getTotalSwapSpaceSize",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.misc.Cleaner",
    "methods": [
      {
        "name": "clean",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.misc.JavaLangAccess",
    "methods": [
      {
        "name": "getStackTraceDepth",
        "parameterTypes": [
          "java.lang.Throwable"
        ]
      },
      {
        "name": "getStackTraceElement",
        "parameterTypes": [
          "java.lang.Throwable",
          "int"
        ]
      }
    ]
  },
  {
    "name": "sun.misc.SharedSecrets",
    "methods": [
      {
        "name": "getJavaLangAccess",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.misc.Unsafe",
    "allDeclaredFields": true,
    "methods": [
      {
        "name": "copyMemory",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getAndSetObject",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.misc.VM",
    "methods": [
      {
        "name": "maxDirectMemory",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.nio.ch.SelectorImpl",
    "fields": [
      {
        "name": "publicSelectedKeys"
      },
      {
        "name": "selectedKeys"
      }
    ]
  }
]
