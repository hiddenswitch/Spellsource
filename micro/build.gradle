plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "net.ltgt.apt-eclipse" version "0.21"
}

group 'com.hiddenswitch'
version '0.8.59'

repositories {
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation project(path: ":game", configuration: 'uninstrumentedJars')
    implementation project(":cards")
    implementation 'commons-io:commons-io:2.5'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.+'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common:1.3.+'
    annotationProcessor platform("io.micronaut:micronaut-bom:1.3.+")
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compileOnly "org.graalvm.nativeimage:svm:19.3.0"
    implementation platform("io.micronaut:micronaut-bom:1.3.+")
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "javax.annotation:javax.annotation-api"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:1.3.+")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:1.3.+")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}


test.classpath += configurations.developmentOnly

mainClassName = "com.hiddenswitch.spellsource.micro.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
