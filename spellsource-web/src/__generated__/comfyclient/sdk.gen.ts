// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetRootUiError, GetRootUiResponse, GetEmbeddingsUiError, GetEmbeddingsUiResponse, GetExtensionsUiError, GetExtensionsUiResponse, UploadImageUiData, UploadImageUiError, UploadImageUiResponse, ViewImageUiData, ViewImageUiError, ViewImageUiResponse, GetPromptUiError, GetPromptUiResponse, PostPromptUiData, PostPromptUiError, PostPromptUiResponse, GetObjectInfoUiError, GetObjectInfoUiResponse, GetHistoryUiError, GetHistoryUiResponse, PostHistoryUiData, PostHistoryUiError, PostHistoryUiResponse, GetQueueUiError, GetQueueUiResponse, PostQueueUiData, PostQueueUiError, PostQueueUiResponse, PostInterruptUiError, PostInterruptUiResponse, FreeUiData, FreeUiError, FreeUiResponse, GetPromptData, ListPromptsError, ListPromptsResponse, GenerateData, GenerateError, GenerateResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * (UI) index.html
 */
export const getRootUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRootUiResponse, GetRootUiError, ThrowOnError>({
        ...options,
        url: '/'
    });
};

/**
 * (UI) Get embeddings
 */
export const getEmbeddingsUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEmbeddingsUiResponse, GetEmbeddingsUiError, ThrowOnError>({
        ...options,
        url: '/embeddings'
    });
};

/**
 * (UI) Get extensions
 */
export const getExtensionsUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetExtensionsUiResponse, GetExtensionsUiError, ThrowOnError>({
        ...options,
        url: '/extensions'
    });
};

/**
 * (UI) Upload an image.
 * Uploads an image to the input/ directory.
 *
 * Never replaces files. The method will return a renamed file name if it would have overwritten an existing file.
 *
 */
export const uploadImageUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<UploadImageUiData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadImageUiResponse, UploadImageUiError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/upload/image'
    });
};

/**
 * (UI) View image
 * Reads the image with the specified file name and located in the specified subfolder.
 *
 */
export const viewImageUi = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ViewImageUiData, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewImageUiResponse, ViewImageUiError, ThrowOnError>({
        ...options,
        url: '/view'
    });
};

/**
 * (UI) Get queue info
 */
export const getPromptUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPromptUiResponse, GetPromptUiError, ThrowOnError>({
        ...options,
        url: '/prompt'
    });
};

/**
 * (UI) Post prompt
 */
export const postPromptUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostPromptUiData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPromptUiResponse, PostPromptUiError, ThrowOnError>({
        ...options,
        url: '/prompt'
    });
};

/**
 * (UI) Get object info
 */
export const getObjectInfoUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetObjectInfoUiResponse, GetObjectInfoUiError, ThrowOnError>({
        ...options,
        url: '/object_info'
    });
};

/**
 * (UI) Get history
 */
export const getHistoryUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHistoryUiResponse, GetHistoryUiError, ThrowOnError>({
        ...options,
        url: '/history'
    });
};

/**
 * (UI) Post history
 */
export const postHistoryUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostHistoryUiData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostHistoryUiResponse, PostHistoryUiError, ThrowOnError>({
        ...options,
        url: '/history'
    });
};

/**
 * (UI) Get queue
 */
export const getQueueUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetQueueUiResponse, GetQueueUiError, ThrowOnError>({
        ...options,
        url: '/queue'
    });
};

/**
 * (UI) Post queue
 */
export const postQueueUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostQueueUiData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostQueueUiResponse, PostQueueUiError, ThrowOnError>({
        ...options,
        url: '/queue'
    });
};

/**
 * (UI) Post interrupt
 */
export const postInterruptUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInterruptUiResponse, PostInterruptUiError, ThrowOnError>({
        ...options,
        url: '/interrupt'
    });
};

/**
 * (UI) Unload models or free memory
 */
export const freeUi = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<FreeUiData, ThrowOnError>) => {
    return (options?.client ?? client).post<FreeUiResponse, FreeUiError, ThrowOnError>({
        ...options,
        url: '/free'
    });
};

/**
 * (API) Get prompt status
 */
export const getPrompt = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPromptData, ThrowOnError>) => {
    return (options?.client ?? client).get<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/prompts/{prompt_id}'
    });
};

/**
 * (API) Get last prompt
 * Return the last prompt run anywhere that was used to produce an image
 *
 * The prompt object can be POSTed to run the image again with your own parameters.
 *
 * The last prompt, whether it was in the UI or via the API, will be returned here.
 *
 */
export const listPrompts = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListPromptsResponse, ListPromptsError, ThrowOnError>({
        ...options,
        url: '/api/v1/prompts'
    });
};

/**
 * (API) Generate image
 * Run a prompt to generate an image.
 *
 * Blocks until the image is produced. This may take an arbitrarily long amount of time due to model loading.
 *
 * Prompts that produce multiple images will return the last SaveImage output node in the Prompt by default. To return a specific image, remove other
 * SaveImage nodes.
 *
 * When images are included in your request body, these are saved and their
 * filenames will be used in your Prompt.
 *
 */
export const generate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GenerateData, ThrowOnError>) => {
    return (options?.client ?? client).post<GenerateResponse, GenerateError, ThrowOnError>({
        ...options,
        url: '/api/v1/prompts'
    });
};