type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `BannedDraftCard`."""
  allBannedDraftCards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BannedDraftCard`."""
    orderBy: [BannedDraftCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BannedDraftCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BannedDraftCardFilter
  ): BannedDraftCardsConnection

  """Reads and enables pagination through a set of `BotUser`."""
  allBotUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BotUser`."""
    orderBy: [BotUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BotUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BotUserFilter
  ): BotUsersConnection

  """Reads and enables pagination through a set of `Card`."""
  allCards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CardFilter

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO
  ): CardsConnection

  """Reads and enables pagination through a set of `CardsInDeck`."""
  allCardsInDecks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CardsInDeck`."""
    orderBy: [CardsInDecksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CardsInDeckCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CardsInDeckFilter
  ): CardsInDecksConnection

  """Reads and enables pagination through a set of `Class`."""
  allClasses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Class`."""
    orderBy: [ClassesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClassCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ClassFilter
  ): ClassesConnection

  """Reads and enables pagination through a set of `CollectionCard`."""
  allCollectionCards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionCard`."""
    orderBy: [CollectionCardsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionCardFilter
  ): CollectionCardsConnection

  """
  Reads and enables pagination through a set of `DeckPlayerAttributeTuple`.
  """
  allDeckPlayerAttributeTuples(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DeckPlayerAttributeTuple`."""
    orderBy: [DeckPlayerAttributeTuplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeckPlayerAttributeTupleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DeckPlayerAttributeTupleFilter
  ): DeckPlayerAttributeTuplesConnection

  """Reads and enables pagination through a set of `DeckShare`."""
  allDeckShares(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DeckShare`."""
    orderBy: [DeckSharesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeckShareCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DeckShareFilter
  ): DeckSharesConnection

  """Reads and enables pagination through a set of `Deck`."""
  allDecks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Deck`."""
    orderBy: [DecksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeckCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DeckFilter
  ): DecksConnection

  """Reads and enables pagination through a set of `Friend`."""
  allFriends(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FriendCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FriendFilter
  ): FriendsConnection

  """Reads and enables pagination through a set of `GameUser`."""
  allGameUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GameUser`."""
    orderBy: [GameUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameUserFilter
  ): GameUsersConnection

  """Reads and enables pagination through a set of `Game`."""
  allGames(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameFilter
  ): GamesConnection

  """Reads and enables pagination through a set of `GeneratedArt`."""
  allGeneratedArts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GeneratedArt`."""
    orderBy: [GeneratedArtsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeneratedArtCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GeneratedArtFilter

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO
  ): GeneratedArtsConnection

  """Reads and enables pagination through a set of `Guest`."""
  allGuests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Guest`."""
    orderBy: [GuestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GuestFilter
  ): GuestsConnection

  """Reads and enables pagination through a set of `HardRemovalCard`."""
  allHardRemovalCards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HardRemovalCard`."""
    orderBy: [HardRemovalCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HardRemovalCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: HardRemovalCardFilter
  ): HardRemovalCardsConnection

  """Reads and enables pagination through a set of `MatchmakingQueue`."""
  allMatchmakingQueues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MatchmakingQueue`."""
    orderBy: [MatchmakingQueuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchmakingQueueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MatchmakingQueueFilter
  ): MatchmakingQueuesConnection

  """Reads and enables pagination through a set of `MatchmakingTicket`."""
  allMatchmakingTickets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MatchmakingTicket`."""
    orderBy: [MatchmakingTicketsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchmakingTicketCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MatchmakingTicketFilter
  ): MatchmakingTicketsConnection

  """Reads and enables pagination through a set of `PublishedCard`."""
  allPublishedCards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PublishedCard`."""
    orderBy: [PublishedCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublishedCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublishedCardFilter
  ): PublishedCardsConnection
  bannedDraftCardByCardId(cardId: String!): BannedDraftCard
  botUserById(id: String!): BotUser
  cardBySuccession(succession: BigInt!): Card
  cardsInDeckById(id: BigInt!): CardsInDeck
  deckPlayerAttributeTupleById(id: BigInt!): DeckPlayerAttributeTuple
  deckShareByDeckIdAndShareRecipientId(deckId: String!, shareRecipientId: String!): DeckShare
  deckById(id: String!): Deck
  friendByIdAndFriend(id: String!, friend: String!): Friend
  gameUserByGameIdAndUserId(gameId: BigInt!, userId: String!): GameUser
  gameById(id: BigInt!): Game
  generatedArtByHashAndOwner(hash: String!, owner: String!): GeneratedArt
  guestById(id: BigInt!): Guest
  hardRemovalCardByCardId(cardId: String!): HardRemovalCard
  matchmakingQueueById(id: String!): MatchmakingQueue
  matchmakingTicketByUserId(userId: String!): MatchmakingTicket
  publishedCardById(id: String!): PublishedCard
  getLatestCard(cardId: String, published: Boolean): Card
  getUserId: String

  """Reads a single `BannedDraftCard` using its globally unique `ID`."""
  bannedDraftCard(
    """
    The globally unique `ID` to be used in selecting a single `BannedDraftCard`.
    """
    nodeId: ID!
  ): BannedDraftCard

  """Reads a single `BotUser` using its globally unique `ID`."""
  botUser(
    """The globally unique `ID` to be used in selecting a single `BotUser`."""
    nodeId: ID!
  ): BotUser

  """Reads a single `Card` using its globally unique `ID`."""
  card(
    """The globally unique `ID` to be used in selecting a single `Card`."""
    nodeId: ID!
  ): Card

  """Reads a single `CardsInDeck` using its globally unique `ID`."""
  cardsInDeck(
    """
    The globally unique `ID` to be used in selecting a single `CardsInDeck`.
    """
    nodeId: ID!
  ): CardsInDeck

  """
  Reads a single `DeckPlayerAttributeTuple` using its globally unique `ID`.
  """
  deckPlayerAttributeTuple(
    """
    The globally unique `ID` to be used in selecting a single `DeckPlayerAttributeTuple`.
    """
    nodeId: ID!
  ): DeckPlayerAttributeTuple

  """Reads a single `DeckShare` using its globally unique `ID`."""
  deckShare(
    """The globally unique `ID` to be used in selecting a single `DeckShare`."""
    nodeId: ID!
  ): DeckShare

  """Reads a single `Deck` using its globally unique `ID`."""
  deck(
    """The globally unique `ID` to be used in selecting a single `Deck`."""
    nodeId: ID!
  ): Deck

  """Reads a single `Friend` using its globally unique `ID`."""
  friend(
    """The globally unique `ID` to be used in selecting a single `Friend`."""
    nodeId: ID!
  ): Friend

  """Reads a single `GameUser` using its globally unique `ID`."""
  gameUser(
    """The globally unique `ID` to be used in selecting a single `GameUser`."""
    nodeId: ID!
  ): GameUser

  """Reads a single `Game` using its globally unique `ID`."""
  game(
    """The globally unique `ID` to be used in selecting a single `Game`."""
    nodeId: ID!
  ): Game

  """Reads a single `Guest` using its globally unique `ID`."""
  guest(
    """The globally unique `ID` to be used in selecting a single `Guest`."""
    nodeId: ID!
  ): Guest

  """Reads a single `HardRemovalCard` using its globally unique `ID`."""
  hardRemovalCard(
    """
    The globally unique `ID` to be used in selecting a single `HardRemovalCard`.
    """
    nodeId: ID!
  ): HardRemovalCard

  """Reads a single `MatchmakingQueue` using its globally unique `ID`."""
  matchmakingQueue(
    """
    The globally unique `ID` to be used in selecting a single `MatchmakingQueue`.
    """
    nodeId: ID!
  ): MatchmakingQueue

  """Reads a single `MatchmakingTicket` using its globally unique `ID`."""
  matchmakingTicket(
    """
    The globally unique `ID` to be used in selecting a single `MatchmakingTicket`.
    """
    nodeId: ID!
  ): MatchmakingTicket

  """Reads a single `PublishedCard` using its globally unique `ID`."""
  publishedCard(
    """
    The globally unique `ID` to be used in selecting a single `PublishedCard`.
    """
    nodeId: ID!
  ): PublishedCard
  artById(id: String!): ImageDef
  allArt: [ImageDef!]!
}

type Mutation {
  """Creates a single `BannedDraftCard`."""
  createBannedDraftCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBannedDraftCardInput!
  ): CreateBannedDraftCardPayload

  """Creates a single `BotUser`."""
  createBotUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBotUserInput!
  ): CreateBotUserPayload

  """Creates a single `Card`."""
  createCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCardInput!
  ): CreateCardPayload

  """Creates a single `CardsInDeck`."""
  createCardsInDeck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCardsInDeckInput!
  ): CreateCardsInDeckPayload

  """Creates a single `DeckPlayerAttributeTuple`."""
  createDeckPlayerAttributeTuple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDeckPlayerAttributeTupleInput!
  ): CreateDeckPlayerAttributeTuplePayload

  """Creates a single `DeckShare`."""
  createDeckShare(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDeckShareInput!
  ): CreateDeckSharePayload

  """Creates a single `Deck`."""
  createDeck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDeckInput!
  ): CreateDeckPayload

  """Creates a single `Friend`."""
  createFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFriendInput!
  ): CreateFriendPayload

  """Creates a single `GameUser`."""
  createGameUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameUserInput!
  ): CreateGameUserPayload

  """Creates a single `Game`."""
  createGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameInput!
  ): CreateGamePayload

  """Creates a single `GeneratedArt`."""
  createGeneratedArt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGeneratedArtInput!
  ): CreateGeneratedArtPayload

  """Creates a single `Guest`."""
  createGuest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGuestInput!
  ): CreateGuestPayload

  """Creates a single `HardRemovalCard`."""
  createHardRemovalCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHardRemovalCardInput!
  ): CreateHardRemovalCardPayload

  """Creates a single `MatchmakingQueue`."""
  createMatchmakingQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMatchmakingQueueInput!
  ): CreateMatchmakingQueuePayload

  """Creates a single `MatchmakingTicket`."""
  createMatchmakingTicket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMatchmakingTicketInput!
  ): CreateMatchmakingTicketPayload

  """Creates a single `PublishedCard`."""
  createPublishedCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePublishedCardInput!
  ): CreatePublishedCardPayload

  """
  Updates a single `BannedDraftCard` using its globally unique id and a patch.
  """
  updateBannedDraftCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBannedDraftCardInput!
  ): UpdateBannedDraftCardPayload

  """Updates a single `BannedDraftCard` using a unique key and a patch."""
  updateBannedDraftCardByCardId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBannedDraftCardByCardIdInput!
  ): UpdateBannedDraftCardPayload

  """Updates a single `BotUser` using its globally unique id and a patch."""
  updateBotUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBotUserInput!
  ): UpdateBotUserPayload

  """Updates a single `BotUser` using a unique key and a patch."""
  updateBotUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBotUserByIdInput!
  ): UpdateBotUserPayload

  """Updates a single `Card` using its globally unique id and a patch."""
  updateCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCardInput!
  ): UpdateCardPayload

  """Updates a single `Card` using a unique key and a patch."""
  updateCardBySuccession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCardBySuccessionInput!
  ): UpdateCardPayload

  """
  Updates a single `CardsInDeck` using its globally unique id and a patch.
  """
  updateCardsInDeck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCardsInDeckInput!
  ): UpdateCardsInDeckPayload

  """Updates a single `CardsInDeck` using a unique key and a patch."""
  updateCardsInDeckById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCardsInDeckByIdInput!
  ): UpdateCardsInDeckPayload

  """
  Updates a single `DeckPlayerAttributeTuple` using its globally unique id and a patch.
  """
  updateDeckPlayerAttributeTuple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeckPlayerAttributeTupleInput!
  ): UpdateDeckPlayerAttributeTuplePayload

  """
  Updates a single `DeckPlayerAttributeTuple` using a unique key and a patch.
  """
  updateDeckPlayerAttributeTupleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeckPlayerAttributeTupleByIdInput!
  ): UpdateDeckPlayerAttributeTuplePayload

  """Updates a single `DeckShare` using its globally unique id and a patch."""
  updateDeckShare(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeckShareInput!
  ): UpdateDeckSharePayload

  """Updates a single `DeckShare` using a unique key and a patch."""
  updateDeckShareByDeckIdAndShareRecipientId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeckShareByDeckIdAndShareRecipientIdInput!
  ): UpdateDeckSharePayload

  """Updates a single `Deck` using its globally unique id and a patch."""
  updateDeck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeckInput!
  ): UpdateDeckPayload

  """Updates a single `Deck` using a unique key and a patch."""
  updateDeckById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDeckByIdInput!
  ): UpdateDeckPayload

  """Updates a single `Friend` using its globally unique id and a patch."""
  updateFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFriendInput!
  ): UpdateFriendPayload

  """Updates a single `Friend` using a unique key and a patch."""
  updateFriendByIdAndFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFriendByIdAndFriendInput!
  ): UpdateFriendPayload

  """Updates a single `GameUser` using its globally unique id and a patch."""
  updateGameUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameUserInput!
  ): UpdateGameUserPayload

  """Updates a single `GameUser` using a unique key and a patch."""
  updateGameUserByGameIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameUserByGameIdAndUserIdInput!
  ): UpdateGameUserPayload

  """Updates a single `Game` using its globally unique id and a patch."""
  updateGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameInput!
  ): UpdateGamePayload

  """Updates a single `Game` using a unique key and a patch."""
  updateGameById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameByIdInput!
  ): UpdateGamePayload

  """Updates a single `GeneratedArt` using a unique key and a patch."""
  updateGeneratedArtByHashAndOwner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeneratedArtByHashAndOwnerInput!
  ): UpdateGeneratedArtPayload

  """Updates a single `Guest` using its globally unique id and a patch."""
  updateGuest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuestInput!
  ): UpdateGuestPayload

  """Updates a single `Guest` using a unique key and a patch."""
  updateGuestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuestByIdInput!
  ): UpdateGuestPayload

  """
  Updates a single `HardRemovalCard` using its globally unique id and a patch.
  """
  updateHardRemovalCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHardRemovalCardInput!
  ): UpdateHardRemovalCardPayload

  """Updates a single `HardRemovalCard` using a unique key and a patch."""
  updateHardRemovalCardByCardId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHardRemovalCardByCardIdInput!
  ): UpdateHardRemovalCardPayload

  """
  Updates a single `MatchmakingQueue` using its globally unique id and a patch.
  """
  updateMatchmakingQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMatchmakingQueueInput!
  ): UpdateMatchmakingQueuePayload

  """Updates a single `MatchmakingQueue` using a unique key and a patch."""
  updateMatchmakingQueueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMatchmakingQueueByIdInput!
  ): UpdateMatchmakingQueuePayload

  """
  Updates a single `MatchmakingTicket` using its globally unique id and a patch.
  """
  updateMatchmakingTicket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMatchmakingTicketInput!
  ): UpdateMatchmakingTicketPayload

  """Updates a single `MatchmakingTicket` using a unique key and a patch."""
  updateMatchmakingTicketByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMatchmakingTicketByUserIdInput!
  ): UpdateMatchmakingTicketPayload

  """
  Updates a single `PublishedCard` using its globally unique id and a patch.
  """
  updatePublishedCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePublishedCardInput!
  ): UpdatePublishedCardPayload

  """Updates a single `PublishedCard` using a unique key and a patch."""
  updatePublishedCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePublishedCardByIdInput!
  ): UpdatePublishedCardPayload

  """Deletes a single `BannedDraftCard` using its globally unique id."""
  deleteBannedDraftCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBannedDraftCardInput!
  ): DeleteBannedDraftCardPayload

  """Deletes a single `BannedDraftCard` using a unique key."""
  deleteBannedDraftCardByCardId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBannedDraftCardByCardIdInput!
  ): DeleteBannedDraftCardPayload

  """Deletes a single `BotUser` using its globally unique id."""
  deleteBotUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBotUserInput!
  ): DeleteBotUserPayload

  """Deletes a single `BotUser` using a unique key."""
  deleteBotUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBotUserByIdInput!
  ): DeleteBotUserPayload

  """Deletes a single `Card` using its globally unique id."""
  deleteCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCardInput!
  ): DeleteCardPayload

  """Deletes a single `Card` using a unique key."""
  deleteCardBySuccession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCardBySuccessionInput!
  ): DeleteCardPayload

  """Deletes a single `CardsInDeck` using its globally unique id."""
  deleteCardsInDeck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCardsInDeckInput!
  ): DeleteCardsInDeckPayload

  """Deletes a single `CardsInDeck` using a unique key."""
  deleteCardsInDeckById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCardsInDeckByIdInput!
  ): DeleteCardsInDeckPayload

  """
  Deletes a single `DeckPlayerAttributeTuple` using its globally unique id.
  """
  deleteDeckPlayerAttributeTuple(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeckPlayerAttributeTupleInput!
  ): DeleteDeckPlayerAttributeTuplePayload

  """Deletes a single `DeckPlayerAttributeTuple` using a unique key."""
  deleteDeckPlayerAttributeTupleById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeckPlayerAttributeTupleByIdInput!
  ): DeleteDeckPlayerAttributeTuplePayload

  """Deletes a single `DeckShare` using its globally unique id."""
  deleteDeckShare(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeckShareInput!
  ): DeleteDeckSharePayload

  """Deletes a single `DeckShare` using a unique key."""
  deleteDeckShareByDeckIdAndShareRecipientId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeckShareByDeckIdAndShareRecipientIdInput!
  ): DeleteDeckSharePayload

  """Deletes a single `Deck` using its globally unique id."""
  deleteDeck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeckInput!
  ): DeleteDeckPayload

  """Deletes a single `Deck` using a unique key."""
  deleteDeckById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDeckByIdInput!
  ): DeleteDeckPayload

  """Deletes a single `Friend` using its globally unique id."""
  deleteFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFriendInput!
  ): DeleteFriendPayload

  """Deletes a single `Friend` using a unique key."""
  deleteFriendByIdAndFriend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFriendByIdAndFriendInput!
  ): DeleteFriendPayload

  """Deletes a single `GameUser` using its globally unique id."""
  deleteGameUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameUserInput!
  ): DeleteGameUserPayload

  """Deletes a single `GameUser` using a unique key."""
  deleteGameUserByGameIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameUserByGameIdAndUserIdInput!
  ): DeleteGameUserPayload

  """Deletes a single `Game` using its globally unique id."""
  deleteGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameInput!
  ): DeleteGamePayload

  """Deletes a single `Game` using a unique key."""
  deleteGameById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameByIdInput!
  ): DeleteGamePayload

  """Deletes a single `GeneratedArt` using a unique key."""
  deleteGeneratedArtByHashAndOwner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeneratedArtByHashAndOwnerInput!
  ): DeleteGeneratedArtPayload

  """Deletes a single `Guest` using its globally unique id."""
  deleteGuest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuestInput!
  ): DeleteGuestPayload

  """Deletes a single `Guest` using a unique key."""
  deleteGuestById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuestByIdInput!
  ): DeleteGuestPayload

  """Deletes a single `HardRemovalCard` using its globally unique id."""
  deleteHardRemovalCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHardRemovalCardInput!
  ): DeleteHardRemovalCardPayload

  """Deletes a single `HardRemovalCard` using a unique key."""
  deleteHardRemovalCardByCardId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHardRemovalCardByCardIdInput!
  ): DeleteHardRemovalCardPayload

  """Deletes a single `MatchmakingQueue` using its globally unique id."""
  deleteMatchmakingQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMatchmakingQueueInput!
  ): DeleteMatchmakingQueuePayload

  """Deletes a single `MatchmakingQueue` using a unique key."""
  deleteMatchmakingQueueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMatchmakingQueueByIdInput!
  ): DeleteMatchmakingQueuePayload

  """Deletes a single `MatchmakingTicket` using its globally unique id."""
  deleteMatchmakingTicket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMatchmakingTicketInput!
  ): DeleteMatchmakingTicketPayload

  """Deletes a single `MatchmakingTicket` using a unique key."""
  deleteMatchmakingTicketByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMatchmakingTicketByUserIdInput!
  ): DeleteMatchmakingTicketPayload

  """Deletes a single `PublishedCard` using its globally unique id."""
  deletePublishedCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePublishedCardInput!
  ): DeletePublishedCardPayload

  """Deletes a single `PublishedCard` using a unique key."""
  deletePublishedCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePublishedCardByIdInput!
  ): DeletePublishedCardPayload
  archiveCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveCardInput!
  ): ArchiveCardPayload
  cardCatalogueFormats(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueFormatsInput!
  ): CardCatalogueFormatsPayload
  cardCatalogueGetBannedDraftCards(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetBannedDraftCardsInput!
  ): CardCatalogueGetBannedDraftCardsPayload
  cardCatalogueGetBaseClasses(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetBaseClassesInput!
  ): CardCatalogueGetBaseClassesPayload
  cardCatalogueGetCardById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetCardByIdInput!
  ): CardCatalogueGetCardByIdPayload
  cardCatalogueGetCardByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetCardByNameInput!
  ): CardCatalogueGetCardByNamePayload
  cardCatalogueGetCardByNameAndClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetCardByNameAndClassInput!
  ): CardCatalogueGetCardByNameAndClassPayload
  cardCatalogueGetClassCards(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetClassCardsInput!
  ): CardCatalogueGetClassCardsPayload
  cardCatalogueGetFormat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetFormatInput!
  ): CardCatalogueGetFormatPayload
  cardCatalogueGetHardRemovalCards(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetHardRemovalCardsInput!
  ): CardCatalogueGetHardRemovalCardsPayload
  cardCatalogueGetHeroCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueGetHeroCardInput!
  ): CardCatalogueGetHeroCardPayload
  cardCatalogueQuery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CardCatalogueQueryInput!
  ): CardCatalogueQueryPayload
  clusteredGamesUpdateGameAndUsers(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ClusteredGamesUpdateGameAndUsersInput!
  ): ClusteredGamesUpdateGameAndUsersPayload
  createDeckWithCards(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDeckWithCardsInput!
  ): CreateDeckWithCardsPayload
  getClasses(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetClassesInput!
  ): GetClassesPayload
  getCollectionCards(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetCollectionCardsInput!
  ): GetCollectionCardsPayload
  getUserAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetUserAttributeInput!
  ): GetUserAttributePayload
  publishCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PublishCardInput!
  ): PublishCardPayload
  publishGitCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PublishGitCardInput!
  ): PublishGitCardPayload
  saveCard(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SaveCardInput!
  ): SaveCardPayload
  saveGeneratedArt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SaveGeneratedArtInput!
  ): SaveGeneratedArtPayload
  setCardsInDeck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetCardsInDeckInput!
  ): SetCardsInDeckPayload
  setUserAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetUserAttributeInput!
  ): SetUserAttributePayload

  """Upserts a single `BannedDraftCard`."""
  upsertBannedDraftCard(
    where: UpsertBannedDraftCardWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertBannedDraftCardInput!
  ): UpsertBannedDraftCardPayload

  """Upserts a single `BotUser`."""
  upsertBotUser(
    where: UpsertBotUserWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertBotUserInput!
  ): UpsertBotUserPayload

  """Upserts a single `Card`."""
  upsertCard(
    where: UpsertCardWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertCardInput!
  ): UpsertCardPayload

  """Upserts a single `CardsInDeck`."""
  upsertCardsInDeck(
    where: UpsertCardsInDeckWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertCardsInDeckInput!
  ): UpsertCardsInDeckPayload

  """Upserts a single `DeckPlayerAttributeTuple`."""
  upsertDeckPlayerAttributeTuple(
    where: UpsertDeckPlayerAttributeTupleWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertDeckPlayerAttributeTupleInput!
  ): UpsertDeckPlayerAttributeTuplePayload

  """Upserts a single `DeckShare`."""
  upsertDeckShare(
    where: UpsertDeckShareWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertDeckShareInput!
  ): UpsertDeckSharePayload

  """Upserts a single `Deck`."""
  upsertDeck(
    where: UpsertDeckWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertDeckInput!
  ): UpsertDeckPayload

  """Upserts a single `Friend`."""
  upsertFriend(
    where: UpsertFriendWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertFriendInput!
  ): UpsertFriendPayload

  """Upserts a single `GameUser`."""
  upsertGameUser(
    where: UpsertGameUserWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertGameUserInput!
  ): UpsertGameUserPayload

  """Upserts a single `Game`."""
  upsertGame(
    where: UpsertGameWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertGameInput!
  ): UpsertGamePayload

  """Upserts a single `Guest`."""
  upsertGuest(
    where: UpsertGuestWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertGuestInput!
  ): UpsertGuestPayload

  """Upserts a single `HardRemovalCard`."""
  upsertHardRemovalCard(
    where: UpsertHardRemovalCardWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertHardRemovalCardInput!
  ): UpsertHardRemovalCardPayload

  """Upserts a single `MatchmakingQueue`."""
  upsertMatchmakingQueue(
    where: UpsertMatchmakingQueueWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertMatchmakingQueueInput!
  ): UpsertMatchmakingQueuePayload

  """Upserts a single `MatchmakingTicket`."""
  upsertMatchmakingTicket(
    where: UpsertMatchmakingTicketWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertMatchmakingTicketInput!
  ): UpsertMatchmakingTicketPayload

  """Upserts a single `PublishedCard`."""
  upsertPublishedCard(
    where: UpsertPublishedCardWhere

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpsertPublishedCardInput!
  ): UpsertPublishedCardPayload
  generateArt(positiveText: String!, negativeText: String!, seed: Int!): GenerateArtResult
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `BannedDraftCard` values."""
type BannedDraftCardsConnection {
  """A list of `BannedDraftCard` objects."""
  nodes: [BannedDraftCard]!

  """
  A list of edges which contains the `BannedDraftCard` and cursor to aid in pagination.
  """
  edges: [BannedDraftCardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `BannedDraftCard` you could get from the connection.
  """
  totalCount: Int!
}

type BannedDraftCard implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  cardId: String!
}

"""A `BannedDraftCard` edge in the connection."""
type BannedDraftCardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BannedDraftCard` at the end of the edge."""
  node: BannedDraftCard
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `BannedDraftCard`."""
enum BannedDraftCardsOrderBy {
  NATURAL
  CARD_ID_ASC
  CARD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BannedDraftCard` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BannedDraftCardCondition {
  """Checks for equality with the object’s `cardId` field."""
  cardId: String
}

"""
A filter to be used against `BannedDraftCard` object types. All fields are combined with a logical ‘and.’
"""
input BannedDraftCardFilter {
  """Filter by the object’s `cardId` field."""
  cardId: StringFilter

  """Checks for all expressions in this list."""
  and: [BannedDraftCardFilter!]

  """Checks for any expressions in this list."""
  or: [BannedDraftCardFilter!]

  """Negates the expression."""
  not: BannedDraftCardFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""A connection to a list of `BotUser` values."""
type BotUsersConnection {
  """A list of `BotUser` objects."""
  nodes: [BotUser]!

  """
  A list of edges which contains the `BotUser` and cursor to aid in pagination.
  """
  edges: [BotUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BotUser` you could get from the connection."""
  totalCount: Int!
}

type BotUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
}

"""A `BotUser` edge in the connection."""
type BotUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BotUser` at the end of the edge."""
  node: BotUser
}

"""Methods to use when ordering `BotUser`."""
enum BotUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BotUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BotUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: String
}

"""
A filter to be used against `BotUser` object types. All fields are combined with a logical ‘and.’
"""
input BotUserFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Checks for all expressions in this list."""
  and: [BotUserFilter!]

  """Checks for any expressions in this list."""
  or: [BotUserFilter!]

  """Negates the expression."""
  not: BotUserFilter
}

"""A connection to a list of `Card` values."""
type CardsConnection {
  """A list of `Card` objects."""
  nodes: [Card]!

  """
  A list of edges which contains the `Card` and cursor to aid in pagination.
  """
  edges: [CardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Card` you could get from the connection."""
  totalCount: Int!
}

type Card implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  createdBy: String!

  """
  The URI of the application that created this card. The git URL by default represents cards that came from the
      Spellsource git repository. https://www.getspellsource.com/cards/editor or similar represents cards authored in the
      web interface
  """
  uri: String
  blocklyWorkspace: JSON
  cardScript: JSON
  createdAt: Datetime!
  lastModified: Datetime!
  isArchived: Boolean!
  isPublished: Boolean!
  succession: BigInt!

  """Reads and enables pagination through a set of `PublishedCard`."""
  publishedCardsBySuccession(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PublishedCard`."""
    orderBy: [PublishedCardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublishedCardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublishedCardFilter
  ): PublishedCardsConnection!
  collectible: Boolean
  cost: Int
  type: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A connection to a list of `PublishedCard` values."""
type PublishedCardsConnection {
  """A list of `PublishedCard` objects."""
  nodes: [PublishedCard]!

  """
  A list of edges which contains the `PublishedCard` and cursor to aid in pagination.
  """
  edges: [PublishedCardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PublishedCard` you could get from the connection."""
  totalCount: Int!
}

type PublishedCard implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  succession: BigInt!

  """Reads a single `Card` that is related to this `PublishedCard`."""
  cardBySuccession: Card

  """Reads and enables pagination through a set of `CardsInDeck`."""
  cardsInDecksByCardId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CardsInDeck`."""
    orderBy: [CardsInDecksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CardsInDeckCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CardsInDeckFilter
  ): CardsInDecksConnection!
}

"""A connection to a list of `CardsInDeck` values."""
type CardsInDecksConnection {
  """A list of `CardsInDeck` objects."""
  nodes: [CardsInDeck]!

  """
  A list of edges which contains the `CardsInDeck` and cursor to aid in pagination.
  """
  edges: [CardsInDecksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CardsInDeck` you could get from the connection."""
  totalCount: Int!
}

type CardsInDeck implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!

  """deleting a deck deletes all its card references"""
  deckId: String!

  """cannot delete cards that are currently used in decks"""
  cardId: String!

  """Reads a single `Deck` that is related to this `CardsInDeck`."""
  deckByDeckId: Deck

  """Reads a single `PublishedCard` that is related to this `CardsInDeck`."""
  publishedCardByCardId: PublishedCard
  cardByCardId: Card
}

type Deck implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!

  """who created this deck originally"""
  createdBy: String!

  """who last edited this deck"""
  lastEditedBy: String!
  name: String
  heroClass: String
  trashed: Boolean!
  format: String
  deckType: Int!

  """premades always shared with all users by application logic"""
  isPremade: Boolean!
  permittedToDuplicate: Boolean!

  """Reads and enables pagination through a set of `CardsInDeck`."""
  cardsInDecksByDeckId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CardsInDeck`."""
    orderBy: [CardsInDecksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CardsInDeckCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CardsInDeckFilter
  ): CardsInDecksConnection!

  """
  Reads and enables pagination through a set of `DeckPlayerAttributeTuple`.
  """
  deckPlayerAttributeTuplesByDeckId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DeckPlayerAttributeTuple`."""
    orderBy: [DeckPlayerAttributeTuplesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeckPlayerAttributeTupleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DeckPlayerAttributeTupleFilter
  ): DeckPlayerAttributeTuplesConnection!

  """Reads and enables pagination through a set of `DeckShare`."""
  deckSharesByDeckId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DeckShare`."""
    orderBy: [DeckSharesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DeckShareCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DeckShareFilter
  ): DeckSharesConnection!

  """Reads and enables pagination through a set of `GameUser`."""
  gameUsersByDeckId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GameUser`."""
    orderBy: [GameUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameUserFilter
  ): GameUsersConnection!

  """Reads and enables pagination through a set of `MatchmakingTicket`."""
  matchmakingTicketsByDeckId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MatchmakingTicket`."""
    orderBy: [MatchmakingTicketsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchmakingTicketCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MatchmakingTicketFilter
  ): MatchmakingTicketsConnection!

  """Reads and enables pagination through a set of `MatchmakingTicket`."""
  matchmakingTicketsByBotDeckId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MatchmakingTicket`."""
    orderBy: [MatchmakingTicketsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchmakingTicketCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MatchmakingTicketFilter
  ): MatchmakingTicketsConnection!
}

"""Methods to use when ordering `CardsInDeck`."""
enum CardsInDecksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DECK_ID_ASC
  DECK_ID_DESC
  CARD_ID_ASC
  CARD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CardsInDeck` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CardsInDeckCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `deckId` field."""
  deckId: String

  """Checks for equality with the object’s `cardId` field."""
  cardId: String
}

"""
A filter to be used against `CardsInDeck` object types. All fields are combined with a logical ‘and.’
"""
input CardsInDeckFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `deckId` field."""
  deckId: StringFilter

  """Filter by the object’s `cardId` field."""
  cardId: StringFilter

  """Checks for all expressions in this list."""
  and: [CardsInDeckFilter!]

  """Checks for any expressions in this list."""
  or: [CardsInDeckFilter!]

  """Negates the expression."""
  not: CardsInDeckFilter
}

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""A connection to a list of `DeckPlayerAttributeTuple` values."""
type DeckPlayerAttributeTuplesConnection {
  """A list of `DeckPlayerAttributeTuple` objects."""
  nodes: [DeckPlayerAttributeTuple]!

  """
  A list of edges which contains the `DeckPlayerAttributeTuple` and cursor to aid in pagination.
  """
  edges: [DeckPlayerAttributeTuplesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DeckPlayerAttributeTuple` you could get from the connection.
  """
  totalCount: Int!
}

type DeckPlayerAttributeTuple implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  deckId: String!
  attribute: Int!
  stringValue: String

  """
  Reads a single `Deck` that is related to this `DeckPlayerAttributeTuple`.
  """
  deckByDeckId: Deck
}

"""A `DeckPlayerAttributeTuple` edge in the connection."""
type DeckPlayerAttributeTuplesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DeckPlayerAttributeTuple` at the end of the edge."""
  node: DeckPlayerAttributeTuple
}

"""Methods to use when ordering `DeckPlayerAttributeTuple`."""
enum DeckPlayerAttributeTuplesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DECK_ID_ASC
  DECK_ID_DESC
  ATTRIBUTE_ASC
  ATTRIBUTE_DESC
  STRING_VALUE_ASC
  STRING_VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DeckPlayerAttributeTuple` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input DeckPlayerAttributeTupleCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `deckId` field."""
  deckId: String

  """Checks for equality with the object’s `attribute` field."""
  attribute: Int

  """Checks for equality with the object’s `stringValue` field."""
  stringValue: String
}

"""
A filter to be used against `DeckPlayerAttributeTuple` object types. All fields are combined with a logical ‘and.’
"""
input DeckPlayerAttributeTupleFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `deckId` field."""
  deckId: StringFilter

  """Filter by the object’s `attribute` field."""
  attribute: IntFilter

  """Filter by the object’s `stringValue` field."""
  stringValue: StringFilter

  """Checks for all expressions in this list."""
  and: [DeckPlayerAttributeTupleFilter!]

  """Checks for any expressions in this list."""
  or: [DeckPlayerAttributeTupleFilter!]

  """Negates the expression."""
  not: DeckPlayerAttributeTupleFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""A connection to a list of `DeckShare` values."""
type DeckSharesConnection {
  """A list of `DeckShare` objects."""
  nodes: [DeckShare]!

  """
  A list of edges which contains the `DeckShare` and cursor to aid in pagination.
  """
  edges: [DeckSharesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DeckShare` you could get from the connection."""
  totalCount: Int!
}

"""indicates a deck shared to a player"""
type DeckShare implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  deckId: String!
  shareRecipientId: String!
  trashedByRecipient: Boolean!

  """Reads a single `Deck` that is related to this `DeckShare`."""
  deckByDeckId: Deck
}

"""A `DeckShare` edge in the connection."""
type DeckSharesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DeckShare` at the end of the edge."""
  node: DeckShare
}

"""Methods to use when ordering `DeckShare`."""
enum DeckSharesOrderBy {
  NATURAL
  DECK_ID_ASC
  DECK_ID_DESC
  SHARE_RECIPIENT_ID_ASC
  SHARE_RECIPIENT_ID_DESC
  TRASHED_BY_RECIPIENT_ASC
  TRASHED_BY_RECIPIENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DeckShare` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DeckShareCondition {
  """Checks for equality with the object’s `deckId` field."""
  deckId: String

  """Checks for equality with the object’s `shareRecipientId` field."""
  shareRecipientId: String

  """Checks for equality with the object’s `trashedByRecipient` field."""
  trashedByRecipient: Boolean
}

"""
A filter to be used against `DeckShare` object types. All fields are combined with a logical ‘and.’
"""
input DeckShareFilter {
  """Filter by the object’s `deckId` field."""
  deckId: StringFilter

  """Filter by the object’s `shareRecipientId` field."""
  shareRecipientId: StringFilter

  """Filter by the object’s `trashedByRecipient` field."""
  trashedByRecipient: BooleanFilter

  """Checks for all expressions in this list."""
  and: [DeckShareFilter!]

  """Checks for any expressions in this list."""
  or: [DeckShareFilter!]

  """Negates the expression."""
  not: DeckShareFilter
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""A connection to a list of `GameUser` values."""
type GameUsersConnection {
  """A list of `GameUser` objects."""
  nodes: [GameUser]!

  """
  A list of edges which contains the `GameUser` and cursor to aid in pagination.
  """
  edges: [GameUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GameUser` you could get from the connection."""
  totalCount: Int!
}

type GameUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerIndex: Int
  gameId: BigInt!
  userId: String!
  deckId: String
  victoryStatus: GameUserVictoryEnum!

  """Reads a single `Game` that is related to this `GameUser`."""
  gameByGameId: Game

  """Reads a single `Deck` that is related to this `GameUser`."""
  deckByDeckId: Deck
}

enum GameUserVictoryEnum {
  UNKNOWN
  WON
  LOST
  DISCONNECTED
  CONCEDED
}

type Game implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  status: GameStateEnum!
  gitHash: String
  trace: JSON
  createdAt: Datetime!

  """Reads and enables pagination through a set of `GameUser`."""
  gameUsersByGameId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GameUser`."""
    orderBy: [GameUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameUserFilter
  ): GameUsersConnection!
}

enum GameStateEnum {
  AWAITING_CONNECTIONS
  STARTED
  FINISHED
}

"""Methods to use when ordering `GameUser`."""
enum GameUsersOrderBy {
  NATURAL
  PLAYER_INDEX_ASC
  PLAYER_INDEX_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  DECK_ID_ASC
  DECK_ID_DESC
  VICTORY_STATUS_ASC
  VICTORY_STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GameUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GameUserCondition {
  """Checks for equality with the object’s `playerIndex` field."""
  playerIndex: Int

  """Checks for equality with the object’s `gameId` field."""
  gameId: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `deckId` field."""
  deckId: String

  """Checks for equality with the object’s `victoryStatus` field."""
  victoryStatus: GameUserVictoryEnum
}

"""
A filter to be used against `GameUser` object types. All fields are combined with a logical ‘and.’
"""
input GameUserFilter {
  """Filter by the object’s `playerIndex` field."""
  playerIndex: IntFilter

  """Filter by the object’s `gameId` field."""
  gameId: BigIntFilter

  """Filter by the object’s `userId` field."""
  userId: StringFilter

  """Filter by the object’s `deckId` field."""
  deckId: StringFilter

  """Filter by the object’s `victoryStatus` field."""
  victoryStatus: GameUserVictoryEnumFilter

  """Checks for all expressions in this list."""
  and: [GameUserFilter!]

  """Checks for any expressions in this list."""
  or: [GameUserFilter!]

  """Negates the expression."""
  not: GameUserFilter
}

"""
A filter to be used against GameUserVictoryEnum fields. All fields are combined with a logical ‘and.’
"""
input GameUserVictoryEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: GameUserVictoryEnum

  """Not equal to the specified value."""
  notEqualTo: GameUserVictoryEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: GameUserVictoryEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: GameUserVictoryEnum

  """Included in the specified list."""
  in: [GameUserVictoryEnum!]

  """Not included in the specified list."""
  notIn: [GameUserVictoryEnum!]

  """Less than the specified value."""
  lessThan: GameUserVictoryEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: GameUserVictoryEnum

  """Greater than the specified value."""
  greaterThan: GameUserVictoryEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: GameUserVictoryEnum
}

"""A `GameUser` edge in the connection."""
type GameUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GameUser` at the end of the edge."""
  node: GameUser
}

"""A connection to a list of `MatchmakingTicket` values."""
type MatchmakingTicketsConnection {
  """A list of `MatchmakingTicket` objects."""
  nodes: [MatchmakingTicket]!

  """
  A list of edges which contains the `MatchmakingTicket` and cursor to aid in pagination.
  """
  edges: [MatchmakingTicketsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MatchmakingTicket` you could get from the connection.
  """
  totalCount: Int!
}

type MatchmakingTicket implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ticketId: BigInt!
  queueId: String
  userId: String!
  deckId: String
  botDeckId: String
  createdAt: Datetime!

  """
  Reads a single `MatchmakingQueue` that is related to this `MatchmakingTicket`.
  """
  matchmakingQueueByQueueId: MatchmakingQueue

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByDeckId: Deck

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByBotDeckId: Deck
}

type MatchmakingQueue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  name: String!
  botOpponent: Boolean!
  privateLobby: Boolean!
  startsAutomatically: Boolean!
  stillConnectedTimeout: BigInt!
  emptyLobbyTimeout: BigInt!
  awaitingLobbyTimeout: BigInt!
  once: Boolean!
  automaticallyClose: Boolean!
  lobbySize: Int!
  queueCreatedAt: Datetime!

  """Reads and enables pagination through a set of `MatchmakingTicket`."""
  matchmakingTicketsByQueueId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MatchmakingTicket`."""
    orderBy: [MatchmakingTicketsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchmakingTicketCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MatchmakingTicketFilter
  ): MatchmakingTicketsConnection!
}

"""Methods to use when ordering `MatchmakingTicket`."""
enum MatchmakingTicketsOrderBy {
  NATURAL
  TICKET_ID_ASC
  TICKET_ID_DESC
  QUEUE_ID_ASC
  QUEUE_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  DECK_ID_ASC
  DECK_ID_DESC
  BOT_DECK_ID_ASC
  BOT_DECK_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MatchmakingTicket` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MatchmakingTicketCondition {
  """Checks for equality with the object’s `ticketId` field."""
  ticketId: BigInt

  """Checks for equality with the object’s `queueId` field."""
  queueId: String

  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `deckId` field."""
  deckId: String

  """Checks for equality with the object’s `botDeckId` field."""
  botDeckId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `MatchmakingTicket` object types. All fields are combined with a logical ‘and.’
"""
input MatchmakingTicketFilter {
  """Filter by the object’s `ticketId` field."""
  ticketId: BigIntFilter

  """Filter by the object’s `queueId` field."""
  queueId: StringFilter

  """Filter by the object’s `userId` field."""
  userId: StringFilter

  """Filter by the object’s `deckId` field."""
  deckId: StringFilter

  """Filter by the object’s `botDeckId` field."""
  botDeckId: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [MatchmakingTicketFilter!]

  """Checks for any expressions in this list."""
  or: [MatchmakingTicketFilter!]

  """Negates the expression."""
  not: MatchmakingTicketFilter
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""A `MatchmakingTicket` edge in the connection."""
type MatchmakingTicketsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MatchmakingTicket` at the end of the edge."""
  node: MatchmakingTicket
}

"""A `CardsInDeck` edge in the connection."""
type CardsInDecksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CardsInDeck` at the end of the edge."""
  node: CardsInDeck
}

"""A `PublishedCard` edge in the connection."""
type PublishedCardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublishedCard` at the end of the edge."""
  node: PublishedCard
}

"""Methods to use when ordering `PublishedCard`."""
enum PublishedCardsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SUCCESSION_ASC
  SUCCESSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PublishedCard` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PublishedCardCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `succession` field."""
  succession: BigInt
}

"""
A filter to be used against `PublishedCard` object types. All fields are combined with a logical ‘and.’
"""
input PublishedCardFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `succession` field."""
  succession: BigIntFilter

  """Checks for all expressions in this list."""
  and: [PublishedCardFilter!]

  """Checks for any expressions in this list."""
  or: [PublishedCardFilter!]

  """Negates the expression."""
  not: PublishedCardFilter
}

"""A `Card` edge in the connection."""
type CardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Card` at the end of the edge."""
  node: Card
}

"""Methods to use when ordering `Card`."""
enum CardsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  URI_ASC
  URI_DESC
  BLOCKLY_WORKSPACE_ASC
  BLOCKLY_WORKSPACE_DESC
  CARD_SCRIPT_ASC
  CARD_SCRIPT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LAST_MODIFIED_ASC
  LAST_MODIFIED_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  SUCCESSION_ASC
  SUCCESSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Card` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CardCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `uri` field."""
  uri: String

  """Checks for equality with the object’s `blocklyWorkspace` field."""
  blocklyWorkspace: JSON

  """Checks for equality with the object’s `cardScript` field."""
  cardScript: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lastModified` field."""
  lastModified: Datetime

  """Checks for equality with the object’s `isArchived` field."""
  isArchived: Boolean

  """Checks for equality with the object’s `isPublished` field."""
  isPublished: Boolean

  """Checks for equality with the object’s `succession` field."""
  succession: BigInt
}

"""
A filter to be used against `Card` object types. All fields are combined with a logical ‘and.’
"""
input CardFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: StringFilter

  """Filter by the object’s `uri` field."""
  uri: StringFilter

  """Filter by the object’s `blocklyWorkspace` field."""
  blocklyWorkspace: JSONFilter

  """Filter by the object’s `cardScript` field."""
  cardScript: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lastModified` field."""
  lastModified: DatetimeFilter

  """Filter by the object’s `isArchived` field."""
  isArchived: BooleanFilter

  """Filter by the object’s `isPublished` field."""
  isPublished: BooleanFilter

  """Filter by the object’s `succession` field."""
  succession: BigIntFilter

  """Filter by the object’s `collectible` field."""
  collectible: BooleanFilter

  """Filter by the object’s `cost` field."""
  cost: IntFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Checks for all expressions in this list."""
  and: [CardFilter!]

  """Checks for any expressions in this list."""
  or: [CardFilter!]

  """Negates the expression."""
  not: CardFilter
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""
Indicates whether archived items should be included in the results or not.
"""
enum IncludeArchivedOption {
  """Exclude archived items."""
  NO

  """Include archived items."""
  YES

  """Only include archived items (i.e. exclude non-archived items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is archived then this is equivalent to YES, in all other cases this is equivalent to NO.
  """
  INHERIT
}

"""A connection to a list of `Class` values."""
type ClassesConnection {
  """A list of `Class` objects."""
  nodes: [Class]!

  """
  A list of edges which contains the `Class` and cursor to aid in pagination.
  """
  edges: [ClassesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Class` you could get from the connection."""
  totalCount: Int!
}

type Class {
  createdBy: String
  class: String
  isPublished: Boolean
  collectible: Boolean
  cardScript: JSON
  id: String
  name: String
}

"""A `Class` edge in the connection."""
type ClassesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Class` at the end of the edge."""
  node: Class
}

"""Methods to use when ordering `Class`."""
enum ClassesOrderBy {
  NATURAL
  CREATED_BY_ASC
  CREATED_BY_DESC
  CLASS_ASC
  CLASS_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  COLLECTIBLE_ASC
  COLLECTIBLE_DESC
  CARD_SCRIPT_ASC
  CARD_SCRIPT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
}

"""
A condition to be used against `Class` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ClassCondition {
  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `class` field."""
  class: String

  """Checks for equality with the object’s `isPublished` field."""
  isPublished: Boolean

  """Checks for equality with the object’s `collectible` field."""
  collectible: Boolean

  """Checks for equality with the object’s `cardScript` field."""
  cardScript: JSON

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `Class` object types. All fields are combined with a logical ‘and.’
"""
input ClassFilter {
  """Filter by the object’s `createdBy` field."""
  createdBy: StringFilter

  """Filter by the object’s `class` field."""
  class: StringFilter

  """Filter by the object’s `isPublished` field."""
  isPublished: BooleanFilter

  """Filter by the object’s `collectible` field."""
  collectible: BooleanFilter

  """Filter by the object’s `cardScript` field."""
  cardScript: JSONFilter

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [ClassFilter!]

  """Checks for any expressions in this list."""
  or: [ClassFilter!]

  """Negates the expression."""
  not: ClassFilter
}

"""A connection to a list of `CollectionCard` values."""
type CollectionCardsConnection {
  """A list of `CollectionCard` objects."""
  nodes: [CollectionCard]!

  """
  A list of edges which contains the `CollectionCard` and cursor to aid in pagination.
  """
  edges: [CollectionCardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CollectionCard` you could get from the connection."""
  totalCount: Int!
}

type CollectionCard {
  id: String
  createdBy: String
  cardScript: JSON
  blocklyWorkspace: JSON
  name: String
  type: String
  class: String
  cost: Int
  collectible: Boolean
  searchMessage: String
  lastModified: Datetime
  createdAt: Datetime
}

"""A `CollectionCard` edge in the connection."""
type CollectionCardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionCard` at the end of the edge."""
  node: CollectionCard
}

"""Methods to use when ordering `CollectionCard`."""
enum CollectionCardsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CARD_SCRIPT_ASC
  CARD_SCRIPT_DESC
  BLOCKLY_WORKSPACE_ASC
  BLOCKLY_WORKSPACE_DESC
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  CLASS_ASC
  CLASS_DESC
  COST_ASC
  COST_DESC
  COLLECTIBLE_ASC
  COLLECTIBLE_DESC
  SEARCH_MESSAGE_ASC
  SEARCH_MESSAGE_DESC
  LAST_MODIFIED_ASC
  LAST_MODIFIED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""
A condition to be used against `CollectionCard` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionCardCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `cardScript` field."""
  cardScript: JSON

  """Checks for equality with the object’s `blocklyWorkspace` field."""
  blocklyWorkspace: JSON

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `class` field."""
  class: String

  """Checks for equality with the object’s `cost` field."""
  cost: Int

  """Checks for equality with the object’s `collectible` field."""
  collectible: Boolean

  """Checks for equality with the object’s `searchMessage` field."""
  searchMessage: String

  """Checks for equality with the object’s `lastModified` field."""
  lastModified: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `CollectionCard` object types. All fields are combined with a logical ‘and.’
"""
input CollectionCardFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: StringFilter

  """Filter by the object’s `cardScript` field."""
  cardScript: JSONFilter

  """Filter by the object’s `blocklyWorkspace` field."""
  blocklyWorkspace: JSONFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `class` field."""
  class: StringFilter

  """Filter by the object’s `cost` field."""
  cost: IntFilter

  """Filter by the object’s `collectible` field."""
  collectible: BooleanFilter

  """Filter by the object’s `searchMessage` field."""
  searchMessage: StringFilter

  """Filter by the object’s `lastModified` field."""
  lastModified: DatetimeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [CollectionCardFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionCardFilter!]

  """Negates the expression."""
  not: CollectionCardFilter
}

"""A connection to a list of `Deck` values."""
type DecksConnection {
  """A list of `Deck` objects."""
  nodes: [Deck]!

  """
  A list of edges which contains the `Deck` and cursor to aid in pagination.
  """
  edges: [DecksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Deck` you could get from the connection."""
  totalCount: Int!
}

"""A `Deck` edge in the connection."""
type DecksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Deck` at the end of the edge."""
  node: Deck
}

"""Methods to use when ordering `Deck`."""
enum DecksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  LAST_EDITED_BY_ASC
  LAST_EDITED_BY_DESC
  NAME_ASC
  NAME_DESC
  HERO_CLASS_ASC
  HERO_CLASS_DESC
  TRASHED_ASC
  TRASHED_DESC
  FORMAT_ASC
  FORMAT_DESC
  DECK_TYPE_ASC
  DECK_TYPE_DESC
  IS_PREMADE_ASC
  IS_PREMADE_DESC
  PERMITTED_TO_DUPLICATE_ASC
  PERMITTED_TO_DUPLICATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Deck` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DeckCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `lastEditedBy` field."""
  lastEditedBy: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `heroClass` field."""
  heroClass: String

  """Checks for equality with the object’s `trashed` field."""
  trashed: Boolean

  """Checks for equality with the object’s `format` field."""
  format: String

  """Checks for equality with the object’s `deckType` field."""
  deckType: Int

  """Checks for equality with the object’s `isPremade` field."""
  isPremade: Boolean

  """Checks for equality with the object’s `permittedToDuplicate` field."""
  permittedToDuplicate: Boolean
}

"""
A filter to be used against `Deck` object types. All fields are combined with a logical ‘and.’
"""
input DeckFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: StringFilter

  """Filter by the object’s `lastEditedBy` field."""
  lastEditedBy: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `heroClass` field."""
  heroClass: StringFilter

  """Filter by the object’s `trashed` field."""
  trashed: BooleanFilter

  """Filter by the object’s `format` field."""
  format: StringFilter

  """Filter by the object’s `deckType` field."""
  deckType: IntFilter

  """Filter by the object’s `isPremade` field."""
  isPremade: BooleanFilter

  """Filter by the object’s `permittedToDuplicate` field."""
  permittedToDuplicate: BooleanFilter

  """Checks for all expressions in this list."""
  and: [DeckFilter!]

  """Checks for any expressions in this list."""
  or: [DeckFilter!]

  """Negates the expression."""
  not: DeckFilter
}

"""A connection to a list of `Friend` values."""
type FriendsConnection {
  """A list of `Friend` objects."""
  nodes: [Friend]!

  """
  A list of edges which contains the `Friend` and cursor to aid in pagination.
  """
  edges: [FriendsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Friend` you could get from the connection."""
  totalCount: Int!
}

type Friend implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  friend: String!
  createdAt: Datetime!
}

"""A `Friend` edge in the connection."""
type FriendsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Friend` at the end of the edge."""
  node: Friend
}

"""Methods to use when ordering `Friend`."""
enum FriendsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FRIEND_ASC
  FRIEND_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Friend` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FriendCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `friend` field."""
  friend: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Friend` object types. All fields are combined with a logical ‘and.’
"""
input FriendFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `friend` field."""
  friend: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [FriendFilter!]

  """Checks for any expressions in this list."""
  or: [FriendFilter!]

  """Negates the expression."""
  not: FriendFilter
}

"""A connection to a list of `Game` values."""
type GamesConnection {
  """A list of `Game` objects."""
  nodes: [Game]!

  """
  A list of edges which contains the `Game` and cursor to aid in pagination.
  """
  edges: [GamesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Game` you could get from the connection."""
  totalCount: Int!
}

"""A `Game` edge in the connection."""
type GamesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Game` at the end of the edge."""
  node: Game
}

"""Methods to use when ordering `Game`."""
enum GamesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  STATUS_ASC
  STATUS_DESC
  GIT_HASH_ASC
  GIT_HASH_DESC
  TRACE_ASC
  TRACE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Game` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GameCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `status` field."""
  status: GameStateEnum

  """Checks for equality with the object’s `gitHash` field."""
  gitHash: String

  """Checks for equality with the object’s `trace` field."""
  trace: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Game` object types. All fields are combined with a logical ‘and.’
"""
input GameFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `status` field."""
  status: GameStateEnumFilter

  """Filter by the object’s `gitHash` field."""
  gitHash: StringFilter

  """Filter by the object’s `trace` field."""
  trace: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [GameFilter!]

  """Checks for any expressions in this list."""
  or: [GameFilter!]

  """Negates the expression."""
  not: GameFilter
}

"""
A filter to be used against GameStateEnum fields. All fields are combined with a logical ‘and.’
"""
input GameStateEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: GameStateEnum

  """Not equal to the specified value."""
  notEqualTo: GameStateEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: GameStateEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: GameStateEnum

  """Included in the specified list."""
  in: [GameStateEnum!]

  """Not included in the specified list."""
  notIn: [GameStateEnum!]

  """Less than the specified value."""
  lessThan: GameStateEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: GameStateEnum

  """Greater than the specified value."""
  greaterThan: GameStateEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: GameStateEnum
}

"""A connection to a list of `GeneratedArt` values."""
type GeneratedArtsConnection {
  """A list of `GeneratedArt` objects."""
  nodes: [GeneratedArt]!

  """
  A list of edges which contains the `GeneratedArt` and cursor to aid in pagination.
  """
  edges: [GeneratedArtsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GeneratedArt` you could get from the connection."""
  totalCount: Int!
}

type GeneratedArt {
  hash: String!
  owner: String!
  urls: [String]!
  info: JSON
  isArchived: Boolean!
}

"""A `GeneratedArt` edge in the connection."""
type GeneratedArtsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GeneratedArt` at the end of the edge."""
  node: GeneratedArt
}

"""Methods to use when ordering `GeneratedArt`."""
enum GeneratedArtsOrderBy {
  NATURAL
  HASH_ASC
  HASH_DESC
  OWNER_ASC
  OWNER_DESC
  URLS_ASC
  URLS_DESC
  INFO_ASC
  INFO_DESC
  IS_ARCHIVED_ASC
  IS_ARCHIVED_DESC
}

"""
A condition to be used against `GeneratedArt` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GeneratedArtCondition {
  """Checks for equality with the object’s `hash` field."""
  hash: String

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `urls` field."""
  urls: [String]

  """Checks for equality with the object’s `info` field."""
  info: JSON

  """Checks for equality with the object’s `isArchived` field."""
  isArchived: Boolean
}

"""
A filter to be used against `GeneratedArt` object types. All fields are combined with a logical ‘and.’
"""
input GeneratedArtFilter {
  """Filter by the object’s `hash` field."""
  hash: StringFilter

  """Filter by the object’s `owner` field."""
  owner: StringFilter

  """Filter by the object’s `urls` field."""
  urls: StringListFilter

  """Filter by the object’s `info` field."""
  info: JSONFilter

  """Filter by the object’s `isArchived` field."""
  isArchived: BooleanFilter

  """Checks for all expressions in this list."""
  and: [GeneratedArtFilter!]

  """Checks for any expressions in this list."""
  or: [GeneratedArtFilter!]

  """Negates the expression."""
  not: GeneratedArtFilter
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

"""A connection to a list of `Guest` values."""
type GuestsConnection {
  """A list of `Guest` objects."""
  nodes: [Guest]!

  """
  A list of edges which contains the `Guest` and cursor to aid in pagination.
  """
  edges: [GuestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Guest` you could get from the connection."""
  totalCount: Int!
}

type Guest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  userId: String
}

"""A `Guest` edge in the connection."""
type GuestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Guest` at the end of the edge."""
  node: Guest
}

"""Methods to use when ordering `Guest`."""
enum GuestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Guest` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GuestCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `userId` field."""
  userId: String
}

"""
A filter to be used against `Guest` object types. All fields are combined with a logical ‘and.’
"""
input GuestFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `userId` field."""
  userId: StringFilter

  """Checks for all expressions in this list."""
  and: [GuestFilter!]

  """Checks for any expressions in this list."""
  or: [GuestFilter!]

  """Negates the expression."""
  not: GuestFilter
}

"""A connection to a list of `HardRemovalCard` values."""
type HardRemovalCardsConnection {
  """A list of `HardRemovalCard` objects."""
  nodes: [HardRemovalCard]!

  """
  A list of edges which contains the `HardRemovalCard` and cursor to aid in pagination.
  """
  edges: [HardRemovalCardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `HardRemovalCard` you could get from the connection.
  """
  totalCount: Int!
}

type HardRemovalCard implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  cardId: String!
}

"""A `HardRemovalCard` edge in the connection."""
type HardRemovalCardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HardRemovalCard` at the end of the edge."""
  node: HardRemovalCard
}

"""Methods to use when ordering `HardRemovalCard`."""
enum HardRemovalCardsOrderBy {
  NATURAL
  CARD_ID_ASC
  CARD_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `HardRemovalCard` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HardRemovalCardCondition {
  """Checks for equality with the object’s `cardId` field."""
  cardId: String
}

"""
A filter to be used against `HardRemovalCard` object types. All fields are combined with a logical ‘and.’
"""
input HardRemovalCardFilter {
  """Filter by the object’s `cardId` field."""
  cardId: StringFilter

  """Checks for all expressions in this list."""
  and: [HardRemovalCardFilter!]

  """Checks for any expressions in this list."""
  or: [HardRemovalCardFilter!]

  """Negates the expression."""
  not: HardRemovalCardFilter
}

"""A connection to a list of `MatchmakingQueue` values."""
type MatchmakingQueuesConnection {
  """A list of `MatchmakingQueue` objects."""
  nodes: [MatchmakingQueue]!

  """
  A list of edges which contains the `MatchmakingQueue` and cursor to aid in pagination.
  """
  edges: [MatchmakingQueuesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MatchmakingQueue` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MatchmakingQueue` edge in the connection."""
type MatchmakingQueuesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MatchmakingQueue` at the end of the edge."""
  node: MatchmakingQueue
}

"""Methods to use when ordering `MatchmakingQueue`."""
enum MatchmakingQueuesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  BOT_OPPONENT_ASC
  BOT_OPPONENT_DESC
  PRIVATE_LOBBY_ASC
  PRIVATE_LOBBY_DESC
  STARTS_AUTOMATICALLY_ASC
  STARTS_AUTOMATICALLY_DESC
  STILL_CONNECTED_TIMEOUT_ASC
  STILL_CONNECTED_TIMEOUT_DESC
  EMPTY_LOBBY_TIMEOUT_ASC
  EMPTY_LOBBY_TIMEOUT_DESC
  AWAITING_LOBBY_TIMEOUT_ASC
  AWAITING_LOBBY_TIMEOUT_DESC
  ONCE_ASC
  ONCE_DESC
  AUTOMATICALLY_CLOSE_ASC
  AUTOMATICALLY_CLOSE_DESC
  LOBBY_SIZE_ASC
  LOBBY_SIZE_DESC
  QUEUE_CREATED_AT_ASC
  QUEUE_CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MatchmakingQueue` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MatchmakingQueueCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `botOpponent` field."""
  botOpponent: Boolean

  """Checks for equality with the object’s `privateLobby` field."""
  privateLobby: Boolean

  """Checks for equality with the object’s `startsAutomatically` field."""
  startsAutomatically: Boolean

  """Checks for equality with the object’s `stillConnectedTimeout` field."""
  stillConnectedTimeout: BigInt

  """Checks for equality with the object’s `emptyLobbyTimeout` field."""
  emptyLobbyTimeout: BigInt

  """Checks for equality with the object’s `awaitingLobbyTimeout` field."""
  awaitingLobbyTimeout: BigInt

  """Checks for equality with the object’s `once` field."""
  once: Boolean

  """Checks for equality with the object’s `automaticallyClose` field."""
  automaticallyClose: Boolean

  """Checks for equality with the object’s `lobbySize` field."""
  lobbySize: Int

  """Checks for equality with the object’s `queueCreatedAt` field."""
  queueCreatedAt: Datetime
}

"""
A filter to be used against `MatchmakingQueue` object types. All fields are combined with a logical ‘and.’
"""
input MatchmakingQueueFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `botOpponent` field."""
  botOpponent: BooleanFilter

  """Filter by the object’s `privateLobby` field."""
  privateLobby: BooleanFilter

  """Filter by the object’s `startsAutomatically` field."""
  startsAutomatically: BooleanFilter

  """Filter by the object’s `stillConnectedTimeout` field."""
  stillConnectedTimeout: BigIntFilter

  """Filter by the object’s `emptyLobbyTimeout` field."""
  emptyLobbyTimeout: BigIntFilter

  """Filter by the object’s `awaitingLobbyTimeout` field."""
  awaitingLobbyTimeout: BigIntFilter

  """Filter by the object’s `once` field."""
  once: BooleanFilter

  """Filter by the object’s `automaticallyClose` field."""
  automaticallyClose: BooleanFilter

  """Filter by the object’s `lobbySize` field."""
  lobbySize: IntFilter

  """Filter by the object’s `queueCreatedAt` field."""
  queueCreatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [MatchmakingQueueFilter!]

  """Checks for any expressions in this list."""
  or: [MatchmakingQueueFilter!]

  """Negates the expression."""
  not: MatchmakingQueueFilter
}

"""The output of our create `BannedDraftCard` mutation."""
type CreateBannedDraftCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BannedDraftCard` that was created by this mutation."""
  bannedDraftCard: BannedDraftCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BannedDraftCard`. May be used by Relay 1."""
  bannedDraftCardEdge(
    """The method to use when ordering `BannedDraftCard`."""
    orderBy: [BannedDraftCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BannedDraftCardsEdge
}

"""All input for the create `BannedDraftCard` mutation."""
input CreateBannedDraftCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BannedDraftCard` to be created by this mutation."""
  bannedDraftCard: BannedDraftCardInput!
}

"""An input for mutations affecting `BannedDraftCard`"""
input BannedDraftCardInput {
  cardId: String!
}

"""The output of our create `BotUser` mutation."""
type CreateBotUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BotUser` that was created by this mutation."""
  botUser: BotUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BotUser`. May be used by Relay 1."""
  botUserEdge(
    """The method to use when ordering `BotUser`."""
    orderBy: [BotUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotUsersEdge
}

"""All input for the create `BotUser` mutation."""
input CreateBotUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BotUser` to be created by this mutation."""
  botUser: BotUserInput!
}

"""An input for mutations affecting `BotUser`"""
input BotUserInput {
  id: String!
}

"""The output of our create `Card` mutation."""
type CreateCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Card` that was created by this mutation."""
  card: Card

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""All input for the create `Card` mutation."""
input CreateCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Card` to be created by this mutation."""
  card: CardInput!
}

"""An input for mutations affecting `Card`"""
input CardInput {
  id: String!
  createdBy: String!

  """
  The URI of the application that created this card. The git URL by default represents cards that came from the
      Spellsource git repository. https://www.getspellsource.com/cards/editor or similar represents cards authored in the
      web interface
  """
  uri: String
  blocklyWorkspace: JSON
  cardScript: JSON
  createdAt: Datetime
  lastModified: Datetime
  isArchived: Boolean
  isPublished: Boolean
}

"""The output of our create `CardsInDeck` mutation."""
type CreateCardsInDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CardsInDeck` that was created by this mutation."""
  cardsInDeck: CardsInDeck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Deck` that is related to this `CardsInDeck`."""
  deckByDeckId: Deck

  """Reads a single `PublishedCard` that is related to this `CardsInDeck`."""
  publishedCardByCardId: PublishedCard

  """An edge for our `CardsInDeck`. May be used by Relay 1."""
  cardsInDeckEdge(
    """The method to use when ordering `CardsInDeck`."""
    orderBy: [CardsInDecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsInDecksEdge
}

"""All input for the create `CardsInDeck` mutation."""
input CreateCardsInDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CardsInDeck` to be created by this mutation."""
  cardsInDeck: CardsInDeckInput!
}

"""An input for mutations affecting `CardsInDeck`"""
input CardsInDeckInput {
  """deleting a deck deletes all its card references"""
  deckId: String!

  """cannot delete cards that are currently used in decks"""
  cardId: String!
}

"""The output of our create `DeckPlayerAttributeTuple` mutation."""
type CreateDeckPlayerAttributeTuplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeckPlayerAttributeTuple` that was created by this mutation."""
  deckPlayerAttributeTuple: DeckPlayerAttributeTuple

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Deck` that is related to this `DeckPlayerAttributeTuple`.
  """
  deckByDeckId: Deck

  """An edge for our `DeckPlayerAttributeTuple`. May be used by Relay 1."""
  deckPlayerAttributeTupleEdge(
    """The method to use when ordering `DeckPlayerAttributeTuple`."""
    orderBy: [DeckPlayerAttributeTuplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeckPlayerAttributeTuplesEdge
}

"""All input for the create `DeckPlayerAttributeTuple` mutation."""
input CreateDeckPlayerAttributeTupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DeckPlayerAttributeTuple` to be created by this mutation."""
  deckPlayerAttributeTuple: DeckPlayerAttributeTupleInput!
}

"""An input for mutations affecting `DeckPlayerAttributeTuple`"""
input DeckPlayerAttributeTupleInput {
  deckId: String!
  attribute: Int!
  stringValue: String
}

"""The output of our create `DeckShare` mutation."""
type CreateDeckSharePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeckShare` that was created by this mutation."""
  deckShare: DeckShare

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Deck` that is related to this `DeckShare`."""
  deckByDeckId: Deck

  """An edge for our `DeckShare`. May be used by Relay 1."""
  deckShareEdge(
    """The method to use when ordering `DeckShare`."""
    orderBy: [DeckSharesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeckSharesEdge
}

"""All input for the create `DeckShare` mutation."""
input CreateDeckShareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DeckShare` to be created by this mutation."""
  deckShare: DeckShareInput!
}

"""An input for mutations affecting `DeckShare`"""
input DeckShareInput {
  deckId: String!
  shareRecipientId: String!
  trashedByRecipient: Boolean
}

"""The output of our create `Deck` mutation."""
type CreateDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Deck` that was created by this mutation."""
  deck: Deck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Deck`. May be used by Relay 1."""
  deckEdge(
    """The method to use when ordering `Deck`."""
    orderBy: [DecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DecksEdge
}

"""All input for the create `Deck` mutation."""
input CreateDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Deck` to be created by this mutation."""
  deck: DeckInput!
}

"""An input for mutations affecting `Deck`"""
input DeckInput {
  id: String!

  """who created this deck originally"""
  createdBy: String!

  """who last edited this deck"""
  lastEditedBy: String!
  name: String
  heroClass: String
  trashed: Boolean
  format: String
  deckType: Int!

  """premades always shared with all users by application logic"""
  isPremade: Boolean
  permittedToDuplicate: Boolean
}

"""The output of our create `Friend` mutation."""
type CreateFriendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Friend` that was created by this mutation."""
  friend: Friend

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Friend`. May be used by Relay 1."""
  friendEdge(
    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsEdge
}

"""All input for the create `Friend` mutation."""
input CreateFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Friend` to be created by this mutation."""
  friend: FriendInput!
}

"""An input for mutations affecting `Friend`"""
input FriendInput {
  id: String!
  friend: String!
  createdAt: Datetime
}

"""The output of our create `GameUser` mutation."""
type CreateGameUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameUser` that was created by this mutation."""
  gameUser: GameUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameUser`."""
  gameByGameId: Game

  """Reads a single `Deck` that is related to this `GameUser`."""
  deckByDeckId: Deck

  """An edge for our `GameUser`. May be used by Relay 1."""
  gameUserEdge(
    """The method to use when ordering `GameUser`."""
    orderBy: [GameUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GameUsersEdge
}

"""All input for the create `GameUser` mutation."""
input CreateGameUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GameUser` to be created by this mutation."""
  gameUser: GameUserInput!
}

"""An input for mutations affecting `GameUser`"""
input GameUserInput {
  playerIndex: Int
  gameId: BigInt!
  userId: String!
  deckId: String
  victoryStatus: GameUserVictoryEnum
}

"""The output of our create `Game` mutation."""
type CreateGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was created by this mutation."""
  game: Game

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesEdge
}

"""All input for the create `Game` mutation."""
input CreateGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Game` to be created by this mutation."""
  game: GameInput!
}

"""An input for mutations affecting `Game`"""
input GameInput {
  status: GameStateEnum
  gitHash: String
  trace: JSON
  createdAt: Datetime
}

"""The output of our create `GeneratedArt` mutation."""
type CreateGeneratedArtPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeneratedArt` that was created by this mutation."""
  generatedArt: GeneratedArt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GeneratedArt`. May be used by Relay 1."""
  generatedArtEdge(
    """The method to use when ordering `GeneratedArt`."""
    orderBy: [GeneratedArtsOrderBy!] = [NATURAL]
  ): GeneratedArtsEdge
}

"""All input for the create `GeneratedArt` mutation."""
input CreateGeneratedArtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GeneratedArt` to be created by this mutation."""
  generatedArt: GeneratedArtInput!
}

"""An input for mutations affecting `GeneratedArt`"""
input GeneratedArtInput {
  hash: String!
  owner: String
  urls: [String]!
  info: JSON
  isArchived: Boolean
}

"""The output of our create `Guest` mutation."""
type CreateGuestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Guest` that was created by this mutation."""
  guest: Guest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Guest`. May be used by Relay 1."""
  guestEdge(
    """The method to use when ordering `Guest`."""
    orderBy: [GuestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuestsEdge
}

"""All input for the create `Guest` mutation."""
input CreateGuestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Guest` to be created by this mutation."""
  guest: GuestInput!
}

"""An input for mutations affecting `Guest`"""
input GuestInput {
  userId: String
}

"""The output of our create `HardRemovalCard` mutation."""
type CreateHardRemovalCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HardRemovalCard` that was created by this mutation."""
  hardRemovalCard: HardRemovalCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HardRemovalCard`. May be used by Relay 1."""
  hardRemovalCardEdge(
    """The method to use when ordering `HardRemovalCard`."""
    orderBy: [HardRemovalCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HardRemovalCardsEdge
}

"""All input for the create `HardRemovalCard` mutation."""
input CreateHardRemovalCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HardRemovalCard` to be created by this mutation."""
  hardRemovalCard: HardRemovalCardInput!
}

"""An input for mutations affecting `HardRemovalCard`"""
input HardRemovalCardInput {
  cardId: String!
}

"""The output of our create `MatchmakingQueue` mutation."""
type CreateMatchmakingQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MatchmakingQueue` that was created by this mutation."""
  matchmakingQueue: MatchmakingQueue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MatchmakingQueue`. May be used by Relay 1."""
  matchmakingQueueEdge(
    """The method to use when ordering `MatchmakingQueue`."""
    orderBy: [MatchmakingQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchmakingQueuesEdge
}

"""All input for the create `MatchmakingQueue` mutation."""
input CreateMatchmakingQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MatchmakingQueue` to be created by this mutation."""
  matchmakingQueue: MatchmakingQueueInput!
}

"""An input for mutations affecting `MatchmakingQueue`"""
input MatchmakingQueueInput {
  id: String!
  name: String!
  botOpponent: Boolean
  privateLobby: Boolean
  startsAutomatically: Boolean
  stillConnectedTimeout: BigInt
  emptyLobbyTimeout: BigInt
  awaitingLobbyTimeout: BigInt
  once: Boolean
  automaticallyClose: Boolean
  lobbySize: Int
  queueCreatedAt: Datetime
}

"""The output of our create `MatchmakingTicket` mutation."""
type CreateMatchmakingTicketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MatchmakingTicket` that was created by this mutation."""
  matchmakingTicket: MatchmakingTicket

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MatchmakingQueue` that is related to this `MatchmakingTicket`.
  """
  matchmakingQueueByQueueId: MatchmakingQueue

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByDeckId: Deck

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByBotDeckId: Deck

  """An edge for our `MatchmakingTicket`. May be used by Relay 1."""
  matchmakingTicketEdge(
    """The method to use when ordering `MatchmakingTicket`."""
    orderBy: [MatchmakingTicketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchmakingTicketsEdge
}

"""All input for the create `MatchmakingTicket` mutation."""
input CreateMatchmakingTicketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MatchmakingTicket` to be created by this mutation."""
  matchmakingTicket: MatchmakingTicketInput!
}

"""An input for mutations affecting `MatchmakingTicket`"""
input MatchmakingTicketInput {
  queueId: String
  userId: String!
  deckId: String
  botDeckId: String
  createdAt: Datetime
}

"""The output of our create `PublishedCard` mutation."""
type CreatePublishedCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PublishedCard` that was created by this mutation."""
  publishedCard: PublishedCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Card` that is related to this `PublishedCard`."""
  cardBySuccession: Card

  """An edge for our `PublishedCard`. May be used by Relay 1."""
  publishedCardEdge(
    """The method to use when ordering `PublishedCard`."""
    orderBy: [PublishedCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublishedCardsEdge
}

"""All input for the create `PublishedCard` mutation."""
input CreatePublishedCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PublishedCard` to be created by this mutation."""
  publishedCard: PublishedCardInput!
}

"""An input for mutations affecting `PublishedCard`"""
input PublishedCardInput {
  id: String!
  succession: BigInt!
}

"""The output of our update `BannedDraftCard` mutation."""
type UpdateBannedDraftCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BannedDraftCard` that was updated by this mutation."""
  bannedDraftCard: BannedDraftCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BannedDraftCard`. May be used by Relay 1."""
  bannedDraftCardEdge(
    """The method to use when ordering `BannedDraftCard`."""
    orderBy: [BannedDraftCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BannedDraftCardsEdge
}

"""All input for the `updateBannedDraftCard` mutation."""
input UpdateBannedDraftCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BannedDraftCard` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BannedDraftCard` being updated.
  """
  bannedDraftCardPatch: BannedDraftCardPatch!
}

"""
Represents an update to a `BannedDraftCard`. Fields that are set will be updated.
"""
input BannedDraftCardPatch {
  cardId: String
}

"""All input for the `updateBannedDraftCardByCardId` mutation."""
input UpdateBannedDraftCardByCardIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BannedDraftCard` being updated.
  """
  bannedDraftCardPatch: BannedDraftCardPatch!
  cardId: String!
}

"""The output of our update `BotUser` mutation."""
type UpdateBotUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BotUser` that was updated by this mutation."""
  botUser: BotUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BotUser`. May be used by Relay 1."""
  botUserEdge(
    """The method to use when ordering `BotUser`."""
    orderBy: [BotUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotUsersEdge
}

"""All input for the `updateBotUser` mutation."""
input UpdateBotUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BotUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BotUser` being updated.
  """
  botUserPatch: BotUserPatch!
}

"""
Represents an update to a `BotUser`. Fields that are set will be updated.
"""
input BotUserPatch {
  id: String
}

"""All input for the `updateBotUserById` mutation."""
input UpdateBotUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BotUser` being updated.
  """
  botUserPatch: BotUserPatch!
  id: String!
}

"""The output of our update `Card` mutation."""
type UpdateCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Card` that was updated by this mutation."""
  card: Card

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""All input for the `updateCard` mutation."""
input UpdateCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Card` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Card` being updated.
  """
  cardPatch: CardPatch!
}

"""Represents an update to a `Card`. Fields that are set will be updated."""
input CardPatch {
  id: String
  createdBy: String

  """
  The URI of the application that created this card. The git URL by default represents cards that came from the
      Spellsource git repository. https://www.getspellsource.com/cards/editor or similar represents cards authored in the
      web interface
  """
  uri: String
  blocklyWorkspace: JSON
  cardScript: JSON
  createdAt: Datetime
  lastModified: Datetime
  isArchived: Boolean
  isPublished: Boolean
}

"""All input for the `updateCardBySuccession` mutation."""
input UpdateCardBySuccessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Card` being updated.
  """
  cardPatch: CardPatch!
  succession: BigInt!
}

"""The output of our update `CardsInDeck` mutation."""
type UpdateCardsInDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CardsInDeck` that was updated by this mutation."""
  cardsInDeck: CardsInDeck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Deck` that is related to this `CardsInDeck`."""
  deckByDeckId: Deck

  """Reads a single `PublishedCard` that is related to this `CardsInDeck`."""
  publishedCardByCardId: PublishedCard

  """An edge for our `CardsInDeck`. May be used by Relay 1."""
  cardsInDeckEdge(
    """The method to use when ordering `CardsInDeck`."""
    orderBy: [CardsInDecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsInDecksEdge
}

"""All input for the `updateCardsInDeck` mutation."""
input UpdateCardsInDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CardsInDeck` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CardsInDeck` being updated.
  """
  cardsInDeckPatch: CardsInDeckPatch!
}

"""
Represents an update to a `CardsInDeck`. Fields that are set will be updated.
"""
input CardsInDeckPatch {
  """deleting a deck deletes all its card references"""
  deckId: String

  """cannot delete cards that are currently used in decks"""
  cardId: String
}

"""All input for the `updateCardsInDeckById` mutation."""
input UpdateCardsInDeckByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CardsInDeck` being updated.
  """
  cardsInDeckPatch: CardsInDeckPatch!
  id: BigInt!
}

"""The output of our update `DeckPlayerAttributeTuple` mutation."""
type UpdateDeckPlayerAttributeTuplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeckPlayerAttributeTuple` that was updated by this mutation."""
  deckPlayerAttributeTuple: DeckPlayerAttributeTuple

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Deck` that is related to this `DeckPlayerAttributeTuple`.
  """
  deckByDeckId: Deck

  """An edge for our `DeckPlayerAttributeTuple`. May be used by Relay 1."""
  deckPlayerAttributeTupleEdge(
    """The method to use when ordering `DeckPlayerAttributeTuple`."""
    orderBy: [DeckPlayerAttributeTuplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeckPlayerAttributeTuplesEdge
}

"""All input for the `updateDeckPlayerAttributeTuple` mutation."""
input UpdateDeckPlayerAttributeTupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DeckPlayerAttributeTuple` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DeckPlayerAttributeTuple` being updated.
  """
  deckPlayerAttributeTuplePatch: DeckPlayerAttributeTuplePatch!
}

"""
Represents an update to a `DeckPlayerAttributeTuple`. Fields that are set will be updated.
"""
input DeckPlayerAttributeTuplePatch {
  deckId: String
  attribute: Int
  stringValue: String
}

"""All input for the `updateDeckPlayerAttributeTupleById` mutation."""
input UpdateDeckPlayerAttributeTupleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DeckPlayerAttributeTuple` being updated.
  """
  deckPlayerAttributeTuplePatch: DeckPlayerAttributeTuplePatch!
  id: BigInt!
}

"""The output of our update `DeckShare` mutation."""
type UpdateDeckSharePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeckShare` that was updated by this mutation."""
  deckShare: DeckShare

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Deck` that is related to this `DeckShare`."""
  deckByDeckId: Deck

  """An edge for our `DeckShare`. May be used by Relay 1."""
  deckShareEdge(
    """The method to use when ordering `DeckShare`."""
    orderBy: [DeckSharesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeckSharesEdge
}

"""All input for the `updateDeckShare` mutation."""
input UpdateDeckShareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DeckShare` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DeckShare` being updated.
  """
  deckSharePatch: DeckSharePatch!
}

"""
Represents an update to a `DeckShare`. Fields that are set will be updated.
"""
input DeckSharePatch {
  deckId: String
  shareRecipientId: String
  trashedByRecipient: Boolean
}

"""
All input for the `updateDeckShareByDeckIdAndShareRecipientId` mutation.
"""
input UpdateDeckShareByDeckIdAndShareRecipientIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DeckShare` being updated.
  """
  deckSharePatch: DeckSharePatch!
  deckId: String!
  shareRecipientId: String!
}

"""The output of our update `Deck` mutation."""
type UpdateDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Deck` that was updated by this mutation."""
  deck: Deck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Deck`. May be used by Relay 1."""
  deckEdge(
    """The method to use when ordering `Deck`."""
    orderBy: [DecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DecksEdge
}

"""All input for the `updateDeck` mutation."""
input UpdateDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Deck` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Deck` being updated.
  """
  deckPatch: DeckPatch!
}

"""Represents an update to a `Deck`. Fields that are set will be updated."""
input DeckPatch {
  id: String

  """who created this deck originally"""
  createdBy: String

  """who last edited this deck"""
  lastEditedBy: String
  name: String
  heroClass: String
  trashed: Boolean
  format: String
  deckType: Int

  """premades always shared with all users by application logic"""
  isPremade: Boolean
  permittedToDuplicate: Boolean
}

"""All input for the `updateDeckById` mutation."""
input UpdateDeckByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Deck` being updated.
  """
  deckPatch: DeckPatch!
  id: String!
}

"""The output of our update `Friend` mutation."""
type UpdateFriendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Friend` that was updated by this mutation."""
  friend: Friend

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Friend`. May be used by Relay 1."""
  friendEdge(
    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsEdge
}

"""All input for the `updateFriend` mutation."""
input UpdateFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Friend` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Friend` being updated.
  """
  friendPatch: FriendPatch!
}

"""
Represents an update to a `Friend`. Fields that are set will be updated.
"""
input FriendPatch {
  id: String
  friend: String
  createdAt: Datetime
}

"""All input for the `updateFriendByIdAndFriend` mutation."""
input UpdateFriendByIdAndFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Friend` being updated.
  """
  friendPatch: FriendPatch!
  id: String!
  friend: String!
}

"""The output of our update `GameUser` mutation."""
type UpdateGameUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameUser` that was updated by this mutation."""
  gameUser: GameUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameUser`."""
  gameByGameId: Game

  """Reads a single `Deck` that is related to this `GameUser`."""
  deckByDeckId: Deck

  """An edge for our `GameUser`. May be used by Relay 1."""
  gameUserEdge(
    """The method to use when ordering `GameUser`."""
    orderBy: [GameUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GameUsersEdge
}

"""All input for the `updateGameUser` mutation."""
input UpdateGameUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GameUser` being updated.
  """
  gameUserPatch: GameUserPatch!
}

"""
Represents an update to a `GameUser`. Fields that are set will be updated.
"""
input GameUserPatch {
  playerIndex: Int
  gameId: BigInt
  userId: String
  deckId: String
  victoryStatus: GameUserVictoryEnum
}

"""All input for the `updateGameUserByGameIdAndUserId` mutation."""
input UpdateGameUserByGameIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GameUser` being updated.
  """
  gameUserPatch: GameUserPatch!
  gameId: BigInt!
  userId: String!
}

"""The output of our update `Game` mutation."""
type UpdateGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was updated by this mutation."""
  game: Game

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesEdge
}

"""All input for the `updateGame` mutation."""
input UpdateGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Game` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  gamePatch: GamePatch!
}

"""Represents an update to a `Game`. Fields that are set will be updated."""
input GamePatch {
  status: GameStateEnum
  gitHash: String
  trace: JSON
  createdAt: Datetime
}

"""All input for the `updateGameById` mutation."""
input UpdateGameByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  gamePatch: GamePatch!
  id: BigInt!
}

"""The output of our update `GeneratedArt` mutation."""
type UpdateGeneratedArtPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeneratedArt` that was updated by this mutation."""
  generatedArt: GeneratedArt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GeneratedArt`. May be used by Relay 1."""
  generatedArtEdge(
    """The method to use when ordering `GeneratedArt`."""
    orderBy: [GeneratedArtsOrderBy!] = [NATURAL]
  ): GeneratedArtsEdge
}

"""All input for the `updateGeneratedArtByHashAndOwner` mutation."""
input UpdateGeneratedArtByHashAndOwnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GeneratedArt` being updated.
  """
  generatedArtPatch: GeneratedArtPatch!
  hash: String!
  owner: String!
}

"""
Represents an update to a `GeneratedArt`. Fields that are set will be updated.
"""
input GeneratedArtPatch {
  hash: String
  owner: String
  urls: [String]
  info: JSON
  isArchived: Boolean
}

"""The output of our update `Guest` mutation."""
type UpdateGuestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Guest` that was updated by this mutation."""
  guest: Guest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Guest`. May be used by Relay 1."""
  guestEdge(
    """The method to use when ordering `Guest`."""
    orderBy: [GuestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuestsEdge
}

"""All input for the `updateGuest` mutation."""
input UpdateGuestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Guest` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Guest` being updated.
  """
  guestPatch: GuestPatch!
}

"""
Represents an update to a `Guest`. Fields that are set will be updated.
"""
input GuestPatch {
  userId: String
}

"""All input for the `updateGuestById` mutation."""
input UpdateGuestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Guest` being updated.
  """
  guestPatch: GuestPatch!
  id: BigInt!
}

"""The output of our update `HardRemovalCard` mutation."""
type UpdateHardRemovalCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HardRemovalCard` that was updated by this mutation."""
  hardRemovalCard: HardRemovalCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HardRemovalCard`. May be used by Relay 1."""
  hardRemovalCardEdge(
    """The method to use when ordering `HardRemovalCard`."""
    orderBy: [HardRemovalCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HardRemovalCardsEdge
}

"""All input for the `updateHardRemovalCard` mutation."""
input UpdateHardRemovalCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HardRemovalCard` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HardRemovalCard` being updated.
  """
  hardRemovalCardPatch: HardRemovalCardPatch!
}

"""
Represents an update to a `HardRemovalCard`. Fields that are set will be updated.
"""
input HardRemovalCardPatch {
  cardId: String
}

"""All input for the `updateHardRemovalCardByCardId` mutation."""
input UpdateHardRemovalCardByCardIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HardRemovalCard` being updated.
  """
  hardRemovalCardPatch: HardRemovalCardPatch!
  cardId: String!
}

"""The output of our update `MatchmakingQueue` mutation."""
type UpdateMatchmakingQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MatchmakingQueue` that was updated by this mutation."""
  matchmakingQueue: MatchmakingQueue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MatchmakingQueue`. May be used by Relay 1."""
  matchmakingQueueEdge(
    """The method to use when ordering `MatchmakingQueue`."""
    orderBy: [MatchmakingQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchmakingQueuesEdge
}

"""All input for the `updateMatchmakingQueue` mutation."""
input UpdateMatchmakingQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MatchmakingQueue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MatchmakingQueue` being updated.
  """
  matchmakingQueuePatch: MatchmakingQueuePatch!
}

"""
Represents an update to a `MatchmakingQueue`. Fields that are set will be updated.
"""
input MatchmakingQueuePatch {
  id: String
  name: String
  botOpponent: Boolean
  privateLobby: Boolean
  startsAutomatically: Boolean
  stillConnectedTimeout: BigInt
  emptyLobbyTimeout: BigInt
  awaitingLobbyTimeout: BigInt
  once: Boolean
  automaticallyClose: Boolean
  lobbySize: Int
  queueCreatedAt: Datetime
}

"""All input for the `updateMatchmakingQueueById` mutation."""
input UpdateMatchmakingQueueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MatchmakingQueue` being updated.
  """
  matchmakingQueuePatch: MatchmakingQueuePatch!
  id: String!
}

"""The output of our update `MatchmakingTicket` mutation."""
type UpdateMatchmakingTicketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MatchmakingTicket` that was updated by this mutation."""
  matchmakingTicket: MatchmakingTicket

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MatchmakingQueue` that is related to this `MatchmakingTicket`.
  """
  matchmakingQueueByQueueId: MatchmakingQueue

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByDeckId: Deck

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByBotDeckId: Deck

  """An edge for our `MatchmakingTicket`. May be used by Relay 1."""
  matchmakingTicketEdge(
    """The method to use when ordering `MatchmakingTicket`."""
    orderBy: [MatchmakingTicketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchmakingTicketsEdge
}

"""All input for the `updateMatchmakingTicket` mutation."""
input UpdateMatchmakingTicketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MatchmakingTicket` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MatchmakingTicket` being updated.
  """
  matchmakingTicketPatch: MatchmakingTicketPatch!
}

"""
Represents an update to a `MatchmakingTicket`. Fields that are set will be updated.
"""
input MatchmakingTicketPatch {
  queueId: String
  userId: String
  deckId: String
  botDeckId: String
  createdAt: Datetime
}

"""All input for the `updateMatchmakingTicketByUserId` mutation."""
input UpdateMatchmakingTicketByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MatchmakingTicket` being updated.
  """
  matchmakingTicketPatch: MatchmakingTicketPatch!
  userId: String!
}

"""The output of our update `PublishedCard` mutation."""
type UpdatePublishedCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PublishedCard` that was updated by this mutation."""
  publishedCard: PublishedCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Card` that is related to this `PublishedCard`."""
  cardBySuccession: Card

  """An edge for our `PublishedCard`. May be used by Relay 1."""
  publishedCardEdge(
    """The method to use when ordering `PublishedCard`."""
    orderBy: [PublishedCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublishedCardsEdge
}

"""All input for the `updatePublishedCard` mutation."""
input UpdatePublishedCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PublishedCard` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PublishedCard` being updated.
  """
  publishedCardPatch: PublishedCardPatch!
}

"""
Represents an update to a `PublishedCard`. Fields that are set will be updated.
"""
input PublishedCardPatch {
  id: String
  succession: BigInt
}

"""All input for the `updatePublishedCardById` mutation."""
input UpdatePublishedCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PublishedCard` being updated.
  """
  publishedCardPatch: PublishedCardPatch!
  id: String!
}

"""The output of our delete `BannedDraftCard` mutation."""
type DeleteBannedDraftCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BannedDraftCard` that was deleted by this mutation."""
  bannedDraftCard: BannedDraftCard
  deletedBannedDraftCardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BannedDraftCard`. May be used by Relay 1."""
  bannedDraftCardEdge(
    """The method to use when ordering `BannedDraftCard`."""
    orderBy: [BannedDraftCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BannedDraftCardsEdge
}

"""All input for the `deleteBannedDraftCard` mutation."""
input DeleteBannedDraftCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BannedDraftCard` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBannedDraftCardByCardId` mutation."""
input DeleteBannedDraftCardByCardIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardId: String!
}

"""The output of our delete `BotUser` mutation."""
type DeleteBotUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BotUser` that was deleted by this mutation."""
  botUser: BotUser
  deletedBotUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BotUser`. May be used by Relay 1."""
  botUserEdge(
    """The method to use when ordering `BotUser`."""
    orderBy: [BotUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotUsersEdge
}

"""All input for the `deleteBotUser` mutation."""
input DeleteBotUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BotUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBotUserById` mutation."""
input DeleteBotUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Card` mutation."""
type DeleteCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Card` that was deleted by this mutation."""
  card: Card
  deletedCardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""All input for the `deleteCard` mutation."""
input DeleteCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Card` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCardBySuccession` mutation."""
input DeleteCardBySuccessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  succession: BigInt!
}

"""The output of our delete `CardsInDeck` mutation."""
type DeleteCardsInDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CardsInDeck` that was deleted by this mutation."""
  cardsInDeck: CardsInDeck
  deletedCardsInDeckId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Deck` that is related to this `CardsInDeck`."""
  deckByDeckId: Deck

  """Reads a single `PublishedCard` that is related to this `CardsInDeck`."""
  publishedCardByCardId: PublishedCard

  """An edge for our `CardsInDeck`. May be used by Relay 1."""
  cardsInDeckEdge(
    """The method to use when ordering `CardsInDeck`."""
    orderBy: [CardsInDecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsInDecksEdge
}

"""All input for the `deleteCardsInDeck` mutation."""
input DeleteCardsInDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CardsInDeck` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCardsInDeckById` mutation."""
input DeleteCardsInDeckByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `DeckPlayerAttributeTuple` mutation."""
type DeleteDeckPlayerAttributeTuplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeckPlayerAttributeTuple` that was deleted by this mutation."""
  deckPlayerAttributeTuple: DeckPlayerAttributeTuple
  deletedDeckPlayerAttributeTupleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Deck` that is related to this `DeckPlayerAttributeTuple`.
  """
  deckByDeckId: Deck

  """An edge for our `DeckPlayerAttributeTuple`. May be used by Relay 1."""
  deckPlayerAttributeTupleEdge(
    """The method to use when ordering `DeckPlayerAttributeTuple`."""
    orderBy: [DeckPlayerAttributeTuplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeckPlayerAttributeTuplesEdge
}

"""All input for the `deleteDeckPlayerAttributeTuple` mutation."""
input DeleteDeckPlayerAttributeTupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DeckPlayerAttributeTuple` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDeckPlayerAttributeTupleById` mutation."""
input DeleteDeckPlayerAttributeTupleByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `DeckShare` mutation."""
type DeleteDeckSharePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeckShare` that was deleted by this mutation."""
  deckShare: DeckShare
  deletedDeckShareId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Deck` that is related to this `DeckShare`."""
  deckByDeckId: Deck

  """An edge for our `DeckShare`. May be used by Relay 1."""
  deckShareEdge(
    """The method to use when ordering `DeckShare`."""
    orderBy: [DeckSharesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeckSharesEdge
}

"""All input for the `deleteDeckShare` mutation."""
input DeleteDeckShareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DeckShare` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteDeckShareByDeckIdAndShareRecipientId` mutation.
"""
input DeleteDeckShareByDeckIdAndShareRecipientIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  deckId: String!
  shareRecipientId: String!
}

"""The output of our delete `Deck` mutation."""
type DeleteDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Deck` that was deleted by this mutation."""
  deck: Deck
  deletedDeckId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Deck`. May be used by Relay 1."""
  deckEdge(
    """The method to use when ordering `Deck`."""
    orderBy: [DecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DecksEdge
}

"""All input for the `deleteDeck` mutation."""
input DeleteDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Deck` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDeckById` mutation."""
input DeleteDeckByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Friend` mutation."""
type DeleteFriendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Friend` that was deleted by this mutation."""
  friend: Friend
  deletedFriendId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Friend`. May be used by Relay 1."""
  friendEdge(
    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsEdge
}

"""All input for the `deleteFriend` mutation."""
input DeleteFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Friend` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFriendByIdAndFriend` mutation."""
input DeleteFriendByIdAndFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
  friend: String!
}

"""The output of our delete `GameUser` mutation."""
type DeleteGameUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameUser` that was deleted by this mutation."""
  gameUser: GameUser
  deletedGameUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameUser`."""
  gameByGameId: Game

  """Reads a single `Deck` that is related to this `GameUser`."""
  deckByDeckId: Deck

  """An edge for our `GameUser`. May be used by Relay 1."""
  gameUserEdge(
    """The method to use when ordering `GameUser`."""
    orderBy: [GameUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GameUsersEdge
}

"""All input for the `deleteGameUser` mutation."""
input DeleteGameUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGameUserByGameIdAndUserId` mutation."""
input DeleteGameUserByGameIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: BigInt!
  userId: String!
}

"""The output of our delete `Game` mutation."""
type DeleteGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was deleted by this mutation."""
  game: Game
  deletedGameId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesEdge
}

"""All input for the `deleteGame` mutation."""
input DeleteGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Game` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGameById` mutation."""
input DeleteGameByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `GeneratedArt` mutation."""
type DeleteGeneratedArtPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeneratedArt` that was deleted by this mutation."""
  generatedArt: GeneratedArt
  deletedGeneratedArtId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GeneratedArt`. May be used by Relay 1."""
  generatedArtEdge(
    """The method to use when ordering `GeneratedArt`."""
    orderBy: [GeneratedArtsOrderBy!] = [NATURAL]
  ): GeneratedArtsEdge
}

"""All input for the `deleteGeneratedArtByHashAndOwner` mutation."""
input DeleteGeneratedArtByHashAndOwnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  hash: String!
  owner: String!
}

"""The output of our delete `Guest` mutation."""
type DeleteGuestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Guest` that was deleted by this mutation."""
  guest: Guest
  deletedGuestId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Guest`. May be used by Relay 1."""
  guestEdge(
    """The method to use when ordering `Guest`."""
    orderBy: [GuestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuestsEdge
}

"""All input for the `deleteGuest` mutation."""
input DeleteGuestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Guest` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGuestById` mutation."""
input DeleteGuestByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `HardRemovalCard` mutation."""
type DeleteHardRemovalCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HardRemovalCard` that was deleted by this mutation."""
  hardRemovalCard: HardRemovalCard
  deletedHardRemovalCardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HardRemovalCard`. May be used by Relay 1."""
  hardRemovalCardEdge(
    """The method to use when ordering `HardRemovalCard`."""
    orderBy: [HardRemovalCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HardRemovalCardsEdge
}

"""All input for the `deleteHardRemovalCard` mutation."""
input DeleteHardRemovalCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HardRemovalCard` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteHardRemovalCardByCardId` mutation."""
input DeleteHardRemovalCardByCardIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardId: String!
}

"""The output of our delete `MatchmakingQueue` mutation."""
type DeleteMatchmakingQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MatchmakingQueue` that was deleted by this mutation."""
  matchmakingQueue: MatchmakingQueue
  deletedMatchmakingQueueId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MatchmakingQueue`. May be used by Relay 1."""
  matchmakingQueueEdge(
    """The method to use when ordering `MatchmakingQueue`."""
    orderBy: [MatchmakingQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchmakingQueuesEdge
}

"""All input for the `deleteMatchmakingQueue` mutation."""
input DeleteMatchmakingQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MatchmakingQueue` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMatchmakingQueueById` mutation."""
input DeleteMatchmakingQueueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `MatchmakingTicket` mutation."""
type DeleteMatchmakingTicketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MatchmakingTicket` that was deleted by this mutation."""
  matchmakingTicket: MatchmakingTicket
  deletedMatchmakingTicketId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MatchmakingQueue` that is related to this `MatchmakingTicket`.
  """
  matchmakingQueueByQueueId: MatchmakingQueue

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByDeckId: Deck

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByBotDeckId: Deck

  """An edge for our `MatchmakingTicket`. May be used by Relay 1."""
  matchmakingTicketEdge(
    """The method to use when ordering `MatchmakingTicket`."""
    orderBy: [MatchmakingTicketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchmakingTicketsEdge
}

"""All input for the `deleteMatchmakingTicket` mutation."""
input DeleteMatchmakingTicketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MatchmakingTicket` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMatchmakingTicketByUserId` mutation."""
input DeleteMatchmakingTicketByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: String!
}

"""The output of our delete `PublishedCard` mutation."""
type DeletePublishedCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PublishedCard` that was deleted by this mutation."""
  publishedCard: PublishedCard
  deletedPublishedCardId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Card` that is related to this `PublishedCard`."""
  cardBySuccession: Card

  """An edge for our `PublishedCard`. May be used by Relay 1."""
  publishedCardEdge(
    """The method to use when ordering `PublishedCard`."""
    orderBy: [PublishedCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublishedCardsEdge
}

"""All input for the `deletePublishedCard` mutation."""
input DeletePublishedCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PublishedCard` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePublishedCardById` mutation."""
input DeletePublishedCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our `archiveCard` mutation."""
type ArchiveCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `archiveCard` mutation."""
input ArchiveCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardId: String
}

"""The output of our `cardCatalogueFormats` mutation."""
type CardCatalogueFormatsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cards: [Card]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `cardCatalogueFormats` mutation."""
input CardCatalogueFormatsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cardCatalogueGetBannedDraftCards` mutation."""
type CardCatalogueGetBannedDraftCardsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cardIds: [String]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `cardCatalogueGetBannedDraftCards` mutation."""
input CardCatalogueGetBannedDraftCardsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cardCatalogueGetBaseClasses` mutation."""
type CardCatalogueGetBaseClassesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cards: [Card]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `cardCatalogueGetBaseClasses` mutation."""
input CardCatalogueGetBaseClassesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sets: [String]
}

"""The output of our `cardCatalogueGetCardById` mutation."""
type CardCatalogueGetCardByIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cards: [Card]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `cardCatalogueGetCardById` mutation."""
input CardCatalogueGetCardByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardId: String
}

"""The output of our `cardCatalogueGetCardByName` mutation."""
type CardCatalogueGetCardByNamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  card: Card

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""All input for the `cardCatalogueGetCardByName` mutation."""
input CardCatalogueGetCardByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardName: String
}

"""The output of our `cardCatalogueGetCardByNameAndClass` mutation."""
type CardCatalogueGetCardByNameAndClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  card: Card

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""All input for the `cardCatalogueGetCardByNameAndClass` mutation."""
input CardCatalogueGetCardByNameAndClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardName: String
  heroClass: String
}

"""The output of our `cardCatalogueGetClassCards` mutation."""
type CardCatalogueGetClassCardsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cards: [Card]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `cardCatalogueGetClassCards` mutation."""
input CardCatalogueGetClassCardsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cardCatalogueGetFormat` mutation."""
type CardCatalogueGetFormatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cards: [Card]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `cardCatalogueGetFormat` mutation."""
input CardCatalogueGetFormatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardName: String
}

"""The output of our `cardCatalogueGetHardRemovalCards` mutation."""
type CardCatalogueGetHardRemovalCardsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cardIds: [String]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `cardCatalogueGetHardRemovalCards` mutation."""
input CardCatalogueGetHardRemovalCardsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cardCatalogueGetHeroCard` mutation."""
type CardCatalogueGetHeroCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  card: Card

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""All input for the `cardCatalogueGetHeroCard` mutation."""
input CardCatalogueGetHeroCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  heroClass: String
}

"""The output of our `cardCatalogueQuery` mutation."""
type CardCatalogueQueryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cards: [Card]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `cardCatalogueQuery` mutation."""
input CardCatalogueQueryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sets: [String]
  cardType: String
  rarity: String
  heroClass: String
  attribute: String
}

"""The output of our `clusteredGamesUpdateGameAndUsers` mutation."""
type ClusteredGamesUpdateGameAndUsersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `clusteredGamesUpdateGameAndUsers` mutation."""
input ClusteredGamesUpdateGameAndUsersInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pUserIdWinner: String
  pUserIdLoser: String
  pGameId: BigInt
  pTrace: JSON
}

"""The output of our `createDeckWithCards` mutation."""
type CreateDeckWithCardsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deck: Deck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Deck`. May be used by Relay 1."""
  deckEdge(
    """The method to use when ordering `Deck`."""
    orderBy: [DecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DecksEdge
}

"""All input for the `createDeckWithCards` mutation."""
input CreateDeckWithCardsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  deckName: String
  classHero: String
  formatName: String
  cardIds: [String]
}

"""The output of our `getClasses` mutation."""
type GetClassesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  results: [GetClassesRecord]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The return type of our `getClasses` mutation."""
type GetClassesRecord {
  createdBy: String
  class: String
  isPublished: Boolean
  collectible: Boolean
  cardScript: JSON
  id: String
  name: String
}

"""All input for the `getClasses` mutation."""
input GetClassesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getCollectionCards` mutation."""
type GetCollectionCardsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  results: [GetCollectionCardsRecord]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The return type of our `getCollectionCards` mutation."""
type GetCollectionCardsRecord {
  id: String
  createdBy: String
  cardScript: JSON
  blocklyWorkspace: JSON
  name: String
  type: String
  class: String
  cost: Int
  collectible: Boolean
  searchMessage: String
  lastModified: Datetime
  createdAt: Datetime
}

"""All input for the `getCollectionCards` mutation."""
input GetCollectionCardsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `getUserAttribute` mutation."""
type GetUserAttributePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  string: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `getUserAttribute` mutation."""
input GetUserAttributeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  idUser: String
  attribute: String
  orDefault: String
}

"""The output of our `publishCard` mutation."""
type PublishCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  bigInt: BigInt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `publishCard` mutation."""
input PublishCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardId: String
}

"""The output of our `publishGitCard` mutation."""
type PublishGitCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  card: Card

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""All input for the `publishGitCard` mutation."""
input PublishGitCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardId: String
  json: JSON
  creator: String
}

"""The output of our `saveCard` mutation."""
type SaveCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  card: Card

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""All input for the `saveCard` mutation."""
input SaveCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cardId: String
  workspace: JSON
  json: JSON
}

"""The output of our `saveGeneratedArt` mutation."""
type SaveGeneratedArtPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  generatedArt: GeneratedArt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GeneratedArt`. May be used by Relay 1."""
  generatedArtEdge(
    """The method to use when ordering `GeneratedArt`."""
    orderBy: [GeneratedArtsOrderBy!] = [NATURAL]
  ): GeneratedArtsEdge
}

"""All input for the `saveGeneratedArt` mutation."""
input SaveGeneratedArtInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  digest: String
  links: [String]
  extraInfo: JSON
}

"""The output of our `setCardsInDeck` mutation."""
type SetCardsInDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cardsInDecks: [CardsInDeck]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setCardsInDeck` mutation."""
input SetCardsInDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  deck: String
  cardIds: [String]
}

"""The output of our `setUserAttribute` mutation."""
type SetUserAttributePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setUserAttribute` mutation."""
input SetUserAttributeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  idUser: String
  attribute: String
  val: String
}

"""The output of our upsert `BannedDraftCard` mutation."""
type UpsertBannedDraftCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BannedDraftCard` that was upserted by this mutation."""
  bannedDraftCard: BannedDraftCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BannedDraftCard`. May be used by Relay 1."""
  bannedDraftCardEdge(
    """The method to use when ordering `BannedDraftCard`."""
    orderBy: [BannedDraftCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BannedDraftCardsEdge
}

"""Where conditions for the upsert `BannedDraftCard` mutation."""
input UpsertBannedDraftCardWhere {
  cardId: String
}

"""All input for the upsert `BannedDraftCard` mutation."""
input UpsertBannedDraftCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BannedDraftCard` to be upserted by this mutation."""
  bannedDraftCard: BannedDraftCardInput!
}

"""The output of our upsert `BotUser` mutation."""
type UpsertBotUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BotUser` that was upserted by this mutation."""
  botUser: BotUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BotUser`. May be used by Relay 1."""
  botUserEdge(
    """The method to use when ordering `BotUser`."""
    orderBy: [BotUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): BotUsersEdge
}

"""Where conditions for the upsert `BotUser` mutation."""
input UpsertBotUserWhere {
  id: String
}

"""All input for the upsert `BotUser` mutation."""
input UpsertBotUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BotUser` to be upserted by this mutation."""
  botUser: BotUserInput!
}

"""The output of our upsert `Card` mutation."""
type UpsertCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Card` that was upserted by this mutation."""
  card: Card

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Card`. May be used by Relay 1."""
  cardEdge(
    """The method to use when ordering `Card`."""
    orderBy: [CardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsEdge
}

"""Where conditions for the upsert `Card` mutation."""
input UpsertCardWhere {
  succession: BigInt
}

"""All input for the upsert `Card` mutation."""
input UpsertCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Card` to be upserted by this mutation."""
  card: CardInput!
}

"""The output of our upsert `CardsInDeck` mutation."""
type UpsertCardsInDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CardsInDeck` that was upserted by this mutation."""
  cardsInDeck: CardsInDeck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Deck` that is related to this `CardsInDeck`."""
  deckByDeckId: Deck

  """Reads a single `PublishedCard` that is related to this `CardsInDeck`."""
  publishedCardByCardId: PublishedCard

  """An edge for our `CardsInDeck`. May be used by Relay 1."""
  cardsInDeckEdge(
    """The method to use when ordering `CardsInDeck`."""
    orderBy: [CardsInDecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): CardsInDecksEdge
}

"""Where conditions for the upsert `CardsInDeck` mutation."""
input UpsertCardsInDeckWhere {
  id: BigInt
}

"""All input for the upsert `CardsInDeck` mutation."""
input UpsertCardsInDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CardsInDeck` to be upserted by this mutation."""
  cardsInDeck: CardsInDeckInput!
}

"""The output of our upsert `DeckPlayerAttributeTuple` mutation."""
type UpsertDeckPlayerAttributeTuplePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeckPlayerAttributeTuple` that was upserted by this mutation."""
  deckPlayerAttributeTuple: DeckPlayerAttributeTuple

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Deck` that is related to this `DeckPlayerAttributeTuple`.
  """
  deckByDeckId: Deck

  """An edge for our `DeckPlayerAttributeTuple`. May be used by Relay 1."""
  deckPlayerAttributeTupleEdge(
    """The method to use when ordering `DeckPlayerAttributeTuple`."""
    orderBy: [DeckPlayerAttributeTuplesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeckPlayerAttributeTuplesEdge
}

"""Where conditions for the upsert `DeckPlayerAttributeTuple` mutation."""
input UpsertDeckPlayerAttributeTupleWhere {
  id: BigInt
}

"""All input for the upsert `DeckPlayerAttributeTuple` mutation."""
input UpsertDeckPlayerAttributeTupleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DeckPlayerAttributeTuple` to be upserted by this mutation."""
  deckPlayerAttributeTuple: DeckPlayerAttributeTupleInput!
}

"""The output of our upsert `DeckShare` mutation."""
type UpsertDeckSharePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DeckShare` that was upserted by this mutation."""
  deckShare: DeckShare

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Deck` that is related to this `DeckShare`."""
  deckByDeckId: Deck

  """An edge for our `DeckShare`. May be used by Relay 1."""
  deckShareEdge(
    """The method to use when ordering `DeckShare`."""
    orderBy: [DeckSharesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DeckSharesEdge
}

"""Where conditions for the upsert `DeckShare` mutation."""
input UpsertDeckShareWhere {
  deckId: String
  shareRecipientId: String
}

"""All input for the upsert `DeckShare` mutation."""
input UpsertDeckShareInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DeckShare` to be upserted by this mutation."""
  deckShare: DeckShareInput!
}

"""The output of our upsert `Deck` mutation."""
type UpsertDeckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Deck` that was upserted by this mutation."""
  deck: Deck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Deck`. May be used by Relay 1."""
  deckEdge(
    """The method to use when ordering `Deck`."""
    orderBy: [DecksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DecksEdge
}

"""Where conditions for the upsert `Deck` mutation."""
input UpsertDeckWhere {
  id: String
}

"""All input for the upsert `Deck` mutation."""
input UpsertDeckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Deck` to be upserted by this mutation."""
  deck: DeckInput!
}

"""The output of our upsert `Friend` mutation."""
type UpsertFriendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Friend` that was upserted by this mutation."""
  friend: Friend

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Friend`. May be used by Relay 1."""
  friendEdge(
    """The method to use when ordering `Friend`."""
    orderBy: [FriendsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FriendsEdge
}

"""Where conditions for the upsert `Friend` mutation."""
input UpsertFriendWhere {
  id: String
  friend: String
}

"""All input for the upsert `Friend` mutation."""
input UpsertFriendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Friend` to be upserted by this mutation."""
  friend: FriendInput!
}

"""The output of our upsert `GameUser` mutation."""
type UpsertGameUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameUser` that was upserted by this mutation."""
  gameUser: GameUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameUser`."""
  gameByGameId: Game

  """Reads a single `Deck` that is related to this `GameUser`."""
  deckByDeckId: Deck

  """An edge for our `GameUser`. May be used by Relay 1."""
  gameUserEdge(
    """The method to use when ordering `GameUser`."""
    orderBy: [GameUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GameUsersEdge
}

"""Where conditions for the upsert `GameUser` mutation."""
input UpsertGameUserWhere {
  gameId: BigInt
  userId: String
}

"""All input for the upsert `GameUser` mutation."""
input UpsertGameUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GameUser` to be upserted by this mutation."""
  gameUser: GameUserInput!
}

"""The output of our upsert `Game` mutation."""
type UpsertGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was upserted by this mutation."""
  game: Game

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesEdge
}

"""Where conditions for the upsert `Game` mutation."""
input UpsertGameWhere {
  id: BigInt
}

"""All input for the upsert `Game` mutation."""
input UpsertGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Game` to be upserted by this mutation."""
  game: GameInput!
}

"""The output of our upsert `Guest` mutation."""
type UpsertGuestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Guest` that was upserted by this mutation."""
  guest: Guest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Guest`. May be used by Relay 1."""
  guestEdge(
    """The method to use when ordering `Guest`."""
    orderBy: [GuestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuestsEdge
}

"""Where conditions for the upsert `Guest` mutation."""
input UpsertGuestWhere {
  id: BigInt
}

"""All input for the upsert `Guest` mutation."""
input UpsertGuestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Guest` to be upserted by this mutation."""
  guest: GuestInput!
}

"""The output of our upsert `HardRemovalCard` mutation."""
type UpsertHardRemovalCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HardRemovalCard` that was upserted by this mutation."""
  hardRemovalCard: HardRemovalCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HardRemovalCard`. May be used by Relay 1."""
  hardRemovalCardEdge(
    """The method to use when ordering `HardRemovalCard`."""
    orderBy: [HardRemovalCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): HardRemovalCardsEdge
}

"""Where conditions for the upsert `HardRemovalCard` mutation."""
input UpsertHardRemovalCardWhere {
  cardId: String
}

"""All input for the upsert `HardRemovalCard` mutation."""
input UpsertHardRemovalCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HardRemovalCard` to be upserted by this mutation."""
  hardRemovalCard: HardRemovalCardInput!
}

"""The output of our upsert `MatchmakingQueue` mutation."""
type UpsertMatchmakingQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MatchmakingQueue` that was upserted by this mutation."""
  matchmakingQueue: MatchmakingQueue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MatchmakingQueue`. May be used by Relay 1."""
  matchmakingQueueEdge(
    """The method to use when ordering `MatchmakingQueue`."""
    orderBy: [MatchmakingQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchmakingQueuesEdge
}

"""Where conditions for the upsert `MatchmakingQueue` mutation."""
input UpsertMatchmakingQueueWhere {
  id: String
}

"""All input for the upsert `MatchmakingQueue` mutation."""
input UpsertMatchmakingQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MatchmakingQueue` to be upserted by this mutation."""
  matchmakingQueue: MatchmakingQueueInput!
}

"""The output of our upsert `MatchmakingTicket` mutation."""
type UpsertMatchmakingTicketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MatchmakingTicket` that was upserted by this mutation."""
  matchmakingTicket: MatchmakingTicket

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MatchmakingQueue` that is related to this `MatchmakingTicket`.
  """
  matchmakingQueueByQueueId: MatchmakingQueue

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByDeckId: Deck

  """Reads a single `Deck` that is related to this `MatchmakingTicket`."""
  deckByBotDeckId: Deck

  """An edge for our `MatchmakingTicket`. May be used by Relay 1."""
  matchmakingTicketEdge(
    """The method to use when ordering `MatchmakingTicket`."""
    orderBy: [MatchmakingTicketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchmakingTicketsEdge
}

"""Where conditions for the upsert `MatchmakingTicket` mutation."""
input UpsertMatchmakingTicketWhere {
  userId: String
}

"""All input for the upsert `MatchmakingTicket` mutation."""
input UpsertMatchmakingTicketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MatchmakingTicket` to be upserted by this mutation."""
  matchmakingTicket: MatchmakingTicketInput!
}

"""The output of our upsert `PublishedCard` mutation."""
type UpsertPublishedCardPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PublishedCard` that was upserted by this mutation."""
  publishedCard: PublishedCard

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Card` that is related to this `PublishedCard`."""
  cardBySuccession: Card

  """An edge for our `PublishedCard`. May be used by Relay 1."""
  publishedCardEdge(
    """The method to use when ordering `PublishedCard`."""
    orderBy: [PublishedCardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublishedCardsEdge
}

"""Where conditions for the upsert `PublishedCard` mutation."""
input UpsertPublishedCardWhere {
  id: String
}

"""All input for the upsert `PublishedCard` mutation."""
input UpsertPublishedCardInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PublishedCard` to be upserted by this mutation."""
  publishedCard: PublishedCardInput!
}

type ImageDef {
  id: String!
  name: String!
  src: String!
  height: Int!
  width: Int!
}

type GenerateArtResult {
  urls: [String!]!
}
