diff --git a/node_modules/blockly/blockly.d.ts b/node_modules/blockly/blockly.d.ts
index 06d6468..08afce3 100644
--- a/node_modules/blockly/blockly.d.ts
+++ b/node_modules/blockly/blockly.d.ts
@@ -13,6 +13,35 @@ export = Blockly;
 
 declare module Blockly {
 
+  import RenderInfo = Blockly.blockRendering.RenderInfo;
+  /**
+   * Added by spellsource. Stores the text colors for blocks by their IDs
+   */
+  var textColor: Record<string, string>
+
+  /**
+   * Added by spellsource. Stores the class colors for heroes by their IDs
+   */
+  var heroClassColors: Record<string, string>
+
+  /**
+   * Added by spellsource. Tracks whether spellsource has initialized this Blockly
+   */
+  var spellsourceInit: boolean
+
+  /**
+   * Documented by spellsource. The javascript generator
+   */
+  var JavaScript: Generator & {
+    ORDER_NONE: number;
+    cardsDB: Record<string, any>
+  }
+
+  /**
+   * Documented by spellsource. The default geras renderer
+   */
+  var geras: any
+
   interface BlocklyOptions {
     toolbox?: HTMLElement | string;
     readOnly?: boolean;
@@ -103,6 +132,31 @@ declare module Blockly {
     class Block__Class implements Blockly.IASTNodeLocation  {
 
             /**
+             * Added by spellsource. Stores the json representation of this block.
+             */
+            json?: any
+
+            /**
+             * Added by spellsource. Used by art blocks to store whether they've been used on cards or not.
+             */
+            used?: boolean
+
+            /**
+             * Added by spellsource.
+             */
+            message?: string
+
+            /**
+             * Added by spellsource. The CardScript representation of this block, if it's a card
+             */
+            cardScript?: any;
+
+             /**
+              * Added by spellsource. The generated card id for this block, if it's a card
+              */
+             cardId: string
+
+             /**
              * Class for one block.
              * Not normally called directly, workspace.newBlock() is preferred.
              * @param {!Blockly.Workspace} workspace The block's workspace.
@@ -2219,7 +2273,7 @@ declare module Blockly {
      * A mapping of block type names to block prototype objects.
      * @type {!Object.<string,Object>}
      */
-    var Blocks: { [key: string]: Object };
+    var Blocks: { [key: string]: Partial<Block> };
 }
 
 
@@ -15585,7 +15639,7 @@ declare module Blockly {
              *     no item exists.
              * @public
              */
-            getToolboxItemById(id: string): Blockly.IToolboxItem;
+            getToolboxItemById<T extends Blockly.IToolboxItem>(id: string): T;
 
             /**
              * Gets the width of the toolbox.
