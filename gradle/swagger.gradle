buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'io.swagger:swagger-models:1.5.17'
        classpath 'io.swagger:swagger-codegen:2.3.0'
    }
}

import io.swagger.codegen.ClientOptInput
import io.swagger.codegen.ClientOpts
import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.models.Swagger
import io.swagger.parser.SwaggerParser

task swagger {
    def input = "swagger-api.yaml"
    def output = file('client')
    def templateDir = file('swagger-templates/java')

    inputs.file(input)
    outputs.dir(output)
    doLast {
        def config = new JavaModuleInfoGenerator();
        config.setInputSpec(input)
        config.setOutputDir(output.path)
        config.setTemplateDir(templateDir.absolutePath)
//        config.setLang('java')
        config.additionalProperties().putAll([
                'invokerPackage'         : 'com.hiddenswitch.spellsource.client',
                'modelPackage'           : 'com.hiddenswitch.spellsource.client.models',
                'apiPackage'             : 'com.hiddenswitch.spellsource.client.api',
                'library'                : 'jersey1',
                'serializableModel'      : 'true',
                'dateLibrary'            : 'java8',
                'artifactId'             : 'client',
                'artifactVersion'        : project.version,
                'hideGenerationTimestamp': 'true'
        ])
        config.setGroupId('com.hiddenswitch')
        config.setArtifactId('spellsource-client')
        def optInput = new ClientOptInput();
        Swagger swagger = new SwaggerParser().read(input, [], true);
        optInput.config(config)
                .opts(new ClientOpts())
                .swagger(swagger)
        new DefaultGenerator().opts(optInput).generate()
    }
}


task swaggerClient {
    def input = "swagger-api.yaml"
    def outputDir = 'clientcsharp'
    def output = file(outputDir)
    def templateDir = file('swagger-templates/csharp')
    inputs.file(input)
    outputs.dir(output)
    doLast {
        def config = new CSharpNullableGenerator()
        config.setInputSpec(input)
        config.setOutputDir(output.path)
        config.setTemplateDir(templateDir.absolutePath)
        config.additionalProperties().putAll([
                'supportFiles'           : 'false',
                'apiTests'               : 'false',
                'modelTests'             : 'false',
                'modelDocs'              : 'false',
                'packageName'            : 'Spellsource.Client',
                'targetFramework'        : 'v3.5',
                'sourceFolder'           : 'Scripts',
                'hideGenerationTimestamp': 'true',
                'optionalProjectFile'    : 'false',
                'optionalAssemblyFile'   : 'false'
        ])

        def optInput = new ClientOptInput();
        Swagger swagger = new SwaggerParser().read(input, [], true);
        optInput.config(config)
                .opts(new ClientOpts())
                .swagger(swagger)
        new DefaultGenerator().opts(optInput).generate()
    }
}