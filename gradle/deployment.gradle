def unityClientPath = './unityclient'

task distSteam(type: Exec, group: 'Spellsource') {
    description("Uploads the macOS and Windows builds to Steam")
    inputs.files('secrets/spellsource/steam')
    dependsOn += [':unityclient:buildWindows', ':unityclient:buildMacOS']
    commandLine './deploy.sh', '-S'
}

task buildSwarm(type: Exec) {
    description("Builds all the images in the docker-compose.yml file")
    dependsOn += [':net:classes']
    inputs.dir('docker/')
    commandLine './deploy.sh', '-C'
}

task distSwarm(type: Exec, group: 'Spellsource') { t ->
    description("Deploys to a Docker Swarm")
    dependsOn += [buildSwarm]
    inputs.file('docker-compose.yml')
    inputs.file('secrets/common-deployment.env')
    Utilities.dotEnv(t, file('secrets/common-deployment.env', PathValidation.NONE))
    commandLine './deploy.sh', '-s'
}

task distIOS(type: Exec, group: 'Spellsource') { t ->
    description("Builds and uploads to Testflight the iOS project")
    dependsOn += [':unityclient:buildIOS']
    inputs.file('secrets/spellsource/unityclient-build.env')
    workingDir "${unityClientPath}"
    Utilities.dotEnv(t, file('secrets/spellsource/unityclient-build.env', PathValidation.NONE))
    commandLine './deploy.sh', '-t'
}

task distAndroid(type: Exec, group: 'Spellsource') { t ->
    description("Builds and uploads the Android project to Google Play")
    dependsOn += [':unityclient:buildAndroid']
    inputs.file('secrets/spellsource/unityclient-build.env')
    Utilities.dotEnv(t, file('secrets/spellsource/unityclient-build.env', PathValidation.NONE))
    environment('KEYSTORE_PATH', '../secrets/spellsource/android-keystore.keystore')
    workingDir "${unityClientPath}"
    commandLine './deploy.sh', '-d'
}

task distWebGL(type: Exec, group: 'Spellsource') { t ->
    description("Uploads the WebGL build to playspellsource.com")
    dependsOn ':unityclient:buildWebGL'
    inputs.file('secrets/spellsource/unityclient-build.env')
    inputs.file('secrets/common-deployment.env')
    Utilities.dotEnv(t, file('secrets/spellsource/unityclient-build.env', PathValidation.NONE))
    Utilities.dotEnv(t, file('secrets/common-deployment.env', PathValidation.NONE))
    workingDir "${unityClientPath}"
    commandLine './deploy.sh', '-G'
}

task copyGameJavadoc(type: Copy) {
    description("Copies the game module's javadoc into the public directory of the website")
    dependsOn ':game:javadoc'
    from tasks.getByPath(':game:javadoc').outputs
    into './www/public/javadoc'
}

task copyNetJavadoc(type: Copy) {
    description("Copies the net module's javadoc into the public directory of the website")
    dependsOn ':net:javadoc'
    from tasks.getByPath(':net:javadoc').outputs
    into './www/public/netjavadoc'
}


task buildWWW(type: ExecSourceTask) {
    description("Builds the website")
    source './www/'
    exclude Utilities.gitIgnore(file("www/.gitignore"))
    outputs.dir('./www/public')
    workingDir './www/'
    commandLine './build.sh'
}

task distWWW(type: Exec, group: 'Spellsource') {
    description("Builds and deploys the website (requires npm, python, the .venv virtualenv installed)")
    dependsOn += [buildWWW, copyGameJavadoc, copyNetJavadoc]
    workingDir './www/'
    commandLine './deploy.sh'
}

task deployAll(group: 'Spellsource') {
    description("Deploys the server, the client and the website")
    dependsOn += [distSteam, distIOS, distAndroid, distSwarm, distWWW]
}

task bumpVersion(type: Exec, group: 'Spellsource') {
    description('Bumps the server version')
    commandLine './deploy.sh', '-v'
}

task cloneMongo(type: Exec, group: 'Spellsource') {
    description("Connects to the production database, dumps its database file, then restores the database to your local mongo.")
    commandLine './deploy.sh', '-m'
}