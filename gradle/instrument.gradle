apply plugin: 'java-library'

configurations {
//    uninstrumentedClasspath {
//        canBeConsumed = false
//        canBeResolved = true
//    }
//
//    instrumentedJars {
//        canBeConsumed = true
//        canBeResolved = false
//        extendsFrom compile
//        attributes {
//            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
//            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
//            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
//            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, JavaVersion.current().majorVersion.toInteger())
//            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'instrumented-jar'))
//        }
//    }
//
//    testRuntimeClasspath.extendsFrom instrumentedClasspath
}

dependencies {
//    attributesSchema {
//        attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE) {
//            compatibilityRules.add(InstrumentedJarsRule)
//        }
//    }
    api project(':quasar-core')
}

compileJava.dependsOn processResources
compileJava {
//    dependsOn compileJava, processResources, project(':quasar-core').tasks.jar
    doLast {
        ant.taskdef(name: 'instrumentation', classname: 'co.paralleluniverse.fibers.instrument.InstrumentationTask', classpath: configurations.compileClasspath.asPath)
        ant.instrumentation(allowMonitors: 'true', allowBlocking: 'true') {
            fileset(dir: sourceSets.main.output.classesDirs.asPath)
        }
    }
}
//
//task instrumentedJar(type: org.gradle.jvm.tasks.Jar) {
//    dependsOn processResources, instrument
//}
//
//artifacts {
//    instrumentedJars(instrumentedJar.archiveFile) {
//        builtBy(instrumentedJar)
//    }
//}

compileTestJava.dependsOn processTestResources
compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

    doLast {
        ant.taskdef(name: 'instrumentation', classname: 'co.paralleluniverse.fibers.instrument.InstrumentationTask', classpath: configurations.compileClasspath.asPath)
        ant.instrumentation(allowMonitors: 'true', allowBlocking: 'true') {
            fileset(dir: sourceSets.main.output.classesDirs.asPath)
            fileset(dir: sourceSets.test.output.classesDirs.asPath)
        }
    }
}