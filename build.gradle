buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'io.swagger:swagger-codegen:2.3.0'
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.8.0'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0"
    }
}

apply plugin: 'java'

import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

task(swagger) {
    def input = "swagger-api.yaml"
    def output = file('client')
    def templateDir = file('swagger-templates/java')

    inputs.file(input)
    outputs.dir(output)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(input)
        config.setOutputDir(output.path)
        config.setTemplateDir(templateDir.absolutePath)
        config.setLang('java')
        config.setAdditionalProperties([
                'invokerPackage'         : 'com.hiddenswitch.spellsource.client',
                'modelPackage'           : 'com.hiddenswitch.spellsource.client.models',
                'apiPackage'             : 'com.hiddenswitch.spellsource.client.api',
                'library'                : 'jersey1',
                'serializableModel'      : 'true',
                'dateLibrary'            : 'java8',
                'artifactId'             : 'client',
                'artifactVersion'        : '0.8.7',
                'hideGenerationTimestamp': 'true'
        ])
        config.setGroupId('com.hiddenswitch')
        config.setArtifactId('spellsource-client')
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}


task(swaggerClient) {
    def input = "swagger-api.yaml"
    def outputDir = 'clientcsharp'
    def output = file(outputDir)
    inputs.file(input)
    outputs.dir(output)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(input)
        config.setOutputDir(output.path)
        config.setLang('csharp')
        config.setAdditionalProperties([
                'supportFiles'           : 'false',
                'apiTests'               : 'false',
                'modelTests'             : 'false',
                'modelDocs'              : 'false',
                'packageName'            : 'Spellsource.Client',
                'targetFramework'        : 'v3.5',
                'sourceFolder'           : 'Scripts',
                'hideGenerationTimestamp': 'true',
                'optionalProjectFile'    : 'false',
                'optionalAssemblyFile'   : 'false'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

apply plugin: "com.vanniktech.maven.publish"
apply plugin: 'io.codearte.nexus-staging'

mavenPublish {
    targets {
        uploadArchives {
            releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            snapshotRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
}


allprojects {
    sourceCompatibility = 1.8
    project.version = '0.8.34'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: "com.vanniktech.maven.publish"

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    compileJava.dependsOn processResources
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

        if (project.name != 'quasar-core' && project.name != 'client') {
            doLast {
                ant.taskdef(name: 'instrumentation', classname: 'co.paralleluniverse.fibers.instrument.InstrumentationTask', classpath: configurations.compile.asPath)
                ant.instrumentation(allowMonitors: 'true', allowBlocking: 'true') {
                    fileset(dir: sourceSets.main.output.classesDirs.asPath)
                }
            }
        }
    }

    compileTestJava.dependsOn processTestResources
    compileTestJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

        doLast {
            if (project.name != 'quasar-core' && project.name != 'client') {
                ant.taskdef(name: 'instrumentation', classname: 'co.paralleluniverse.fibers.instrument.InstrumentationTask', classpath: configurations.testCompile.asPath)
                ant.instrumentation(allowMonitors: 'true', allowBlocking: 'true') {
                    fileset(dir: sourceSets.main.output.classesDirs.asPath)
                    fileset(dir: sourceSets.test.output.classesDirs.asPath)
                }
            }
        }
    }
}

if (System.env.TRAVIS == 'true') {
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }
}