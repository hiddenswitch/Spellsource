buildscript {
  repositories {
    maven { url "file://${rootDir}/mavenRepository" }
    mavenCentral()
  }
}

plugins {
  id 'org.javamodularity.moduleplugin' version '1.8.15' apply false
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

dependencies {
  gradleApi()
  localGroovy()
}

allprojects {
  project.version = '0.10.2'
}

subprojects {
  repositories {
    maven { url "file://${rootDir}/mavenRepository" }
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }

  apply plugin: "maven-publish"

  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/hiddenswitch/Spellsource")
        credentials {
          username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
          password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
      }
    }
    publications {
      if (components.hasProperty('java')) {
        gpr(MavenPublication) {
          from(components.java)
        }
      }
    }
  }

  configurations.configureEach {
    resolutionStrategy {
      preferProjectModules()
      failOnVersionConflict()
      eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.slf4j') {
          details.useVersion slf4jVersion
        }
        if ([
                'com.fasterxml.jackson.core',
                'com.fasterxml.jackson.jaxrs',
                'com.fasterxml.jackson.datatype',
                'com.fasterxml.jackson.module',
                'com.fasterxml.jackson.dataformat'
        ].contains(details.requested.group)) {
          details.useVersion jacksonVersion
        }

        if (details.requested.group == 'io.netty'
                && details.requested.version.contains('Final')
                && details.requested.name != 'netty-tcnative-boringssl-static'
                && details.requested.name != 'netty-tcnative-classes') {
          details.useVersion nettyVersion
        }

        if (details.requested.module.name == 'reactive-streams') {
          details.useVersion '1.0.4'
        }

        if (details.requested.group == 'io.reactivex.rxjava3' && details.requested.module.name == "rxjava") {
          details.useVersion rxJavaVersion
        }

        if (details.requested.group == 'commons-io') {
          details.useVersion commonsIoVersion
        }

        if (details.requested.group == 'io.vertx' && !details.requested.version.toLowerCase().contains("snapshot")) {
          if (details.requested.module.name == "vertx-docgen") {
            details.useVersion "3.5.1"
          } else {
            details.useVersion vertxVersion
          }
        }

        if (details.requested.group == 'ch.qos.logback') {
          details.useVersion logbackVersion
        }

        if (details.requested.group == 'log4j') {
          details.useVersion log4jVersion
        }

        if (details.requested.module.name == 'mockito-core') {
          details.useVersion mockitoCoreVersion
        }

        if (details.requested.group == 'com.google.guava' && details.requested.module.name == 'guava') {
          details.useVersion guavaVersion
        }

        if (details.requested.group == 'com.google.protobuf' &&
                (details.requested.module.name == 'protobuf-java' || details.requested.module.name == 'protobuf-java-util')) {
          details.useVersion protocVersion
        }

        if (details.requested.group == 'org.openjdk.jmh') {
          details.useVersion jmhVersion
        }

        if (details.requested.group == 'org.junit.jupiter') {
          details.useVersion junitVersion
        }

        if (details.requested.group == 'org.jetbrains' && details.requested.name == 'annotations') {
          details.useVersion '24.1.0'
        }

        if (details.requested.group == 'org.jetbrains.kotlin') {
          details.useVersion kotlinVersion
        }

        if (details.requested.group == 'net.bytebuddy') {
          details.useVersion bytebuddyVersion
        }

        if (details.requested.group == 'org.jboss.logging') {
          details.useVersion '3.6.1.Final'
        }

        if (details.requested.group == 'com.google.code.findbugs') {
          details.useVersion '3.0.2'
        }

        if (details.requested.group == 'com.google.j2objc') {
          details.useVersion j2objcVersion
        }

        if (details.requested.group == 'com.google.errorprone') {
          details.useVersion googleErrorproneVersion
        }

        if (details.requested.group == 'com.google.code.gson') {
          details.useVersion gsonVersion
        }

        if (details.requested.group == 'io.grpc') {
          details.useVersion grpcVersion
        }

        if (details.requested.group == 'org.testcontainers') {
          details.useVersion testcontainersVersion
        }

        if (details.requested.group == 'commons-codec') {
          details.useVersion '1.15'
        }

        if (details.requested.group == 'org.jboss.resteasy') {
          details.useVersion resteasyVersion
        }

        if (details.requested.group == 'jakarta.xml.bind') {
          details.useVersion "3.0.1"
        }

        if (details.requested.group == 'jakarta.activation') {
          details.useVersion "2.1.3"
        }

        if (details.requested.group == 'io.micrometer') {
          details.useVersion micrometerVersion
        }

        if (details.requested.group == 'com.github.ben-manes.caffeine') {
          details.useVersion '3.1.8'
        }

        if (details.requested.group == 'org.hdrhistogram') {
          details.useVersion '2.2.2'
        }

        if (details.requested.group == 'org.infinispan') {
          details.useVersion infinispanVersion
        }

        if (details.requested.group == 'org.objenesis') {
          details.useVersion '3.4'
        }
      }
    }
  }
}

tasks.register("runServer") {
  group("spellsource")
  dependsOn ":spellsource-web:run", ":spellsource-server:run"
}

tasks.register("runServerWithArt") {
  group("spellsource")
  dependsOn ":spellsource-web:run", ":spellsource-server:run", ":spellsource-python:run"
}

// Python

def isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
def isLinux = org.gradle.internal.os.OperatingSystem.current().isLinux()
def isMacOs = org.gradle.internal.os.OperatingSystem.current().isMacOsX()
def pythonFiles = subprojects
        .collectMany { p ->
          [
                  "setup.py",
                  "requirements.txt",
                  "pyproject.toml",
                  "src/setup.py",
                  "src/requirements.txt",
                  "src/pyproject.toml",

          ].collect { f -> new Tuple(p.layout.projectDirectory.file(f), p) }
        }
        .findAll { t ->
          def (f, p) = t
          f.asFile.exists() && (p as Project).name != 'appmana-grpc'
        }

tasks.register('venv') {
  group('spellsource')
  description('Creates a Python environment and installs projects with setup.py or pyproject.toml files editably into it')
  def shell = isWindows ? ["./bin/sh.exe", "-c"] : ["sh", "-c"]

  inputs.files(pythonFiles.collect {
    def (f, p) = it
    f
  })
  def paths = pythonFiles.collect {
    def (f, p) = it
    (f as RegularFile).asFile.parent
  }.unique()

  // install comfyui first
  paths = paths.sort { a, b ->
    def aContainsComfy = a.contains('comfy') ? 0 : 1
    def bContainsComfy = b.contains('comfy') ? 0 : 1
    if (aContainsComfy == bContainsComfy) {
      return a <=> b
    }
    aContainsComfy <=> bContainsComfy
  }

  doLast {
    exec {
      commandLine(shell + ["curl -LsSf https://astral.sh/uv/install.sh | sh"])
    }
    if (!file(".venv").exists()) {
      exec {
        commandLine("uv", "venv", "--seed")
      }
    }
    def venvSrc = "source .venv/${isWindows ? "scripts" : "bin"}/activate"
    exec {
      commandLine(shell + ["$venvSrc; uv pip install -U wheel Cython poetry setuptools"])
    }
    if (!isMacOs) {
      exec {
        commandLine(shell + ["$venvSrc; uv pip install --no-build-isolation --no-deps xformers==$xformersVersion --index-url https://download.pytorch.org/whl/"])
      }
    }
    exec {
      commandLine(shell + ["$venvSrc; uv pip install -U torch==${torchVersion}${isWindows ? "+cu121" : ""} torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/${isWindows || isLinux ? "cu121" : ""}"])
    }
    paths.forEach { pythonProjectPath ->
      exec {
        commandLine(shell + ["$venvSrc; uv pip install --no-build-isolation -e '${pythonProjectPath}'"] as List<String>)
      }
    }
  }
}

idea.project.settings {
  generateImlFiles = true
}

idea.module.settings {
  def pythonPackageSourceRoots = pythonFiles
          .unique { tuple -> (tuple[1] as Project).name }
          .collect { tuple ->
            def (f, p) = tuple
            def setupPy = f as RegularFile
            def topLevelPackageDirPath = null
            setupPy.asFile.parentFile.traverse(maxDepth: 3) { file ->
              if (file.name == '__init__.py') {
                topLevelPackageDirPath = project.relativePath(file.parentFile.parentFile)
                return false
              }
            }
            return topLevelPackageDirPath
          }

  withModuleXml() { XmlProvider provider ->
    def projectNode = provider.asNode()
    def moduleRootManager = projectNode.component.find { it.'@name' == 'NewModuleRootManager' }
    def contentNode = moduleRootManager.find { it.name() == 'content' }

    contentNode.children().findAll { it.name() == 'sourceFolder' }.each { it.replaceNode {} }

    def urls = pythonPackageSourceRoots.collect { "file://${project.rootProject.projectDir}/" + it.replace('\\', "/") }
    urls.each { url ->
      contentNode.appendNode('sourceFolder', [url: url, isTestSource: 'false'])
    }
  }
}
