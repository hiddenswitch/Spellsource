redis:
  enabled: false
postgresql:
  enabled: false
keycloak:
  enabled: false
replicaCount: 1
image:
  repository: docker.io/doctorpangloss/spellsource-server
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"
imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "spellsource-service-account"

podAnnotations: { }
podSecurityContext: { }
securityContext: { }
service:
  type: LoadBalancer
  port: 8081
resources: { }
migration:
  resources: { }
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: { }
tolerations: [ ]
affinity: { }

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "1h"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1h"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1h"
  hosts:
    - host: spellsource.local
      paths: [ "/" ]
  tls: [ ]

configmap:
  grpcConfiguration:
    port: 8081
  metrics:
    port: 8080
    livenessRoute: "/liveness"
    readinessRoute: "/readiness"
    metricsRoute: "/metrics"
  jaeger:
    enabled: false
    agentHost: "localhost"
    agentPort: 6831
extraJavaOptions: ""
extraEnv: []
extraPorts: []
logback: |
  import ch.qos.logback.classic.filter.ThresholdFilter

  appender("STDOUT", ConsoleAppender) {
      encoder(PatternLayoutEncoder) {
          pattern = "%level %logger{24} %msg%n"
      }

      filter(ThresholdFilter) {
          level = TRACE
      }
  }

  scan("2 seconds")

  root(WARN, ["STDOUT"])