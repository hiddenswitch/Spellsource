import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.services.BuildServiceRegistry

apply plugin: 'base'
version = '0.9.0'

def isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
def sourceDir = "$project.projectDir.absolutePath/src/main/helm"
def helmBinary = isWindows ? "$project.projectDir.absolutePath/bin/helm.exe" : "helm"
def privateProject = project(':spellsource-private')

task deployPostgresLocal(type: Exec) {
    inputs.file("$sourceDir/postgres-values.yaml")
    commandLine helmBinary, "upgrade", "-i", "--atomic", "--debug", "-f", "$sourceDir/postgres-values.yaml", "postgres", "bitnami/postgresql-ha"
}

task deployKeycloakLocal(type: Exec) {
    dependsOn deployPostgresLocal, project(':spellsource-containers').tasks.pushKeycloakClusteredImage
    inputs.file("$sourceDir/keycloak-values.yaml")
    commandLine helmBinary, "upgrade", "-i", "--atomic", "--debug", "-f", "$sourceDir/keycloak-values.yaml", "postgres", "bitnami/keycloak"
}

task deployRedisLocal(type: Exec) {
    inputs.file("$sourceDir/redis-values.yaml")
    commandLine helmBinary, "upgrade", "-i", "--atomic", "--debug", "-f", "$sourceDir/redis-values.yaml", "redis", "bitnami/redis"
}

task deploySpellsourceLocal(type: Exec) {
    dependsOn project(':spellsource-server').tasks.jib, deployKeycloakLocal, deployRedisLocal
    inputs.dir(sourceDir)
    commandLine helmBinary, "upgrade", "-i", "--atomic", "--debug", "-f", "$sourceDir/spellsource-values.yaml", "spellsource", "$sourceDir/spellsource"
}

task deploySpellsourceProd {
    dependsOn project(':spellsource-server').tasks.jib, project(':spellsource-private').tasks.build
    def taskPath = "${privateProject.projectDir}/src/secrets/eksctl/spellsource"
    inputs.dir(sourceDir)
    doLast {
        exec { t ->
//            Utilities.dotEnv(t, new File("${privateProject.projectDir}/src/secrets/common-deployment.env"))
//            environment "KUBECONFIG", "$taskPath/../kubeconfig.yaml"
            commandLine "kubectl", "apply", "-f", "$taskPath/spellsource-ingress.yaml"
        }
        exec { t ->
//            Utilities.dotEnv(t, new File("${privateProject.projectDir}/src/secrets/common-deployment.env"))
            commandLine helmBinary, "upgrade", /* "--kubeconfig", "$taskPath/../kubeconfig.yaml",*/ "-i", "--atomic", "--debug", "-f", "$sourceDir/spellsource-values.yaml", "-f", "$taskPath/spellsource-values.yaml", "spellsource", "$sourceDir/spellsource"
        }
    }
}