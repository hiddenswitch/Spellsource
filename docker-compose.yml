# Defines the Spellsource server deployment
# This uses environment variables and authorization keys that you do not have.
version: '3.7'
services:
  game:
    image: doctorpangloss/spellsource:latest
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - MONGO_URL=mongodb://mongo:27017/metastone
      - SPELLSOURCE_APPLICATION=Clustered
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_DOMAIN=${SMTP_DOMAIN}
      - REPORTER_GRPC_HOST_PORT=jaeger-collector:14250
    networks:
      - web
      - backend
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        window: 50s
      labels:
        - traefik.http.routers.game-versioned-host.service=game
        - traefik.http.routers.game-versioned-host.rule=Host(`${GAME_VERSIONED_HOST}`)
        - traefik.http.routers.game-versioned-host.entrypoints=web,websecure
        - traefik.http.routers.game-versioned-host.tls=true
        - traefik.http.routers.game-versioned-host.tls.certResolver=myresolver
        - traefik.http.routers.game-versioned-url.service=game
        - traefik.http.routers.game-versioned-url.rule=Host(`${GAME_VERSIONED_URL_HOST}`) && PathPrefix(`${GAME_VERSIONED_URL_PATH_PREFIX}`)
        - traefik.http.routers.game-versioned-url.middlewares=game-versioned-url-path-prefix-stripped
        - traefik.http.routers.game-versioned-url.entrypoints=web,websecure
        - traefik.http.routers.game-versioned-url.tls=true
        - traefik.http.routers.game-versioned-url.tls.certResolver=myresolver
        - traefik.http.services.game.loadbalancer.server.port=80
        - traefik.http.middlewares.game-versioned-url-path-prefix-stripped.stripprefix.prefixes=${GAME_VERSIONED_URL_PATH_PREFIX}
        - traefik.enable=true
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
    healthcheck:
      test: curl -sSX GET http://127.0.0.1/version || exit 1
      interval: 10s
      timeout: 1s
      retries: 4
  mongo:
    image: "mongo:3.6"
    networks:
      - backend
    volumes:
      - mongodata:/data/db
    deploy:
      restart_policy:
        condition: on-failure
        window: 10s
      labels:
        - traefik.enable=false
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/metastone --quiet
      interval: 8s
      timeout: 4s
      retries: 3
  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.17.1
    environment:
      - SPAN_STORAGE_TYPE=cassandra
      - CASSANDRA_SERVERS=cassandra
      - CASSANDRA_KEYSPACE=jaeger_tenant_1
      - MODE=test
    networks:
      - backend
      - web
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      labels:
        - traefik.http.routers.jaeger-collector-router.rule=Host(`${GAME_VERSIONED_HOST}`) && PathPrefix(`${JAEGER_URL_PATH_PREFIX}`)
        - traefik.http.routers.jaeger-collector-router.service=jaeger-collector
        - traefik.http.routers.jaeger-collector-router.entrypoints=web,websecure
        - traefik.http.routers.jaeger-collector-router.tls=true
        - traefik.http.routers.jaeger-collector-router.tls.certResolver=myresolver
        - traefik.http.services.jaeger-collector.loadbalancer.server.port=14268
        - traefik.http.middlewares.api-v3-prefix-strip.stripprefix.prefixes=/api/v3/
        - traefik.enable=true
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  jaeger-schema:
    image: jaegertracing/jaeger-cassandra-schema:1.17.1
    environment:
      - CQLSH_HOST=cassandra
      - MODE=test
      - REPLICATION_FACTOR=1
      - KEYSPACE=jaeger_tenant_1
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
    networks:
      - backend
  jaeger-query:
    image: jaegertracing/jaeger-query:1.17.1
    environment:
      - SPAN_STORAGE_TYPE=cassandra
      - CASSANDRA_SERVERS=cassandra
      - QUERY_BASE_PATH=/jaeger
      - MODE=test
      - CASSANDRA_KEYSPACE=jaeger_tenant_1
    networks:
      - backend
      - web
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      labels:
        - traefik.http.routers.jaeger-query-router.rule=Host(`${JAEGER_QUERY_HOST}`)
        - traefik.http.routers.jaeger-query-router.entrypoints=web,websecure
        - traefik.http.routers.jaeger-query-router.middlewares=auth-jq
        - traefik.http.routers.jaeger-query-router.tls=true
        - traefik.http.routers.jaeger-query-router.tls.certResolver=myresolver
        - traefik.http.routers.jaeger-query-router.service=jaeger-query-service
        - traefik.http.services.jaeger-query-service.loadbalancer.server.port=16686
        - traefik.http.middlewares.auth-jq.basicauth.users=${TRAEFIK_AUTH_BASIC_HASH}
        - traefik.enable=true
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  cassandra:
    image: cassandra:3.11
    volumes:
      - cassandradata2:/var/lib/cassandra
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  skyhook:
    image: doctorpangloss/skyhook:latest
    build:
      context: skyhook
      dockerfile: Dockerfile
    networks:
      - web
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      labels:
        - traefik.http.routers.skyhook-router.rule=Host(`${SKYHOOK_HOST}`)
        - traefik.http.routers.skyhook-router.entrypoints=web,websecure
        - traefik.http.routers.skyhook-router.tls=true
        - traefik.http.routers.skyhook-router.tls.certResolver=myresolver
        - traefik.http.routers.skyhook-router.service=skyhook-router-service
        - traefik.http.services.skyhook-router-service.loadbalancer.server.port=8080
        - traefik.enable=true
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  discordbot:
    image: doctorpangloss/discordbot:latest
    build:
      context: .
      dockerfile: discordbot/Dockerfile
    networks:
      - web
    environment:
      - DISCORD_BOT_API_KEY=${DISCORD_BOT_API_KEY}
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      labels:
        - traefik.enable=false
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
volumes:
  mongodata:
  mancenterdata:
  cassandradata2:
networks:
  web:
    external: true
  backend:
    external: true