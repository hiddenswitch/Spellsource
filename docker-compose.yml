version: '3.7'
services:
  loadbalancer:
    image: "traefik:v1.7-alpine"
    networks:
      - web
    command: |
      --docker \
      --entryPoints="Name:http Address::80 Redirect.EntryPoint:https" \
      --entryPoints="Name:https Address::443 TLS" \
      --retry \
      --acme \
      --acme.tlschallenge \
      --acme.email="${ACME_EMAIL}" \
      --acme.storage="/data/acme.json" \
      --acme.entrypoint="https" \
      --acme.ondemand=true \
      --docker.swarmmode \
      --docker.network=web \
      --docker.watch \
      --docker.exposedbydefault=false
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - loadbalancerdata:/data
    deploy:
      restart_policy:
        condition: on-failure
        window: 8s
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  game:
    image: doctorpangloss/spellsource:latest
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - MONGO_URL=mongodb://mongo:27017/metastone
      - SPELLSOURCE_APPLICATION=Clustered
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_DOMAIN=${SMTP_DOMAIN}
      - REPORTER_GRPC_HOST_PORT=jaeger-collector:14250
    networks:
      - web
      - backend
    deploy:
      labels:
        - "traefik.versionedhost.frontend.rule=${GAME_VERSIONED_HOST_RULE}"
        - "traefik.versionedhost.frontend.entryPoints=http,https"
        - "traefik.versionedurl.frontend.rule=${GAME_VERSIONED_URL_RULE}"
        - "traefik.versionedurl.frontend.entryPoints=http,https"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.backend.loadbalancer.stickiness=true"
        - "traefik.port=80"
        - "traefik.enable=true"
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  mongo:
    image: "mongo:3.6"
    networks:
      - backend
    volumes:
      - mongodata:/data/db
    deploy:
      restart_policy:
        condition: on-failure
        window: 10s
      labels:
        - "traefik.enable=false"
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/metastone --quiet
      interval: 8s
      timeout: 4s
      retries: 3
  mediawiki:
    image: "doctorpangloss/wiki:latest"
    build:
      context: mediawiki
      dockerfile: Dockerfile
    networks:
      - web
      - backend
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_DOMAIN=${SMTP_DOMAIN}
      - MEDIAWIKI_SITE_NAME=Spellsource
      - MEDIAWIKI_URL=https://wiki.hiddenswitch.com
      - MEDIAWIKI_LOGO_URL=/resources/assets/wiki.png
      - MEDIAWIKI_AWS_REGION=${MEDIAWIKI_AWS_REGION}
      - MEDIAWIKI_AWS_BUCKET_ID=${MEDIAWIKI_AWS_BUCKET_ID}
      - MEDIAWIKI_PARSOID_URL=http://parsoid:8000
      - MEDIAWIKI_PARSOID_DOMAIN=mediawiki
      - MEDIAWIKI_DB_TYPE=mysql
      - MEDIAWIKI_DB_SERVER=mariadb
      - MEDIAWIKI_DB_USER=spellsource
      - MEDIAWIKI_DB_NAME=spellsource
      - MEDIAWIKI_DB_PASSWORD=password
      - MEDIAWIKI_DB_PREFIX=mediawiki
      - MEDIAWIKI_SECURITY_KEY=${MEDIAWIKI_SECURITY_KEY}
      - MEDIAWIKI_UPGRADE_KEY=${MEDIAWIKI_UPGRADE_KEY}
      - GOOGLE_RECAPTCHA_SECRET_KEY=${GOOGLE_RECAPTCHA_SECRET_KEY}
      - GOOGLE_RECAPTCHA_SITE_KEY=${GOOGLE_RECAPTCHA_SITE_KEY}
    volumes:
      - mediawikidata:/var/www/html/images
    deploy:
      labels:
        - "traefik.frontend.rule=${MEDIAWIKI_RULE}"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.frontend.entryPoints=http,https"
        - "traefik.port=80"
        - "traefik.enable=true"
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  parsoid:
    image: "thenets/parsoid:0.10.0"
    networks:
      - backend
    deploy:
      labels:
        - "traefik.enable=false"
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
    environment:
      - PARSOID_DOMAIN_mediawiki=http://mediawiki/api.php
  mariadb:
    image: mariadb:10.4.1
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      labels:
        - "traefik.enable=false"
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
    environment:
      - MYSQL_DATABASE=spellsource
      - MYSQL_PASSWORD=password
      - MYSQL_USER=spellsource
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_ROOT_HOST=%
    volumes:
      - mariadbdata:/var/lib/mysql
  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.15.1
    environment:
      - SPAN_STORAGE_TYPE=cassandra
      - CASSANDRA_SERVERS=cassandra
      - CASSANDRA_KEYSPACE=jaeger_tenant_1
      - MODE=test
    networks:
      - backend
      - web
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      labels:
        - "traefik.versionedurl.frontend.rule=${JAEGER_COLLECTOR_RULE}"
        - "traefik.versionedurl.frontend.entryPoints=http,https"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.port=14268"
        - "traefik.enable=true"
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  jaeger-schema:
    image: jaegertracing/jaeger-cassandra-schema:1.15.1
    environment:
      - CQLSH_HOST=cassandra
      - MODE=test
      - REPLICATION_FACTOR=1
      - KEYSPACE=jaeger_tenant_1
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
    networks:
      - backend
  jaeger-query:
    image: jaegertracing/jaeger-query:1.15.1
    environment:
      - SPAN_STORAGE_TYPE=cassandra
      - CASSANDRA_SERVERS=cassandra
      - QUERY_BASE_PATH=/jaeger
      - MODE=test
      - CASSANDRA_KEYSPACE=jaeger_tenant_1
    networks:
      - backend
      - web
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      labels:
        - "traefik.versionedurl.frontend.rule=${JAEGER_QUERY_RULE}"
        - "traefik.versionedurl.frontend.auth.basic.users=${TRAEFIK_AUTH_BASIC_HASH}"
        - "traefik.versionedurl.frontend.entryPoints=http,https"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.port=16686"
        - "traefik.enable=true"
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  cassandra:
    image: cassandra:3.11
    volumes:
      - cassandradata2:/var/lib/cassandra
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  ddnsroute53:
    image: doctorpangloss/ddnsroute53:latest
    build:
      context: ddnsroute53
      dockerfile: Dockerfile
    networks:
      - web
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DDNSROUTE53_UPDATE_IN_DOMAINS=${DDNSROUTE53_UPDATE_IN_DOMAINS}
      - DDNSROUTE53_UPDATE_IP_ADDRESS=${DDNSROUTE53_UPDATE_IP_ADDRESS}
    deploy:
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
  skyhook:
    image: doctorpangloss/skyhook:latest
    build:
      context: https://github.com/Commit451/skyhook.git
    networks:
      - web
    deploy:
      restart_policy:
        condition: on-failure
        window: 15s
      labels:
        - "traefik.versionedurl.frontend.rule=${SKYHOOK_RULE}"
        - "traefik.versionedurl.frontend.entryPoints=http,https"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.port=8080"
        - "traefik.enable=true"
      placement:
        constraints:
          - node.platform.arch == x86_64
          - node.labels.cpu == high
          - node.labels.disk == ssd
volumes:
  mongodata:
  mancenterdata:
  loadbalancerdata:
  mediawikidata:
  mariadbdata:
  cassandradata2:
networks:
  web:
    external: true
  backend:
    external: true