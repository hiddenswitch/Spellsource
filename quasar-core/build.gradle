plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version "5.2.0"
    id 'org.javamodularity.moduleplugin' version '1.6.0'
}

apply plugin: 'java-library'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'org.javamodularity.moduleplugin'

group 'com.hiddenswitch'

def vendor = "Parallel Universe Software Co."
def quasarJar = "${rootProject.projectDir}/quasar-core/build/libs/quasar-core-${version}.jar"
def guavaVer = '26.0-jre'
def asmVer = '7.2'
def moduleName = 'co.paralleluniverse.quasar.core'

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

sourceCompatibility = '11'
targetCompatibility = '11'

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
    }
}

configurations {
    compileOnly
    provided
    timewarp
    shadowedJar.extendsFrom runtime
    archives.extendsFrom runtime
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }

        compileClasspath += configurations.compileOnly + configurations.provided
        runtimeClasspath += compileClasspath
    }

    test {
        java {
            srcDir 'src/test/java'
        }
        compileClasspath += configurations.compileOnly + configurations.provided
        runtimeClasspath += configurations.provided
    }

    jmh {
        java {
            srcDir 'src/jmh/java'
        }

        compileClasspath += main.output + test.compileClasspath + test.output
        runtimeClasspath += compileClasspath + test.runtimeClasspath
        compileClasspath += main.compileClasspath + main.output + test.compileClasspath + test.output
        runtimeClasspath += compileClasspath + main.runtimeClasspath + test.runtimeClasspath
    }

    classloadertest {
        java {
            srcDir 'src/classloadertest/java'
        }

        compileClasspath += main.output + test.compileClasspath
        runtimeClasspath += compileClasspath + test.runtimeClasspath
    }
}

dependencies {
    implementation("io.dropwizard.metrics:metrics-core:4.1.2") {
        exclude group: 'org.slf4j', module: '*'
    }

    implementation "io.dropwizard.metrics:metrics-jmx:4.1.2"

    provided "org.apache.ant:ant:1.10.5"
    implementation 'com.google.errorprone:error_prone_annotations:2.1.3'
    compile("com.google.guava:guava:${guavaVer}") {
        exclude group: 'com.google.errorprone', module: '*'
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }
    timewarp 'co.paralleluniverse:timewarp:0.2.0-SNAPSHOT'
    testImplementation 'co.paralleluniverse:timewarp:0.2.0-SNAPSHOT'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation('junit:junit:4.12') {
        exclude group: 'org.hamcrest', module: '*'
    }
    testImplementation('com.google.truth:truth:0.42') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.google.errorprone', module: '*'
        exclude group: 'junit', module: 'junit'
    }

    testImplementation('org.mockito:mockito-core:2.24.5') {
        exclude group: "org.ow2.asm", module: '*'
        exclude group: "net.bytebuddy", module: '*'
    }
    testRuntime "net.bytebuddy:byte-buddy:1.9.2" // for Mockito
    testImplementation "org.ow2.asm:asm:$asmVer"

    jmhCompile 'org.openjdk.jmh:jmh-core:1.21'
    jmhCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.21'

    annotationProcessor 'org.kohsuke.metainf-services:metainf-services:1.8'

    implementation "org.hdrhistogram:HdrHistogram:2.1.10"
    implementation("org.latencyutils:LatencyUtils:2.0.3") {
        exclude group: "org.hdrhistogram", module: '*'
    }
    compile "org.ow2.asm:asm:$asmVer"
    compile "org.ow2.asm:asm-analysis:$asmVer"
    compile "org.ow2.asm:asm-commons:$asmVer"
    compile "org.ow2.asm:asm-util:$asmVer"

    // The exclusions are needed to get asm 5.0.4 whilst Kryo still depends on 5.0.3
    implementation "org.objenesis:objenesis:2.6"
    implementation('com.esotericsoftware:reflectasm:1.11.3') {
        exclude group: "org.ow2.asm", module: '*'
        exclude group: 'org.objectweb.asm', module: '*'
    }
    implementation("com.esotericsoftware:kryo:4.0.2") {
        exclude group: "org.ow2.asm", module: '*'
        exclude group: "org.objenesis", module: '*'
    }
    implementation("de.javakaffee:kryo-serializers:0.42") {
        exclude group: "com.esotericsoftware", module: '*'
        exclude group: "com.esotericsoftware.kryo", module: '*'
    }

    // this happens after we've filtered the dependency on ASM from core's module-info
    compileTestJava {
        options.compilerArgs += ["--add-modules", "org.objectweb.asm", "--add-reads", "co.paralleluniverse.quasar.core=org.objectweb.asm"]
    }

    provided('junit:junit:4.12') {
        exclude group: 'org.hamcrest', module: '*'
    }
}

compileJava.dependsOn processResources
compileJava {
    options.warnings = false;

    options.compilerArgs << '-Xlint:none'
    options.compilerArgs << '-nowarn' // same as '-Xlint:none'

    // Turn them off manually
    options.compilerArgs << '-Xlint:-auxiliaryclass'
    options.compilerArgs << '-Xlint:-cast'
    options.compilerArgs << '-Xlint:-classfile'
    options.compilerArgs << '-Xlint:-deprecation'
    options.compilerArgs << '-Xlint:-dep-ann'
    options.compilerArgs << '-Xlint:-divzero'
    options.compilerArgs << '-Xlint:-empty'
    options.compilerArgs << '-Xlint:-fallthrough'
    options.compilerArgs << '-Xlint:-finally'
    options.compilerArgs << '-Xlint:-options'
    options.compilerArgs << '-Xlint:-overloads'
    options.compilerArgs << '-Xlint:-overrides'
    options.compilerArgs << '-Xlint:-path'
    options.compilerArgs << '-Xlint:-processing'
    options.compilerArgs << '-Xlint:-rawtypes'
    options.compilerArgs << '-Xlint:-serial'
    options.compilerArgs << '-Xlint:-static'
    options.compilerArgs << '-Xlint:-try'
    options.compilerArgs << '-Xlint:-unchecked'
    options.compilerArgs << '-Xlint:-varargs'

    doLast {
        scanAndInstrument(sourceSets.main, [configurations.provided, configurations.runtime])
    }
}

test {
    useJUnit()
    moduleOptions {
        runOnClasspath = true
    }

    systemProperty 'co.paralleluniverse.monitoring.flightRecorderLevel', '5'
    systemProperty 'co.paralleluniverse.globalFlightRecorder', 'true'
    systemProperty 'co.paralleluniverse.flightRecorderDumpFile', 'quasar.log'
    systemProperty 'co.paralleluniverse.monitoring.flightRecorderSize', '200000'

    jvmArgs "-javaagent:${quasarJar}" // =vdmc (verbose, debug, allow monitors, check class)
    jvmArgs "-Xbootclasspath/a:${configurations.timewarp.singleFile}"
    if (System.getenv("TRAVIS") == 'true') {
        jvmArgs "-javaagent:${configurations.timewarp.singleFile}=3" // slow clock down x3
    }
    jvmArgs "-Xmx1024m"
    beforeTest { desc ->
        logger.quiet("Running test: " + desc)
    }
    afterTest { desc, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
            if (result.exception != null) {
                result.exception.printStackTrace()
            }
        }
    }
    doLast() {
        println "file://" + getReports().getHtml().getDestination() + "/index.html"
    }
}

['run', 'debug'].each { name ->
    project.task(name, type: JavaExec, dependsOn: [testClasses]) {
        classpath = sourceSets.main.runtimeClasspath
        if (project.hasProperty('mainClass')) {
            main = project.mainClass
        }
        if (project.hasProperty('args')) {
            args project.args.split('\\s+')
        }

        jvmArgs '-Xmx2048m'
        // jvmArgs "-Xbootclasspath/p:${System.getProperty("user.home")}/jsr166.jar"
        // systemProperty 'co.paralleluniverse.fibers.DefaultFiberPool.parallelism', '1'

        systemProperty "log4j.configurationFile", "${rootProject.projectDir}/log4j.xml"
        systemProperty "Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
        jvmArgs "-javaagent:${quasarJar}" // =vdmc (verbose, debug, allow monitors, check class)
    }
}

// remove default artifact
configurations.runtime.artifacts.with { archives ->
    archives.each {
        archives.remove(it)
    }
}

[jar]*.enabled = false

artifacts {
    archives shadowJar
    shadowedJar shadowJar
}

assemble.dependsOn shadowJar
check.dependsOn test

tasks.withType(JavaExec) {
    classpath += sourceSets.test.runtimeClasspath + sourceSets.test.output
}
run.dependsOn compileJava, testClasses

javadoc {
    options.encoding = 'UTF-8'
    source = sourceSets.main.allJava
}

assemble.dependsOn shadowJar
build.dependsOn shadowJar

shadowJar {
    classifier = '' // overwrite jar
    destinationDir = file("$buildDir/libs")

    from sourceSets.main.output

    configurations = [project.configurations.runtime]
    dependencies {
        include(dependency('org.ow2.asm:.*:.*'))
//            include(dependency(':high-scale-lib'))
    }
    exclude 'META-INF/INDEX.LIST'
//      exclude 'module-info.class'

    relocate 'org.objectweb.asm.', 'co.paralleluniverse.asm.'
//        relocate 'org.cliffc.high_scale_lib.', 'co.paralleluniverse.high_scale_lib.'

    manifest {
        attributes(
                "Implementation-Title"      :   project.name,
                "Implementation-Version"    :   version,
                "Implementation-Vendor"     :   vendor,
                "Automatic-Module-Name"     :   project.moduleName,
                "Premain-Class"             :   "co.paralleluniverse.fibers.instrument.JavaAgent",
                "Agent-Class"               :   "co.paralleluniverse.fibers.instrument.JavaAgent",
                "Can-Retransform-Classes"   :   "true",
                "Can-Redefine-Classes"      :   "true",
                "Built-By"                  :   System.getProperty("user.name"),
        )
    }
}

tasks.withType(JavaExec) {
    classpath += sourceSets.test.runtimeClasspath + sourceSets.test.output + sourceSets.jmh.runtimeClasspath + sourceSets.jmh.output
    jvmArgs += ['--add-opens', 'java.base/java.lang=co.paralleluniverse.quasar.core']
}

configure(javadoc) {
    classpath += configurations.provided

    exclude 'module-info.java' // Temporary, as module path is not added

    options {
        addStringOption('Xdoclint:none', '-quiet')
    }
}

defaultTasks 'build'

task artifacts {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
        configurations.findAll().each { config ->
            println "${config}:"
            // config.allArtifacts.each { file -> println "--- " + file }
            config.allArtifacts.getFiles().each { file -> println "" + file }
            println ' '
        }
    }
}

def scanAndInstrument(SourceSet sset, configs) {
    def cp = '' + sset.output.classesDirs.asPath + ':' + sset.output.resourcesDir + ':' + configs*.asPath.join(':')
    ant.taskdef(
            name: 'scanSuspendables', classname: 'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
            classpath: cp)
    ant.scanSuspendables(
            auto: false,
            supersFile: "$sset.output.resourcesDir/META-INF/suspendable-supers",
            append: true) {
        fileset(dir: sset.output.classesDirs.asPath)
    }

    ant.taskdef(name: 'instrumentation', classname: 'co.paralleluniverse.fibers.instrument.InstrumentationTask',
            classpath: cp)
    ant.instrumentation(verbose: 'true', check: 'true', debug: 'true') {
        fileset(dir: sset.output.classesDirs.asPath) {
            exclude(name: 'co/paralleluniverse/fibers/instrument/*.class')
        }
    }

    // Filter out the 'requires org.objectweb.asm' from quasar-core's module-info, as it will be shadowed into the jar
    ant.taskdef(name: 'filterModules', classname: 'co.paralleluniverse.fibers.instrument.ModuleFilterTask', classpath: cp)
    ant.filterModules(module: 'org.objectweb.asm') {
        fileset(dir: sset.output.classesDirs.asPath)
    }
}